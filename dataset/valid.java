public SelfAuthBsicInfoIO request(SelfAuthBsicInfoIO selfAuthBsicIO) throws BizApplicationException { //check required inputs if(selfAuthBsicIO == null){ throw new BizApplicationException("AAPCME0006", new String[] {"self authentication basic info"}); }else if(StringUtils.isEmpty(selfAuthBsicIO.getAuthCd())){ throw new BizApplicationException("AAPCME0006", new String[] {"@authCd"}); } // get self authorization code SelfAuthCdIO SelfAuthCdIO = _getSelfAuthCd().getInfo(selfAuthBsicIO.getAuthCd()); /* get target Actor */ Actor actor = null; if(AuthTrgtTpEnum.CUST.getValue().equals(selfAuthBsicIO.getAuthTrgtTpCd())) { Cust cust = _getCustMngr().getCust(selfAuthBsicIO.getAuthTrgtId()); if (cust == null) { throw new BizApplicationException("AAPCME0006", new String[] {"self authentication tartet ID"}); } actor = ((CustImpl) cust).getActor(); } else if(AuthTrgtTpEnum.STAFF.getValue().equals(selfAuthBsicIO.getAuthTrgtTpCd())) { Staff staff = _getStaffMngr().getStaff(selfAuthBsicIO.getAuthTrgtId()); if(staff == null) { throw new BizApplicationException("AAPCME0006", new String[] {"self authentication tartet ID"}); } if(!StringUtils.isEmpty(staff.getActorId())) { actor = _getActorMngr().getActor(staff.getActorId()); } } /* Create self authentication basic */ selfAuthBsicIO.setAuthStsCd(AuthStsEnum.DEMAND.getValue()); _getSelfAuthBsic().registerRequestInformation(selfAuthBsicIO, SelfAuthCdIO, actor); //check if the actor is locked for SMS authentication. _checkAdjustmentForRequest(selfAuthBsicIO, SelfAuthCdIO, actor); if(selfAuthBsicIO.getAuthRsltTpCd() == null || AuthRsltTpEnum.SUCCESS.getValue().equals(selfAuthBsicIO.getAuthRsltTpCd())) { /* if authentication way type is SMS OTP or email OTP, create one time password */ if(AuthTpEnum.SMS_AUTH.isEqual(SelfAuthCdIO.getAuthTpCd()) || AuthTpEnum.EMAIL_AUTH.isEqual(SelfAuthCdIO.getAuthTpCd())) { _createOneTimePassword(selfAuthBsicIO); /* demand notice */ NoticeBsicInfoIO noticeBsicIO = _requestNotice(selfAuthBsicIO, SelfAuthCdIO, actor); if(noticeBsicIO != null) { if(NoticeDemandRsltEnum.SUCCESS.getValue().equals(noticeBsicIO.getNoticeDemandRsltCd())) { selfAuthBsicIO.setNoticeId(noticeBsicIO.getNoticeId()); /* update notice id */ _getSelfAuthBsic().modifyNoticeIdentification(selfAuthBsicIO); } else if(NoticeDemandRsltEnum.ERR_SEND_FAIL.getValue().equals(noticeBsicIO.getNoticeDemandRsltCd())) { selfAuthBsicIO.setAuthRsltTpCd(AuthRsltTpEnum.FAIL_NOT_SEND_AUTH_INFO.getValue()); } else if(!NoticeDemandRsltEnum.SUCCESS.getValue().equals(noticeBsicIO.getNoticeDemandRsltCd())) { throw new BizApplicationException("AAPCME0002", new String[] { noticeBsicIO.getNoticeDemandRsltCd()}, new String[] { noticeBsicIO.getNoticeDemandRsltCd()}); } } } } selfAuthBsicIO.setAuthEfctvTrmCd(SelfAuthCdIO.getAuthEfctvTrmCd()); return selfAuthBsicIO; }
public CashTransitSvcInquiryCashTransitListOut clone(){ try{ CashTransitSvcInquiryCashTransitListOut object= (CashTransitSvcInquiryCashTransitListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcOut> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcOut>(tblNm.size()); for( bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcOut item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void validate(String arrSrvcCd,ArrRealCore arrReal, CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { if (cust.isBankruptcy()){ //Customer is in bankruptcy. This service ({0}) could not be finished properly //고객이 파산상태입니다. 본서비스({0}) 실행이 불가 합니다 throw new BizApplicationException("AAPARE0296", new Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)}); } }
public DivideArrangementSvcOutSub clone(){ try{ DivideArrangementSvcOutSub object= (DivideArrangementSvcOutSub)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AssetTxCore assetTx) throws BizApplicationException { _getAssetTxSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AssetTxImpl) assetTx); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 기존 보조명세 캐시 조회결과에 따라 insert/update 판단 ArArrSrvcBlckngSIO subInfoCache = _getSubInfoCache(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = new ArArrSrvcBlckngSIO(); subInfoCache.setArrId(arrRealImpl.getArrId()); subInfoCache.setArrSrvcBlckngSeqNbr(arrSrvcBlckngSeqNbr); subInfoCache.setSeqNbr(seqNbr); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveArArrSrvcBlckngSubH(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // insert _getArArrSrvcBlckngSDso().insert(subInfoCache); // save cache _saveSubInfoCache(subInfoCache, arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache)) { return; } // 변경전 이력 저장 _saveArArrSrvcBlckngSubH((ArrRealImpl) arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // update _getArArrSrvcBlckngSDso().update(subInfoCache); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AssetCore asset, String txDt, Integer txSeqNbr) throws BizApplicationException { _getAssetSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, (AssetImpl) asset); }
public AssetListInqrySvcGetBsicInfoOut clone(){ try{ AssetListInqrySvcGetBsicInfoOut object= (AssetListInqrySvcGetBsicInfoOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaCoaMgmtSvcGetCoaIO clone(){ try{ CaCoaMgmtSvcGetCoaIO object= (CaCoaMgmtSvcGetCoaIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); if ( this.xtnInfo== null ) object.xtnInfo = null; else{ java.util.List<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaXtnInfoIO> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaXtnInfoIO>(xtnInfo.size()); for( bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaXtnInfoIO item : xtnInfo ){ clonedList.add( (bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaXtnInfoIO)item.clone()); } object.xtnInfo = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustEtcReportSvcGetIn clone(){ try{ CustEtcReportSvcGetIn object= (CustEtcReportSvcGetIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) { for (TxTpDscdEnum item : TxTpDscdEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; }
public void setTxYn(String txYn){ this.txYn= txYn; }
public void validate(CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { validate(null, cust, vldtnRequiredValMap); }
public CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrIn clone(){ try{ CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrIn object= (CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrIn)super.clone(); if ( this.mltLngDtlList== null ) object.mltLngDtlList = null; else{ java.util.List<bankware.corebanking.configurationadmin.dictionary.service.dto.CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrDtlIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.dictionary.service.dto.CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrDtlIn>(mltLngDtlList.size()); for( bankware.corebanking.configurationadmin.dictionary.service.dto.CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrDtlIn item : mltLngDtlList ){ clonedList.add( (bankware.corebanking.configurationadmin.dictionary.service.dto.CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrDtlIn)item.clone()); } object.mltLngDtlList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public FvrtAcctMgmtSvcGetFvrtAcctListOut clone(){ try{ FvrtAcctMgmtSvcGetFvrtAcctListOut object= (FvrtAcctMgmtSvcGetFvrtAcctListOut)super.clone(); if ( this.fvrtAcctList== null ) object.fvrtAcctList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.FvrtAcctMgmtSvcGetFvrtAcctOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.FvrtAcctMgmtSvcGetFvrtAcctOut>(fvrtAcctList.size()); for( bankware.corebanking.customer.change.service.dto.FvrtAcctMgmtSvcGetFvrtAcctOut item : fvrtAcctList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.FvrtAcctMgmtSvcGetFvrtAcctOut)item.clone()); } object.fvrtAcctList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveMapSubInfo(Map<String, String> arrXtnInfoMap, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if (arrXtnInfoMap == null || arrXtnInfoMap.isEmpty()) { return; } // 1. 기존 보조명세 캐시 조회결과에 따라 insert/update 판단 ArArrSrvcBlckngSIO subInfoCache = _getSubInfoCache(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = new ArArrSrvcBlckngSIO(); subInfoCache.setArrId(arrRealImpl.getArrId()); subInfoCache.setArrSrvcBlckngSeqNbr(arrSrvcBlckngSeqNbr); subInfoCache.setSeqNbr(seqNbr); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveArArrSrvcBlckngSubH(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(arrXtnInfoMap, subInfoCache); // insert _getArArrSrvcBlckngSDso().insert(subInfoCache); // save cache _saveSubInfoCache(subInfoCache, arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(arrXtnInfoMap, subInfoCache)) { return; } // 변경전 이력 저장 _saveArArrSrvcBlckngSubH((ArrRealImpl) arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(arrXtnInfoMap, subInfoCache); // update _getArArrSrvcBlckngSDso().update(subInfoCache); } }
public List<ArArrAssetRXtnInfoDIO> selectListArrAssetRXtnInfo(ArArrAssetRXtnInfoDIO arArrAssetRXtnInfoDIO) throws BizApplicationException { return _getArArrAssetRXtnInfoDDso().selectList(arArrAssetRXtnInfoDIO); }
public LnLmtRdctnAmtSvcChngSvcIn clone(){ try{ LnLmtRdctnAmtSvcChngSvcIn object= (LnLmtRdctnAmtSvcChngSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(StaffCore staffCore) throws BizApplicationException { return _getStaffSubInfoBiz().getMapSubInfo((StaffImpl)staffCore); }
public TermDpstIntPymntSvcOut clone(){ try{ TermDpstIntPymntSvcOut object= (TermDpstIntPymntSvcOut)super.clone(); if ( this.list== null ) object.list = null; else{ java.util.List<bankware.corebanking.deposit.financialtransaction.service.dto.TermDpstIntPymntSvcOutSub> clonedList = new java.util.ArrayList<bankware.corebanking.deposit.financialtransaction.service.dto.TermDpstIntPymntSvcOutSub>(list.size()); for( bankware.corebanking.deposit.financialtransaction.service.dto.TermDpstIntPymntSvcOutSub item : list ){ clonedList.add( (bankware.corebanking.deposit.financialtransaction.service.dto.TermDpstIntPymntSvcOutSub)item.clone()); } object.list = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getNumbering(String instCd,String nbrgAtrbtNm,Map<String, Object> inpParmMap) throws BizApplicationException { return getNumbering(instCd, nbrgAtrbtNm, inpParmMap, false); }
public CustRprsnChngSvcXtnInfoListIO clone(){ try{ CustRprsnChngSvcXtnInfoListIO object= (CustRprsnChngSvcXtnInfoListIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArArrIssmdaXtnInfoDIO> selectList(ArArrIssmdaXtnInfoDIO arArrIssmdaXtnInfoDIO){ arArrIssmdaXtnInfoDIO.setInstCd(_getCmnContextCore().getInstCode()); return _getArArrIssmdaXtnInfoD().selectList(arArrIssmdaXtnInfoDIO); }
public boolean isValid(String type) { return ( "FO".equalsIgnoreCase(type) || "PR".equalsIgnoreCase(type) || "MF".equalsIgnoreCase(type) || "MP".equalsIgnoreCase(type) ) ; //added by Roh(change to simplify) }
public void saveMapSubInfo(Map<String, String> subInfoMap, AssetTxImpl assetTxImpl) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsAssetTxSIO subInfoCache = getSubInfoCache(assetTxImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsAssetTxSIO(); subInfoCache.setTxDt(assetTxImpl.getAssetTxBasicCache().getTxDt()); //PK setting subInfoCache.setTxSeqNbr(assetTxImpl.getAssetTxBasicCache().getTxSeqNbr());//PK setting // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-1. insert _getAsAssetTxSDso().insert(subInfoCache); // 3. 캐시 저장 assetTxImpl.setAssetTxSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-2. update _getAsAssetTxSDso().update(subInfoCache); } }
public void rebuild(ArrCndRebuildRequiredValue rebuildIn) throws BizApplicationException { logger.debug("## <AR> ArrCndOkTestIntRtSampleImpl => rebuildIn = {} :: ", rebuildIn.getFieldValues()); Arrangement arr = getArr(); if(!arr.isReal()){ return; } initializeArrCndVal(); // 상품의 적용대상 우대금리 조회 BigDecimal rate = _getAplyRuleIntRtValue(); // 계약조건으로 저장 this.createPdCndAsArrLevel(rate, rebuildIn.getBaseDt(), this.getArrangementCore(), rebuildIn.getTxDt(), rebuildIn.getTxSeqNbr()); }
public List<CaDataVldtnPrsntMIO> selectList(CaDataVldtnPrsntMIO caDataVldtnPrsntMIO){ return _getCaDataVldtnPrsntM().selectList(caDataVldtnPrsntMIO); }
public java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaTmpltMgmtSvcGetTmpltDtl> getChildren(){ return children; }
public void modifyArrMaturityDate(String arrMtrtyDt, String txDt, Integer txSeqNbr) throws BizApplicationException { _getArrBasicBiz().modifyArrMaturityDate(arrMtrtyDt, txDt, txSeqNbr, this); }
public CaInstInfo getInst() throws BizApplicationException { return this.getInst(_getCaCmnContext().getInstCode()); }
public CaBnkMgmtSvcSaveBankCodeSubIn clone(){ try{ CaBnkMgmtSvcSaveBankCodeSubIn object= (CaBnkMgmtSvcSaveBankCodeSubIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void terminate(ArrStsChngIn arrStsChngIn) throws BizApplicationException { _setArrStatus( ArrStsEnum.TERMINATED, arrStsChngIn ); _changeStatus( arrStsChngIn, null); }
public AprslRqstInfoOut clone(){ try{ AprslRqstInfoOut object= (AprslRqstInfoOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (CaRoleTmpltStsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("APATE0028", new Object[] {value, "@roleTmpltStsCd"}); } return true; }
public String getInstCd() { return instCd; }
public ArrFxSubInfo getArrFxSubInfo() throws BizApplicationException{ // 보조명세종류가 계약외환보조명세이 아니면 에러처리 if (getSubInfoKnd() != ArrSubInfoKndEnum.AR_ARR_FX_S) { throw new BizApplicationException("AAPARE0719"); } IValueObject subInfoCache = _getArrSubInfoBiz().getSubInfoCache(this); if (subInfoCache == null) { return null; } ArrFxSubInfo subInfoOut = new ArrFxSubInfo(); DtoUtils.setSubInfoIO(subInfoCache, subInfoOut); return subInfoOut; }
public List<KrStutDongCdOut> getListGuGun(String cityPrvncCd)throws BizApplicationException { List<KrStutDongCdOut> krStutDongCdOutList = new ArrayList<KrStutDongCdOut>(); List<CmKrStutDongCdMIO> cmKrStutDongCdMList = _getCmKrStutDongCdMDso().selectGuGunLIst(cityPrvncCd); if(cmKrStutDongCdMList.isEmpty()) { return krStutDongCdOutList; } for(CmKrStutDongCdMIO cmKrStutDongCdMIO : cmKrStutDongCdMList) { krStutDongCdOutList.add(_getKrStutDongCdOut(cmKrStutDongCdMIO)); } return krStutDongCdOutList; }
public void doServiceAction(String arrSrvcTpCd, ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "ArrangementConditionTest": case "TransferRights": _doTransferAction(); return; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public void modifyCndValue(String baseDt, String cndVal, Integer tierNbr, String txDt, int txSeqNbr) throws BizApplicationException { if (logger.isDebugEnabled()) { logger.debug("## ---------------------------------------------------------- ##" ); logger.debug("## ArrCndCoreImpl.modifyCndValue START!! "); logger.debug("## cndCd : {} / isHasArrVal : {} / tierNbr : {} / cndVal : {}", this.getCndCd(), this.hasArrLevelCndVal, tierNbr, cndVal ); logger.debug("## ---------------------------------------------------------- ##" ); } if (this.hasArrLevelCndVal()) { //Check Input value and change the effective start date _checkInputAndBuildChangeArrCnd(baseDt, txDt, txSeqNbr); //Terminate Old One _terminateCurrentCondition(baseDt, txDt, txSeqNbr, ArrCndStsChngRsnCoreEnum.CHANGE.getValue()); //Create New One _insertArrCndMaster((ArrRealCore) arr, txDt, txSeqNbr, true, ArrCndStsChngRsnCoreEnum.CHANGE.getValue()); } else { ArrCndCrtn arrCndCrtn = new ArrCndCrtn(); arrCndCrtn.setCndCd(this.getCndCd()); arrCndCrtn.setTxtCndVal(cndVal); boolean isValueSet = _checkInputAndBuildArrCndCreation(arrCndCrtn, baseDt, CCM01.MAX_DATE, arr, txDt, txSeqNbr); _insertArrCndMaster((ArrRealCore) arr, txDt, txSeqNbr, isValueSet, ArrCndStsChngRsnCoreEnum.REGISTRATION.getValue()); } if (this.isComplex() && tierNbr != null) { this.setPdCmpxCndTierNbr(tierNbr); } _modifyCndHashByCndCd((ArrangementCoreImpl) arr); if (logger.isDebugEnabled()) { logger.debug("## ---------------------------------------------------------- ##" ); logger.debug("## ArrCndCoreImpl.modifyCndValue END!! "); logger.debug("## ---------------------------------------------------------- ##" ); } }
public List<PdCndMOut> getCndBaseLight(String pdCd, List<String> cndCdList) throws BizApplicationException { if (CollectionCoreUtils.isEmpty(cndCdList)) { throw new BizApplicationException("AAPATE0067", new String[] { "cndCdList" }); } List<PdCndMOut> outList = new ArrayList<PdCndMOut>(); PdCndImpl pdCndImpl = new PdCndImpl(); PdPdCndUnitSearchIn inDao = new PdPdCndUnitSearchIn(); inDao.setInstCd(_getCmnContext().getInstCode()); inDao.setPdInfoDscd(PdInformationDscdCoreEnum.PD.getValue()); inDao.setPdCd(pdCd); inDao.setAplyDate(PdUtil.parseStringToDate(_getCmnContext().getTxDate() + _getCmnContext().getTxTime())); inDao.setCndStsCd(CPD01.PD_CND_STS_CD_ACTIVE); for (String cndCd : cndCdList) { inDao.setCndCd(cndCd); // 조건목록 조회 PdPdCndMIO cnd = pdCndImpl.getCndBase(inDao, false); if (cnd == null) { continue; } // Set output PdCndMOut out = new PdCndMOut(); out.setInstCd(cnd.getInstCd()); out.setCndGrpTmpltCd(cnd.getCndGrpTmpltCd()); out.setCndGrpCd(cnd.getCndGrpCd()); out.setCndCd(cnd.getCndCd()); out.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(cnd.getAplyStartDt())); out.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(cnd.getAplyEndDt())); out.setAplyStartTm(PdUtil.parseDateToHHMMSS(cnd.getAplyStartDt())); out.setAplyEndTm(PdUtil.parseDateToHHMMSS(cnd.getAplyEndDt())); out.setStsChngDt(cnd.getStsChngDt()); out.setCndTpCd(cnd.getCndTpCd()); out.setCndDtlsTpCd(cnd.getCndDtlsTpCd()); out.setIntRtAplyBaseDayCd(_getIntRtAplyBaseDayCd(cnd)); out.setPrfIntRtAplyTmCd(cnd.getPrfIntRtAplyTmCd()); out.setCmpxCndYn(cnd.getCmpxCndYn()); out.setCmpxStrctrId(cnd.getCmpxStrctrId()); out.setTierAplyCalcnWayCd(cnd.getTierAplyCalcnWayCd()); out.setCndStsCd(cnd.getCndStsCd()); out.setCndValDcsnLvlCd(cnd.getCndValDcsnLvlCd()); out.setCndValNullYn(cnd.getCndValNullYn()); out.setAmtTpDscd(cnd.getAmtTpDscd()); outList.add(out); } return outList; }
public CaExtrnlInstMgmtSvcGetExtrnlInstOut clone(){ try{ CaExtrnlInstMgmtSvcGetExtrnlInstOut object= (CaExtrnlInstMgmtSvcGetExtrnlInstOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if(logger.isDebugEnabled()){ logger.debug("ArrCndPasswordUseImpl start - arrSrvcTpCd : {}", arrSrvcTpCd); logger.debug("ArrCndPasswordUseImpl isChannelCenterCut : {}", _getCmnContext().isChannelCenterCut()); } switch (arrSrvcTpCd) { case "OpenDeposit": if(logger.isDebugEnabled()){ logger.debug("ArrCndPasswordUseImpl OpenDeposit"); } if (_getCmnContext().isChannelCenterCut()) { _doReDepositAction(arrSrvcTpCd,arrCndActionRequiredValue); } else { _doOpenAction(arrCndActionRequiredValue); } break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public AtrbtTpEnum getAttributeType() throws BizApplicationException { return stdDtoClassAtrbt.getStandardAttribute() == null ? null : AtrbtTpEnum.getEnum(stdDtoClassAtrbt.getStandardAttribute().getAtrbtTpCd()); }
public void saveSubInfo(IValueObject subInfo, String txDt, Integer txSeqNbr, AssetImpl assetImpl, Integer assetThingSeqNbr) throws BizApplicationException{ // 0. null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {_getNewSubInfo(assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr)).getClass().getSimpleName()}); } logger.debug("## <AS> saveSubInfo -> subInfo = {} :: ", subInfo.getFieldValues()); // 1. 자산물건보조명세의 종류 조회 AssetThingSubInfoKndEnum subInfoKnd = assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr); // 2. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 for(Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(entry.getValue() != null) { _getAtrbtChk().checkStandardAttribute(entry.getKey(), String.valueOf(entry.getValue())); } } // 3. 보조원장 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(assetImpl, assetThingSeqNbr); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("assetId", assetImpl.getAssetBasicCache().getAssetId()); // PK setting subInfoCache.set("assetThingSeqNbr", assetThingSeqNbr); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(assetImpl, assetThingSeqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 3-1. insert _insertSubInfo(subInfoKnd, subInfoCache); // 4. 캐시 저장 _saveSubInfoCache(subInfoKnd, subInfoCache, assetImpl, assetThingSeqNbr); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfo, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(assetImpl, assetThingSeqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 3-2. update _updateSubInfo(subInfoKnd, subInfoCache); } }
public String getXtnInfo(String xtnAtrbtNm, boolean isEavOnly, ArrRealCoreImpl arrRealImpl) throws BizApplicationException { // 1. Site Base에서 호출된 경우 확장정보명세만 조회 if (isEavOnly) { return _getArrXtnInfo(arrRealImpl, xtnAtrbtNm); } // 2. 속성명 기준으로 확장방법 판단 // 2-1. 확장정보명세 if (_getTblXtnAtrbtCore().isExtendWayEav(XtnTableEnum.AR_ARR_M.getValue(), xtnAtrbtNm)) { return _getArrXtnInfo(arrRealImpl, xtnAtrbtNm); } // 2-2. 보조원장 return _getArrXtnInfoCustom().getSubInfo(xtnAtrbtNm, arrRealImpl); }
public void doServiceAction(ArrActionRequiredValue arrActionRequiredValue) throws BizApplicationException { // 고객레벨한도관리여부가 "Y"인 경우 조건행동(한도조건) 및 한도잔액관리를 위해 회원계약을 모계약으로 임시지정한다. if(_isTargetArrForSettingMthrArr(arrActionRequiredValue)) { this.setMthrArrId(_getArrCustCoreMngr().getMembershipArrCore(this.getMainArrCustId()).getArrId()); } super.doServiceAction(arrActionRequiredValue); }
public List<CndTmpltOut> getListCndTmpltInfo(CndTmpltIn in) throws BizApplicationException { String mTntInstId = null; if (StringCoreUtils.isEmpty(in.getInstCd())) { mTntInstId = getMotherInstId(_getCmnContext().getInstCode()); } else { mTntInstId = getMotherInstId(in.getInstCd()); } CndTemplateListIn templateIn = new CndTemplateListIn(); templateIn.setInstitutionId(mTntInstId); templateIn.setCndCd(in.getCndCd()); templateIn.setCndTypeCd(in.getCndTpCd()); templateIn.setCndDetailTypeCd(in.getCndDtlsTpCd()); templateIn.setCndName(in.getCndNm()); List<CndTemplateOut> templateOut = _getTemplate().getListCndTemplate(templateIn); if (CollectionUtils.isEmpty(templateOut)) return Collections.emptyList(); List<CndTmpltOut> out = new ArrayList<>(); for (CndTemplateOut template : templateOut) { CndTmpltOut temp = new CndTmpltOut(); temp.setCndCd(template.getCndCd()); temp.setCndNm(template.getCndName()); temp.setActvYn(template.isActive() ? CPD01.YES : CPD01.NO); temp.setCndTpCd(template.getCndTypeCd()); temp.setCndDtlsTpCd(template.getCndDetailTypeCd()); temp.setCndCntnt(template.getCndContent()); temp.setListRefTpCd(template.getListReferenceTypeCd()); temp.setRefTrgtNm(template.getReferenceTargetName()); temp.setAmtTpDscd(template.getAmtTypeDscd()); temp.setIntRtCmpsElmntYn(template.isInterestRateComposingElement() ? CPD01.YES : CPD01.NO); out.add(temp); } return out; }
public void saveMapSubInfo(Map<String, String> deptXtnInfoHash, DeptCore deptCore) throws BizApplicationException { _getDeptSubInfoBiz().saveMapSubInfo(deptXtnInfoHash, (DeptImpl) deptCore); }
public CustRprsnInqrySvcGetLoinIdNbrOut clone(){ try{ CustRprsnInqrySvcGetLoinIdNbrOut object= (CustRprsnInqrySvcGetLoinIdNbrOut)super.clone(); if ( this.loinIdNbrList== null ) object.loinIdNbrList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinIdNbrListOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinIdNbrListOut>(loinIdNbrList.size()); for( bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinIdNbrListOut item : loinIdNbrList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinIdNbrListOut)item.clone()); } object.loinIdNbrList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) { for (InstallmentAgreementPenaltyInterestApplyWayDscdCoreEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
private BfCndTestSvcOut getCndGrpTmpltCd(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); String output = bfCnd.getCndGrpTmpltCd(); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public AplctnInfoRgstSvcGetIn clone(){ try{ AplctnInfoRgstSvcGetIn object= (AplctnInfoRgstSvcGetIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getInstParm(String parmAtrbtNm ) throws BizApplicationException { String instCd = _getCmnContextCore().getInstCode(); String instParm = getInstitutionParameterValue(instCd, parmAtrbtNm); // 2020.11.02 // 기관파라미터값 조회 시 해당 기관의 값만을 조회하도록 수정 // 기존에는 해당 기관에 값이 정의되지 않은 경우 STDA의 값을 참조했음 return instParm; }
public boolean isChannelCenterCut() throws BizApplicationException { return ChannelEnum.CENTER_CUT.getValue().equals(this.getChannelDscd()) ? true : false; }
public String getXtnInfo(ArrTxCoreImpl arrTx, String xtnAtrbtNm, boolean isEavOnly) throws BizApplicationException { // 1. Site Base에서 호출된 경우 확장정보명세만 조회 if (isEavOnly) { return _getXtnInfo(arrTx, xtnAtrbtNm); } // 2. 속성명 기준으로 확장방법 판단 // 2-1. 확장정보명세 if (!_getTblXtnAtrbt().isExtendWayEav(_getArrTxClsfctnCustom().getArrTxKndTblNm(arrTx.getArrCore()),xtnAtrbtNm)) { return _getXtnInfo(arrTx, xtnAtrbtNm); } // 2-2. 보조원장 return _getArrTxXtnInfoCustom().getSubInfo(xtnAtrbtNm, arrTx); }
public List<BfPdRelOut> getRelBtwnBfAndPd(String pdRelTpDscd) { BfPdRelIn in = new BfPdRelIn(); in.setPdBtwnRelCd(pdRelTpDscd); in.setRelPdInfoDscd(PdInformationDscdCoreEnum.PD.getValue()); in.setAplyDt(baseDaring); in.setAplyTm(baseTimeString); return getRelBtwnBfAndPd(in); }
public Map<String, String> getMapSubInfo(ActorImpl actorImpl) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 IValueObject subInfo = getSubInfoCache(actorImpl); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조명세 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public void validate() throws BizApplicationException { switch (isValidCndValue(getSuperListCd())) { case NoError: return; default: throw new BizApplicationException("AAPARE0158" , new Object[]{ getCndCd(), getPdCnd().getCndNm(), getArrangementCore().getPd().getPdNm(), getListCdList(), getSuperListCd()}); } }
public AmAplctnCltrlRgstSvcRgstList clone(){ try{ AmAplctnCltrlRgstSvcRgstList object= (AmAplctnCltrlRgstSvcRgstList)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int delete(CaArArrIssmdaTmpltMIO arArrIssmdaTmpltMIO) { int cnt = _getArArrIssmdaTmpltM().delete(arArrIssmdaTmpltMIO.getInstCd(), arArrIssmdaTmpltMIO.getArrIssmdaTmpltId()); String cacheKey = arArrIssmdaTmpltMIO.getInstCd() + arArrIssmdaTmpltMIO.getArrIssmdaTmpltId(); _getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_ISSUED_MEDIA_TEMPLATE_CACHE, cacheKey); String cacheKey2 = arArrIssmdaTmpltMIO.getInstCd(); _getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_ISSUED_MEDIA_TEMPLATE_CACHE, cacheKey2); String cacheKey3 = arArrIssmdaTmpltMIO.getInstCd().concat(arArrIssmdaTmpltMIO.getArrIssmdaTpCd()); _getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_ISSUED_MEDIA_TEMPLATE_LIST_CACHE, cacheKey3); return cnt; }
public String getNumbering(String instCd, String nbrgAtrbtNm, Map<String, Object> inpParmMap, Boolean isReUseSameTxNbrg) throws BizApplicationException { // 기관코드와 채번속성명이 있는지 검증 한다. _checkNumberingInput(instCd, nbrgAtrbtNm); // Query numbering rule NumberingGetIn inParm = new NumberingGetIn(); inParm.setInstCd(instCd); inParm.setNbrgAtrbtNm(nbrgAtrbtNm); // 채번규칙 조회 NumberingGetListOut numbering02Out = this._getNumberingRule(inParm); if(logger.isDebugEnabled()) { logger.debug("numbering02Out ::: {}", numbering02Out.getFieldValues()); } CmNbrgRuleMIO cmNbrgRuleMIO = _setCommonNumberingRuleMasterParameter(numbering02Out); List<CmNbrgRuleCmpsDIO> listCmNbrgRuleCmpsDIO = new ArrayList<CmNbrgRuleCmpsDIO>(); for (NumberingGetOut numbering02OutSub1 : numbering02Out.getTblNm()) { listCmNbrgRuleCmpsDIO.add(_setNumberingRuleCompositionDetailParameter(numbering02OutSub1)); } // Assemble numbering layer value String jsonCntnt = ""; Map<String, Object> tierValMap = new LinkedHashMap<String, Object>(); for (CmNbrgRuleCmpsDIO cmNbrgRuleCmpsDIO : listCmNbrgRuleCmpsDIO) { // 채번계층여부가 Y 이면 채번계층값을 가져 온다. if (CCM01.YES.equals(cmNbrgRuleCmpsDIO.getNbrgTierYn())) { Entry<String, String> entry = _getNbrgTierVal(instCd, cmNbrgRuleMIO, cmNbrgRuleCmpsDIO, jsonCntnt, inpParmMap, isReUseSameTxNbrg, ""); tierValMap.put(entry.getKey().toString(), entry.getValue().toString()); } } if (tierValMap.isEmpty()) { // Fail to query Assemble numbering layer value throw new BizApplicationException("AAPCME0084", new Object[] {"@nbrgTierYn", "@nbrgAtrbtNm", nbrgAtrbtNm}); } jsonCntnt = _getJsonString(tierValMap); // Numbering and assemble number String nbrgVal = ""; for (CmNbrgRuleCmpsDIO cmNbrgRuleCmpsDIO : listCmNbrgRuleCmpsDIO) { if (cmNbrgRuleCmpsDIO.getCmpsStartPstnCnt() > 0 && cmNbrgRuleCmpsDIO.getCmpsFgrsCnt() > 0) { nbrgVal = nbrgVal + _getNumberingCompositionValue(instCd, cmNbrgRuleMIO, cmNbrgRuleCmpsDIO, jsonCntnt, inpParmMap, isReUseSameTxNbrg, nbrgVal); } } String orgNbrgVal = nbrgVal; if(!StringUtils.isEmpty(cmNbrgRuleMIO.getEncrptnDscd())){ try { if(EncryptDstnctnEnum.ONE_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){ nbrgVal = CryptUtils.encryptSHA1(orgNbrgVal); } else if(EncryptDstnctnEnum.TWO_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){ nbrgVal = CryptUtils.encryptAES(orgNbrgVal); } } catch (Exception e) { if (logger.isDebugEnabled()) { logger.debug("Exception : {}", e); } //logger.debug("#### NbrgImpl.getNumbering modify source:{0} , Error:{1}", new Object[]{orgNbrgVal,e}); throw new BizApplicationException("AAPCME0000", new String[] {"getNumbering", "Encrypt getNumber" }); } } return nbrgVal; }
public Cust getCust(String custId) throws BizApplicationException { Cust cust = (CustImpl) super.getCustCore(custId); return cust; }
static boolean isValid(String value){ for (InterestTransactionTypeCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public CaAcJrRulePXtnAtrDIO select(CaAcJrRulePXtnAtrDIO acJrRulePXtnAtrDIO) throws BizApplicationException { //return acJrRulePXtnAtrD.select(acJrRulePXtnAtrDIO); switch( DbmsVendorNmEnum.getByValue(_getSysNonstopCoreUtil().getDbmsVendorName()) ) { case ORACLE: return _getAcJrRulePXtnAtrD().selectOracle(acJrRulePXtnAtrDIO); case MYSQL: return _getAcJrRulePXtnAtrD().selectMysql(acJrRulePXtnAtrDIO); default: throw new BizApplicationException("AAPCME0202", null); } }
public CaStyleSvcScrnTextIO clone(){ try{ CaStyleSvcScrnTextIO object= (CaStyleSvcScrnTextIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(AssetCore asset) throws BizApplicationException { return _getAssetSubInfoBiz().getMapSubInfo((AssetImpl)asset); }
static boolean isValid(String value){ for (RcptStsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public ArrRelRprsnInfoOut getArrRprsnRelation(String arrRprsnRelCd, String rprsnId, String baseDt, ArrRealCoreImpl arrReal) throws BizApplicationException { // 계약 관련인관계 주제영역 미사용 시 skip if (!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.RELATED_PERSON_RELATION) || ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd()) ) { return null; } if( StringCoreUtils.isEmpty(arrRprsnRelCd)) { throw new BizApplicationException("AAPCME0006", new Object[]{"@arrRprsnRelCd"}); } if( StringCoreUtils.isEmpty(rprsnId)) { _getArrRelRuleImpl().validateArrRelationPluralPossibleYn(ArrRelKndCoreEnum.ASSET.getValue(), arrRprsnRelCd, arrReal); rprsnId = null; } String inqBaseDt = baseDt; if( StringCoreUtils.isEmpty(baseDt)) { inqBaseDt = ArrCmnCoreUtil.getRckngDt( _getCmnContextCore() ); } ArArrRprsnRIO arArrRprsnRIO = _getArArrRprsnRDso().selectEffective(arrReal.getInstCd(), arrReal.getArrId(), rprsnId, arrRprsnRelCd, inqBaseDt); return _buildArrRelInfoOut( arArrRprsnRIO ); }
public String getNumbering(String instCd, String nbrgAtrbtNm, Map<String, Object> inpParmMap, Boolean isReUseSameTxNbrg) throws BizApplicationException { // 기관코드와 채번속성명이 있는지 검증 한다. _checkNumberingInput(instCd, nbrgAtrbtNm); // Query numbering rule NumberingGetIn inParm = new NumberingGetIn(); inParm.setInstCd(instCd); inParm.setNbrgAtrbtNm(nbrgAtrbtNm); // 채번규칙 조회 NumberingGetListOut numbering02Out = this._getNumberingRule(inParm); if(logger.isDebugEnabled()) { logger.debug("numbering02Out ::: {}", numbering02Out.getFieldValues()); } CmNbrgRuleMIO cmNbrgRuleMIO = _setCommonNumberingRuleMasterParameter(numbering02Out); List<CmNbrgRuleCmpsDIO> listCmNbrgRuleCmpsDIO = new ArrayList<CmNbrgRuleCmpsDIO>(); for (NumberingGetOut numbering02OutSub1 : numbering02Out.getTblNm()) { listCmNbrgRuleCmpsDIO.add(_setNumberingRuleCompositionDetailParameter(numbering02OutSub1)); } // Assemble numbering layer value String jsonCntnt = ""; Map<String, Object> tierValMap = new LinkedHashMap<String, Object>(); for (CmNbrgRuleCmpsDIO cmNbrgRuleCmpsDIO : listCmNbrgRuleCmpsDIO) { // 채번계층여부가 Y 이면 채번계층값을 가져 온다. if (CCM01.YES.equals(cmNbrgRuleCmpsDIO.getNbrgTierYn())) { Entry<String, String> entry = _getNbrgTierVal(instCd, cmNbrgRuleMIO, cmNbrgRuleCmpsDIO, jsonCntnt, inpParmMap, isReUseSameTxNbrg, ""); tierValMap.put(entry.getKey().toString(), entry.getValue().toString()); } } if (tierValMap.isEmpty()) { // Fail to query Assemble numbering layer value throw new BizApplicationException("AAPCME0084", new Object[] {"@nbrgTierYn", "@nbrgAtrbtNm", nbrgAtrbtNm}); } jsonCntnt = _getJsonString(tierValMap); // Numbering and assemble number String nbrgVal = ""; for (CmNbrgRuleCmpsDIO cmNbrgRuleCmpsDIO : listCmNbrgRuleCmpsDIO) { if (cmNbrgRuleCmpsDIO.getCmpsStartPstnCnt() > 0 && cmNbrgRuleCmpsDIO.getCmpsFgrsCnt() > 0) { nbrgVal = nbrgVal + _getNumberingCompositionValue(instCd, cmNbrgRuleMIO, cmNbrgRuleCmpsDIO, jsonCntnt, inpParmMap, isReUseSameTxNbrg, nbrgVal); } } String orgNbrgVal = nbrgVal; if(!StringUtils.isEmpty(cmNbrgRuleMIO.getEncrptnDscd())){ try { if(EncryptDstnctnEnum.ONE_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){ nbrgVal = CryptUtils.encryptSHA1(orgNbrgVal); } else if(EncryptDstnctnEnum.TWO_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){ nbrgVal = CryptUtils.encryptAES(orgNbrgVal); } } catch (Exception e) { if (logger.isDebugEnabled()) { logger.debug("Exception : {}", e); } //logger.debug("#### NbrgImpl.getNumbering modify source:{0} , Error:{1}", new Object[]{orgNbrgVal,e}); throw new BizApplicationException("AAPCME0000", new String[] {"getNumbering", "Encrypt getNumber" }); } } return nbrgVal; }
public List<ArrIssmdaTmpltIO> getListArrIssmdaTmplt(String instCd, String arrIssmdaTpCd) throws BizApplicationException { List<ArrIssmdaTmpltIO> arrIssmdaTempltList = new ArrayList<ArrIssmdaTmpltIO>(); List<ArArrIssmdaTmpltMIO> arrIssmdaTmpltMIOList = new ArrayList<ArArrIssmdaTmpltMIO>(); if (StringCoreUtils.isEmpty(instCd)) { throw new BizApplicationException("AAPCME0006", new Object[]{"@instCd"}); } // 2020.11.12 // 계약발급매체템플릿은 개별기관의 정보만을 조회 arrIssmdaTmpltMIOList = _getArArrIssmdaTmpltMDso().selectListByTpCd(instCd, StringCoreUtils.isEmpty(arrIssmdaTpCd) ? null : arrIssmdaTpCd); for (ArArrIssmdaTmpltMIO arArrIssmdaTmpltMIO : arrIssmdaTmpltMIOList) { ArrIssmdaTmpltIO arrIssmdaTmplt = _setArrIssmdaTmpltIO(arArrIssmdaTmpltMIO); List<ArrIssmdaPrflAtrbt> prflAtrbtList = _getArrIssmdaPrflCore().getListArrIssmdaProfile(instCd, arArrIssmdaTmpltMIO.getArrIssmdaTmpltId()); arrIssmdaTmplt.setPrflAtrbtList(prflAtrbtList); arrIssmdaTempltList.add(arrIssmdaTmplt); } return arrIssmdaTempltList; }
public DpstMscllnsRevenueInqSvcOut clone(){ try{ DpstMscllnsRevenueInqSvcOut object= (DpstMscllnsRevenueInqSvcOut)super.clone(); if ( this.arrList== null ) object.arrList = null; else{ java.util.List<bankware.corebanking.deposit.conditionchange.service.dto.DpstMscllnsRevenueInqSvcOutSub> clonedList = new java.util.ArrayList<bankware.corebanking.deposit.conditionchange.service.dto.DpstMscllnsRevenueInqSvcOutSub>(arrList.size()); for( bankware.corebanking.deposit.conditionchange.service.dto.DpstMscllnsRevenueInqSvcOutSub item : arrList ){ clonedList.add( (bankware.corebanking.deposit.conditionchange.service.dto.DpstMscllnsRevenueInqSvcOutSub)item.clone()); } object.arrList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaSelfAuthCdSvcRgstIn clone(){ try{ CaSelfAuthCdSvcRgstIn object= (CaSelfAuthCdSvcRgstIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustRgstSvcLoinInoListIn clone(){ try{ CustRgstSvcLoinInoListIn object= (CustRgstSvcLoinInoListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String previewDocContent(CaDocPreviewIO docPreviewIO, CaDocMakingTpEnum docMakingTpEnum) throws BizApplicationException { Object docObj = _getDocValidatorUtil().checkDocSchema(docPreviewIO.getDocCntnt(), CaDocVerifyTpEnum.PREVIEW_DOC, docMakingTpEnum); if(CaDocMakingTpEnum.DOCBOOK.equals(docMakingTpEnum)) { String docIssueCntnt = _getDocIssueUtil().previewIssueDoc(docPreviewIO.getLngCd(), (Document) docObj); CaPrntWayTpEnum prntWayTp = CaPrntWayTpEnum.HTML; /** * get stylesheet information */ String stylesheetInfo = null; if(!StringUtils.isEmpty(docPreviewIO.getDocStylesheetCntnt())) { stylesheetInfo = docPreviewIO.getDocStylesheetCntnt(); } else if(!StringUtils.isEmpty(docPreviewIO.getDocStylesheetUrl())) { stylesheetInfo = docPreviewIO.getDocStylesheetUrl(); } CaDoc stylehseetDoc = null; // get style sheet object if(isDocId(stylesheetInfo)) { stylehseetDoc = getCaDoc(stylesheetInfo); } stylesheetInfo = _getStylesheetInformation(stylesheetInfo, stylehseetDoc, prntWayTp, _getDocValidatorUtil()); /** * Transfer xml -> HTML */ Object transCntnt = _getDocTransformUtil().transfer(docIssueCntnt, stylesheetInfo, prntWayTp); if(transCntnt != null) { String previewTransCntnt = (String) transCntnt; return previewTransCntnt.replace("<title />", "<title></title>").replace("<title/>", "<title></title>"); } return ""; } else { return String.valueOf(docObj); } }
public CaDstbCtvdRsltErrSrchOut clone(){ try{ CaDstbCtvdRsltErrSrchOut object= (CaDstbCtvdRsltErrSrchOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getCndVal() throws BizApplicationException { return getFeeVal()!= null?ArrCmnCoreUtil.setScale4(getFeeVal()):null; }
public CustRprsnInqrySvcGetAddrOut clone(){ try{ CustRprsnInqrySvcGetAddrOut object= (CustRprsnInqrySvcGetAddrOut)super.clone(); if ( this.ctcptXtnInfoList== null ) object.ctcptXtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut>(ctcptXtnInfoList.size()); for( bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut item : ctcptXtnInfoList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut)item.clone()); } object.ctcptXtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(ArrRealCore arrReal) throws BizApplicationException { return _getArrSubInfoBiz().getMapSubInfo((ArrRealImpl) arrReal); }
public static boolean isValid(String value) { for (PreferenceInterestRateApplyTimeEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public CustRprsnInqrySvcGetTelNbrOut clone(){ try{ CustRprsnInqrySvcGetTelNbrOut object= (CustRprsnInqrySvcGetTelNbrOut)super.clone(); if ( this.ctcptXtnInfoList== null ) object.ctcptXtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut>(ctcptXtnInfoList.size()); for( bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut item : ctcptXtnInfoList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut)item.clone()); } object.ctcptXtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public AsAprslMIO select(String instCd, String aprslId){ return _getAsAprslM().select(instCd, aprslId); }
public void saveSubInfo(Map<String, String> subInfoMap, ArrTxImpl arrTx) { // 1. 입력으로 받은 Map이 비여 있거나 null일 때 , null 체크하는 이유는 CTI, EAV분리하는 메소드에서 없으면 null return하고 있음. if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 속성값 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 거래관련 보조명세 조회(캐시로부터) IValueObject oldCache = getSubInfoCache(arrTx); // 4. DB 반영 if(oldCache == null) { // 4.1.1 DBIO VO 인스턴스 생성 oldCache = _newSubInfoDBIO(arrTx); // 4.1.2 primary key 조립 _setKey(oldCache,arrTx); // 4.1.3 보조정보Map-> DBIO VO값 채우기 DtoUtils.setSubInfoIO(subInfoMap, oldCache); // 4.1.4 캐싱된 보조명세 정보가 없으면 최초 저장, 즉 insert _insertSubInfo(arrTx, oldCache); // 4.1.5 arrTx.setArrTxSubInfoCache(oldCache); }else { // 4.2.1. 캐싱된 보조명세 정보가 있으면 변경 저장, 즉 update, update전 기존정보랑 동일 시 리턴 if (!DtoUtils.isValChanged(subInfoMap, oldCache)) { return; } // 4.2.4 update - 새로변경되어야 할 속성을 DBIO VO 반영 DtoUtils.setSubInfoIO(subInfoMap, oldCache); // 4.2.5 update - update 수행 _updateSubInfo(arrTx, oldCache); } // // 5. 캐시 처리 (DBIO VO->Interface VO) & 캐싱 // _saveSubInfoCache(subInfoDBIO,arrTx); }
static boolean isValid(String value){ for (CupldBizDscdCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public String getInstCd() { return bf.getInstCd(); }
public CaBalMgmtPMngrSvcGetBalMgmtPListOut clone(){ try{ CaBalMgmtPMngrSvcGetBalMgmtPListOut object= (CaBalMgmtPMngrSvcGetBalMgmtPListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.configurationadmin.settlement.service.dto.CaBalMgmtPMngrSvcGetBalMgmtPOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.settlement.service.dto.CaBalMgmtPMngrSvcGetBalMgmtPOut>(tblNm.size()); for( bankware.corebanking.configurationadmin.settlement.service.dto.CaBalMgmtPMngrSvcGetBalMgmtPOut item : tblNm ){ clonedList.add( (bankware.corebanking.configurationadmin.settlement.service.dto.CaBalMgmtPMngrSvcGetBalMgmtPOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveMapSubInfo(Map<String, String> subInfoMap, String txDt, Integer txSeqNbr, ScrtyIntImpl scrtyIntImpl) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsScrtyIntSIO subInfoCache = getSubInfoCache(scrtyIntImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsScrtyIntSIO(); subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId()); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-1. insert _getAsScrtyIntSDso().insert(subInfoCache); // 3. 캐시 저장 scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-2. update _getAsScrtyIntSDso().update(subInfoCache); } }
public BigDecimal eval(String inFormula, List<BigDecimal> operands) throws BizApplicationException { if (StringCoreUtils.isEmpty(inFormula)) { throw new BizApplicationException("AAPCME0006", new Object[]{"@formula"}); } inFormula = StringCoreUtils.trimAllWhiteSpace(inFormula); Node node = _buildNode (inFormula,operands); if (node == null) { return null; } return (node.doIt()); }
public AgrmntTrmntnSvcAcctIn clone(){ try{ AgrmntTrmntnSvcAcctIn object= (AgrmntTrmntnSvcAcctIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustAdtnlSrvcOpnSvcArrXtnOut clone(){ try{ CustAdtnlSrvcOpnSvcArrXtnOut object= (CustAdtnlSrvcOpnSvcArrXtnOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(CustRprsnCore custRprsnCore) throws BizApplicationException { return _getCustRprsnSubInfoBiz().getMapSubInfo((CustRprsnImpl) custRprsnCore); }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty( value)) { for (StaffXtnInfoEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@DeptXtnAtrbtNm"});//({0}) is invalid {1}. } return true; }
public void validate(CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { validate(null, cust, vldtnRequiredValMap); }
public void modifyArrStaffRelation(ArrStaffRelChngIn arrStaffRelChngIn) throws BizApplicationException { _checkStaffStats( arrStaffRelChngIn.getStaffId() ); super.modifyArrStaffRelation(arrStaffRelChngIn); }
public int delete(CaCmRoleSrvcRIO cmRoleSrvcRIO) { return _getCmRoleSrvcR().delete(cmRoleSrvcRIO.getInstCd(), cmRoleSrvcRIO.getRoleId(), cmRoleSrvcRIO.getSrvcCd()); }
public int delete(CaAcCrncyBillCtgryMIO acCrncyBillCtgryCdIO) { return _getAcCrncyBillCtgryCd().delete(acCrncyBillCtgryCdIO); }
public CustLoginSvcGetHstOut getCustLastLoginHistory(CustLoginSvcGetHstIn in) throws BizApplicationException{ /** * get customer object */ Cust cust = _getCustMngr().getCust(in.getCustId()); /** * get customer last login history */ CustLoinHstIO custLastLoinHstIO = new CustLoinHstIO(); if(StringUtils.isEmpty(in.getLoinIdNbr())){ custLastLoinHstIO = cust.getCustLastLoginHistory(); }else{ custLastLoinHstIO = cust.getCustLastLoginHistory(in.getLoinIdNbr()); } /** * assemble output */ CustLoginSvcGetHstOut out = new CustLoginSvcGetHstOut(); if(custLastLoinHstIO == null){ return out; } out.setInstCd(custLastLoinHstIO.getInstCd()); out.setCustId(custLastLoinHstIO.getCustId()); out.setLoinTpCd(custLastLoinHstIO.getLoinTpCd()); out.setLoinIdNbr(custLastLoinHstIO.getLoinIdNbr()); out.setLoinSeqNbr(custLastLoinHstIO.getLoinSeqNbr()); out.setHstSeqNbr(custLastLoinHstIO.getHstSeqNbr()); out.setLoinDt(custLastLoinHstIO.getLoinDt()); out.setLoinHms(custLastLoinHstIO.getLoinHms()); out.setLoinRsltYn(custLastLoinHstIO.getLoinRsltYn()); out.setLoinRsltCd(custLastLoinHstIO.getLoinRsltCd()); out.setFnlLoinChnlDscd(custLastLoinHstIO.getFnlLoinChnlDscd()); out.setLoinIp(custLastLoinHstIO.getLoinIp()); return out; } /** * <div class='en'> * @description * <pre> * This service inquires customer related person's latest login history information. * If login identification number was input, it gets the login ID's latest login history. * </pre> * @flow * <pre> * 1. get customer related person object {@link bankware.corebanking.actor.customer.interfaces.CustRprsnMngr#getCustRprsn(String)} * 2. get customer related person last login history * {@link bankware.corebanking.actor.customer.interfaces.CustRprsn#getCustRprsnLastLoginHistory()} * {@link bankware.corebanking.actor.customer.interfaces.CustRprsn#getCustRprsnLastLoginHistory(String)} * 3. assemble output * </pre> * @note {@link CustRprsnLoginSvcGetHstIn} : required fields - custRprsnId * </div> * <div class='ko'> * @description * <pre> * 이 서비스는 고객관련인의 최신 로그인이력정보를 조회한다. * 로그인 ID를 입력하면 해당 로그인ID의 최신 로그인이력정보를 조회한다. * </pre> * @flow * <pre> * 1. 고객관련인객체조회 {@link bankware.corebanking.actor.customer.interfaces.CustRprsnMngr#getCustRprsn(String)} * 2. 고객관련인 최신 로그인이력 조회 * {@link bankware.corebanking.actor.customer.interfaces.CustRprsn#getCustRprsnLastLoginHistory()} * {@link bankware.corebanking.actor.customer.interfaces.CustRprsn#getCustRprsnLastLoginHistory(String)} * 3. 출력값 조립 * </pre> * @note {@link CustRprsnLoginSvcGetHstIn} : 필수입력항목 - custRprsnId * </div> * @param custRprsnLoginSvcGetHstIn (required) : customer related person login history inquiry input * @return CustRprsnLoginSvcGetHstOut : customer related person login history inquiry output * @throws AAPCME0006 : required input is missing * @throws AAPATE0016 : customer related person basic information doesn't exist * @throws AAPATE0005 : actor basic information doesn't exist * @since 3.0.0 * @example * <pre> * - Input JSON {"custRprsnId":"00000017897R"} * - Output JSON "CustLoginSvcGetHstOut": { "instCd": null, "custRprsnId": null, "loinTpCd": "01", "loinIdNbr": "rltdPerson0783", "loinSeqNbr": 1, "hstSeqNbr": 2, "loinDt": "20171204", "loinHms": null, "loinRsltYn": "Y", "loinRsltCd": "01", "fnlLoinChnlDscd": "03", "loinIp": "172.25.0.1" }
static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (AssetTxStsCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@AssetTxStsCd"});//({0}) is invalid {1}. } return true; }
public BfCardInfoPopUpSvcIn clone(){ try{ BfCardInfoPopUpSvcIn object= (BfCardInfoPopUpSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<AtSelfAuthXtnInfoDIO> selectList( String selfAuthId) { return _getAtSelfAuthXtnInfoD().selectList(_getCmnContext().getInstCode(), selfAuthId); }
public List<CrIntCalSectionOut> getListInterestCalculationSection(CrIntCalSectionIn in) throws BizApplicationException { // 필수 입력 값 체크 _getCrCalculatorUtil().checkInputStringData("AAPCME0006", in.getTntInstId(), "instCd"); CrIntCalSctnMIO crIntCalSctnMIO = new CrIntCalSctnMIO(); crIntCalSctnMIO.setTntInstId(in.getTntInstId()); crIntCalSctnMIO.setIntCalSctnId(in.getIntCalSctnId()); crIntCalSctnMIO.setIntKndDscd(in.getIntKndDscd()); crIntCalSctnMIO.setIntCalStartDtDscd(in.getIntCalStartDtDscd()); crIntCalSctnMIO.setIntCalEndDtDscd(in.getIntCalEndDtDscd()); crIntCalSctnMIO.setIntTpDscd(in.getIntTpDscd()); crIntCalSctnMIO.setTgtAmtCalcnWayDscd(in.getTgtAmtCalcnWayDscd()); crIntCalSctnMIO.setBaseTrmCntCalcnWayDscd(in.getBaseTrmCntCalcnWayDscd()); crIntCalSctnMIO.setIntCalSctnCntnt(in.getIntCalSctnCntnt()); return _getCrIntCalSctnMDso().selectListSectionDynamic(crIntCalSctnMIO); }
public CaAsmItmMgmtSvcGetAsmItmTblListIn clone(){ try{ CaAsmItmMgmtSvcGetAsmItmTblListIn object= (CaAsmItmMgmtSvcGetAsmItmTblListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveLastPsbkBkgInfo( ArrLastPsbkBkgInfoIn lastBkgInfoIn, ArrIssmdaCore arrIssmda ) throws BizApplicationException { ArArrIssmdaRIO arArrIssmdaRIO = _getArrIssmdaR(_getCmnContext().getInstCode(), arrIssmda.getArrIssmdaInhrncId(), lastBkgInfoIn.getArrId()); ArrIssmdaTmpltInfo arrIssmdaTmpltInfo = arrIssmda.getTemplateInfo(); Integer psbkBaseSideCnt = null; Integer psbkBaseRowCnt = null; // BigDecimal psbkBaseLetterCnt = null; for( ArrIssmdaPrflAtrbt prflAtrbt : arrIssmdaTmpltInfo.getPrflAtrbtList() ){ if( ArrIssmdaPrflAtrbtEnum.PASSBOOK_BASE_SIDE_COUNT.getValue().equals(prflAtrbt.getArrIssmdaPrflAtrbtNm()) ){ psbkBaseSideCnt = Integer.parseInt( prflAtrbt.getArrIssmdaPrflCntnt() ); } else if( ArrIssmdaPrflAtrbtEnum.PASSBOOK_BASE_ROW_COUNT.getValue().equals(prflAtrbt.getArrIssmdaPrflAtrbtNm()) ){ psbkBaseRowCnt = Integer.parseInt( prflAtrbt.getArrIssmdaPrflCntnt() ); // } else if( ArrIssmdaPrflAtrbtEnum.PASSBOOK_BASE_LETTER_COUNT.getValue().equals(prflAtrbt.getArrIssmdaPrflAtrbtNm()) ){ // psbkBaseLetterCnt = new BigDecimal( prflAtrbt.getArrIssmdaPrflCntnt() ); } } if( psbkBaseSideCnt == null || psbkBaseSideCnt.compareTo( lastBkgInfoIn.getLastPsbkBkgSideCnt()) < 0 ){ // Passbook output exceeds the range as possible.Destination information: {0} output information: {1}, output range: {2} // 통장이 출력 가능한 범위를 초과하였습니다. // 대상정보 : {0} 출력정보 : {1}, 출력가능한 범위 : {2} throw new BizApplicationException("AAPARE0531", new String[]{"@lastPsbkBkgPgCnt", String.valueOf(lastBkgInfoIn.getLastPsbkBkgSideCnt()), String.valueOf(psbkBaseSideCnt)}); } if( psbkBaseRowCnt == null || psbkBaseRowCnt.compareTo( lastBkgInfoIn.getLastPsbkBkgRowCnt()) < 0 ){ // Passbook output exceeds the range as possible.Destination information: {0} output information: {1}, output range: {2} // 통장이 출력 가능한 범위를 초과하였습니다. // 대상정보 : {0} 출력정보 : {1}, 출력가능한 범위 : {2} throw new BizApplicationException("AAPARE0531", new String[]{"@lastPsbkBkgPgCnt", String.valueOf(lastBkgInfoIn.getLastPsbkBkgRowCnt()), String.valueOf(psbkBaseRowCnt)}); } ArArrLastPsbkBkgDIO lastBkgDIO = _makeArArrPsbkBkgDto(arArrIssmdaRIO, lastBkgInfoIn); _getArArrLastPsbkBkgDDso().update(lastBkgDIO); }
public void saveSubInfo(ActorImpl actorImpl, String dueDlgncDscd, Integer dueDlgncSeqNbr, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 보조명세 종류 조회 ActorDueDlgncSubInfoKndEnum subInfoKnd = actorImpl.getDueDlgncSubInfoKnd(); // 2. 보조명세 캐시 조회결과에 따라 insert/update 판단 // ** 확인의무 보조명세는 변경이력을 관리하지 않는다. IValueObject subInfoIO = getSubInfoCache(actorImpl, dueDlgncDscd, dueDlgncSeqNbr); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = _getNewSubInfoSqlIO(subInfoKnd); subInfoIO.set("actorId", actorImpl.getActorId()); subInfoIO.set("dueDlgncDscd", dueDlgncDscd); subInfoIO.set("dueDlgncSeqNbr", dueDlgncSeqNbr); // 입력된 속성명과 속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // insert _insertSubInfo(subInfoKnd, subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO)) { return; } // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // update _updateSubInfo(subInfoKnd, subInfoIO); } // 3. 캐시 저장 _saveSubInfoCache(subInfoKnd, subInfoIO, actorImpl, dueDlgncDscd, dueDlgncSeqNbr); }
public ActorAddrOut getAddrInfo(String cntctPntLctnTpCd, String cntctMthdTpCd) throws BizApplicationException { return getActor().getAddrInfo(cntctPntLctnTpCd, cntctMthdTpCd); }
public ArArrActvtyMIO select(String instCd, String arrId, Integer arrActvtySeqNbr) { return _getArArrActvtyM().select(instCd, arrId, arrActvtySeqNbr); }
public void doServiceAction(String arrSrvcTpCd, ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if(logger.isDebugEnabled()){ logger.debug("ArrCndInstallmentAmountImpl doServiceAction"); } if (!this.getArrangementCore().isReal()) return; switch (arrSrvcTpCd) { case "OpenDeposit": case "Deposit": _validateInstallmentAmount(arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public void saveXtnInfo(String arrGrpXtnAtrbt, String xtnAtrbtCntnt, String txDt, ArrGrpCoreImpl arrGrp) throws BizApplicationException { // 계약 그룹 주제영역 미사용 시 skip if (!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.GROUP)) { return; } this._saveGrpArrXtnInfoOne(arrGrpXtnAtrbt, xtnAtrbtCntnt, txDt, arrGrp); }
public DpstlmCltrCupldSvcOpenIn clone(){ try{ DpstlmCltrCupldSvcOpenIn object= (DpstlmCltrCupldSvcOpenIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void removeInsrncXtnInfo(String xtnAtrbtNm, String txDt, Integer txSeqNbr) throws BizApplicationException { _getInsrncXtnInfoBiz().saveInsrncXtnInfo(xtnAtrbtNm, null, txDt, txSeqNbr, this, false); }
private BfTestSvcOut getAdtnlInfo(BfTestSvcIn in) throws BizApplicationException { BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); Bf bf = _getBfMngr().getBf(bfIn); List<BfAdtlInfoOut> output = bf.getAdtnlInfo(in.getBfAdtlInfoIn().getAdtnlInfoCd()); BfTestSvcOut out = new BfTestSvcOut(); if(CollectionUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public boolean isArrMediaIssued(ArrIssmdaTpEnum arrIssmdaTp, ArrRealImpl arrReal) throws BizApplicationException { if (_getArArrIssmdaRXtnDso().selectAliveOne(_getCmnContext().getInstCode(), arrIssmdaTp.getValue(), arrReal.getArrId()) > 0){ return true; } else { return false; } }
public ArArrSrvcBlckngMIO select(ArArrSrvcBlckngMIO ArArrSrvcBlckngMIO) { String cacheKey = ArArrSrvcBlckngMIO.getArrSrvcBlckngCd(); Object arrSrvcCndListCacheObj = _getArDataCacheManager().getCacheData(DataCacheCoreConfig.ARR_SRVC_BLOCKING_TYPE_CACHE, cacheKey); ArArrSrvcBlckngMIO returnObj = new ArArrSrvcBlckngMIO(); if(arrSrvcCndListCacheObj == null){ returnObj = _getArArrSrvcBlckngM().select(ArArrSrvcBlckngMIO); if(returnObj == null){ _getArDataCacheManager().saveCache(DataCacheCoreConfig.ARR_SRVC_BLOCKING_TYPE_CACHE, cacheKey, CAR01.ARR_NOT_APPLICABLE); }else{ _getArDataCacheManager().saveCache(DataCacheCoreConfig.ARR_SRVC_BLOCKING_TYPE_CACHE, cacheKey, returnObj); } }else{ if(arrSrvcCndListCacheObj.equals(CAR01.ARR_NOT_APPLICABLE)){ return returnObj; } returnObj = (ArArrSrvcBlckngMIO)arrSrvcCndListCacheObj; } return returnObj; }
public void register(List<CaNoticeMsgDocRMgmtIO> docNoticeMsgRIOList) throws BizApplicationException { if(docNoticeMsgRIOList == null || docNoticeMsgRIOList.isEmpty()){ return; } for(CaNoticeMsgDocRMgmtIO docNoticeMsgRIOItem : docNoticeMsgRIOList){ //check required inputs if(StringUtils.isEmpty(docNoticeMsgRIOItem.getInstCd())){ throw new BizApplicationException("AAPCME0006", new String[] {"@instCd"}); }else if(StringUtils.isEmpty(docNoticeMsgRIOItem.getNoticeMsgCd())){ throw new BizApplicationException("AAPCME0006", new String[] {"@noticeMsgCd"}); } CaAtDocNoticeMsgRIO rgstrnDocNoticeMsgRMgmtIO = _getAtDocNoticeMsgRDso().select(docNoticeMsgRIOItem.getInstCd(), docNoticeMsgRIOItem.getNoticeMsgCd()); if(rgstrnDocNoticeMsgRMgmtIO == null){ if(!_isEmptyDocId(docNoticeMsgRIOItem.getDocId())){ CaAtDocNoticeMsgRIO atDocNoticeMsgRIO = new CaAtDocNoticeMsgRIO(); _getCaCmnContext().setHeaderColumn(atDocNoticeMsgRIO); atDocNoticeMsgRIO.setInstCd(docNoticeMsgRIOItem.getInstCd()); atDocNoticeMsgRIO.setNoticeMsgCd(docNoticeMsgRIOItem.getNoticeMsgCd()); atDocNoticeMsgRIO.setDocId(docNoticeMsgRIOItem.getDocId()); _getAtDocNoticeMsgRDso().insert(atDocNoticeMsgRIO); } }else{ //delete registered doc-notice message relation _getCaCmnContext().setHeaderColumn(rgstrnDocNoticeMsgRMgmtIO); rgstrnDocNoticeMsgRMgmtIO.setInstCd(docNoticeMsgRIOItem.getInstCd()); _getAtDocNoticeMsgRDso().delete(rgstrnDocNoticeMsgRMgmtIO); //insert new doc-notice message relation rgstrnDocNoticeMsgRMgmtIO.setDocId(StringUtils.isEmpty(docNoticeMsgRIOItem.getDocId()) ? CCM02.NO_OPINION : docNoticeMsgRIOItem.getDocId()); _getAtDocNoticeMsgRDso().insert(rgstrnDocNoticeMsgRMgmtIO); // clear cache _getCaDataCacheManager().clearInstanceCache(DataCacheCoreConfig.DOC_NOTICE_MSG_REL_CACHE, docNoticeMsgRIOItem.getInstCd().concat(docNoticeMsgRIOItem.getNoticeMsgCd())); } } }
public boolean checkCode(String cdNbr, String cd) throws BizApplicationException { return _checkCode(cdNbr, cd); }
public PdRqstIntCalcnInfoInqryIn clone(){ try{ PdRqstIntCalcnInfoInqryIn object= (PdRqstIntCalcnInfoInqryIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveMapSubInfo(Map<String, String> subInfoMap, String txDt, Integer txSeqNbr, InsrncImpl insrncImpl) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsInsrncSIO subInfoCache = getSubInfoCache(insrncImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsInsrncSIO(); subInfoCache.setInsrncId(insrncImpl.getInsrncBasicCache().getInsrncId()); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(insrncImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-1. insert _getAsInsrncSDso().insert(subInfoCache); // 3. 캐시 저장 insrncImpl.setInsrncSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(insrncImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-2. update _getAsInsrncSDso().update(subInfoCache); } }
public void register(List<ScrtyQstnrIO> scrtyQstnrList) throws BizApplicationException { if(scrtyQstnrList != null && !scrtyQstnrList.isEmpty()) { AtScrtyQstnrDIO atScrtyQstnrDIO = new AtScrtyQstnrDIO(); _getCmnContext().setHeaderColumn(atScrtyQstnrDIO); atScrtyQstnrDIO.setQstnrId(scrtyQstnrList.get(0).getQstnrId()); // Check Questionnaire id Integer checkResult = _getAtScrtyQstnrDDso().selectQstnrId(_getCmnContext().getInstCode(), scrtyQstnrList.get(0).getQstnrId()); if(checkResult.intValue() > 0) { throw new BizApplicationException("AAPCME0005", null); } int qstnSeqNbr = 0; for(ScrtyQstnrIO scrtyQstnrItem : scrtyQstnrList) { atScrtyQstnrDIO.setLngCd(scrtyQstnrItem.getLngCd()); atScrtyQstnrDIO.setQstnCntnt(scrtyQstnrItem.getQstnCntnt()); atScrtyQstnrDIO.setQstnrId(scrtyQstnrItem.getQstnrId()); atScrtyQstnrDIO.setQstnSeqNbr(qstnSeqNbr++); _getAtScrtyQstnrDDso().insert(atScrtyQstnrDIO); } } }
public String getListCndName(String tntInstId, String cndCd, String listCd) throws BizApplicationException { String listCndNm = ""; if (StringCoreUtils.isEmpty(tntInstId)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@tntInstId" }); } if (StringCoreUtils.isEmpty(cndCd)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@cndCd" }); } if (StringCoreUtils.isEmpty(listCd)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@listCd" }); } PdLstCtMOut out = getListConditionInfo(tntInstId, cndCd, listCd); if (out != null) { listCndNm = out.getListCdNm(); } // Return list condition name return listCndNm; }
public PdRqstIntCalcnSmltnOut clone(){ try{ PdRqstIntCalcnSmltnOut object= (PdRqstIntCalcnSmltnOut)super.clone(); if ( this.intFndtnList== null ) object.intFndtnList = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnFndtnListOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnFndtnListOut>(intFndtnList.size()); for( bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnFndtnListOut item : intFndtnList ){ clonedList.add( (bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnFndtnListOut)item.clone()); } object.intFndtnList = clonedList; } if ( this.calculationTypeList== null ) object.calculationTypeList = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnCalculationType> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnCalculationType>(calculationTypeList.size()); for( bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnCalculationType item : calculationTypeList ){ clonedList.add( (bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnCalculationType)item.clone()); } object.calculationTypeList = clonedList; } if ( this.determineCndList== null ) object.determineCndList = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnCndList> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnCndList>(determineCndList.size()); for( bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnCndList item : determineCndList ){ clonedList.add( (bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnCndList)item.clone()); } object.determineCndList = clonedList; } if ( this.determineRuleList== null ) object.determineRuleList = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnRuleList> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnRuleList>(determineRuleList.size()); for( bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnRuleList item : determineRuleList ){ clonedList.add( (bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnRuleList)item.clone()); } object.determineRuleList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(CustCore custCore, String xtnAtrbtNm) throws BizApplicationException { return _getCustSubInfoBiz().getSubInfo(xtnAtrbtNm, (CustImpl) custCore); }
private BfCndTestSvcOut getCndVal(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); CndVal output = bfCnd.getCndVal(_convertProvideCndSvcListToProvideCndList(in.getProvideCnd())); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (output == null) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public TxHstQrySvcHstListItemOut clone(){ try{ TxHstQrySvcHstListItemOut object= (TxHstQrySvcHstListItemOut)super.clone(); if ( this.entryList== null ) object.entryList = null; else{ java.util.List<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut> clonedList = new java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut>(entryList.size()); for( bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut item : entryList ){ clonedList.add( (bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut)item.clone()); } object.entryList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isChildPntUsable() { if (pdPdCndM == null) { return false; } // Return Output return CCM01.YES.equals(pdPdCndM.getChildPdUseYn()); }
public CustRelArrInqrySvcGetCustrelAcctListOut clone(){ try{ CustRelArrInqrySvcGetCustrelAcctListOut object= (CustRelArrInqrySvcGetCustrelAcctListOut)super.clone(); if ( this.mainArrList== null ) object.mainArrList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetMainArrOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetMainArrOut>(mainArrList.size()); for( bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetMainArrOut item : mainArrList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetMainArrOut)item.clone()); } object.mainArrList = clonedList; } if ( this.relArrList== null ) object.relArrList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetRelArrOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetRelArrOut>(relArrList.size()); for( bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetRelArrOut item : relArrList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetRelArrOut)item.clone()); } object.relArrList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveMapSubInfo(Map<String, String> subInfoMap, AtrlImpl atrlImpl) throws BizApplicationException { // null check if (subInfoMap == null || subInfoMap.isEmpty()) { return; } // 1. 액터역할에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 AtAtrlSIO subInfoIO = getSubInfoCache(atrlImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtAtrlSIO(); subInfoIO.setAtrlId(atrlImpl.getAtrlId()); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _getAtAtrlSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(atrlImpl, subInfoIO); // 입력된 Map을 기존 캐시 저장된 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _getAtAtrlSDso().update(subInfoIO); } // 2. 캐시 저장 atrlImpl.setSubInfoCache(subInfoIO); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCnd) throws BizApplicationException { if (!this.getArrangementCore().isReal()) return; // This account is a product that can not be interest settlement if (!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(CCM01.YES))) return; switch (ArrSrvcEnum.getEnum( arrSrvcTpCd ) ) { case INTRA_INSTITUTION_SCHEDULED_TRANSFER: _buildRealTimeTransferPlan( arrSrvcTpCd, arrCnd); return; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public DpArr360Cnd clone(){ try{ DpArr360Cnd object= (DpArr360Cnd)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaDocSrchSvcGetDocTreeOut clone(){ try{ CaDocSrchSvcGetDocTreeOut object= (CaDocSrchSvcGetDocTreeOut)super.clone(); if ( this.children== null ) object.children = null; else{ java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocTreeDtlOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocTreeDtlOut>(children.size()); for( bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocTreeDtlOut item : children ){ clonedList.add( (bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocTreeDtlOut)item.clone()); } object.children = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaDstbTgtMIO clone(){ try{ CaDstbTgtMIO object= (CaDstbTgtMIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CaCmRoleSrvcRIO> selectList(String instCd, String roleId, String srvcCd) { return _getCmRoleSrvcR().selectList(instCd, roleId, srvcCd); }
public CaRgstrnSvcIn clone(){ try{ CaRgstrnSvcIn object= (CaRgstrnSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getEnglishAttributeName() { return stdDtoClassAtrbt.getEnglishAttributeName(); }
public List<CaInstSrvcIO> getListInstService() throws BizApplicationException { return getListInstService(null,null); }
public ArrBsicQrySvcGetChildrenArrListOut clone(){ try{ ArrBsicQrySvcGetChildrenArrListOut object= (ArrBsicQrySvcGetChildrenArrListOut)super.clone(); if ( this.relArrList== null ) object.relArrList = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetChildrenArrItmOut> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetChildrenArrItmOut>(relArrList.size()); for( bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetChildrenArrItmOut item : relArrList ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetChildrenArrItmOut)item.clone()); } object.relArrList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ActorCtcptChngSvcTelNbrIn clone(){ try{ ActorCtcptChngSvcTelNbrIn object= (ActorCtcptChngSvcTelNbrIn)super.clone(); if ( this.ctcptXtnInfoList== null ) object.ctcptXtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.ActorCtcptChngSvcCtcptXtnIn> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.ActorCtcptChngSvcCtcptXtnIn>(ctcptXtnInfoList.size()); for( bankware.corebanking.customer.change.service.dto.ActorCtcptChngSvcCtcptXtnIn item : ctcptXtnInfoList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.ActorCtcptChngSvcCtcptXtnIn)item.clone()); } object.ctcptXtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveRelationXtnInfo(ArrRelInfoIn arrRelInfoIn, List<ArrRelCrtnXtnInfoIn> arrRelXtnList,String txDt,Integer txSeqNbr,ArrRealCoreImpl arrReal) throws BizApplicationException { if (ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())){ return; } _checkInput(arrRelInfoIn,txDt,txSeqNbr); // Check Transaction Exist // 거래생성여부 검증 _getArrCmnUtil().validateArrTxExist(arrReal, txDt, txSeqNbr); for (ArrRelCrtnXtnInfoIn arrRelCrtnXtnInfoIn : arrRelXtnList) { this.saveRelationXtnInfo(arrRelInfoIn, arrRelCrtnXtnInfoIn.getXtnAtrbtNm(), arrRelCrtnXtnInfoIn.getXtnAtrbtCntnt(), txDt, txSeqNbr, arrReal); } }
public List<PdAdtlInfoOut> getAdtnlInfo(PdAdtlInfoIn in) throws BizApplicationException { List<PdAdtlInfoOut> out = new ArrayList<>(); // 상품코드, 상품부가정보유형, 적일일자를 입력하여 해당 상품에 관련된 상품부가정보를 조회함 // Enter the product code, product additional information type code, // apply date and inquiry product additional information related to the // product PdAdditionalInfoListIn additionalIn = new PdAdditionalInfoListIn(); additionalIn.setInstitutionId(pdPdM.getInstCd()); additionalIn.setPdCd(pdPdM.getPdCd()); additionalIn.setAdditionalInfoCd(in.getAdtnlInfoCd()); additionalIn.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(), _getAplyTmString(in.getAplyTm()))); List<PdAdditionalInfoOut> additionalOut = _getPdCore().getListAdditionalInfo(additionalIn); for(PdAdditionalInfoOut item : CollectionUtils.emptyIfNull(additionalOut)) { PdAdtlInfoOut temp = new PdAdtlInfoOut(); temp.setAdtnlInfoCd(item.getAdditionalInfoCd()); temp.setPdRelStsCd(item.getPdRelationStatusCd()); temp.setAdtnlInfoCntnt(item.getAdditionalInfoContent()); temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(item.getApplyStartDate())); temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(item.getApplyEndDate())); temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(item.getApplyStartDate())); temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(item.getApplyEndDate())); out.add(temp); } return out; }
public CaDateMngrCheckDateOut calculateDate(String baseDt) throws BizApplicationException { // Validate date _checkDate(baseDt); // New result object CaDateMngrCheckDateOut out = new CaDateMngrCheckDateOut(); // Next date out.setNxtDt(_getCalculationDate(baseDt, 1)); // Next next date out.setNxtNxtDt(_getCalculationDate(baseDt, 2)); // Before date out.setBfDt(_getCalculationDate(baseDt, -1)); // Before before date out.setBfBfDt(_getCalculationDate(baseDt, -2)); return out; }
public DeptOrgnztnRelSrchSvcGetHistOut clone(){ try{ DeptOrgnztnRelSrchSvcGetHistOut object= (DeptOrgnztnRelSrchSvcGetHistOut)super.clone(); if ( this.orgnztnRelHist== null ) object.orgnztnRelHist = null; else{ java.util.List<bankware.corebanking.department.query.service.dto.DeptOrgnztnRelSrchSvcGetOrgnztnRelOut> clonedList = new java.util.ArrayList<bankware.corebanking.department.query.service.dto.DeptOrgnztnRelSrchSvcGetOrgnztnRelOut>(orgnztnRelHist.size()); for( bankware.corebanking.department.query.service.dto.DeptOrgnztnRelSrchSvcGetOrgnztnRelOut item : orgnztnRelHist ){ clonedList.add( (bankware.corebanking.department.query.service.dto.DeptOrgnztnRelSrchSvcGetOrgnztnRelOut)item.clone()); } object.orgnztnRelHist = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<bankware.corebanking.core.product.productapi.interfaces.dto.BfInfoIO> getListBfInfo(String instCd, String bizDscd, String bfTpCd, String bfTmpltCd) throws BizApplicationException { List<bankware.corebanking.core.product.productapi.interfaces.dto.BfInfoIO> outList = new ArrayList<>(); // Set input BfBaseListIn apiIn = new BfBaseListIn(); apiIn.setInstitutionId((StringCoreUtils.isEmpty(instCd)) ? _getCmnContext().getInstCode() : instCd); apiIn.setBizDscd(bizDscd); apiIn.setBfTypeCd(bfTpCd); apiIn.setBfTemplateCd(bfTmpltCd); List<BfInfoIO> apiOutList = _bfApi().getListBfBase(apiIn); if (!CollectionCoreUtils.isEmpty(apiOutList)) { for (BfInfoIO io : apiOutList) { bankware.corebanking.core.product.productapi.interfaces.dto.BfInfoIO out = new bankware.corebanking.core.product.productapi.interfaces.dto.BfInfoIO(); out.setInstCd(io.getInstitutionId()); out.setIndsDscd(io.getIndustryDscd()); out.setBizDscd(io.getBizDscd()); out.setPdTpCd(io.getBfTypeCd()); out.setPdTmpltCd(io.getBfTemplateCd()); out.setPdCd(io.getBfCd()); out.setPdNm(io.getBfName()); out.setSaleStartDt(PdUtil.parseDateToYYYYMMDD(io.getSaleStartDate())); out.setSaleStartTm(PdUtil.parseDateToHHMMSS(io.getSaleStartDate())); out.setSaleEndDt(PdUtil.parseDateToYYYYMMDD(io.getSaleEndDate())); out.setSaleEndTm(PdUtil.parseDateToHHMMSS(io.getSaleEndDate())); outList.add(out); } } // Return output return outList; }
public String getSubInfo(String atrbtNm, ArrRealImpl arrRealImpl) throws BizApplicationException { // 1. 계약에 저장된 보조명세 캐시 조회 IValueObject arrSubInfo = getSubInfoCache(arrRealImpl); // 2. 계약에 저장된 보조명세 캐시가 null인 경우, null 리턴 if (arrSubInfo == null) { return null; } // 3. 계약에 저장된 보조명세 캐시에서 속성명 기준으로 속성값 조회 Object atrbtVal = arrSubInfo.get(atrbtNm); // Casting 시 Null 방지 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public StndngOrderSvcArrCndIn clone(){ try{ StndngOrderSvcArrCndIn object= (StndngOrderSvcArrCndIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CaInstParamAtrbtInfo> getListInstParamAtrbtInfo(String instCd, CaInstParamTypeEnum instParamTypeEnum ) throws BizApplicationException { List<CaCmInstPMSelectListParmAtrbtInfoForScreenIO> outSqlList = _getCmInstPMDso().selectListParmAtrbtInfoForScreen( instCd,_getCaCmnContext().getLanguageCode(), instParamTypeEnum == null ? null : instParamTypeEnum.getValue()); List<CaInstParamAtrbtInfo> outList = new ArrayList<CaInstParamAtrbtInfo>(); for( CaCmInstPMSelectListParmAtrbtInfoForScreenIO dto : outSqlList ) { CaInstParamAtrbtInfo instParamAtrbtInfo = new CaInstParamAtrbtInfo(); instParamAtrbtInfo.setAtrbtLen(dto.getAtrbtLen()); instParamAtrbtInfo.setAtrbtTpCd(dto.getAtrbtTpCd()); instParamAtrbtInfo.setInstParmTpCd(dto.getInstParmTpCd()); instParamAtrbtInfo.setParmAtrbtNm(dto.getParmAtrbtNm()); instParamAtrbtInfo.setParmExplntnCntnt(dto.getParmExplntnCntnt()); instParamAtrbtInfo.setParmKorExplntnCntnt(dto.getParmKorExplntnCntnt()); instParamAtrbtInfo.setParmNm(dto.getParmNm()); instParamAtrbtInfo.setParmVal(dto.getParmVal()); if (CaAtrbtVldtnWayEnum.CODE.getValue().equals(dto.getAtrbtVldtnWayCd()) && !StringUtils.isEmpty(dto.getAtrbtVldtnRuleCntnt()) ) { instParamAtrbtInfo.setJsonCmbBoxCntnt(getCodeListToJson(dto.getAtrbtVldtnRuleCntnt())); } instParamAtrbtInfo.setAtrbtVldtnWayCd(dto.getAtrbtVldtnWayCd()); instParamAtrbtInfo.setAtrbtVldtnRuleCntnt(dto.getAtrbtVldtnRuleCntnt()); instParamAtrbtInfo.setAtrbtVldtnXtnRuleCntnt(dto.getAtrbtVldtnXtnRuleCntnt()); outList.add(instParamAtrbtInfo); } return outList; }
public ArArrPlnMIO select(String instCd, String arrId, Integer plnSeqNbr) { return _getArArrPlnM().select(instCd, arrId, plnSeqNbr); }
public TxJrnlSvcGetTxJrnlOut clone(){ try{ TxJrnlSvcGetTxJrnlOut object= (TxJrnlSvcGetTxJrnlOut)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public StTxMIO getArrTx(StTxMIO stTxMIO, ArrRealCore arr) throws BizApplicationException { switch(ArrTxKndCoreEnum.getEnum(getArrTxKnd(arr))) { case ARR_TX_INTERNAL: return _getStTxIntrnlMDso().selectArrTx(stTxMIO); case ARR_TX_TEMPRARY: return _getStTxTmpryMDso().selectArrTx(stTxMIO); case ARR_TX_NORMAL: return _getStTxMDso().selectArrTx(stTxMIO); default : throw new BizApplicationException("AAPSTE0212"); } }
public String getInstCd() { return arrTxBsicIO.getInstCd(); }
public AprslRsltMgmtSvcGetOut clone(){ try{ AprslRsltMgmtSvcGetOut object= (AprslRsltMgmtSvcGetOut)super.clone(); if ( this.aprslThingList== null ) object.aprslThingList = null; else{ java.util.List<bankware.corebanking.collateral.evaluation.service.dto.AprslThingList> clonedList = new java.util.ArrayList<bankware.corebanking.collateral.evaluation.service.dto.AprslThingList>(aprslThingList.size()); for( bankware.corebanking.collateral.evaluation.service.dto.AprslThingList item : aprslThingList ){ clonedList.add( (bankware.corebanking.collateral.evaluation.service.dto.AprslThingList)item.clone()); } object.aprslThingList = clonedList; } if ( this.aprslOwnerList== null ) object.aprslOwnerList = null; else{ java.util.List<bankware.corebanking.collateral.evaluation.service.dto.AprslOwnerList> clonedList = new java.util.ArrayList<bankware.corebanking.collateral.evaluation.service.dto.AprslOwnerList>(aprslOwnerList.size()); for( bankware.corebanking.collateral.evaluation.service.dto.AprslOwnerList item : aprslOwnerList ){ clonedList.add( (bankware.corebanking.collateral.evaluation.service.dto.AprslOwnerList)item.clone()); } object.aprslOwnerList = clonedList; } if ( this.aprslLeaseList== null ) object.aprslLeaseList = null; else{ java.util.List<bankware.corebanking.collateral.evaluation.service.dto.AprslLeaseList> clonedList = new java.util.ArrayList<bankware.corebanking.collateral.evaluation.service.dto.AprslLeaseList>(aprslLeaseList.size()); for( bankware.corebanking.collateral.evaluation.service.dto.AprslLeaseList item : aprslLeaseList ){ clonedList.add( (bankware.corebanking.collateral.evaluation.service.dto.AprslLeaseList)item.clone()); } object.aprslLeaseList = clonedList; } if ( this.prfClaimDetailList== null ) object.prfClaimDetailList = null; else{ java.util.List<bankware.corebanking.collateral.evaluation.service.dto.PrfClaimDetailList> clonedList = new java.util.ArrayList<bankware.corebanking.collateral.evaluation.service.dto.PrfClaimDetailList>(prfClaimDetailList.size()); for( bankware.corebanking.collateral.evaluation.service.dto.PrfClaimDetailList item : prfClaimDetailList ){ clonedList.add( (bankware.corebanking.collateral.evaluation.service.dto.PrfClaimDetailList)item.clone()); } object.prfClaimDetailList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getAplyStartTm() { if (pdPdCndM == null) { return CPD01.START_TM; } // Return output return (pdPdCndM.getAplyStartDt() == null) ? CPD01.START_TM : PdUtil.parseDateToHHMMSS(pdPdCndM .getAplyStartDt()); }
public void modifyArrMaturityDate(String txDt, Integer txSeqNbr) throws BizApplicationException { // 해당 메소드는 ({0}) 클래스의 인스턴스로 사용할 수 없습니다. 계약담당자에게 문의바랍니다. // This method cannot be used by instance of ({0}) class. throw new BizApplicationException("AAPARE0678",new Object[]{this.getClass().getName()}); }
public static boolean isValid(String value) throws BizApplicationException { for (ClHrarcyEnum item : ClHrarcyEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; // throw new BizApplicationException("AAPATE0028", new Object[] {value, "@clHrarcyId"}); }
private BfTestSvcOut getBfCd(BfTestSvcIn in) throws BizApplicationException { BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); Bf bf = _getBfMngr().getBf(bfIn); String output = bf.getBfCd(); BfTestSvcOut out = new BfTestSvcOut(); if(StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (AssetTpCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@AssetXtnAtrbtNm"});//({0}) is invalid {1}. } return true; }
public void registerDeptClosing(DeptClsgDtlIO in) throws BizApplicationException { /* * Set deptClsgDtlIO */ DeptClsgDtlIO deptClsgDtlIO = _setDeptClsgDtlIO(in); /* * Check business date */ _checkBizDt(deptClsgDtlIO.getBaseDt()); /* * Validation for department closing */ if (ClsgDscdEnum.CLSG.getValue().equals(deptClsgDtlIO.getDeptClsgDscd())) { /* * TODO * 1. 전일자 마감여부 check * 2. 업무통제관련 check * 3. 외환업무마감 check * 4. 자동화기기 마감 check * 5. 대체불일치 센터컷 수행 완료 여부 check * 6. 센터컷 텔러 대체 일치여부 check */ /* * Check closing status of tellers who have cash on hand on previous business date */ _checkTlrClsgStsByPrvsBizDtCashHolidng(deptClsgDtlIO); /* * Check transfer deposit/withdrawal amount when registering department closing */ _checkTrnsfrAmt(deptClsgDtlIO); /* * Check closing target teller's closing status on business day */ if(_getCmnContext().getTxDate().equals(deptClsgDtlIO.getBaseDt())){ _getDepartmentStaffClosingYn(deptClsgDtlIO.getDeptId(), deptClsgDtlIO.getBaseDt()); } } /* * Get department closing ledger */ DeptClsgDtlIO out = getDepartmentClosing(deptClsgDtlIO); if (out==null) { _registerDepartmentClosing(deptClsgDtlIO); } else { if (ClsgDscdEnum.CLSG_BF.getValue().equals(out.getDeptClsgDscd())) { // 마감구분코드가 "마감"일 경우만 update 수행 if(deptClsgDtlIO.getDeptClsgDscd().equals(ClsgDscdEnum.CLSG.getValue())) { _modifyDepartmentClosingRegistration(deptClsgDtlIO); } } else { // 이미 마감처리 되어 있습니다.({0}) throw new BizApplicationException("AAPACE3023", new Object[] { deptClsgDtlIO.getDeptId() }); } } }
private BfTestSvcOut getBfMrchntRelBackward(BfTestSvcIn in) throws BizApplicationException { BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); Bf bf = _getBfMngr().getBf(bfIn); List<BfMrchntRelOut> output = bf.getBfMrchntRelBackward(_convertOmmToVo(in.getBfMrchntRelIn())); BfTestSvcOut out = new BfTestSvcOut(); if(CollectionUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public List<CaAddrIO> getListKoreaAddress(CaAddrHrarcyEnum addrHrarcyEnum, CaAddrSearchTpEnum addrSearchTpEnum, String cityPrvncAddr, String cityGunGuAddr , String roadNm, BigDecimal bldgMainNbr, BigDecimal bldgSubNbr, String bldgNm, String emdongAddr, BigDecimal nbrAddrNbr, BigDecimal househldNbr) throws BizApplicationException { List<CaAddrIO> addrIOList = new ArrayList<CaAddrIO>(); switch (addrSearchTpEnum) { case ROAD_ADDRESS_SEARCH: // 도로명주소 검색 addrIOList = _getRoadAddressSearch(cityPrvncAddr, cityGunGuAddr, roadNm, bldgMainNbr, bldgSubNbr); break; case BUILDING_NAME_SEARCH: // 건물명 검색 addrIOList = _getBuildingNameSearch(cityPrvncAddr, cityGunGuAddr, bldgNm); break; case AREA_NUMBER_SEARCH: // 지번 검색 addrIOList = _getAreaNumberSearch(cityPrvncAddr, cityGunGuAddr, emdongAddr, nbrAddrNbr, househldNbr); break; default: // 에러처리 break; } return addrIOList; }
public List<CaCrdtrtgGradeIO> getListCrdtrtgGradeByBaseDt(String instCd, String crdtrtgMdlDscd, String baseDt)throws BizApplicationException { List<CaCrdtrtgGradeIO> outList = new ArrayList<CaCrdtrtgGradeIO>(); List<CaAmCrdtrtgGradeMIO> crdtrtgTblList =_getAmCrdtrtgGradeMDso().selectListByBaseDt( instCd, crdtrtgMdlDscd, baseDt); for (CaAmCrdtrtgGradeMIO crdtrtgTblIO : crdtrtgTblList) { outList.add(_setBasicInfo(crdtrtgTblIO)); } return outList; }
public String getXtnInfo(String xtnAtrbtNm) throws BizApplicationException { // 속성명 기준으로 확장정보관리방법 판단 // 1. 확장정보명세 if (_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AT_ACTOR_M.getValue(), xtnAtrbtNm)) { return super.getXtnInfo(xtnAtrbtNm); } // 2. 보조명세 else { return _getActorSubInfoBiz().getSubInfo(xtnAtrbtNm, this); } }
public Actor getActorByUniqueIdNbr(String actorUnqIdNbrTpCd, String actorUnqIdNbr) throws BizApplicationException { if (StringUtils.isEmpty(actorUnqIdNbrTpCd)) { throw new BizApplicationException("AAPCME0006", new String[] {"@actorUnqIdNbrTpCd"}); } if (StringUtils.isEmpty(actorUnqIdNbr)) { throw new BizApplicationException("AAPCME0006", new String[] {"@actorUnqIdNbr"}); } //check input code _getCd().validateCode(ActorBaseCdNbrCoreEnum.ACTOR_UNQ_ID_NBR_TP_CD.getValue(), actorUnqIdNbrTpCd); AtActorMXtnIO atActorMIO = _getActorBsicXtn().getInformationByUniqueIdentificationNumber(_getCmnContext().getInstCode(), actorUnqIdNbrTpCd, actorUnqIdNbr); if (atActorMIO == null) { return null; } ActorImpl actor = (ActorImpl) super.getUniqueBusinessBean(atActorMIO.getInstCd(), atActorMIO.getActorId()); if (actor.getActorBasicInfo() != null) { return actor; } actor.initialize(atActorMIO); // set subsidiary information kind code _getActorXtnInfoCustom().setSubInfoKndCd(actor); _getActorDueDlgncXtnInfoCustom().setSubInfoKndCd(actor); return actor; }
public SrvcBlckngAmtReduceSvcOut clone(){ try{ SrvcBlckngAmtReduceSvcOut object= (SrvcBlckngAmtReduceSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public static boolean isValid(String value){ for (CupldBizDscdCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public CustRprsnInqrySvcGetLoinInfoListOut clone(){ try{ CustRprsnInqrySvcGetLoinInfoListOut object= (CustRprsnInqrySvcGetLoinInfoListOut)super.clone(); if ( this.custRprsnLoinInfoList== null ) object.custRprsnLoinInfoList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinInfoOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinInfoOut>(custRprsnLoinInfoList.size()); for( bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinInfoOut item : custRprsnLoinInfoList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinInfoOut)item.clone()); } object.custRprsnLoinInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaScrnMgmtSvcRemoveScrnInfoListIn clone(){ try{ CaScrnMgmtSvcRemoveScrnInfoListIn object= (CaScrnMgmtSvcRemoveScrnInfoListIn)super.clone(); if ( this.scrnList== null ) object.scrnList = null; else{ java.util.List<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn>(scrnList.size()); for( bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn item : scrnList ){ clonedList.add( (bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn)item.clone()); } object.scrnList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrSrvcBlckng> getCustDepositArrServiceBlocking(String custId) throws BizApplicationException { List<ArrSrvcBlckng> arrSrvcBlckngList = new ArrayList<ArrSrvcBlckng>(); List<Arr> arrList = this.getListCustOwnArrActive(custId,PdBizDscdEnum.DEPOSIT.getValue(),null,null); if (arrList == null || arrList.isEmpty()) return arrSrvcBlckngList; for (Arr arr:arrList){ List<ArrSrvcBlckngGetOut> arSrvcBlckngGetOutList = arr.getListArrServiceBlocking(null, ArrCmnUtil.getRckngDt(_getCmnContext()), true); if (arSrvcBlckngGetOutList == null ||arSrvcBlckngGetOutList.isEmpty()) continue; ArrSrvcBlckng arrSrvcBlckng = new ArrSrvcBlckng(); arrSrvcBlckng.setArrReal(arr); arrSrvcBlckng.setArrSrvcBlckngList(arSrvcBlckngGetOutList); arrSrvcBlckngList.add(arrSrvcBlckng); } return arrSrvcBlckngList; }
public static boolean isValid(String value) { for (FrstFixIRtAplyTrmDscdCoreEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public List<CndGrpTmpltCndTmpltRel> getListCndGrpTmpltCndTmpltRel( String tntInstId, String cndGrpTmpltTpCd, String aplyDt) throws BizApplicationException { List<CndGrpTmpltCndTmpltRel> outList = new ArrayList<CndGrpTmpltCndTmpltRel>(); Date aplyDate = null; if(StringCoreUtils.isEmpty(aplyDt)) { aplyDate = PdUtil.parseStringToDate(_getCmnContext().getTxDate() + _getCmnContext().getTxTime()); } else { aplyDate = PdUtil.parseStringToDate(aplyDt); } List<CndGroupTemplateCndTemplateRelation> relationOut = _getTemplate() .getListCommonCndCndGroupTemplateCndTemplateRelation(tntInstId, cndGrpTmpltTpCd, aplyDate); if(CollectionUtils.isEmpty(relationOut)) return Collections.emptyList(); for (CndGroupTemplateCndTemplateRelation cnd : relationOut) { CndGrpTmpltCndTmpltRel out = new CndGrpTmpltCndTmpltRel(); out.setCndGrpTmpltCd(cnd.getCndGroupTemplateCd()); out.setCndCd(cnd.getCndCd()); out.setCndNm(cnd.getCndName()); out.setAplyStartDt(cnd.getApplyStartDate()); out.setAplyEndDt(cnd.getApplyEndDate()); out.setCmpxCndYn(cnd.isComplexCnd() ? CPD01.YES : CPD01.NO); out.setCndTpCd(cnd.getCndTypeCd()); out.setCndValDcsnLvlCd(cnd.getCndValDecisionLevelCd()); out.setRltdAtrbtTpCd(cnd.getRelatedAttributeTypeCd()); out.setCndGrpCd(cnd.getCndGroupCd()); out.setCndValNullYn(cnd.isCndValNull() ? CPD01.YES : CPD01.NO); outList.add(out); } return outList; }
public CaTaxRtCdMgmtSvcGetTaxRateCodeListIn clone(){ try{ CaTaxRtCdMgmtSvcGetTaxRateCodeListIn object= (CaTaxRtCdMgmtSvcGetTaxRateCodeListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Tlr getTlr(String instCd,String deptId,String staffId) throws BizApplicationException { return (TlrImpl) super.getTlrCore(instCd, deptId, staffId); }
public CaBnkMgmtSvcGetBankCodeListSubOut clone(){ try{ CaBnkMgmtSvcGetBankCodeListSubOut object= (CaBnkMgmtSvcGetBankCodeListSubOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public MarketPriceMgmtSvcGetIn clone(){ try{ MarketPriceMgmtSvcGetIn object= (MarketPriceMgmtSvcGetIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DueDiligenceInqrySvcListOut clone(){ try{ DueDiligenceInqrySvcListOut object= (DueDiligenceInqrySvcListOut)super.clone(); if ( this.dueDlgncList== null ) object.dueDlgncList = null; else{ java.util.List<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub> clonedList = new java.util.ArrayList<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub>(dueDlgncList.size()); for( bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub item : dueDlgncList ){ clonedList.add( (bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub)item.clone()); } object.dueDlgncList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustAdtnlSrvcOpnSvcExcptnAcctInfoIn clone(){ try{ CustAdtnlSrvcOpnSvcExcptnAcctInfoIn object= (CustAdtnlSrvcOpnSvcExcptnAcctInfoIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String xtnAtrbtNm, ScrtyIntCore scrtyInt) throws BizApplicationException { return _getScrtyIntSubInfoBiz().getSubInfo(xtnAtrbtNm, (ScrtyIntImpl)scrtyInt); }
public SelfAuthSvcDemandIn clone(){ try{ SelfAuthSvcDemandIn object= (SelfAuthSvcDemandIn)super.clone(); if ( this.xtnAtrbtList== null ) object.xtnAtrbtList = null; else{ java.util.List<bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO> clonedList = new java.util.ArrayList<bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO>(xtnAtrbtList.size()); for( bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO item : xtnAtrbtList ){ clonedList.add( (bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO)item.clone()); } object.xtnAtrbtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrPlanIO> getArrPlans(ArrSrvcEnum arrSrvc, String exctnPlnDt, String arrPlnStsCd) throws BizApplicationException { return super.getArrPlans(arrSrvc.getValue(), exctnPlnDt, arrPlnStsCd); }
public PreScrningNICEScore clone(){ try{ PreScrningNICEScore object= (PreScrningNICEScore)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public BfCmpsCndSvcOut clone(){ try{ BfCmpsCndSvcOut object= (BfCmpsCndSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbCnstncyCmTblXtnAtrXtnAtrMDso().selectListForConsistency(pageOffSet, pgCnt); }
public String getStandardInstitution() throws BizApplicationException { String instCd = _getCmnContextCore().getInstCode(); return getInstitutionParameterValue(instCd, InstParamEnum.STANDARD_INSTITUTION_CODE.getValue()); }
public CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut getExtendAttributeExtendAttributeDetail( CaTblMgmtSvcGetTblXtnAtrbtIn input) throws BizApplicationException { CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut output = new CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut(); List<CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl> xtnAtrbtXtnAtrbtDtls = new ArrayList<CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl>(); // 확장속성확장속성명 목록 String[] xtnAtrbtXtnAtrbtNms = CCM01.XTN_ATRBT_XTN_ATRBT_NM_ARR; CaTblXtnAtrXtnAtrOut tblXtnAtrXtnAtrOut = _getTblXtnAtrbt() .getExtendAttributeExtendAttributeDetail(input.getInstCd(), input.getTblNm(), input.getAtrbtNm()); output.setAtrbtVldtnRuleCntnt(tblXtnAtrXtnAtrOut.getAtrbtVldtnRuleCntnt()); output.setAtrbtVldtnWayCd(tblXtnAtrXtnAtrOut.getAtrbtVldtnWayCd()); output.setAtrbtVldtnXtnRuleCntnt(tblXtnAtrXtnAtrOut.getAtrbtVldtnXtnRuleCntnt()); output.setStdAtrbtVldtnUseYn(tblXtnAtrXtnAtrOut.getStdAtrbtVldtnUseYn()); output.setInstIndvDfntnMndtryYn(tblXtnAtrXtnAtrOut.getInstIndvDfntnMndtryYn()); output.setRmkCntnt(tblXtnAtrXtnAtrOut.getRmkCntnt()); output.setXtnAtrbtVrtnCmpsCd(tblXtnAtrXtnAtrOut.getXtnAtrbtVrtnCmpsCd()); // 2020-02-15 Activity #16838 Kiwi 확장속성고도화 output.setXtnAtrbtMgmtWayCd(tblXtnAtrXtnAtrOut.getXtnAtrbtMgmtWayCd()); List<CaTblXtnAtrXtnAtrDtlOut> tblXtnAtrXtnAtrDtlOuts = tblXtnAtrXtnAtrOut.getDtlList(); String checkKey = ""; CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl xtnAtrbtXtnAtrbtDtl = new CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl(); for (CaTblXtnAtrXtnAtrDtlOut tblXtnAtrXtnAtrDtlOut : tblXtnAtrXtnAtrDtlOuts) { String key = tblXtnAtrXtnAtrDtlOut.getInstCd().concat(tblXtnAtrXtnAtrDtlOut.getTblNm()) .concat(tblXtnAtrXtnAtrDtlOut.getXtnAtrbtNm()).concat(tblXtnAtrXtnAtrDtlOut.getJsonKeyValCntnt()); if (!checkKey.equals(key)) { xtnAtrbtXtnAtrbtDtl = new CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl(); } xtnAtrbtXtnAtrbtDtl.setXtnAtrbtVrtnCmpsCd(tblXtnAtrXtnAtrOut.getXtnAtrbtVrtnCmpsCd()); xtnAtrbtXtnAtrbtDtl.setInstCd(tblXtnAtrXtnAtrDtlOut.getInstCd()); xtnAtrbtXtnAtrbtDtl.setTblNm(tblXtnAtrXtnAtrDtlOut.getTblNm()); xtnAtrbtXtnAtrbtDtl.setXtnAtrbtNm(tblXtnAtrXtnAtrDtlOut.getXtnAtrbtNm()); xtnAtrbtXtnAtrbtDtl.setJsonKeyValCntnt(tblXtnAtrXtnAtrDtlOut.getJsonKeyValCntnt()); for (int i = 0; i < xtnAtrbtXtnAtrbtNms.length; i++) { if (xtnAtrbtXtnAtrbtNms[i].equals(tblXtnAtrXtnAtrDtlOut.getXtnAtrbtXtnAtrbtNm())) { xtnAtrbtXtnAtrbtDtl.set(xtnAtrbtXtnAtrbtNms[i], tblXtnAtrXtnAtrDtlOut.getXtnAtrbtCntnt()); break; } } if (!checkKey.equals(key)) { checkKey = key; xtnAtrbtXtnAtrbtDtls.add(xtnAtrbtXtnAtrbtDtl); } } output.setXtnAtrbtXtnAtrbtDtlList(xtnAtrbtXtnAtrbtDtls); return output; }
public IpctMgmtSvcGetIpctTxList clone(){ try{ IpctMgmtSvcGetIpctTxList object= (IpctMgmtSvcGetIpctTxList)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean check(String vldnTrgt) throws BizApplicationException { if (_getArrCustMngr().getMembershipArr(vldnTrgt) == null) //The membership arrangement dose not exist, Please open membership arrangement first //멤버쉽계약이 없습니다. 멤버쉽계약을 먼저 개설 하세요 throw new BizApplicationException("AAPARE0350", null); return true; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, ArrTxCore arrTx)throws BizApplicationException{ _getArrTxSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt,(ArrTxImpl)arrTx); }
public String getCndGrpTmpltCd(){ return cndGrpTmpltCd; }
public Map<String, String> getMapSubInfo(ArrIssmdaImpl arrIssmdaImpl) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); IValueObject subInfo = getSubInfoCache(arrIssmdaImpl); if (subInfo == null) { return subInfoMap; } for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
protected BigDecimal getRngVal() throws BizApplicationException { return rngVal; }
public String getSubInfo(String xtnAtrbtNm, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { IValueObject subInfo = _getSubInfoCache(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); if (subInfo == null) { return null; } Object xtnAtrbtCntnt = subInfo.get(xtnAtrbtNm); if (xtnAtrbtCntnt == null) { return null; } return String.valueOf(xtnAtrbtCntnt); }
public void saveSubInfo(AtPrtnrSIO subInfoIO, PrtnrImpl prtnrImpl) throws BizApplicationException { // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtPrtnrSIO oldSubInfoIO = getSubInfoCache(prtnrImpl); if (oldSubInfoIO == null) { // PK setting subInfoIO.setPrtnrId(prtnrImpl.getPrtnrId()); // insert _getAtPrtnrSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoIO, oldSubInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(prtnrImpl, oldSubInfoIO); // PK setting subInfoIO.setPrtnrId(prtnrImpl.getPrtnrId()); // update _getAtPrtnrSDso().update(subInfoIO); } // 2. 캐시 저장 prtnrImpl.setSubInfoCache(subInfoIO); }
public String getIntRtStructureStsCd() { return intRtStructureStsCd; }
public DpstMMFSvcOut clone(){ try{ DpstMMFSvcOut object= (DpstMMFSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if (!this.getArrangementCore().isReal()) return; Arr arr = (Arr)this.getArrangementCore(); switch (arrSrvcTpCd) { case "TermExtension": _checkInput(arrSrvcTpCd,arrCndActionRequiredValue); _doTermExtension(arr, arrSrvcTpCd, arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public void undo(ArrTx arrTx) throws BizApplicationException { if( logger.isDebugEnabled() ) { logger.debug("HHH undo ArrId:{}", arrTx.getArrId()); logger.debug("HHH undo txDt:{}", arrTx.getTxDt()); logger.debug("HHH undo txSeqNbr:{}", arrTx.getTxSeqNbr()); } /** * 1. StUnrpdArrCashFlowH SELECT */ StUnrpdArrCashFlowHIO stUnrpdArrCashFlowHIn = new StUnrpdArrCashFlowHIO(); stUnrpdArrCashFlowHIn.setInstCd(_getCmnContext().getInstCode()); stUnrpdArrCashFlowHIn.setArrId(arrTx.getArrId()); // Arrangement identification stUnrpdArrCashFlowHIn.setTxDt(arrTx.getTxDt()); // Tran Date stUnrpdArrCashFlowHIn.setTxSeqNbr(arrTx.getTxSeqNbr()); // Tran Sequence number List<StUnrpdArrCashFlowHIO> unrpdArrCashFlowHList = _getStUnrpdArrCashFlowHDso().selectList(stUnrpdArrCashFlowHIn); /** * 2. StUnrpdArrCashFlowD List set */ if( unrpdArrCashFlowHList != null ){ /** * 2.1. StUnrpdArrCashFlowD Delete */ _removeUnrepaidArrCashFlow(arrTx.getInstCd(), arrTx.getArrId()); /** * 2.2. StUnrpdArrCashFlowD Insert */ for( StUnrpdArrCashFlowHIO hio : unrpdArrCashFlowHList ){ _getStUnrpdArrCashFlowDDso().insert(_convertStUnrpdArrCashFlowHIOToDIO(hio)); } } }
public java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaTmpltMgmtSvcGetTmpltDtl> getChildren(){ return children; }
public boolean hasArrLevelCndVal() { return hasArrLevelCndVal; }
public void saveMapSubInfo(Map<String, String> staffXtnInfoHash, StaffCore staffCore) throws BizApplicationException { _getStaffSubInfoBiz().saveMapSubInfo(staffXtnInfoHash, (StaffImpl) staffCore); }
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbCnstncyArArrIssmdaPsbkMsgRDso().selectListForConsistency(pageOffSet, pgCnt); }
public DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut clone(){ try{ DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut object= (DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void modifyArrMaturityDate(String txDt, Integer txSeqNbr) throws BizApplicationException { if(!this.getCndCd().equals(PdCndEnum.CONTRACT_TERM.getValue())){ return; } if(StringUtils.isEmpty(this.getArrangementCore().getArrOpnDt())){ return ; } if(this.getRngVal() == null){ return ; } ArrReal arrReal = (ArrReal)this.getArrangementCore(); if( arrReal.isArrKindModification() ) { return; } String arrMtrtyDt = this.calculateMaturityDate(); //산출한 만기일이 기존 만기일과 동일하면 리턴 if(!StringUtils.isEmpty(this.getArrangementCore().getArrMtrtyDt())){ if(arrMtrtyDt.equals(this.getArrangementCore().getArrMtrtyDt())){ if(logger.isDebugEnabled()){ logger.debug("the mtrtyDt is same with before change"); } return ; } } ((ArrImpl)this.getArrangementCore()).modifyArrMaturityDate(arrMtrtyDt,txDt,txSeqNbr); }
public SpnsAcctQrySvcListOut clone(){ try{ SpnsAcctQrySvcListOut object= (SpnsAcctQrySvcListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.suspenseaccounts.service.dto.SpnsAcctQrySvcOut> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.suspenseaccounts.service.dto.SpnsAcctQrySvcOut>(tblNm.size()); for( bankware.corebanking.accounting.suspenseaccounts.service.dto.SpnsAcctQrySvcOut item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.suspenseaccounts.service.dto.SpnsAcctQrySvcOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<PdAdtlInfoOut> getAdtnlInfo(String adtnlInfoCd) throws BizApplicationException { // 상품부가정보유형코드만 입력된경우 상품조회시 입력된 적용일자를 기준으로 조회함 // if the apply date was not inputed, use the product input date to // inquiry relation information PdAdtlInfoIn in = new PdAdtlInfoIn(); in.setAdtnlInfoCd(adtnlInfoCd); in.setAplyDt(aplyDt); in.setAplyTm(aplyTm); // Return output return getAdtnlInfo(in); }
public TxQrySvcGetXtnListOut clone(){ try{ TxQrySvcGetXtnListOut object= (TxQrySvcGetXtnListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.TxQrySvcGetXtnOut> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.TxQrySvcGetXtnOut>(tblNm.size()); for( bankware.corebanking.arrangementservice.query.service.dto.TxQrySvcGetXtnOut item : tblNm ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.TxQrySvcGetXtnOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaCmnCdSvcGetCdListByCdNbrDtlOut clone(){ try{ CaCmnCdSvcGetCdListByCdNbrDtlOut object= (CaCmnCdSvcGetCdListByCdNbrDtlOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(AtrlCore AtrlCore, String xtnAtrbtNm) throws BizApplicationException { return _getAtrlSubInfoBiz().getSubInfo(xtnAtrbtNm, (AtrlImpl) AtrlCore); }
public List<ArrReal> getListArrBasedOnStsHistory(String custId, ArrCustRelEnum arrCustRelEnum, String pdCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt,String inqryEndDt) throws BizApplicationException { return _getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId, arrCustRelEnum, null, null, null, pdCd, curArrSts, arrSts, inqryStartDt, inqryEndDt); }
public String getCndStsCd() { if (pdPdCndM == null) { return null; } return pdPdCndM.getCndStsCd(); }
public List<StlmntDtlIO> calculate(ArrReal arr, BigDecimal applyIntRt, String toDt, Map<String, String> xtdInfo) throws BizApplicationException { //String frDt = _getExistingValue(arr.getExtendAttributeByStr(ArrXtnInfoCoreEnum.LAST_INT_CAL_DT.getValue()), arr.getArrOpnDt()); String frDt = _getExistingValue(arr.getArrXtnInfo(ArrXtnInfoEnum.LAST_INT_CAL_DT), arr.getArrOpnDt()); IntCalculatorIO intCalculatorIO = _makeCommonInfoForCalculation(arr, arr.getCrncyCd(), InterestTransactionTypeEnum.PROVISIONAL_SETTLEMENT.getValue(), frDt, toDt, xtdInfo); /* * Make the target list of interest calculation */ List<StlmntCalcnDtlIO> stlmntCalcnDList = _makeDemandDepositStlmnt(intCalculatorIO, applyIntRt); /* * Calculate interest by accumulated amount */ _calculateIntByAcmltd(intCalculatorIO.getArr(), intCalculatorIO.getCrncyCd(), stlmntCalcnDList); /* * Make the list of settlement result and return it */ return _makeInterestSettlementInformation(intCalculatorIO, stlmntCalcnDList, CalcnBaseAmtTpEnum.ACMLTD_AMT.getValue(), null); }
public Map<AprslRqstXtnInfoEnum, String> getMapAprslRqstXtnInfo() throws BizApplicationException { Map<AprslRqstXtnInfoEnum, String> xtnInfoHash = new HashMap<AprslRqstXtnInfoEnum, String>(); // 확장정보명세 Map<String, String> xtnInfoStrMap = super.getMapAprslRqstXtnInfoAsStrByEav(); for(Entry<String, String> entry : xtnInfoStrMap.entrySet()){ xtnInfoHash.put(AprslRqstXtnInfoEnum.getEnum(entry.getKey()), entry.getValue()); } // 보조명세 Map<String, String> subInfoMap = _getAprslRqstSubInfoBiz().getMapSubInfo(this); for(Entry<String, String> entry : subInfoMap.entrySet()){ xtnInfoHash.put(AprslRqstXtnInfoEnum.getEnum(entry.getKey()), entry.getValue()); } return xtnInfoHash; }
public String getTransferLanguage(String trnsfrKnd, String trnsfrKeyVal, String lngCd) throws BizApplicationException { if(StringCoreUtils.isEmpty(trnsfrKnd)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@trnsfrKnd" }); } if(StringCoreUtils.isEmpty(trnsfrKeyVal)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@trnsfrKeyVal" }); } if(StringCoreUtils.isEmpty(lngCd)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@lngCd" }); } return _getCmMltLngTrnsltnDDso().getTransferLanguage(trnsfrKnd, trnsfrKeyVal, lngCd); }
static Object getBean(String arg0, Object... arg1) throws NestedRuntimeException { return LApplicationContext.getCurrentApplicationContext().getBean(arg0, arg1); }
public CnsltnSrchSvcIn clone(){ try{ CnsltnSrchSvcIn object= (CnsltnSrchSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DateMngrCalDayHmsOut calculateDateByDayHourMinuteSecond(String startTmstmp, String endTmstmp) throws BizApplicationException { if (!DateCoreUtils.isValidDate(startTmstmp, DATE_FORMAT_YYYYMMDD.concat(TIME_FORMAT_HHMMSS))) { throw new BizApplicationException("AAPCME0001", new Object[] { startTmstmp, "" }); } if (!DateCoreUtils.isValidDate(endTmstmp, DATE_FORMAT_YYYYMMDD.concat(TIME_FORMAT_HHMMSS))) { throw new BizApplicationException("AAPCME0001", new Object[] { endTmstmp, "" }); } return _calculateDateByDayHourMinuteSecond(startTmstmp, endTmstmp); }
public List<RefAtrbtIO> getListReferenceAttribute(RefAtrbtIO in) throws BizApplicationException { List<RefAtrbtIO> out = new ArrayList<RefAtrbtIO>(); CmRefAtrbtMIO inDao = new CmRefAtrbtMIO(); inDao.setRefObjCd(in.getRefObjCd()); inDao.setRefAtrbtNm(in.getRefAtrbtNm()); inDao.setRefAtrbtDescCntnt(in.getRefAtrbtDescCntnt()); List<CmRefAtrbtMIO> outDaoList = _getCmRefAtrbtMDso().selectList(inDao); for(CmRefAtrbtMIO outDao : outDaoList) { RefAtrbtIO sub = new RefAtrbtIO(); sub.setRefObjCd(outDao.getRefObjCd()); sub.setRefAtrbtNm(outDao.getRefAtrbtNm()); sub.setRefAtrbtDescCntnt(outDao.getRefAtrbtDescCntnt()); out.add(sub); } return out; }
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbCnstncyArArrExtrnlIdSrvcRDso().selectListForConsistency(pageOffSet, pgCnt); }
public String getJointNetworkClCode() throws BizApplicationException { return _getContextHeader().getJointNetworkClCd(); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, ArrIssmdaCore arrIssmda, String txDt, Integer txSeqNbr) throws BizApplicationException { _getArrIssmdaSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (ArrIssmdaImpl) arrIssmda, txDt, txSeqNbr); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { logger.debug("====== Do Service Action Test ======"); switch (arrSrvcTpCd) { case "IntraRealTmTrnsfr": case "InterRealTmTrnsfrOut": _doMoneyTransferAction(arrSrvcTpCd,arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public List<StArrDailyBalHIO> selectList(StArrDailyBalHIO a, String startDt, String endDt) { return _getStArrDailyBalH().selectList(a, startDt, endDt); }
public String getSubInfo(String xtnAtrbtNm, AprslRqstCore aprslRqstCore) throws BizApplicationException { return _getAprslRqstSubInfoBiz().getSubInfo(xtnAtrbtNm, (AprslRqstImpl)aprslRqstCore); }
public AssetPrsntStsRprtInqrySvcOut clone(){ try{ AssetPrsntStsRprtInqrySvcOut object= (AssetPrsntStsRprtInqrySvcOut)super.clone(); if ( this.assetRprtList== null ) object.assetRprtList = null; else{ java.util.List<bankware.corebanking.collateral.query.service.dto.AssetRprtList> clonedList = new java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.AssetRprtList>(assetRprtList.size()); for( bankware.corebanking.collateral.query.service.dto.AssetRprtList item : assetRprtList ){ clonedList.add( (bankware.corebanking.collateral.query.service.dto.AssetRprtList)item.clone()); } object.assetRprtList = clonedList; } if ( this.lnRprtList== null ) object.lnRprtList = null; else{ java.util.List<bankware.corebanking.collateral.query.service.dto.LnRprtList> clonedList = new java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.LnRprtList>(lnRprtList.size()); for( bankware.corebanking.collateral.query.service.dto.LnRprtList item : lnRprtList ){ clonedList.add( (bankware.corebanking.collateral.query.service.dto.LnRprtList)item.clone()); } object.lnRprtList = clonedList; } if ( this.grntRprtList== null ) object.grntRprtList = null; else{ java.util.List<bankware.corebanking.collateral.query.service.dto.GrntRprtList> clonedList = new java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.GrntRprtList>(grntRprtList.size()); for( bankware.corebanking.collateral.query.service.dto.GrntRprtList item : grntRprtList ){ clonedList.add( (bankware.corebanking.collateral.query.service.dto.GrntRprtList)item.clone()); } object.grntRprtList = clonedList; } if ( this.wrntRprtList== null ) object.wrntRprtList = null; else{ java.util.List<bankware.corebanking.collateral.query.service.dto.WrntRprtList> clonedList = new java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.WrntRprtList>(wrntRprtList.size()); for( bankware.corebanking.collateral.query.service.dto.WrntRprtList item : wrntRprtList ){ clonedList.add( (bankware.corebanking.collateral.query.service.dto.WrntRprtList)item.clone()); } object.wrntRprtList = clonedList; } if ( this.insrncRprtList== null ) object.insrncRprtList = null; else{ java.util.List<bankware.corebanking.collateral.query.service.dto.InsrncRprtList> clonedList = new java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.InsrncRprtList>(insrncRprtList.size()); for( bankware.corebanking.collateral.query.service.dto.InsrncRprtList item : insrncRprtList ){ clonedList.add( (bankware.corebanking.collateral.query.service.dto.InsrncRprtList)item.clone()); } object.insrncRprtList = clonedList; } if ( this.dstrbtRprtList== null ) object.dstrbtRprtList = null; else{ java.util.List<bankware.corebanking.collateral.query.service.dto.DstrbtRprtList> clonedList = new java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.DstrbtRprtList>(dstrbtRprtList.size()); for( bankware.corebanking.collateral.query.service.dto.DstrbtRprtList item : dstrbtRprtList ){ clonedList.add( (bankware.corebanking.collateral.query.service.dto.DstrbtRprtList)item.clone()); } object.dstrbtRprtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void modifyArrRelationRule(CaArrRelRuleIO arrRelRule) throws BizApplicationException { _checkInput(arrRelRule); _checkInputValidationForPortal(arrRelRule); CaArArrRelRuleMIO arArrRelRuleMIO = new CaArArrRelRuleMIO(); arArrRelRuleMIO.setInstCd(arrRelRule.getInstCd()); arArrRelRuleMIO.setBizDscd(arrRelRule.getBizDscd()); arArrRelRuleMIO.setPdTpCd(arrRelRule.getPdTpCd()); arArrRelRuleMIO.setPdTmpltCd(arrRelRule.getPdTmpltCd()); arArrRelRuleMIO.setPdCd(arrRelRule.getPdCd()); arArrRelRuleMIO.setArrStsCd(arrRelRule.getArrStsCd()); arArrRelRuleMIO.setArrRelKndCd(arrRelRule.getArrRelKndCd()); arArrRelRuleMIO.setArrRelCd(arrRelRule.getArrRelCd()); arArrRelRuleMIO.setRelMndtryYn(CCM01.YES.equals(arrRelRule.getRelMndtryYn()) ? CCM01.YES : CCM01.NO); arArrRelRuleMIO.setRelPlrlYn(CCM01.YES.equals(arrRelRule.getRelPlrlYn()) ? CCM01.YES : CCM01.NO); arArrRelRuleMIO.setScrnInpYn(CCM01.YES.equals(arrRelRule.getScrnInpYn()) ? CCM01.YES : CCM01.NO); _getCaCmnContext().setHeaderColumn(arArrRelRuleMIO); _getArArrRelRuleMDso().update(arArrRelRuleMIO); }
public java.util.List<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaXtnInfoIO> getXtnInfo(){ return xtnInfo; }
public Map<String, String> getMapSubInfo(ArrIssmdaImpl arrIssmdaImpl) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); IValueObject subInfo = getSubInfoCache(arrIssmdaImpl); if (subInfo == null) { return subInfoMap; } for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, InsrncCore insrncCore, String txDt, Integer txSeqNbr) throws BizApplicationException { _getInsrncSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, (InsrncImpl) insrncCore); }
public DpstArrOpnSvcArrIntRtOut clone(){ try{ DpstArrOpnSvcArrIntRtOut object= (DpstArrOpnSvcArrIntRtOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String atrbtNm, InsrncImpl insrncImpl) throws BizApplicationException { // 1. 보험 객체에 저장된 보조명세 캐시 조회 AsInsrncSIO insrncSubInfo = getSubInfoCache(insrncImpl); // 2. 보험에 저장된 보조원장 캐시가 null인 경우, null 리턴 if (insrncSubInfo == null) { return null; } // 3. 보험에 저장된 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = insrncSubInfo.get(atrbtNm); // 속성값이 null인경우 null리턴 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public List<CaCmnCdCheckOut> getListCode(String cdNbr) throws BizApplicationException { // Check the code number _checkCodeNumber(cdNbr); List<CaCmnCdCheckOut> out = new ArrayList<CaCmnCdCheckOut>(); // Get the code master information CaCdNbrInfoIO cdMstOut = _getCodeMasterInformation(cdNbr); // Get the code detail information List<CaCdDtlIO> cdDtlOutList = _getCdDtl().getCodeDetail(cdMstOut); for (CaCdDtlIO cdDtlIO : cdDtlOutList) { CaCmnCdCheckOut cmnCdCheckOut = _setCodeCheckOut(cdDtlIO, cdMstOut.getCdNbrTpCd()); out.add(cmnCdCheckOut); } return out; }
static boolean isValid(String value){ for (CupldBizDscdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public AprslBsicInfoIO getBasicInfo() throws BizApplicationException { if(aprslBasicCache == null) { return null; } AprslBsicInfoIO aprslBsicInfoIO = new AprslBsicInfoIO(); DtoCoreUtils.setSubInfoIO(aprslBasicCache, aprslBsicInfoIO); return aprslBsicInfoIO; }
public CaXpExtrnlIntrfcMsgCdMappingDIO select(CaXpExtrnlIntrfcMsgCdMappingDIO xpExtrnlIntrfcMsgCdMappingDIO) { return _getXpExtrnlCdMappingD().select(xpExtrnlIntrfcMsgCdMappingDIO); }
public CustRprsnChngSvcTelNbrIn clone(){ try{ CustRprsnChngSvcTelNbrIn object= (CustRprsnChngSvcTelNbrIn)super.clone(); if ( this.ctcptXtnInfoList== null ) object.ctcptXtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn>(ctcptXtnInfoList.size()); for( bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn item : ctcptXtnInfoList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn)item.clone()); } object.ctcptXtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean checkCode(CaCdNbrInfoIO in, String cd) throws BizApplicationException { CaCmCdInstDIO daoIn = new CaCmCdInstDIO(); daoIn.setInstCd(in.getInstCd()); daoIn.setCdNbr(in.getCdNbr()); daoIn.setCd(cd); daoIn.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue()); List<CaCmCdInstDIO> daoOutList = _getCmCdInstDDso().selectListByCondition(daoIn); if(daoOutList == null || daoOutList.isEmpty()) { return false; } return true; }
static boolean isValid(String value) { for (FeeRateAmountDscdCoreEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
static boolean isValid(String value){ for (TaxUnchrgdRsnCdEnum enumObject: values()) { if(enumObject.getValue().equals(value)) { return true; } } return false; }
public PdCndQuerySvcGetFeeDiscountOut clone(){ try{ PdCndQuerySvcGetFeeDiscountOut object= (PdCndQuerySvcGetFeeDiscountOut)super.clone(); if ( this.baseInfo==null ) object.baseInfo = null; else object.baseInfo = (bankware.corebanking.product.service.dto.PdCndQuerySvcGetFeeDiscountBaseInfoOut)this.baseInfo.clone(); if ( this.provideCnd== null ) object.provideCnd = null; else{ java.util.List<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailProvideCndOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailProvideCndOut>(provideCnd.size()); for( bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailProvideCndOut item : provideCnd ){ clonedList.add( (bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailProvideCndOut)item.clone()); } object.provideCnd = clonedList; } if ( this.aplyRule==null ) object.aplyRule = null; else object.aplyRule = (bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailAplyRuleOut)this.aplyRule.clone(); if ( this.limitCnd== null ) object.limitCnd = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdCndQuerySvcGetFeeDiscountLimitCndOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdCndQuerySvcGetFeeDiscountLimitCndOut>(limitCnd.size()); for( bankware.corebanking.product.service.dto.PdCndQuerySvcGetFeeDiscountLimitCndOut item : limitCnd ){ clonedList.add( (bankware.corebanking.product.service.dto.PdCndQuerySvcGetFeeDiscountLimitCndOut)item.clone()); } object.limitCnd = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaExtrnlIntrfcMsgHdrInfoMgmtOut select(CaExtrnlIntrfcMsgHdrInfoMgmtIn in) { CaXpExtrnlIntrfcMsgHdrInfoDIO xpExtrnlIntrfcMsgHdrInfoDIO = new CaXpExtrnlIntrfcMsgHdrInfoDIO(); CaExtrnlIntrfcMsgHdrInfoMgmtOut out = new CaExtrnlIntrfcMsgHdrInfoMgmtOut(); // Generated by code generator [[ xpExtrnlIntrfcMsgHdrInfoDIO.setInstCd(in.getInstCd());// set [기관코드] xpExtrnlIntrfcMsgHdrInfoDIO.setExtrnlInstCd(in.getExtrnlInstCd());// set [대외기관코드] xpExtrnlIntrfcMsgHdrInfoDIO.setExtrnlInstTxDscd(in.getExtrnlInstTxDscd());// set [대외기관거래구분코드] xpExtrnlIntrfcMsgHdrInfoDIO.setHdrAtrbtNm(in.getHdrAtrbtNm());// set [헤더속성명] // Generated by code generator ]] xpExtrnlIntrfcMsgHdrInfoDIO = _getXpExtrnlHdrInfoDDso().select(xpExtrnlIntrfcMsgHdrInfoDIO); if (xpExtrnlIntrfcMsgHdrInfoDIO != null) { // Generated by code generator [[ out.setInstCd(xpExtrnlIntrfcMsgHdrInfoDIO.getInstCd());// set [기관코드] out.setExtrnlInstCd(xpExtrnlIntrfcMsgHdrInfoDIO.getExtrnlInstCd());// set [대외기관코드] out.setExtrnlInstTxDscd(xpExtrnlIntrfcMsgHdrInfoDIO.getExtrnlInstTxDscd());// set [대외기관거래구분코드] out.setHdrAtrbtNm(xpExtrnlIntrfcMsgHdrInfoDIO.getHdrAtrbtNm());// set [헤더속성명] out.setHdrAtrbtVal(xpExtrnlIntrfcMsgHdrInfoDIO.getHdrAtrbtVal());// set [헤더속성값] out.setHdrAtrbtSettingDscd(xpExtrnlIntrfcMsgHdrInfoDIO.getHdrAtrbtSettingDscd());// set [헤더속성설정구분코드] //out.setEncdngMthdDscd(xpExtrnlIntrfcMsgHdrInfoDIO.getEncdngMthdDscd());// set [인코딩방식구분코드] //out.setAtrbtSeqNbr(xpExtrnlIntrfcMsgHdrInfoDIO.getAtrbtSeqNbr()); // Generated by code generator ]] } return out; }
public void saveMapSubInfo(ActorImpl actorImpl, String dueDlgncDscd, Integer dueDlgncSeqNbr, Map<String, String> subInfoMap) throws BizApplicationException { // 0. null check if (subInfoMap == null || subInfoMap.isEmpty()) { return; } // 1. 보조명세 종류 조회 ActorDueDlgncSubInfoKndEnum subInfoKnd = actorImpl.getDueDlgncSubInfoKnd(); // 2. 보조명세 캐시 조회결과에 따라 insert/update 판단 // ** 확인의무 보조명세는 변경이력을 관리하지 않는다. IValueObject subInfoIO = getSubInfoCache(actorImpl, dueDlgncDscd, dueDlgncSeqNbr); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = _getNewSubInfoSqlIO(subInfoKnd); subInfoIO.set("actorId", actorImpl.getActorId()); subInfoIO.set("dueDlgncDscd", dueDlgncDscd); subInfoIO.set("dueDlgncSeqNbr", dueDlgncSeqNbr); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _insertSubInfo(subInfoKnd, subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _updateSubInfo(subInfoKnd, subInfoIO); } // 3. 캐시 저장 _saveSubInfoCache(subInfoKnd, subInfoIO, actorImpl, dueDlgncDscd, dueDlgncSeqNbr); }
public GrntRprtList clone(){ try{ GrntRprtList object= (GrntRprtList)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<StdAtrbtIO> getListMaskAttribute() throws BizApplicationException { List<CmStdAtrMIO> cmStdAtrMIOs = _getCmStdAtrMDso().selectListMaskAtrbt(); return _setStdAtrbtIO(cmStdAtrMIOs); }
public boolean isExistArrDocRelation(String arrDocRelCd, String docIssueId, String baseDt, ArrRealCoreImpl arrReal) throws BizApplicationException { // 계약 자산관계 주제영역 미사용 시 skip if (!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.DOC_ISSUE_RELATION) || ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd()) ) { return false; } arrDocRelCd = ArrRelCoreUtil.getEmptyCheckValue(arrDocRelCd); docIssueId = ArrRelCoreUtil.getEmptyCheckValue(docIssueId); String existYn = _getArArrDocRDso().selectExistYn(arrReal.getInstCd(), arrReal.getArrId(), docIssueId, arrDocRelCd, _getInqBaseDt(baseDt) ); return ( CCM01.YES.equals(existYn) ? true : false ); }
public List<ArrPsbkMsg> getListArrPsbkMsg(String instCd, String psbkMsgId){ return _getArrPsbkMsgXtnBiz().getArrPsbkMsgDtlList(instCd, psbkMsgId); }
public static Object getBean(String arg0, Class<?> arg1) throws NestedRuntimeException { return LApplicationContext.getCurrentApplicationContext().getBean(arg0, arg1); }
public void saveMapSubInfo(AtrlCore AtrlCore, Map<String, String> xtnInfoMap) throws BizApplicationException { _getAtrlSubInfoBiz().saveMapSubInfo(xtnInfoMap, (AtrlImpl) AtrlCore); }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty( value)) { for (InsrncXtnInfoEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@AssetXtnAtrbtNm"});//({0}) is invalid {1}. } return true; }
public DtoClassAtrbt getAttribute(String dtoClassNm, String atrbtNm) throws BizApplicationException { if (StringCoreUtils.isEmpty(atrbtNm)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@atrbtNm" }); } List<DtoClassAtrbt> dtoClassAtrbtList = getListAttribute(dtoClassNm); for (DtoClassAtrbt dtoClassAtrbt : dtoClassAtrbtList) { if (atrbtNm.equals(dtoClassAtrbt.getAttributeName())) return dtoClassAtrbt; } return null; }
public int delete(CaAmAsmItmTblDIO amAsmItmTblDIO){ return _getAmAsmItmTblD().delete(amAsmItmTblDIO); }
public StlmntManualEntryMgmtSvcItemOut clone(){ try{ StlmntManualEntryMgmtSvcItemOut object= (StlmntManualEntryMgmtSvcItemOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getApplyEndDateTime() { // Return output return PdUtil.parseDateToYYYYMMDDHHMMSS(_getAplyEndDt()); }
public static boolean isValid(String value){ for (BalUpdtWayEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public RlsttCltrlMgmtSvcSaveOut clone(){ try{ RlsttCltrlMgmtSvcSaveOut object= (RlsttCltrlMgmtSvcSaveOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustCheckInfoSvcCheckCustInfoIn clone(){ try{ CustCheckInfoSvcCheckCustInfoIn object= (CustCheckInfoSvcCheckCustInfoIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
protected void createInsrnc(InsrncCrtnIn crtnIn) throws BizApplicationException{ // 1. 확장정보와 보조명세 분리 분리 Map<String, String> subInfoCrtnMap = _getInsrncSubInfoBiz().getMapSubInfoCrtn(crtnIn.getInsrncBsicCrtnIn().getInsrncXtnList()); // 2. 보험 생성 super.createInsrncCore(crtnIn); // 3. 보조명세 저장 _getInsrncSubInfoBiz().saveMapSubInfo(subInfoCrtnMap, crtnIn.getTxDt(), crtnIn.getTxSeqNbr(), this); }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { if (StringUtils.isEmpty(cdNbr)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@cdNbr" }); } if (StringUtils.isEmpty(supplInfoVal.get(CCM03.CD).toString())) { throw new BizApplicationException("AAPCME0006", new Object[] { "@cd" }); } Map<String, Object> supplInfoValForChkCd = new HashMap<String, Object>(); String lngCd = (String)supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue()); if(StringUtils.isEmpty(lngCd)) { lngCd = _getCmnContext().getLanguageCode(); } String cd = String.valueOf(supplInfoVal.get(CCM03.CD)); String isoNatCd = String.valueOf(supplInfoVal.get(CCM03.ISO_NAT_CD)); supplInfoValForChkCd.put(InstParamEnum.LANGUAGE_CODE.getValue(), lngCd); supplInfoValForChkCd.put(CCM03.CD, cd); supplInfoValForChkCd.put(CCM03.ISO_NAT_CD, isoNatCd); List<XtnCdIO> xtnCdList = this.getListCode(cdNbr, supplInfoValForChkCd); if(xtnCdList.size() == 0) { return false; } else { return true; } }
public List<DocInstIO> getDocHistory(String instCd, String docId) throws BizApplicationException { return _getDocInst().getInformationHistory(instCd, docId); }
public List<ProvideCnd> getListProvidedCndLight(List<PdIn> pdList) throws BizApplicationException { List<com.bankware.pf.product.api.models.ProvideCnd> provideCndList = _getPdCore().getListProvideCndLight(_convertToPdIn(pdList)); if(CollectionUtils.isEmpty(provideCndList)) return Collections.emptyList(); List<ProvideCnd> out = new ArrayList<>(); for(com.bankware.pf.product.api.models.ProvideCnd provideCnd : provideCndList) { ProvideCnd temp = new ProvideCnd(); temp.setProvidedCndSeqNbr(provideCnd.getProvideCndSeqNum()); temp.setCndCd(provideCnd.getCndCd()); temp.setCndTpCd(provideCnd.getCndTypeCd()); temp.setCndDscd(provideCnd.getCndDscd()); temp.setMsurUnitCd(provideCnd.getMeasureUnitCd()); temp.setCrncyCd(provideCnd.getCurrencyCd()); temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(provideCnd.getApplyStartDate())); temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(provideCnd.getApplyEndDate())); temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(provideCnd.getApplyStartDate())); temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(provideCnd.getApplyEndDate())); temp.setMaxValue(provideCnd.getMaxVal()); temp.setMinValue(provideCnd.getMinVal()); temp.setListCdList(provideCnd.getListCdList()); temp.setProvideCndAdtnlInfoOutList( _convertToProvideCndAdditionalInfoOutList(provideCnd.getProvideCndAdditionalInfoOutList())); temp.setListCd(provideCnd.getListCd()); temp.setVal(provideCnd.getVal()); out.add(temp); } return out; }
public CaCndTmpltOut getCndTmpltInfo(String cndCd, String instCd) throws BizApplicationException { String stdInstCd = instCd; if (StringUtils.isEmpty(stdInstCd)) { stdInstCd = _getCmnContext().getInstCode(); } return _getCaPdCtMDso().selectConditionTemplate(stdInstCd, cndCd); }
public LnCndChngAplctnSvcOutIntRt clone(){ try{ LnCndChngAplctnSvcOutIntRt object= (LnCndChngAplctnSvcOutIntRt)super.clone(); if ( this.tierElmntList== null ) object.tierElmntList = null; else{ java.util.List<bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtTierElement> clonedList = new java.util.ArrayList<bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtTierElement>(tierElmntList.size()); for( bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtTierElement item : tierElmntList ){ clonedList.add( (bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtTierElement)item.clone()); } object.tierElmntList = clonedList; } if ( this.rtElmntList== null ) object.rtElmntList = null; else{ java.util.List<bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtCmpsElement> clonedList = new java.util.ArrayList<bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtCmpsElement>(rtElmntList.size()); for( bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtCmpsElement item : rtElmntList ){ clonedList.add( (bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtCmpsElement)item.clone()); } object.rtElmntList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut clone(){ try{ DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut object= (DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean check(Map<String, String> atrbtCntnt) throws BizApplicationException { if(logger.isDebugEnabled()) { logger.debug("EmptyListCmpxVldtnImpl : {}", atrbtCntnt); } for(Map.Entry<String, String> atrbt: atrbtCntnt.entrySet()) { if("0".equals(atrbt.getValue())) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] {"@" + atrbt.getKey()}); } } return true; }
public CustCmphInqrySvcGetCustLoinIdNbrListOut clone(){ try{ CustCmphInqrySvcGetCustLoinIdNbrListOut object= (CustCmphInqrySvcGetCustLoinIdNbrListOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean check(String vldnTrgt) throws BizApplicationException { boolean isOk; if(_getCmnContext().getTxDate().compareTo(vldnTrgt) < 0 ) { throw new BizApplicationException("AAPCME0606", new String[]{vldnTrgt}); } else { isOk = true; } return isOk; }
public BigDecimal getRngVal() throws BizApplicationException { logger.debug("##AR## ArrCndEarlyRepaymentFeeTermCntImpl => getRngVal START :: "); if ( super.getRngVal() == null ){ super.setRngVal(_getEarlyRepaymentFeeTerm()); } return super.getRngVal(); }
public Map<String, String> getMapSubInfo(PrtnrImpl prtnrImpl) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 AtPrtnrSIO subInfo = getSubInfoCache(prtnrImpl); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조명세 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public PdQryCalRuleCndListOut clone(){ try{ PdQryCalRuleCndListOut object= (PdQryCalRuleCndListOut)super.clone(); if ( this.list== null ) object.list = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQryCalRuleCndOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQryCalRuleCndOut>(list.size()); for( bankware.corebanking.product.service.dto.PdQryCalRuleCndOut item : list ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQryCalRuleCndOut)item.clone()); } object.list = clonedList; } if ( this.calcnRuleList== null ) object.calcnRuleList = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQryCalRuleCalcnRuleOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQryCalRuleCalcnRuleOut>(calcnRuleList.size()); for( bankware.corebanking.product.service.dto.PdQryCalRuleCalcnRuleOut item : calcnRuleList ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQryCalRuleCalcnRuleOut)item.clone()); } object.calcnRuleList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaArrPdRuleCntntCdNbrListOut clone(){ try{ CaArrPdRuleCntntCdNbrListOut object= (CaArrPdRuleCntntCdNbrListOut)super.clone(); if ( this.list== null ) object.list = null; else{ java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList>(list.size()); for( bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList item : list ){ clonedList.add( (bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList)item.clone()); } object.list = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty( value)) { for (CltrlOprtngTpEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@cltrlOprtngTpCd"});//({0}) is invalid {1}. } return true; }
public int saveIpctClPrfl(IpctClPrflIn in) throws BizApplicationException { int out = 0; CmIpctClPrflDIO inCmIpctPrfl = new CmIpctClPrflDIO(); inCmIpctPrfl.setIpctClCd(in.getIpctClCd()); inCmIpctPrfl.setInstCd(in.getInstCd() == null ? _getCmnContext().getInstCode() : in.getInstCd()); inCmIpctPrfl.setIpctPrflAtrbtNm(in.getIpctPrflAtrbtNm()); inCmIpctPrfl.setIpctPrflCntnt(in.getIpctPrflCntnt()); inCmIpctPrfl.setLastChngId(_getCmnContext().getStaffId()); _getCmnContext().setHeaderColumn(inCmIpctPrfl); List<CmIpctClPrflDIO> rtnList = _getCmIpctClPrflDDso().selectList(inCmIpctPrfl); if(rtnList != null && rtnList.size() > 0){ out = _getCmIpctClPrflDDso().update(inCmIpctPrfl); } else { out = _getCmIpctClPrflDDso().insert(inCmIpctPrfl); } return out; }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, int pgNbr, int pgCnt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, null, null, null, null, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, pgNbr, pgCnt, false); }
public ArrRelIssmdaInfoOut getArrIssmdaRelation( String arrIssmdaTpCd, String arrIssmdaInhrncId, ArrRealCoreImpl arrReal) throws BizApplicationException{ // 계약 발급매체 주제영역 미사용 시 skip if (!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.ISSUED_MEDIA)) { return null; } _checkInput( arrIssmdaTpCd, arrIssmdaInhrncId ); ArArrIssmdaRIO issmdaR = _getArArrIssmdaRDso().selectActiveOne(_getCmnContextCore().getInstCode(), arrIssmdaTpCd, arrIssmdaInhrncId, arrReal.getArrId()); if(issmdaR == null){ throw new BizApplicationException("AAPARE0559", new Object[]{_getCdCore().getCode(ArrIssmdaTpCoreEnum.cdNbr, arrIssmdaTpCd), arrIssmdaInhrncId}); } return _buildArrRelInfoOut(issmdaR); }
public List<CaCaDstbTaskHIO> selectChangeHistoryList(CaCaDstbChngHstIn svDstbChngHstIn) { return _getSvDstbTaskH().selectChangeHistoryList(svDstbChngHstIn); }
public PdClassIqrySvcListOutListOut clone(){ try{ PdClassIqrySvcListOutListOut object= (PdClassIqrySvcListOutListOut)super.clone(); if ( this.childCatalogList== null ) object.childCatalogList = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdClassDetailListIqrySvcOutListOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdClassDetailListIqrySvcOutListOut>(childCatalogList.size()); for( bankware.corebanking.product.service.dto.PdClassDetailListIqrySvcOutListOut item : childCatalogList ){ clonedList.add( (bankware.corebanking.product.service.dto.PdClassDetailListIqrySvcOutListOut)item.clone()); } object.childCatalogList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String pdCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, int pgNbr, int pgCnt, boolean hasVrtnArr) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, null, null, null, pdCd, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, pgNbr, pgCnt, hasVrtnArr); }
public List<PdBrnchRelOut> getPdBrnchRel(String brnchTpDscd) { // Set input PdBrnchRelIn in = new PdBrnchRelIn(); in.setBrnchRelCd(brnchTpDscd); in.setAplyDt(aplyDt); in.setAplyTm(aplyTm); // Return output return getPdBrnchRel(in); }
public UnmaskSvcSaveRqstOut clone(){ try{ UnmaskSvcSaveRqstOut object= (UnmaskSvcSaveRqstOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaDstbChrncDataRqstTblInfoIn clone(){ try{ CaDstbChrncDataRqstTblInfoIn object= (CaDstbChrncDataRqstTblInfoIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public static boolean isValid(String value){ for (MostUsedAcctTpEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public java.lang.String getBaseIntRtDataTpDscd(){ return baseIntRtDataTpDscd; }
public static boolean isValid(String value) { for (TaxRateEnum item : TaxRateEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; }
public String getAttributeName() { return stdDtoClassAtrbt.getAtrbtNm(); }
public String getXtnInfo(String xtnAtrbtNm) throws BizApplicationException { // 확장테이블 판단 if (_getTblXtnAtrbt().isExtendAttributeExist(XtnTableEnum.AT_ACTOR_M.getValue(), xtnAtrbtNm)) { // 액터 확장정보명세 조회 return getActor().getXtnInfo(xtnAtrbtNm); } // 확장속성명 기준으로 확장방법 판단 if (_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AT_CUST_M.getValue(), xtnAtrbtNm)) { // 확장정보명세 조회 return super.getXtnInfoByEav(xtnAtrbtNm); } // 보조명세 조회 return _getCustSubInfoBiz().getSubInfo(xtnAtrbtNm, this); }
public boolean check(Map<String, String> atrbtCntnt) throws BizApplicationException { String cashTrnsfrDscd = atrbtCntnt.get(CASH_TRANSFR_DSCD); String prtlTrnsfrAmtStr = atrbtCntnt.get(PRTL_TRNSFR_AMT); String arrTrmntnDscd = atrbtCntnt.get(ARR_TRMNTN_DSCD); String oprtnAcctNbr = null; /* * Get an account number */ for(Entry<String, String> entry: atrbtCntnt.entrySet()) { String key = entry.getKey(); String value = entry.getValue(); if(key.indexOf("AcctNbr") >= 0 ) oprtnAcctNbr = value; } BigDecimal prtlTrnsfrAmt = BigDecimal.ZERO; if(!StringUtils.isEmpty(prtlTrnsfrAmtStr)) prtlTrnsfrAmt = new BigDecimal(prtlTrnsfrAmtStr); switch(CashTrnsfrEnum.getEnum(cashTrnsfrDscd) ) { /* * 1.In case of 'Cash', both partial transfer amount and operation account number are not allowed */ case CASH: if(prtlTrnsfrAmt.compareTo(BigDecimal.ZERO) != 0 || !StringUtils.isEmpty(oprtnAcctNbr)) { throw new BizApplicationException("AAPDPE0024", null); } break; /* * 2.In case of 'Transfer', partial transfer amount is not allowed and operation account number is essential (Except, set-off) */ case TRNSFR: if(prtlTrnsfrAmt.compareTo(BigDecimal.ZERO) != 0) throw new BizApplicationException("AAPSTE0073", null); if(StringUtils.isEmpty(oprtnAcctNbr) && !TrmntnDscdEnum.SETOFF.getValue().equals(arrTrmntnDscd)) { throw new BizApplicationException("AAPSTE0074", null); } break; /* * 3.In case of 'Mix', both partial transfer amount and operation account number are essential (Except, set-off) */ case MIX: if(prtlTrnsfrAmt.compareTo( BigDecimal.ZERO) == 0) throw new BizApplicationException("AAPSTE0075", null); if(StringUtils.isEmpty(oprtnAcctNbr) && !TrmntnDscdEnum.SETOFF.getValue().equals(arrTrmntnDscd)) { throw new BizApplicationException("AAPSTE0074", null); } break; default: } return true; }
public CustDocRelChngSvcTrmntnIn clone(){ try{ CustDocRelChngSvcTrmntnIn object= (CustDocRelChngSvcTrmntnIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int modifyArrTx(StTxMIO stTxMIO, ArrRealCore arr) throws BizApplicationException { switch(ArrTxKndEnum.getEnum(getArrTxKnd(arr))) { case ARR_TX_DEMAND : return _getStTxDemandMDso().updateArrTx(stTxMIO); default: return super.modifyArrTx(stTxMIO, arr); } }
public List<InterestCalculationSection> apply(ApplyInterestCalculationSectionExceptionIn in, List<InterestCalculationSection> intCalIntervals) throws BizApplicationException { for (InterestCalculationSection interval : intCalIntervals) { List<CalculationType> typeList = new ArrayList<>(); for (CalculationType type : interval.getCalTps()) { CalculationType t1 = type.clone(); final String calStartDt = t1.getCalStartDt(); final String calEndDt = t1.getCalEndDt(); // 시작/종료일자 역순일 경우 당일로 처리 if (DateCoreUtils.isDt1BeforeDt2(calEndDt, calStartDt)) { t1.setCalEndDt(calStartDt); } typeList.add(t1); } // 변경된 유형 반영 interval.setCalTps(typeList); } return intCalIntervals; }
public String getTxStaffId(){ return txStaffId; }
public void saveMapSubInfo(Map<String, String> subInfoMap, ArrIssmdaImpl arrIssmdaImpl, String txDt, Integer txSeqNbr) throws BizApplicationException { // null check if (subInfoMap == null || subInfoMap.isEmpty()) { return; } ArArrIssmdaSIO sqlIO = null; // 1.기존 보조명세 캐시 조회결과에 따라 insert/update 판단 ArrIssmdaSubInfo oldCache = (ArrIssmdaSubInfo) getSubInfoCache(arrIssmdaImpl); if (oldCache == null) { sqlIO = new ArArrIssmdaSIO(); sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd()); sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId()); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveArArrIssmdaSubHEmpty(arrIssmdaImpl, txDt, txSeqNbr); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, sqlIO); _getArArrIssmdaSDso().insert(sqlIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, oldCache)) { return; } sqlIO = new ArArrIssmdaSIO(); sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd()); sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId()); // 변경전 이력 저장 _saveArArrIssmdaSubH(arrIssmdaImpl, oldCache, txDt, txSeqNbr); // 기존 보조명세 캐시 VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(oldCache, sqlIO); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, sqlIO); // update _getArArrIssmdaSDso().update(sqlIO); } // 2. 캐시 저장 _saveSubInfoCache( sqlIO, arrIssmdaImpl); }
public CaDstbReqMIn clone(){ try{ CaDstbReqMIn object= (CaDstbReqMIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrNrmlIntRtQrySvcIn clone(){ try{ ArrNrmlIntRtQrySvcIn object= (ArrNrmlIntRtQrySvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
private BfCndTestSvcOut getMndtryNegCndYn(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); String output = bfCnd.getMndtryNegCndYn(); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public String getTxRmkCntnt() { return arrTxBsicIO.getTxRmkCntnt(); } public String getCrncyCd() { return arrTxBsicIO.getCrncyCd(); }
public CaRoleMgmtSvcSaveRoleServiceRelationIn clone(){ try{ CaRoleMgmtSvcSaveRoleServiceRelationIn object= (CaRoleMgmtSvcSaveRoleServiceRelationIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void undoSubInfo(InsrncImpl insrnc, String txDt, Integer txSeqNbr) throws BizApplicationException { // 1. 보험에 저장된 보조명세이력 캐시 조회결과가 없는 경우 리턴 AsInsrncSubHIO hstSqlIO = _getSubInfoHstCache(insrnc, txDt, txSeqNbr); if(hstSqlIO == null){ return; } // 3. 보조명세이력의 취소여부를 'Y'로 갱신 hstSqlIO.setCnclYn(CCM01.YES); _getAsInsrncSubHDso().update(hstSqlIO); // 4. 보조명세이력 DBIO VO를 보조명세 DBIO VO로 convert AsInsrncSIO sqlIO = new AsInsrncSIO(); DtoUtils.setSubInfoIO(hstSqlIO, sqlIO); // set PK & business column // 5. 보조명세 값 원복 _getAsInsrncSDso().update(sqlIO); }
public CaRoleStaffOut clone(){ try{ CaRoleStaffOut object= (CaRoleStaffOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(AtrlCore AtrlCore, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { _getAtrlSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AtrlImpl) AtrlCore); }
public List<DeptClsgDtlIO> getListDeptClosing(DeptClsgDtlIO deptClsgDtlIO) throws BizApplicationException { return _getListDeptClosing(_setAcDeptClsgDIn(deptClsgDtlIO)); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "Disbursement": _doDisbursementAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "Repayment" : _doRepaymentAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "ReduceLimit" : _doReduceLoanLimtAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "IncreaseLimit" : _doIncreaseLoanLimitAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "IncreaseTermExtension" : _doIncreaseLoanLimitAction(arrSrvcTpCd, arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public void validate(String arrSrvcCd,ArrRealCore arrReal, CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { if (_getCmnContext().isSelfChannel() && !cust.getCustId().equals(_getCmnContext().getCustId())){ //Customer to be accessed is not same with self-service channel's user. This service ({0}) could not performs properly //접근대상 고객정보의 고객과 본 셀프서비스 채널의 사용자가 동일하지 않습니다. 본서비스({0}) 실행이 불가 합니다 throw new BizApplicationException("AAPARE0336", new Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)}); } }
public void activate(ArrIssmdaStsChngIn arrIssmdaStsChngIn) throws BizApplicationException { super.changeStatus(ArrIssmdaStsEnum.ACTIVATED.getValue(), arrIssmdaStsChngIn.getStsChngRsnCntnt(), arrIssmdaStsChngIn.getIssmdaStsChngBizCdNbr(), arrIssmdaStsChngIn.getIssmdaStsChngBizCd(), arrIssmdaStsChngIn.getXtnInfoList(), arrIssmdaStsChngIn.getStsChngTxDt(), arrIssmdaStsChngIn.getStsChngTxSeqNbr()); }
public String getTransferLanguage(String trnsfrKnd, String trnsfrKeyVal, String lngCd){ //data cache 적용 CaCacheProvider p = new CaCacheProvider<CaCmMltLngTrnsltnDIO>(){ @Override public CaCmMltLngTrnsltnDIO select(CaCmMltLngTrnsltnDIO cmMltLngTrnsltnDIO) { return _getCmMltLngTrnsltnD().selectActive(cmMltLngTrnsltnDIO); } }; CaCmMltLngTrnsltnDIO cmMltLngTrnsltnDIO = new CaCmMltLngTrnsltnDIO(); cmMltLngTrnsltnDIO.setLngCd(lngCd); cmMltLngTrnsltnDIO.setTrnsfrKndCd(trnsfrKnd); cmMltLngTrnsltnDIO.setTrnsfrOriginKeyVal(trnsfrKeyVal); CaCmMltLngTrnsltnDIO rtnObj = super.selectCache(CaDataCacheConfig.CA_TRANSLATE_LANGUAGE_CACHE, lngCd.concat(trnsfrKnd).concat(trnsfrKeyVal), cmMltLngTrnsltnDIO,p); String trnsfrRsltVal = null; if(rtnObj != null){ trnsfrRsltVal = rtnObj.getTrnsfrRsltVal(); } return trnsfrRsltVal == null ? trnsfrKeyVal : trnsfrRsltVal; }
public CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut clone(){ try{ CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut object= (CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String xtnAtrbtNm, StaffCore staffCore) throws BizApplicationException { return _getStaffSubInfoBiz().getSubInfo(xtnAtrbtNm, (StaffImpl)staffCore); }
public CrspndntBnkMgmtSvcIn clone(){ try{ CrspndntBnkMgmtSvcIn object= (CrspndntBnkMgmtSvcIn)super.clone(); if ( this.nmList== null ) object.nmList = null; else{ java.util.List<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtNmListIn> clonedList = new java.util.ArrayList<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtNmListIn>(nmList.size()); for( bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtNmListIn item : nmList ){ clonedList.add( (bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtNmListIn)item.clone()); } object.nmList = clonedList; } if ( this.cntctPntList== null ) object.cntctPntList = null; else{ java.util.List<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtCntctPntList> clonedList = new java.util.ArrayList<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtCntctPntList>(cntctPntList.size()); for( bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtCntctPntList item : cntctPntList ){ clonedList.add( (bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtCntctPntList)item.clone()); } object.cntctPntList = clonedList; } if ( this.xtnInfoList== null ) object.xtnInfoList = null; else{ java.util.List<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtXtnInfoListIn> clonedList = new java.util.ArrayList<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtXtnInfoListIn>(xtnInfoList.size()); for( bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtXtnInfoListIn item : xtnInfoList ){ clonedList.add( (bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtXtnInfoListIn)item.clone()); } object.xtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public BfCouponQuantitySvcIn clone(){ try{ BfCouponQuantitySvcIn object= (BfCouponQuantitySvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AtrlImpl atrlImpl) throws BizApplicationException { // null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 액터역할에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 AtAtrlSIO subInfoIO = getSubInfoCache(atrlImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtAtrlSIO(); subInfoIO.setAtrlId(atrlImpl.getAtrlId()); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // insert _getAtAtrlSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(atrlImpl, subInfoIO); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // update _getAtAtrlSDso().update(subInfoIO); } // 2. 캐시 저장 atrlImpl.setSubInfoCache(subInfoIO); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { ArrReal arrReal = (ArrReal)this.getArrangementCore(); logger.debug("::: arrCndActionRequiredValue.getTxDt :: {}",arrCndActionRequiredValue.getTxDt()); if (!arrReal.isReal()) return; ArrSrvcEnum arrSrvcEnum = ArrSrvcEnum.getEnum(arrSrvcTpCd); if( arrSrvcEnum == null ) { throw new BizApplicationException("AAPARE0579"); } switch (arrSrvcEnum) { case OPEN_DEPOSIT: _doOpenAction(arrSrvcTpCd,arrCndActionRequiredValue,arrReal); break; case TERMINATION_DEPOSIT: //_doTrmntnAction(arrReal, arrCndActionRequiredValue); break; case TERMINATION_DEPOSIT_INQUIRY: _doTerminationAction(arrSrvcTpCd,arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public StaffRgstSvcCntctPntListIn clone(){ try{ StaffRgstSvcCntctPntListIn object= (StaffRgstSvcCntctPntListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaDeptRoleTmpltSvcGetListDtlOut clone(){ try{ CaDeptRoleTmpltSvcGetListDtlOut object= (CaDeptRoleTmpltSvcGetListDtlOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
private BfCndTestSvcOut getInstCd(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); String output = bfCnd.getInstCd(); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public CustRgstSvcSimpleIndvIn clone(){ try{ CustRgstSvcSimpleIndvIn object= (CustRgstSvcSimpleIndvIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String xtnAtrbtNm, ArrTxCore arrTx) { return _getArrTxSubInfoBiz().getSubInfo(xtnAtrbtNm,(ArrTxImpl)arrTx); }
public static boolean isValid(String value){ for (PrvsCrdtChkRsltCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public String getSubInfo(AtrlCore AtrlCore, String xtnAtrbtNm) throws BizApplicationException { return _getAtrlSubInfoBiz().getSubInfo(xtnAtrbtNm, (AtrlImpl) AtrlCore); }
public String getSubInfo(String xtnAtrbtNm, DeptCore deptCore) throws BizApplicationException { return _getDeptSubInfoBiz().getSubInfo(xtnAtrbtNm, (DeptImpl)deptCore); }
public ActorCmphInqrySvcGetActorCntctPntTpCdListIn clone(){ try{ ActorCmphInqrySvcGetActorCntctPntTpCdListIn object= (ActorCmphInqrySvcGetActorCntctPntTpCdListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, ArrIssmdaCore arrIssmda, String txDt, Integer txSeqNbr) throws BizApplicationException { _getArrIssmdaSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (ArrIssmdaImpl) arrIssmda, txDt, txSeqNbr); }
public void doServiceAction(String arrSrvcCd,ArrangementCore arr, String arrXtnAtrbtNm, String arrXtnAtrbtVal, ArrActionRequiredValue arrActionRequiredValue) throws BizApplicationException { if(logger.isDebugEnabled()){ logger.debug("XtnAtrbtActionSampleClassImpl start {}",arrSrvcCd); } }
public AcAcctgLDfrdIO selectJournalDeferred(String instCd, String bizDt, Long lastSeq, Long fetchCnt) throws BizApplicationException { switch(DbmsVendorNmEnum.getByValue(_getSysNonstopUtil().getDbmsVendorName())) { case ORACLE: return _getAcAcctgLDfrd().selectJournalDeferredOracle(instCd, bizDt, lastSeq, fetchCnt); case MYSQL: return _getAcAcctgLDfrd().selectJournalDeferredMysql(instCd, bizDt, lastSeq, fetchCnt); default: throw new BizApplicationException("AAPCME0202", null); } }
public CustCmphInqrySvcGetCustClIdListIn clone(){ try{ CustCmphInqrySvcGetCustClIdListIn object= (CustCmphInqrySvcGetCustClIdListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if (!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){ //This product purchase is not allowed for this customer credit grade ({0},{1}) //본상품은 고객 신용등급 ({0},{1})에는 판매 불가 합니다 throw new BizApplicationException(" " , new Object[]{getListCd(),getListCd()}); //TODO ERRor } }
public CaDeptRoleTmpltTreeIn clone(){ try{ CaDeptRoleTmpltTreeIn object= (CaDeptRoleTmpltTreeIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public NoticeBsicInfoIO request(NoticeBsicInfoIO noticeBsicInfoIO, Actor targetActor) throws BizApplicationException { return request(noticeBsicInfoIO, null, targetActor); }
public Map<InsrncXtnInfoEnum, String> getMapInsrncXtnInfo() throws BizApplicationException { Map<InsrncXtnInfoEnum, String> xtnInfoHash = new HashMap<InsrncXtnInfoEnum, String>(); // 확장정보명세 Map<String, String> xtnInfoStrMap = super.getMapInsrncXtnInfoAsStrByEav(); for(Entry<String, String> entry : xtnInfoStrMap.entrySet()){ xtnInfoHash.put(InsrncXtnInfoEnum.getEnum(entry.getKey()), entry.getValue()); } // 보조명세 Map<String, String> subInfoMap = _getInsrncSubInfoBiz().getMapSubInfo(this); for(Entry<String, String> entry : subInfoMap.entrySet()){ xtnInfoHash.put(InsrncXtnInfoEnum.getEnum(entry.getKey()), entry.getValue()); } return xtnInfoHash; }
static boolean isValid(String value){ for (ArrCustRelStsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public Arrangement getArr() { return arr; }
public void validateTxProcess(List<ArrTxBsicIO> arrTxBsicIOList) throws BizApplicationException { List<StTxMIO> stTxMIOList = new ArrayList<StTxMIO>(); if (arrTxBsicIOList != null) { for (ArrTxBsicIO io : arrTxBsicIOList) { StTxMIO stTxMIO = _setStTxMIO(io); stTxMIOList.add(stTxMIO); } } if(stTxMIOList == null || stTxMIOList.isEmpty()) return; if(stTxMIOList.size() > 0){ for(StTxMIO stTxMIO : stTxMIOList) { ArrRealCore arr = _getArrMngr().getArrRealCore(stTxMIO.getArrId()); StTxMIO out = _getArrTxBiz().getArrTx(stTxMIO, arr); if(out == null) throw new BizApplicationException("AAPSTE0020", new Object[] {stTxMIO.getTxDt(), stTxMIO.getTxSeqNbr()}); // Transaction history is not registered. if(TxStsCoreEnum.NUMBERED.getValue().equals(out.getTxStsCd())) throw new BizApplicationException("AAPACE3016", new Object[] {out.getArrId()}); if (logger.isDebugEnabled()){ logger.debug("ArrTx linked transaction logging : {}", out.toString()); } } } }
public void validate(ArrReal arrReal, Map<ArrVldtnRequiredValEnum, Object> vldtnRequiredValMap) throws BizApplicationException { super.validate((ArrRealCore) arrReal, _convertValMap(vldtnRequiredValMap)); }
public CaSrvcIO registerService(CaSrvcRgstrnIn in) throws BizApplicationException{ _checkInput(in.getSrvcCd()); CaSvSrvcMIO svSrvcMIO = _setSvSrvcMIO(in); _getSvSrvcMDso().insert(svSrvcMIO); return _getService(in.getSrvcCd()); }
public CustRelArrInqrySvcGetCustRelAcctListIn clone(){ try{ CustRelArrInqrySvcGetCustRelAcctListIn object= (CustRelArrInqrySvcGetCustRelAcctListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "ForeignExchangeSell": _doForeignExchangeSellAction(arrSrvcTpCd,arrCndActionRequiredValue); break; //TODO 추후 추가 case "SellForeignExchange": break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public CaCustGradeCdSvcRgstIn clone(){ try{ CaCustGradeCdSvcRgstIn object= (CaCustGradeCdSvcRgstIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getCndVal() throws BizApplicationException { // 해당 메소드는 ({0}) 클래스의 인스턴스로 사용할 수 없습니다. 계약담당자에게 문의바랍니다. // This method cannot be used by instance of ({0}) class. throw new BizApplicationException("AAPARE0678",new Object[]{this.getClass().getName()}); }
public TxHstQrySvcInquiryStlmntMListOut clone(){ try{ TxHstQrySvcInquiryStlmntMListOut object= (TxHstQrySvcInquiryStlmntMListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut> clonedList = new java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut>(tblNm.size()); for( bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut item : tblNm ){ clonedList.add( (bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(CustRprsnCore custRprsnCore) throws BizApplicationException { return _getCustRprsnSubInfoBiz().getMapSubInfo((CustRprsnImpl) custRprsnCore); }
public void saveMapSubInfo(Map<String, String> insrncSubInfoMap, InsrncCore insrncCore, String txDt, Integer txSeqNbr) throws BizApplicationException { _getInsrncSubInfoBiz().saveMapSubInfo(insrncSubInfoMap, txDt, txSeqNbr, (InsrncImpl) insrncCore); }
public static boolean isValid(String value){ for (XtnTableEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public String getCnclCntrprtTxDt(){ return cnclCntrprtTxDt; }
public List<PdAdtlInfoOut> getAdtnlInfo(PdAdtlInfoIn in) throws BizApplicationException { List<PdAdtlInfoOut> out = new ArrayList<>(); // 상품코드, 상품부가정보유형, 적일일자를 입력하여 해당 상품에 관련된 상품부가정보를 조회함 // Enter the product code, product additional information type code, // apply date and inquiry product additional information related to the // product PdAdditionalInfoListIn additionalIn = new PdAdditionalInfoListIn(); additionalIn.setInstitutionId(pdPdM.getInstCd()); additionalIn.setPdCd(pdPdM.getPdCd()); additionalIn.setAdditionalInfoCd(in.getAdtnlInfoCd()); additionalIn.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(), _getAplyTmString(in.getAplyTm()))); List<PdAdditionalInfoOut> additionalOut = _getPdCore().getListAdditionalInfo(additionalIn); for(PdAdditionalInfoOut item : CollectionUtils.emptyIfNull(additionalOut)) { PdAdtlInfoOut temp = new PdAdtlInfoOut(); temp.setAdtnlInfoCd(item.getAdditionalInfoCd()); temp.setPdRelStsCd(item.getPdRelationStatusCd()); temp.setAdtnlInfoCntnt(item.getAdditionalInfoContent()); temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(item.getApplyStartDate())); temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(item.getApplyEndDate())); temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(item.getApplyStartDate())); temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(item.getApplyEndDate())); out.add(temp); } return out; }
private BfTestSvcOut getSaleStartDateTime(BfTestSvcIn in) throws BizApplicationException { BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); Bf bf = _getBfMngr().getBf(bfIn); String output = bf.getSaleStartDateTime(); BfTestSvcOut out = new BfTestSvcOut(); if(StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public boolean isValidationWayCodeAndRule(String vldtnWayCd, String vldtnRule) throws BizApplicationException { if (StringUtils.isEmpty(vldtnWayCd) && StringUtils.isEmpty(vldtnRule)) { return true; } CaAtrbtVldCntntChkImpl checkAtrbtVld = null; if (!StringUtils.isEmpty(vldtnWayCd)) { if (!CaAtrbtVldtnWayEnum.isValid(vldtnWayCd)) { throw new BizApplicationException("AAPCME0104", new Object[] {vldtnWayCd}); } if (StringUtils.isEmpty(vldtnRule)) { throw new BizApplicationException("AAPCME0105", new Object[] {vldtnWayCd}); } checkAtrbtVld = _setAttributeValidationWayCode(vldtnWayCd); } else { if (!StringUtils.isEmpty(vldtnRule)) { throw new BizApplicationException("AAPCME0106", new Object[] {}); } } if(checkAtrbtVld == null){ return false; } return checkAtrbtVld.checkValidationWayCodeAndRule(vldtnRule); }
public WorkflowRoleMgmtSvcIO clone(){ try{ WorkflowRoleMgmtSvcIO object= (WorkflowRoleMgmtSvcIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public AssetTxBsicInfoIO getBasicInfo() throws BizApplicationException { if(assetTxBasicCache == null) { return null; } AssetTxBsicInfoIO assetTxBsicInfoIO = new AssetTxBsicInfoIO(); DtoCoreUtils.setSubInfoIO(assetTxBasicCache, assetTxBsicInfoIO); return assetTxBsicInfoIO; }
public void saveListXtnInfo(List<ActorXtnAtrbtRgstIn> actorXtnAtrbtIOList) throws BizApplicationException { // 확장정보명세/보조명세 분류 Map<String, String> subInfoCrtnMap = _getActorSubInfoBiz().getMapSubInfoCrtn(actorXtnAtrbtIOList); // 2022.04.01 CTI / EAV 판단이 끝나 EAV용으로만 호출함 // super.saveListXtnInfo(actorXtnAtrbtIOList); super.saveListXtnInfoByEav(actorXtnAtrbtIOList); // 보조명세 생성 _getActorSubInfoBiz().saveMapSubInfo(subInfoCrtnMap, this); }
public String getSaleEndDt() { return PdUtil.parseDateToYYYYMMDD(bf.getSaleEndDt()); }
public String getApplyStartDate() { return aplyStartDt; }
public CaExtrnlInfoMgmtSvcRegisterMsgHdrInfoIn clone(){ try{ CaExtrnlInfoMgmtSvcRegisterMsgHdrInfoIn object= (CaExtrnlInfoMgmtSvcRegisterMsgHdrInfoIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value){ for (AsmStsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public List<StTxMIO> getListArrTx(StTxMIn in, ArrRealCore arr) throws BizApplicationException { switch(ArrTxKndCoreEnum.getEnum(getArrTxKnd(arr))) { case ARR_TX_INTERNAL: return _getStTxIntrnlMDso().selectListArrTx(in); case ARR_TX_TEMPRARY: return _getStTxTmpryMDso().selectListArrTx(in); case ARR_TX_NORMAL: return _getStTxMDso().selectListArrTx(in); default : throw new BizApplicationException("AAPSTE0212"); } }
public List<LmtIO> getListLimit(String instCd, String roleId, String lmtDscd, String crncyCd) throws BizApplicationException { List<CmLmtDIO> list = _getCmLmtDDso().selectList(instCd, roleId, lmtDscd, crncyCd); List<LmtIO> out = new ArrayList<LmtIO>(); if(list == null || list.isEmpty()) { return out; } for(CmLmtDIO cmLmtDIO : list) { out.add(_getLmtIO(cmLmtDIO)); } return out; }
public boolean isPhysicallyCreated() { return isPhysicallyCreated; }
public boolean checkCode(String cdNbr, String cd) throws BizApplicationException { return _checkCode(cdNbr, cd); }
public CaClTreeMgmtSvcSysIn clone(){ try{ CaClTreeMgmtSvcSysIn object= (CaClTreeMgmtSvcSysIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void validate() throws BizApplicationException { switch (isValidCndValue(getSuperListCd())) { case NoError: return; default: throw new BizApplicationException("AAPARE0158" , new Object[]{ getCndCd(), getPdCnd().getCndNm(), getArrangementCore().getPd().getPdNm(), getListCdList(), getSuperListCd()}); } }
public AptMaketPriceListIn clone(){ try{ AptMaketPriceListIn object= (AptMaketPriceListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(CustRprsnCore custRprsnCore, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { _getCustRprsnSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (CustRprsnImpl) custRprsnCore); }
public void saveSubInfo(IValueObject subInfo , StlmntCalcnSubInfoInqryIn stlmntCalcnSubInfoInqryIn) throws BizApplicationException { _getStlmntCalcnSubInfoBiz().saveSubInfo(subInfo, _setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn)); }
public CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOutList clone(){ try{ CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOutList object= (CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOutList)super.clone(); if ( this.tblList== null ) object.tblList = null; else{ java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut>(tblList.size()); for( bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut item : tblList ){ clonedList.add( (bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut)item.clone()); } object.tblList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaBizRuleInqrySvcByPdOut clone(){ try{ CaBizRuleInqrySvcByPdOut object= (CaBizRuleInqrySvcByPdOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public static String getRckngDt(CmnContextCore cmnContextCore) throws BizApplicationException { String rckngDt = cmnContextCore.getRckngDt(); if (StringCoreUtils.isEmpty(rckngDt)) { rckngDt = cmnContextCore.getTxDate(); } return rckngDt; }
public void terminateContactPoint(String actorCtcptId) throws BizApplicationException { getActor().terminateContactPoint(actorCtcptId); }
public StaffSubInfo getStaffSubInfo() throws BizApplicationException { AtStaffSIO subInfoCache = _getStaffSubInfoBiz().getSubInfoCache(this); // null check if (subInfoCache == null) { return null; } // convert to I/F VO StaffSubInfo subInfo = new StaffSubInfo(); DtoUtils.setSubInfoIO(subInfoCache, subInfo); return subInfo; }
public PdCardMIO selectCardInfo(String tntInstId, String cardId) throws BizApplicationException { // 조회 PdCardMIO out = _getPdServiceDso().selectCardInfo(tntInstId, cardId); //return return out; }
public BfCnd getCnd(String cndCd) throws BizApplicationException { BfCndIn in = new BfCndIn(); in.setCndCd(cndCd); in.setAplyDt(baseDaring); in.setAplyTm(baseTimeString); return getCnd(in); }
public int saveTransferLanguage(CaTrnsfrLngSaveListIn in) throws BizApplicationException { // UI Data List<CaTrnsfrLngSaveIn> uiInputData = in.getTrnsfrLngList(); // Check the input data size if(uiInputData.size() == 0) { throw new BizApplicationException("AAPATE0067", null); } if(logger.isDebugEnabled()){ logger.debug("saveTransferLanguage TrnsfrLngSaveListIn =>{}",in); } // DB Data String trnsfrKnd = in.getTrnsfrLngList().get(0).getTrnsfrKndCd(); String browseUnitCd = in.getTrnsfrLngList().get(0).getQryUnitCd(); List<CaCmMltLngTrnsltnDIO> dbOutputData; CaCmMltLngTrnsltnDIO multiLngDbIn = new CaCmMltLngTrnsltnDIO(); multiLngDbIn.setTrnsfrKndCd(trnsfrKnd); multiLngDbIn.setTrnsfrOriginKeyVal(browseUnitCd); dbOutputData = _getCmMltLngTrnsltnDDso().selectList(multiLngDbIn); // Check the input validation _checkInputValidation(trnsfrKnd, browseUnitCd, in); if(logger.isDebugEnabled()){ logger.debug("saveTransferLanguage dbOutputData =>{}",dbOutputData); } // Compare UI, Db Data, and make the temp data // UI -> DB Compare // logger.debug("#@# ======================= ======================= UI -> DB"); List<CaCmMltLngTrnsltnDIO> tempData = new ArrayList<CaCmMltLngTrnsltnDIO>(); if(dbOutputData.size() == 0) { // No existing data(DB) for(int i = 0; i < uiInputData.size(); i++) { CaTrnsfrLngSaveIn uiInput = uiInputData.get(i); // insert CaCmMltLngTrnsltnDIO temp = new CaCmMltLngTrnsltnDIO(); _getCmnContextCore().setHeaderColumn(temp); temp.setDscd(CCM01.INSERT_STATE); temp.setTrnsfrKndCd(uiInput.getTrnsfrKndCd()); temp.setTrnsfrOriginKeyVal(uiInput.getTrnsfrOriginKeyVal()); temp.setLngCd(uiInput.getLngCd()); temp.setTrnsfrRsltVal(uiInput.getTrnsfrRsltVal()); tempData.add(temp); } } else { for(int i = 0; i < uiInputData.size(); i++) { int uiUpdateCount = 0; int uiInsertCount = 0; CaTrnsfrLngSaveIn uiInput = uiInputData.get(i); for(int j = 0; j < dbOutputData.size(); j++) { CaCmMltLngTrnsltnDIO dbOutput = dbOutputData.get(j); if(uiInput.getTrnsfrOriginKeyVal().equals(dbOutput.getTrnsfrOriginKeyVal()) && uiInput.getLngCd().equals(dbOutput.getLngCd())) { ++ uiUpdateCount; } else { ++ uiInsertCount; } } if(uiUpdateCount > 0) { // update CaCmMltLngTrnsltnDIO temp = new CaCmMltLngTrnsltnDIO(); _getCmnContextCore().setHeaderColumn(temp); temp.setDscd(CCM01.UPDATE_STATE); temp.setTrnsfrKndCd(uiInput.getTrnsfrKndCd()); temp.setTrnsfrOriginKeyVal(uiInput.getTrnsfrOriginKeyVal()); temp.setLngCd(uiInput.getLngCd()); temp.setTrnsfrRsltVal(uiInput.getTrnsfrRsltVal()); tempData.add(temp); } else if(uiInsertCount > 0) { // insert CaCmMltLngTrnsltnDIO temp = new CaCmMltLngTrnsltnDIO(); _getCmnContextCore().setHeaderColumn(temp); temp.setDscd(CCM01.INSERT_STATE); temp.setTrnsfrKndCd(uiInput.getTrnsfrKndCd()); temp.setTrnsfrOriginKeyVal(uiInput.getTrnsfrOriginKeyVal()); temp.setLngCd(uiInput.getLngCd()); temp.setTrnsfrRsltVal(uiInput.getTrnsfrRsltVal()); tempData.add(temp); } } } // DB -> UI Compare // logger.debug("#@# ======================= ======================= DB -> UI"); HashMap<String, String> useLanguageDbHashMap = new HashMap<String, String>(); // 2018.06.07 keewoong.hong 변경 요청이 들어오지 않은 언어들에 대한 삭제여부를 판별하기 위해 현재 사용중인 언어의 값을 저장해 놓는다. for(int i = 0; i < dbOutputData.size(); i++) { CaCmMltLngTrnsltnDIO dbOutput = dbOutputData.get(i); if(_getCmnContextCore().getLanguageCode().equals(dbOutput.getLngCd())) { useLanguageDbHashMap.put(dbOutput.getTrnsfrOriginKeyVal(), dbOutput.getTrnsfrRsltVal()); } } // 2018.06.07 keewoong.hong DB에는 존재하나 UI에서 변경요청이 되지 않은 항목에 대해서도 일괄 변경 작업을 수행한다. for(int i = 0; i < dbOutputData.size(); i++) { int dbDataDeleteCount = 0; CaCmMltLngTrnsltnDIO dbOutput = dbOutputData.get(i); for(int j = 0; j < uiInputData.size(); j++) { CaTrnsfrLngSaveIn uiInput = uiInputData.get(j); // DB에는 존재하나 UI에서 명시적으로 수정요청을 하지 않은 항목들을 일괄 삭제대상으로 포함한다. if(dbOutput.getTrnsfrOriginKeyVal().equals(uiInput.getTrnsfrOriginKeyVal()) && dbOutput.getLngCd().equals(uiInput.getLngCd())) { ++ dbDataDeleteCount; } } if(dbDataDeleteCount == 0) { // delete // 영문과 현재 사용중인 언어는 명시적인 요청에 의해서만 수정된다는 가정하에 일괄 작업 대상에는 포함시키지 않는다. if(!CCM01.LNG_ENG.equals(dbOutput.getLngCd()) && !_getCmnContextCore().getLanguageCode().equals(dbOutput.getLngCd())) { // If Chinese value exist only in the DB int useOtherLanguageCount = 0; String useLanguageTrnsfrOriginKey = ""; String useLanguageTrnsfrRsltVal = ""; if(useLanguageDbHashMap.containsKey(dbOutput.getTrnsfrOriginKeyVal())) { useLanguageTrnsfrOriginKey = dbOutput.getTrnsfrOriginKeyVal(); useLanguageTrnsfrRsltVal = useLanguageDbHashMap.get(useLanguageTrnsfrOriginKey); } for(int j = 0; j < uiInputData.size(); j++) { CaTrnsfrLngSaveIn uiInput = uiInputData.get(j); // Check DB use language value <-> UI use language value, if data are not same delete if(!StringUtils.isEmpty(useLanguageTrnsfrOriginKey) && !StringUtils.isEmpty(useLanguageTrnsfrRsltVal) && !StringUtils.isEmpty(uiInput.getTrnsfrOriginKeyVal()) && !StringUtils.isEmpty(uiInput.getTrnsfrRsltVal()) && !StringUtils.isEmpty(uiInput.getLngCd()) && uiInput.getTrnsfrOriginKeyVal().equals(useLanguageTrnsfrOriginKey) && uiInput.getTrnsfrRsltVal().equals(useLanguageTrnsfrRsltVal) && _getCmnContextCore().getLanguageCode().equals(uiInput.getLngCd())) { ++ useOtherLanguageCount; } } if(useOtherLanguageCount == 0) { // delete CaCmMltLngTrnsltnDIO temp = new CaCmMltLngTrnsltnDIO(); _getCmnContextCore().setHeaderColumn(temp); temp.setDscd(CCM01.DELETE_STATE); temp.setTrnsfrKndCd(dbOutput.getTrnsfrKndCd()); temp.setTrnsfrOriginKeyVal(dbOutput.getTrnsfrOriginKeyVal()); temp.setLngCd(dbOutput.getLngCd()); temp.setTrnsfrRsltVal(dbOutput.getTrnsfrRsltVal()); tempData.add(temp); } } } } if(!useLanguageDbHashMap.isEmpty()) { useLanguageDbHashMap.clear(); } String paramVal = _getInstParmProvider().getInstParm(CaInstParamEnum.SITE_LABORATORY_DISTINCTION_CODE.getValue()); if(logger.isDebugEnabled()){ logger.debug("saveTransferLanguage tempData => {}",tempData); } // Insert to the DB. for(int i = 0; i < tempData.size(); i++) { CaCmMltLngTrnsltnDIO temp = tempData.get(i); temp.setLastChngId(_getCmnContextCore().getStaffId()); if(!StringUtils.isEmpty(paramVal)) { temp.setSiteLbrtryDscd(paramVal); } else { temp.setSiteLbrtryDscd("Z"); } if(temp.getDscd().equals(CCM01.INSERT_STATE)) { CaCmMltLngTrnsltnDIO cmMltLngTrnsltnDIO = _getCmMltLngTrnsltnDDso().selectAllStatus(temp); temp.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue()); if(cmMltLngTrnsltnDIO != null && !StringUtils.isEmpty(cmMltLngTrnsltnDIO.getTrnsfrKndCd())){ _getCmMltLngTrnsltnDDso().update(temp); } else { _getCmMltLngTrnsltnDDso().insert(temp); } } else if(temp.getDscd().equals(CCM01.UPDATE_STATE)) { // update temp.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue()); _getCmMltLngTrnsltnDDso().update(temp); } else if(temp.getDscd().equals(CCM01.DELETE_STATE)) { // delete _getCmnContextCore().setHeaderColumn(temp); temp.setTrnsfrKndCd(temp.getTrnsfrKndCd()); temp.setTrnsfrOriginKeyVal(temp.getTrnsfrOriginKeyVal()); temp.setLngCd(temp.getLngCd()); temp.setActvStsCd(CaActiveStatusEnum.INACTIVITY.getValue()); _getCmMltLngTrnsltnDDso().update(temp); } } return 0; }
public String transferToJsonString(IOmmObject dto) throws BizApplicationException { if(dto == null) return null; String jsonString = null; try { ObjectMapper omapper = new ObjectMapper(); StringWriter stringWriter = new StringWriter(); omapper.writeValue(stringWriter, dto); jsonString = stringWriter.toString(); } catch(JsonParseException jpe) { throw new BizApplicationException("AAPCME0000", new Object[]{ "@trnsfrm", jpe }); } catch(JsonMappingException jme) { throw new BizApplicationException("AAPCME0000", new Object[]{ "@trnsfrm", jme }); } catch(IOException ioe) { throw new BizApplicationException("AAPCME0000", new Object[]{ "@trnsfrm", ioe }); } return jsonString; }
public Map<String, String> getMapXtnInfo() throws BizApplicationException { // 액터 확장정보 및 보조명세 조회 Map<String, String> xtnInfoMap = getActor().getMapXtnInfo(); // 고객 확장정보 조회 xtnInfoMap.putAll(super.getMapXtnInfoByEav()); // 고객 보조명세 조회 xtnInfoMap.putAll(_getPrtnrSubInfoBiz().getMapSubInfo(this)); return xtnInfoMap; }
public CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrListOut clone(){ try{ CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrListOut object= (CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrListOut)super.clone(); if ( this.arrExtrnlIdNbrTpList== null ) object.arrExtrnlIdNbrTpList = null; else{ java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrDtl> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrDtl>(arrExtrnlIdNbrTpList.size()); for( bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrDtl item : arrExtrnlIdNbrTpList ){ clonedList.add( (bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrDtl)item.clone()); } object.arrExtrnlIdNbrTpList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public java.lang.String getStaffId(){ return staffId; }
public CustCmphInqrySvcGetCustGradeOvrvwOut clone(){ try{ CustCmphInqrySvcGetCustGradeOvrvwOut object= (CustCmphInqrySvcGetCustGradeOvrvwOut)super.clone(); if ( this.gradeList== null ) object.gradeList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustGradeOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustGradeOut>(gradeList.size()); for( bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustGradeOut item : gradeList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustGradeOut)item.clone()); } object.gradeList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getAssetThingXtnInfo(Integer assetThingSeqNbr, AssetThingXtnInfoEnum assetThingXtnInfoEnum) throws BizApplicationException { // 속성명 기준으로 확장정보관리방법 판단 // 1. 확장정보명세 if(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AS_ASSET_THING_D.getValue(), assetThingXtnInfoEnum.getValue())) { return super.getAssetThingXtnInfoByEav(assetThingSeqNbr, assetThingXtnInfoEnum.getValue()); } // 2. 보조명세 else { return _getAssetThingSubInfoBiz().getSubInfo(assetThingXtnInfoEnum.getValue(), this, assetThingSeqNbr); } }
public PrtnrshpArrAtmtcCreationRuleIn clone(){ try{ PrtnrshpArrAtmtcCreationRuleIn object= (PrtnrshpArrAtmtcCreationRuleIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public LnLmtRdctnAmtSvcAcctNbrIn clone(){ try{ LnLmtRdctnAmtSvcAcctNbrIn object= (LnLmtRdctnAmtSvcAcctNbrIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaCmnCdCheckOut getCode(CaCmnCdCheckIn in) throws BizApplicationException { // Validate the input _checkQueryInputArgument(in); CaCmnCdCheckOut out = new CaCmnCdCheckOut(); // Get the code master information CaCdNbrInfoIO cdMstOut = _getCodeMasterInformation(in.getCdNbr()); // Get the code detail information List<CaCdDtlIO> cdDtlOutList = _getCdDtl().getCodeDetail(cdMstOut); // Find the output value same as an input value for(int i = 0; i < cdDtlOutList.size(); i++) { CaCdDtlIO cdDtlOut = cdDtlOutList.get(i); if(in.getCd().equals(cdDtlOut.getCd())) { out.setCdNbr(cdDtlOut.getCdNbr()); out.setCd(cdDtlOut.getCd()); if(!CCM01.EXTRNL_CD.equals(cdMstOut.getCdNbrTpCd())) { out.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, cdDtlOut.getCdNbr().concat(cdDtlOut.getCd()))); } else { out.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, _getCaCmnContext().getInstCode().concat(cdDtlOut.getCdNbr().concat(cdDtlOut.getCd())))); } } } return out; }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { _doTermExtensionAction(arrSrvcTpCd, arrCndActionRequiredValue); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AprslCore aprslCore) throws BizApplicationException { _getAprslSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AprslImpl) aprslCore); }
public PdCalculationCrRuleCndDtlInfoOut clone(){ try{ PdCalculationCrRuleCndDtlInfoOut object= (PdCalculationCrRuleCndDtlInfoOut)super.clone(); if ( this.cmpsCndList== null ) object.cmpsCndList = null; else{ java.util.List<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpsCndOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpsCndOut>(cmpsCndList.size()); for( bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpsCndOut item : cmpsCndList ){ clonedList.add( (bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpsCndOut)item.clone()); } object.cmpsCndList = clonedList; } if ( this.cmpxCndValList== null ) object.cmpxCndValList = null; else{ java.util.List<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpxCndValOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpxCndValOut>(cmpxCndValList.size()); for( bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpxCndValOut item : cmpxCndValList ){ clonedList.add( (bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpxCndValOut)item.clone()); } object.cmpxCndValList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getInstCd() { return pdPdM.getInstCd(); }
public PrtnrXtnAtrbtSvcOut clone(){ try{ PrtnrXtnAtrbtSvcOut object= (PrtnrXtnAtrbtSvcOut)super.clone(); if ( this.xtnAtrbtList== null ) object.xtnAtrbtList = null; else{ java.util.List<bankware.corebanking.partner.query.service.dto.PrtnrXtnAtrbtSvcListOut> clonedList = new java.util.ArrayList<bankware.corebanking.partner.query.service.dto.PrtnrXtnAtrbtSvcListOut>(xtnAtrbtList.size()); for( bankware.corebanking.partner.query.service.dto.PrtnrXtnAtrbtSvcListOut item : xtnAtrbtList ){ clonedList.add( (bankware.corebanking.partner.query.service.dto.PrtnrXtnAtrbtSvcListOut)item.clone()); } object.xtnAtrbtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public java.util.List<java.lang.String> getList(){ return list; }
public StaffSelfAuthSvcPrcsIn clone(){ try{ StaffSelfAuthSvcPrcsIn object= (StaffSelfAuthSvcPrcsIn)super.clone(); if ( this.xtnAtrbtList== null ) object.xtnAtrbtList = null; else{ java.util.List<bankware.corebanking.staff.security.service.dto.StaffSelfAuthSvcXtnAtrbtIO> clonedList = new java.util.ArrayList<bankware.corebanking.staff.security.service.dto.StaffSelfAuthSvcXtnAtrbtIO>(xtnAtrbtList.size()); for( bankware.corebanking.staff.security.service.dto.StaffSelfAuthSvcXtnAtrbtIO item : xtnAtrbtList ){ clonedList.add( (bankware.corebanking.staff.security.service.dto.StaffSelfAuthSvcXtnAtrbtIO)item.clone()); } object.xtnAtrbtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<TblXtnAtrbtDtlIO> getListAttributeExistData(String atrbtNm) { // TODO Auto-generated method stub List<TblXtnAtrbtDtlIO> out = new ArrayList<TblXtnAtrbtDtlIO>(); TblXtnAtrbtDtlIO outTblAtrbt= null; List<CmTblAtrbtMIO> cmTblAtrbtMIOList = _getCmTblAtrbtMDso().selectListByName(atrbtNm); for (CmTblAtrbtMIO outDao : cmTblAtrbtMIOList){ outTblAtrbt = new TblXtnAtrbtDtlIO(); outTblAtrbt.setTblNm(outDao.getTblNm()); out.add(outTblAtrbt); } List<CmTblXtnAtrDIO> cmTblXtnAtrDIOList = _getCmTblXtnAtrDDso().selectListByAtrbtNm(atrbtNm); for (CmTblXtnAtrDIO outDao : cmTblXtnAtrDIOList){ outTblAtrbt = new TblXtnAtrbtDtlIO(); outTblAtrbt.setTblNm(outDao.getTblNm()); out.add(outTblAtrbt); } return out; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AprslCore aprslCoreImpl, Integer prfClaimSeqNbr) throws BizApplicationException { _getAprslPrfClaimSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AprslImpl) aprslCoreImpl, prfClaimSeqNbr); }
public ArArrSrvcBlckngRgstPIO select(ArArrSrvcBlckngRgstPIO arArrSrvcBlckngRgstPIO) { return _getArArrSrvcBlckngRgstP().select(arArrSrvcBlckngRgstPIO); }
public String getSubInfo(String atrbtNm, AprslImpl aprslImpl, Integer prfClaimSeqNbr) throws BizApplicationException { // 1. 감정 객체에 저장된 보조명세 캐시 조회 AsAprslPrfClaimSIO aprslPrfClaimSubInfo = getSubInfoCache(aprslImpl, prfClaimSeqNbr); // 2. 감정에 저장된 보조원장 캐시가 null인 경우, null 리턴 if (aprslPrfClaimSubInfo == null) { return null; } // 3. 감정에 저장된 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = aprslPrfClaimSubInfo.get(atrbtNm); // 속성값이 null인경우 null리턴 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, ScrtyIntCore scrtyInt, String txDt, Integer txSeqNbr) throws BizApplicationException { _getScrtyIntSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, (ScrtyIntImpl) scrtyInt); }
public int getSeqNbr(){ return seqNbr; }
public CaScrnMgmtSvcSaveScrnInfoInList clone(){ try{ CaScrnMgmtSvcSaveScrnInfoInList object= (CaScrnMgmtSvcSaveScrnInfoInList)super.clone(); if ( this.inList== null ) object.inList = null; else{ java.util.List<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcSaveScrnInfoIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcSaveScrnInfoIn>(inList.size()); for( bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcSaveScrnInfoIn item : inList ){ clonedList.add( (bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcSaveScrnInfoIn)item.clone()); } object.inList = clonedList; } if ( this.removeList== null ) object.removeList = null; else{ java.util.List<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn>(removeList.size()); for( bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn item : removeList ){ clonedList.add( (bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn)item.clone()); } object.removeList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrBalAcmltAmtOut getAccumulatedAmount(String startDt, String endDt, List<BigDecimal> amtList, boolean isMinusSkip, boolean isPlusSkip) throws BizApplicationException { boolean parttnYn = false; /* * Checking partition */ if(amtList != null && !amtList.isEmpty() ) parttnYn = true; /* * Basic Input Data Validation */ if (StringCoreUtils.isEmpty(startDt)) { throw new BizApplicationException("AAPCME0006", new Object[] {"@startDt"}); } if (StringCoreUtils.isEmpty(endDt)) { throw new BizApplicationException("AAPCME0006", new Object[] {"@endDt"}); } if (startDt.compareTo(endDt) > 0) { throw new BizApplicationException("AAPSTE0180", null); // error (start date > end date) } /* * Check for avoid that (+) value and (-) value, both are exist. */ int plusCnt = 0; int mnsCnt = 0; if(parttnYn == true) { for(int i = 0; i < amtList.size() -1; i++) { if(amtList.get(i).compareTo(amtList.get(i+1)) >= 0) throw new BizApplicationException("AAPSTE0181", null); // disorder or duplication if(amtList.get(i).compareTo(BigDecimal.ZERO) > 0) { plusCnt++; }else if(amtList.get(i).compareTo(BigDecimal.ZERO) < 0) { mnsCnt++; } } if(amtList.get(amtList.size() -1).compareTo(BigDecimal.ZERO) > 0) { plusCnt++; }else if(amtList.get(amtList.size() -1).compareTo(BigDecimal.ZERO) < 0) { mnsCnt++; } } if(plusCnt > 0 && mnsCnt > 0) throw new BizApplicationException("AAPSTE0182", null); ArrBalAcmltAmtOut out = new ArrBalAcmltAmtOut(); // Initialization out.setAcmltdAmt(BigDecimal.ZERO); out.setLowLmtAcmltdAmt(BigDecimal.ZERO); out.setOverUpLmtAcmltdAmt(BigDecimal.ZERO); if(parttnYn == true) { for(int i = 0; i < amtList.size() -1; i++) { out.getAmtList().add(BigDecimal.ZERO); } } /* * Calculate accumulated amount */ if(balDt.compareTo(startDt) <= 0) { // just use MAX Data (balance wasn't changed in term) if(sctnStartDt.compareTo(startDt) <= 0 && endDt.compareTo(sctnEndDt) < 0) { _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, startDt, endDt, balDtBal, amtList, out); } }else { // balance was changed in term (daily balance's history is exist) StArrDailyBalHIO inParam = new StArrDailyBalHIO(); inParam.setInstCd(arr.getInstCd()); inParam.setArrId(arr.getArrId()); inParam.setAmtTpCd(this.amtTpDtlIO.getAmtTpCd()); inParam.setBalTpCd(this.balTpDtlIO.getBalTpCd()); inParam.setCrncyCd(crncyCd); // data in term List<StArrDailyBalHIO> outParams = _getStArrDailyBalHDso().selectList(inParam, startDt, endDt); if(startDt.compareTo((outParams != null && !outParams.isEmpty()) ? outParams.get(0).getBalDt() : balDt) == 0) { // do nothing }else { inParam.setBalDt(startDt); // Condition for finding data before this term // data before this term StArrDailyBalHIO bfParam = _getStArrDailyBalHDso().selectPreviousBalDt(inParam); if(bfParam != null) { _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, startDt, (outParams != null && !outParams.isEmpty()) ? outParams.get(0).getBalDt() : (endDt.compareTo(balDt) < 0 ? endDt : balDt), bfParam.getDayClsgBal(), amtList, out); } } if(outParams != null && !outParams.isEmpty()) { while(outParams.size() > 1) { _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, outParams.get(0).getBalDt(), outParams.get(1).getBalDt(), outParams.get(0).getDayClsgBal(), amtList, out); outParams.remove(0); } try { // must be : Daily Balance's Last Data < Last Balance Data // daily balance's last date + 1 = end date of inquiry term >> don't need last balance master DB // End date of inquiry period <= date in last balance table, then don't need master Information if (!outParams.get(0).getBalDt().equals(endDt)) { if(endDt.compareTo(balDt) <= 0) { _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, outParams.get(0).getBalDt(), endDt, outParams.get(0).getDayClsgBal(), amtList, out); // Daily Balance Last Date < Last Balance Date <= end date of inquiry term }else { _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, outParams.get(0).getBalDt(), balDt, outParams.get(0).getDayClsgBal(), amtList, out); _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, balDt, endDt, balDtBal, amtList, out); } } }catch(Exception e) { logger.info("ERROR : {}", e); throw e; } } else { if (balDt.compareTo(endDt) < 0) _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, balDt, endDt, balDtBal, amtList, out); } } if (logger.isDebugEnabled()){ logger.debug("getAccumulatedAmount is called. start date : {}, end date : {}",startDt,endDt ); logger.debug("getAccumulatedAmount is called. arrBal : {} ", this.toString()); logger.debug("getAccumulatedAmount is called. out : {} ", out.getFieldValues()); } return out; }
public CaRoleMgmtSvcGetRoleClassificationRelationListOut clone(){ try{ CaRoleMgmtSvcGetRoleClassificationRelationListOut object= (CaRoleMgmtSvcGetRoleClassificationRelationListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleClassificationRelationOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleClassificationRelationOut>(tblNm.size()); for( bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleClassificationRelationOut item : tblNm ){ clonedList.add( (bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleClassificationRelationOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<BfCustomerRelationIO> getListBfCustRelation(BfCustomerRelationIO in) throws BizApplicationException { BfCustomerRelationListIn apiIn = new BfCustomerRelationListIn(); apiIn.setInstitutionId(bf.getInstCd()); apiIn.setBfCd(getBfCd()); apiIn.setBfCustRelationCd(in.getBnftCustRelCd()); apiIn.setCustId(in.getCustId()); apiIn.setBaseDate( PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyStartDt(), _getAplyTmString(in.getAplyStartTm()))); List<BfCustomerRelationOut> apiOut = _bfApi().getListBfCustomerRelation(apiIn); if(CollectionUtils.isEmpty(apiOut)) { return Collections.emptyList(); } List<BfCustomerRelationIO> out = new ArrayList<>(); for(BfCustomerRelationOut item : apiOut) { BfCustomerRelationIO temp = new BfCustomerRelationIO(); temp.setTntInstId(item.getInstitutionId()); temp.setPdInfoDscd(item.getPdInfoDscd()); temp.setBnftCd(item.getBfCd()); temp.setBnftNm(item.getBfName()); temp.setBnftCustRelCd(item.getBfCustRelationCd()); temp.setCustId(item.getCustId()); temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(item.getApplyStartDate())); temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(item.getApplyStartDate())); temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(item.getApplyEndDate())); temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(item.getApplyEndDate())); temp.setSaleStartDt(PdUtil.parseDateToYYYYMMDD(item.getSaleStartDate())); temp.setSaleStartTm(PdUtil.parseDateToHHMMSS(item.getSaleStartDate())); temp.setSaleEndDt(PdUtil.parseDateToYYYYMMDD(item.getSaleEndDate())); temp.setSaleEndTm(PdUtil.parseDateToHHMMSS(item.getSaleEndDate())); temp.setTotCouponCnt(item.getTotalCouponCnt()); temp.setIssueCouponCnt(item.getIssueCouponCnt()); temp.setUsedCouponCnt(item.getUsedCouponCnt()); temp.setPgNbr(item.getPageNum()); temp.setPgCnt(item.getPageCnt()); temp.setPdTmpltCdList(item.getPdTemplateCdList()); out.add(temp); } return out; }
public StndngOrderAplctnHstInqrySvcOut clone(){ try{ StndngOrderAplctnHstInqrySvcOut object= (StndngOrderAplctnHstInqrySvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void close() throws ItemStreamException { if (logger.isDebugEnabled()) logger.debug("DeptAplyReader close"); DasUtils.disconnectDasExecutor(iterator); }
public void saveAssetThingXtnInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr, AssetCoreImpl assetImpl, Integer assetThingSeqNbr, boolean isEavOnly) throws BizApplicationException { _checkInput(xtnAtrbtNm, txDt, txSeqNbr); // 1. Site Base에서 호출된 경우, 확장정보명세만 저장 if(isEavOnly) { _saveAssetThingXtnInfoByEav(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, assetImpl, assetThingSeqNbr); return; } // 2. 속성명 기준으로 확장방법 판단 // 2-1. 확장정보명세 if (_getTblXtnAtrbtCore().isExtendWayEav(XtnTableEnum.AS_ASSET_THING_D.getValue(), xtnAtrbtNm)) { _saveAssetThingXtnInfoByEav(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, assetImpl, assetThingSeqNbr); // 2-2. EAV가 아닌 경우 보조명세로 저장 } else { _getAssetThingXtnInfoCustom().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, assetImpl, assetThingSeqNbr,txDt, txSeqNbr); } }
public Integer getListDataCntForConsistency() throws BizApplicationException { return _getDstbCnstncyCmRoleMDso().selectListCntForConsistency(); }
public CaArrRelRuleMgmtTestSvcIn clone(){ try{ CaArrRelRuleMgmtTestSvcIn object= (CaArrRelRuleMgmtTestSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaIpctClInfoIn clone(){ try{ CaIpctClInfoIn object= (CaIpctClInfoIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 기존 보조명세 캐시 조회결과에 따라 insert/update 판단 ArArrSrvcBlckngSIO subInfoCache = _getSubInfoCache(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = new ArArrSrvcBlckngSIO(); subInfoCache.setArrId(arrRealImpl.getArrId()); subInfoCache.setArrSrvcBlckngSeqNbr(arrSrvcBlckngSeqNbr); subInfoCache.setSeqNbr(seqNbr); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveArArrSrvcBlckngSubH(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // insert _getArArrSrvcBlckngSDso().insert(subInfoCache); // save cache _saveSubInfoCache(subInfoCache, arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache)) { return; } // 변경전 이력 저장 _saveArArrSrvcBlckngSubH((ArrRealImpl) arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // update _getArArrSrvcBlckngSDso().update(subInfoCache); } }
public void saveMapSubInfo(Map<String, String> arrXtnInfoMap, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, String txDt, Integer txSeqNbr, ArrRealCore arrRealCore) throws BizApplicationException { _getArrSrvcBlckngSubInfoBiz().saveMapSubInfo(arrXtnInfoMap, arrSrvcBlckngSeqNbr, seqNbr, txDt, txSeqNbr, (ArrRealImpl)arrRealCore); }
public CustCheckPwdOut login(CustRprsnImpl custRprsnImpl, AtCustRprsnLoinInfoDIO custRprsnLoinInfoIO, String pswd, String loinTpCd) throws BizApplicationException, ParseException { // 기관파라미터에 정의된 로그인비밀번호오류허용횟수 조회 String pswdErrAllwnCntInstParm = _getInstParmProvider().getInstParm(InstParamEnum.INST_PARAM_LOIN_PSWD_ALLWNC_CNT.getValue()); // password error allowance count if(StringUtils.isEmpty(pswdErrAllwnCntInstParm)) { throw new BizApplicationException("AAPCME0184", new Object[] {"@loinPswdErrAllwncCnt"}); } int pswdErrorAllwncCnt = Integer.parseInt(pswdErrAllwnCntInstParm); CustCheckPwdOut custCheckPwdOut = new CustCheckPwdOut(); AtCustRprsnLoinHIO atCustRprsnLoinHIO = new AtCustRprsnLoinHIO(); // Customer login history IO // get password error count excess yes/no Integer pswdErrCnt = custRprsnLoinInfoIO.getPswdErrCnt(); String pswdErrCntExcsYn = custRprsnLoinInfoIO.getPswdErrCntExcsYn(); String pswdLockExprtnDtm = custRprsnLoinInfoIO.getPswdLockExprtnDtm(); // 비밀번호 오류 관련 정보 변경 여부 판단 boolean isChanged = false; // 2020.07.09 비밀번호일치여부 추가 // 비밀번호가 잠금상태인 경우 로그인을 시도했을 때 비밀번호 일치여부에 따라 에러메세지를 구분하기 위함 if (pswd.equals(custRprsnLoinInfoIO.getEncrptnPswd())) { custCheckPwdOut.setPswdMatchYn(CCM01.YES); } // If password error count is large then password error allowance count // 0. 패스워드가 잠금상태인 경우 if (CCM01.YES.equals(pswdErrCntExcsYn)) { long rsdlTm = TimeCalculator.calculateResidualLockTime(pswdLockExprtnDtm); if (rsdlTm > 0) { custCheckPwdOut.setPswdErrCnt(pswdErrCnt); custCheckPwdOut.setPswdLockTmCd(TimeCalculator.setTimeFormat(rsdlTm)); custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt); custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_SCRTY_LOCK.getValue()); return custCheckPwdOut; } } // 1. 패스워드 정보가 없는 경우 if (custRprsnLoinInfoIO.getEncrptnPswd() == null) { custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue()); // set custLoinHstIO atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO); atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue()); // 2. 패스워드 정보가 존재하는 경우 } else { // 2-1. 패스워드가 일치하여 로그인에 성공하는 경우 if (pswd.equals(custRprsnLoinInfoIO.getEncrptnPswd())) { custCheckPwdOut.setPswdMatchYn(CCM01.YES); // Set password error count allowance excess true or not = "N" if(!CCM01.NO.equals(pswdErrCntExcsYn)) { isChanged = true; pswdErrCntExcsYn = CCM01.NO; } // clear password lock time if(!StringUtils.isEmpty(pswdLockExprtnDtm)) { isChanged = true; pswdLockExprtnDtm = ""; } // clear password error count if(pswdErrCnt != CCM01.ZERO) { isChanged = true; pswdErrCnt = CCM01.ZERO; } // check update cycle - if update password is necessary if (_isOutOfDate(custRprsnLoinInfoIO)) { custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.SUCCESS_OUT_OF_DATE.getValue()); // set custLoinHstIO atCustRprsnLoinHIO.setLoinRsltYn(CCM01.YES); atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.SUCCESS_OUT_OF_DATE.getValue()); } else { custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.SUCCESS.getValue()); // set custLoinHstIO atCustRprsnLoinHIO.setLoinRsltYn(CCM01.YES); atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.SUCCESS.getValue()); } // 2-2. 패스워드 오류로 로그인에 실패하는 경우 } else { isChanged = true; if (pswdErrCnt == null || pswdErrCnt == CCM01.ZERO) { pswdErrCnt = 1; } else { pswdErrCnt++; } if (pswdErrCnt > pswdErrorAllwncCnt) { String pswdLockTmTrmCntInstParm = _getInstParmProvider().getInstParm(InstParamEnum.INST_PARAM_LOIN_PSWD_LOCK_TIME.getValue()); if(StringUtils.isEmpty(pswdLockTmTrmCntInstParm)) { throw new BizApplicationException("AAPCME0184", new Object[] {"@loinPswdLockTmCd"}); } // Set password error count allowance excess true or not = "Y" pswdErrCntExcsYn = CCM01.YES; // Set password lock expired time pswdLockExprtnDtm = TimeCalculator.calculateLockExpirationDateTime(pswdLockTmTrmCntInstParm); // set output parameter custCheckPwdOut.setPswdLockTmCd(TimeCalculator.setTimeFormat(pswdLockTmTrmCntInstParm)); custCheckPwdOut.setPswdErrCnt(pswdErrCnt); custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt); custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue()); // set custLoinHstIO atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO); atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue()); } else { // set output parameter custCheckPwdOut.setPswdErrCnt(pswdErrCnt); custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt); custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue()); // set custLoinHstIO atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO); atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue()); } } } // if the information about password errors changes, update DB if(isChanged) { custRprsnLoinInfoIO.setPswdErrCnt(pswdErrCnt); custRprsnLoinInfoIO.setPswdErrCntExcsYn(pswdErrCntExcsYn); custRprsnLoinInfoIO.setPswdLockExprtnDtm(pswdLockExprtnDtm); _getAtCustRprsnLoinInfoDDso().update(custRprsnLoinInfoIO); } // Insert custRprsn Last Login history information atCustRprsnLoinHIO.setLoinIdNbr(custRprsnLoinInfoIO.getLoinIdNbr()); atCustRprsnLoinHIO.setLoinTpCd(loinTpCd); atCustRprsnLoinHIO.setLoinSeqNbr(custRprsnLoinInfoIO.getLoinSeqNbr()); atCustRprsnLoinHIO.setFnlLoinChnlDscd(_getCmnContext().getChannelDscd()); _getCustRprsnLoinHstBiz().register(custRprsnImpl, atCustRprsnLoinHIO); return custCheckPwdOut; }
public List<AsmCrdtChkRsltIO> getListCrdtChkRslt(String asmId)throws BizApplicationException { return getListCrdtChkRslt(); }
public boolean checkCode(CdNbrInfoIO in, String cd) throws BizApplicationException { CdD cdDImpl = _getCdDImpl(in); return cdDImpl.checkCode(in, cd); }
public RqrdDocsRgstSvcGetDocsIn clone(){ try{ RqrdDocsRgstSvcGetDocsIn object= (RqrdDocsRgstSvcGetDocsIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isMysql() throws BizApplicationException { DbmsVendorNmEnum vender = DbmsVendorNmEnum.getByValue(getDbmsVendorName()); if (vender == DbmsVendorNmEnum.MYSQL) return true; else return false; }
public ActorActorRelSvcGetListOut clone(){ try{ ActorActorRelSvcGetListOut object= (ActorActorRelSvcGetListOut)super.clone(); if ( this.custRelList== null ) object.custRelList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.ActorActorRelSvcGetOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.ActorActorRelSvcGetOut>(custRelList.size()); for( bankware.corebanking.customer.change.service.dto.ActorActorRelSvcGetOut item : custRelList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.ActorActorRelSvcGetOut)item.clone()); } object.custRelList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public LbltyStsRgstSvcGetIn clone(){ try{ LbltyStsRgstSvcGetIn object= (LbltyStsRgstSvcGetIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void clearComAreaMemory() throws BizApplicationException { if(logger.isDebugEnabled()){ logger.debug("######## AcctgCoreImpl.clearComAreaMemory (COM_AREA) ########"); } _getAcctgCommUtil().clearAttribute(); } /* (non-Javadoc) * @see bankware.corebanking.core.accounting.journalizing.interfaces.AcctgCore#clearJournalizationArea() */ @Override @SuppressWarnings({"unchecked"}
public void doServiceAction(String arrSrvcTpCd, ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if(logger.isDebugEnabled()){ logger.debug("ArrCndInstallmentDateImpl doServiceAction"); } if (!this.getArrangementCore().isReal()) return; switch (arrSrvcTpCd) { case "OpenDeposit": case "Deposit": _checkInstallmentDate(arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public BigDecimal getRngVal(){ return rngVal; }
public String checkPassword(StaffBsicInfoIO staffBsicInfo, String pswd) throws BizApplicationException { String securityCheckRsltTpCd = null; if (staffBsicInfo == null) { return SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue(); } if (staffBsicInfo.getPswd() == null) { securityCheckRsltTpCd = SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue(); } else { if (staffBsicInfo.getPswd().equals(pswd)) { securityCheckRsltTpCd = SecurityCheckRsltTpEnum.SUCCESS.getValue(); } else { securityCheckRsltTpCd = SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue(); } } return securityCheckRsltTpCd; }
public DueDiligenceInqrySvcListOut clone(){ try{ DueDiligenceInqrySvcListOut object= (DueDiligenceInqrySvcListOut)super.clone(); if ( this.dueDlgncList== null ) object.dueDlgncList = null; else{ java.util.List<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub> clonedList = new java.util.ArrayList<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub>(dueDlgncList.size()); for( bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub item : dueDlgncList ){ clonedList.add( (bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub)item.clone()); } object.dueDlgncList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrCnd> getArrCnd(Class<?> clazz) throws BizApplicationException{ return _getArrXtnUtil().convertArrCndList(super.getArrCndCore(clazz)); }
public CndVal getComplexCndValue(int tierNbr) throws BizApplicationException { // If isCmpxCnd is false if (!isComplexCnd()) { // Simple condition throw new BizApplicationException("AAPPDE0003", null); } // Set Input PdPdCndUnitComplexSearchIn inDao = _setPdPdCndUnitComplexSearchIn(tierNbr); if (isListCnd()) { return _getComplexListCndValue(inDao); } else if (isRngCnd()) { return _getComplexRangeCndValue(inDao); } /*else if (isIntCnd()) { return _getComplexInterestCndValue(inDao); } else if (isFeeCnd()) { return _getComplexFeeCndValue(inDao); }*/ else { return null; } }
public void saveMapSubInfo(Map<String, String> subInfoMap, StStlmntCalcnSIO stStlmntCalcnSIOIn) { logger.debug("##<ST-StlmntCalcnSubInfoBiz> saveMapSubInfo"); if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1.create a new instance of I/F VO //IValueObject subInfoIfVo = new StlmntCalcnSubInfo(); // 2.create a new instance of DBIO VO StStlmntCalcnSIO stStlmntCalcnSIO = new StStlmntCalcnSIO(); // 3.set primary key _setKey(stStlmntCalcnSIO, stStlmntCalcnSIOIn); // 4.convert map to DBIO VO DtoUtils.setSubInfoIO(subInfoMap, stStlmntCalcnSIO); // 5.insert subsidiary detail _insertSubInfo(stStlmntCalcnSIO); }
public void saveAssetTxSubInfo(AssetTxSubInfo assetTxSubInfo) throws BizApplicationException { // 보조명세로 저장 (여러개의 확장속성을 한 row로 저장) _getAssetTxSubInfoBiz().saveSubInfo(assetTxSubInfo, this); }
static boolean isValid(String value){ for (XtnTableEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public String getCrncyCd() throws BizApplicationException { return this.getOriginArr().getCrncyCd(); }
public void saveMapSubInfo(Map<String, String> subInfoMap, String txDt, Integer txSeqNbr, AssetImpl assetImpl, Integer assetThingSeqNbr) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 자산물건보조명세의 종류 조회 AssetThingSubInfoKndEnum subInfoKnd = assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr); // 2. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 3. 보조원장 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(assetImpl, assetThingSeqNbr); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("assetId", assetImpl.getAssetBasicCache().getAssetId()); // PK setting subInfoCache.set("assetThingSeqNbr", assetThingSeqNbr); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(assetImpl, assetThingSeqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 3-1. insert _insertSubInfo(subInfoKnd, subInfoCache); // 4. 캐시 저장 _saveSubInfoCache(subInfoKnd, subInfoCache, assetImpl, assetThingSeqNbr); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(assetImpl, assetThingSeqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 3-2. update _updateSubInfo(subInfoKnd, subInfoCache); } }
static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (InsrncCustRelStsCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@insrncCustRelStsCd"});//({0}) is invalid {1}. } return true; }
public int getTxSeqNbr() throws BizApplicationException { return getBasicInfo().getTxSeqNbr(); }
public List<String> getVariable(String inFormula) throws BizApplicationException { inFormula = inFormula.trim(); if (StringUtils.isEmpty(inFormula)) { throw new BizApplicationException("AAPCME0006", new Object[] {"@formula"}); } List<String> variables = new ArrayList<String>(); for (int i = 0; i < inFormula.length(); i++) { if (CaAmOperandPrefix.isValid(inFormula.charAt(i))) { char[] variable = new char[inFormula.length()]; int j = 0; variable[j] = inFormula.charAt(i); while (++i < inFormula.length()) if (_isValid(inFormula.charAt(i))) variable[++j] = inFormula.charAt(i); else break; char[] variableCopy = new char[j + 1]; for (int k = 0; k <= j; k++) variableCopy[k] = variable[k]; variables.add(String.copyValueOf(variableCopy)); } } return variables; }
public String getAprslThingXtnInfo(AprslCoreImpl aprslImpl, Integer aprslThingSeqNbr, String xtnAtrbtNm) throws BizApplicationException { // 확장정보명세 if (_getTblXtnAtrbtCore().isExtendWayEav(XtnTableEnum.AS_APRSL_THING_D.getValue(), xtnAtrbtNm)) { return getMapAprslThingXtnInfoCache(aprslImpl, aprslThingSeqNbr).get(xtnAtrbtNm); } // 2. 보조명세 return _getAprslThingXtnInfoCustom().getSubInfo(xtnAtrbtNm, aprslImpl, aprslThingSeqNbr); }
public int delete(CaSvCntrlCntrSrvcDIO svCntrlCntrSrvcDIO) { return _getSvCntrlCntrSrvcD().delete(svCntrlCntrSrvcDIO); }
public List<ArrIntRtHst> getListConfirmedIntRtHistory(ArrIntRtCoreIn in) throws BizApplicationException { if(logger.isDebugEnabled()){ logger.debug("## <AR> getArrApplyInterestRateWithCnfrmtnHst"); } List<ArrIntRtHst> arrRtList = new ArrayList<ArrIntRtHst>(); if (!in.getArrCore().isReal()) return arrRtList; ArrangementCore arr = (ArrangementCore)in.getArrCore(); ArArrAplyIntRtValDIO arrAplyIntRtValDIO = new ArArrAplyIntRtValDIO(); arrAplyIntRtValDIO.setArrId(arr.getArrId()); arrAplyIntRtValDIO.setArrIntRtTpCd(in.getPdIntRtStrctrClCd()); arrAplyIntRtValDIO.setAplyStartDt(in.getStartDt()); arrAplyIntRtValDIO.setAplyEndDt(in.getEndDt()); _getCmnContextCore().setHeaderColumn(arrAplyIntRtValDIO); List<ArArrAplyIntRtValDIO> returnRtLst = _getArArrAplyIntRtValDDso().selectActiveForDuration(arrAplyIntRtValDIO); if(returnRtLst == null){ return arrRtList; } for (ArArrAplyIntRtValDIO returnRt : returnRtLst) { ArrIntRtHst arrIntRt = new ArrIntRtHst(); arrIntRt.setAplyRt(returnRt.getAplyIntRt()); arrIntRt.setAplyPrfIntRt(returnRt.getAplyPrfIntRt()); arrIntRt.setStartDt(returnRt.getAplyStartDt()); arrIntRt.setEndDt(returnRt.getAplyEndDt()); arrIntRt.setRtElmntList(_getRateElementList(arr,returnRt)); ArArrAplyIntRtValStsHIO arArrAplyIntRtValStsHIO = this._getAplyIntRtValHst(returnRt); if(arArrAplyIntRtValStsHIO != null){ arrIntRt.setStsChngTxDt(arArrAplyIntRtValStsHIO.getStsChngTxDt()); arrIntRt.setStsChngTxSeqNbr(arArrAplyIntRtValStsHIO.getStsChngTxSeqNbr()); } if(in.getEndDt().compareTo(arrIntRt.getEndDt()) < 0){ arrIntRt.setEndDt(in.getEndDt()); } arrRtList.add(arrIntRt); } return arrRtList; }
public boolean isValid(String type) { for (FormulaFactorImplCoreEnum item : FormulaFactorImplCoreEnum.values()) { if (type.equals(item.getValue())) { return true; } } return false; }
public boolean check(Map<String, String> atrbtCntnt) throws BizApplicationException { if(logger.isDebugEnabled()) { logger.debug("ExclsvOrCmpxVldtnImpl : {}", atrbtCntnt); } int cnt = 0; for(Map.Entry<String, String> atrbt: atrbtCntnt.entrySet()) { if(!StringUtils.isEmpty(atrbt.getValue())) { cnt++; } } if(cnt > 1) { // It is only one required of input. {0} throw new BizApplicationException("AAPCME0168", new Object[] {atrbtCntnt.toString()}); } return true; }
public void validate() throws BizApplicationException { if (!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getRngVal()))){ //This product purchasable time is ({0} ~ {1}) //본상품은의 판매 가능 시간은 ({0} ~ {1}) 입니다 throw new BizApplicationException("AAPARE0279" , new Object[]{getMinVal().setScale(0).toPlainString(),getMaxVal().setScale(0).toPlainString()}); } }
public CaSvMenuMIO select(CaSvMenuMIO svMenuMIO) { return _getSvMenuM().select(svMenuMIO); }
public String convertDateJulianGregorian(String dscd, String baseDt) throws BizApplicationException { String out = null; if ("1".equals(dscd)) { /*------------------------------------------------------------------ ## change gregorian date -> julian date : if Distinction code is a '1'. ## 그레고리안일자->줄리안일자 변환 : 처리구분이 '1'일 경우 -------------------------------------------------------------------*/ // julian date Computation 줄리안일자 산출 out = _calculateJulianDate(baseDt); } else if ("2".equals(dscd)) { /*------------------------------------------------------------------ ## change julian date -> gregorian date : if Distinction code is a '2'. ## 줄리안일자->그레고리안일자 변환 : 처리구분이 '2'일 경우 -------------------------------------------------------------------*/ // gregorian date Computation 그레고리안일자 산출 out = _calculateGregorianDate(baseDt); } return out; }
protected void register(CustImpl custImpl, CustLoinHstIO custLoinHstIO) throws BizApplicationException { if (custLoinHstIO == null) { return; } AtCustLoinHIO atCustLoinHIO = new AtCustLoinHIO(); atCustLoinHIO.setInstCd(_getCmnContext().getInstCode()); atCustLoinHIO.setCustId(custImpl.getCustId()); atCustLoinHIO.setLoinTpCd(custLoinHstIO.getLoinTpCd()); atCustLoinHIO.setLoinIdNbr(custLoinHstIO.getLoinIdNbr()); atCustLoinHIO.setLoinSeqNbr(custLoinHstIO.getLoinSeqNbr()); atCustLoinHIO.setHstSeqNbr(_getCustLoinHstSeqNbr(atCustLoinHIO.getInstCd(), custImpl.getCustId(), _getCmnContext().getTxDate())); atCustLoinHIO.setLoinDt(_getCmnContext().getTxDate()); atCustLoinHIO.setLoinHms(_getCmnContext().getTxTime()); atCustLoinHIO.setLoinRsltYn(custLoinHstIO.getLoinRsltYn()); atCustLoinHIO.setLoinRsltCd(custLoinHstIO.getLoinRsltCd()); atCustLoinHIO.setFnlLoinChnlDscd(custLoinHstIO.getFnlLoinChnlDscd()); CbbServiceHeader header = CbbApplicationContext.getCurrentServiceHeader(); atCustLoinHIO.setLoinIp(((ContextHeader) header).getRemoteAddr()); _PKValidateCustLoinH(atCustLoinHIO); _getAtCustLoinHDso().insert(atCustLoinHIO); }
protected void modifyLastBal(String inBalDt, BigDecimal inLastBal, String inSctnStartDt, String inSctnEndDt, String txDt, int txSeqNbr) throws BizApplicationException { if (logger.isDebugEnabled()) { logger.debug("HHH updateLastBal2"); } this.balDt = inBalDt; this.balDtBal = inLastBal; this.sctnStartDt = inSctnStartDt; this.sctnEndDt = inSctnEndDt; /** * Set today balance */ _setTodayBal(); /** * Update last balance */ if (this.isNew) { _registerLastBal(); this.isNew = false; } else { _modifyLastBal(); } }
public CaActorRolePSvcRgstListIn clone(){ try{ CaActorRolePSvcRgstListIn object= (CaActorRolePSvcRgstListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty( value)) { for (DebtInfoDscdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@scrtyIntStsCd"});//({0}) is invalid {1}. } return true; }
public void terminateBlocking(ArrIssmdaBlckngTrmntnIn in, String stsChngBizCdNbr, String stsChngBizCd, ArrIssmdaCoreImpl arrIssmdaImpl) throws BizApplicationException { // 계약 발급매체 주제영역 미사용 시 skip if (!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.ISSUED_MEDIA)) { return; } _checkInput(in.getArrIssmdaBlckngSeqNbr()); // Check Transaction Exist // 거래생성여부 검증 _getArrCmnUtil().validateArrTxExist(arrIssmdaImpl.getIssueArrId(), in.getStsChngTxDt(), in.getStsChngTxSeqNbr()); ArArrIssmdaBlckngDIO sqlIn = new ArArrIssmdaBlckngDIO(); sqlIn.setInstCd(_getCmnContextCore().getInstCode()); sqlIn.setIssueArrId(arrIssmdaImpl.getIssueArrId()); sqlIn.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd()); sqlIn.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId()); sqlIn.setArrIssmdaBlckngSeqNbr(in.getArrIssmdaBlckngSeqNbr()); ArArrIssmdaBlckngDIO arrIssmdaBlckngDIO = _getArArrIssmdaBlckngDDso().selectBlckngBySeqNbr(sqlIn); if (arrIssmdaBlckngDIO == null){ // 계약발급매체({0}, {1})에 등록된 발급매체제한({2})이 없습니다. 입력값을 확인하십시오. throw new BizApplicationException("CAPARE0045", new Object[]{ _getCdCore().getCode( ArrIssmdaTpCoreEnum.cdNbr, arrIssmdaImpl.getArrIssmdaTpCd() ), arrIssmdaImpl.getArrIssmdaInhrncId(), in.getArrIssmdaBlckngSeqNbr() }); } if( arrIssmdaBlckngDIO.getEfctvStartDt().compareTo(_getCmnContextCore().getTxDate()) > 0 ) { arrIssmdaBlckngDIO.setArrIssmdaBlckngStsCd(ArrIssmdaBlckngStsCoreEnum.IGNORED.getValue()); arrIssmdaBlckngDIO.setEfctvEndDt(arrIssmdaBlckngDIO.getEfctvStartDt()); } else { arrIssmdaBlckngDIO = _readForUpdate( arrIssmdaBlckngDIO ); if( arrIssmdaBlckngDIO.getEfctvStartDt().compareTo(_getCmnContextCore().getTxDate()) == 0 ) { arrIssmdaBlckngDIO.setArrIssmdaBlckngStsCd(ArrIssmdaBlckngStsCoreEnum.IGNORED.getValue()); } else { arrIssmdaBlckngDIO.setArrIssmdaBlckngStsCd(ArrIssmdaBlckngStsCoreEnum.TERMINATED.getValue()); } arrIssmdaBlckngDIO.setEfctvEndDt(_getCmnContextCore().getTxDate()); } _getCmnContextCore().setHeaderColumn(arrIssmdaBlckngDIO); _getArArrIssmdaBlckngDDso().updateStatus(arrIssmdaBlckngDIO); _insertArrIssmdaBlckngStsHistory( arrIssmdaBlckngDIO.getArrIssmdaBlckngSeqNbr(), ArrIssmdaBlckngStsCoreEnum.TERMINATED.getValue(), stsChngBizCdNbr, stsChngBizCd, in.getStsChngTxDt(), in.getStsChngTxSeqNbr(), arrIssmdaImpl); }
public String getApplyEndDateTime() { return PdUtil.parseDateToYYYYMMDDHHMMSS(_getAplyEndDt()); }
protected AprslCoreImpl getUniqueBusinessBean(String instCd, String aprslId) throws BizApplicationException { return (AprslCoreImpl) ApplicationContextCoreUtils.getUniqueBusinessBean(instCd + aprslId, getAprslImplClass()); }
public List<XtnCdIO> getListCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { List<XtnCdIO> xtnCdList = new ArrayList<XtnCdIO>(); // query data List<DcDocMIO> dcDocIdList = _getDcDocMDso().selectIdList(DocStsEnum.NORMAL.getValue(), DocTypEnum.NOTICE_MSG.getValue(), null); if(dcDocIdList != null && !dcDocIdList.isEmpty()) { String lngCd = null; if(supplInfoVal.containsKey(InstParamEnum.LANGUAGE_CODE.getValue())) { lngCd = (String) supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue()); } else { lngCd = _getCmnContext().getLanguageCode(); } for(DcDocMIO dcDocMIOItem : dcDocIdList) { XtnCdIO xtnCdIO = new XtnCdIO(); xtnCdIO.setCd(dcDocMIOItem.getDocId()); xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_DOC, dcDocMIOItem.getDocId(), lngCd)); xtnCdIO.setLngCd(lngCd); xtnCdList.add(xtnCdIO); } } return xtnCdList; }
public String getCndCd(){ return cndCd; }
public CardInfoPopUpOut getCardInfoPopUp(CardInfoPopUpIn in) throws BizApplicationException { if (logger.isDebugEnabled()) { logger.debug("getCardInfoPopUp 시작 : {}", new Object[] { in.toString() }); } CardInfoPopUpOut out = new CardInfoPopUpOut(); // 필수항목 체크 : 카드번호 또는 고객번호 둘중 하나는 필수 if (StringUtils.isEmpty(in.getCardNbr()) && StringUtils.isEmpty(in.getCustNbr())) { throw new BizApplicationException(CBA01.ERR_AAPCME0006, new Object[] { CBA01.AT_CARDNBR }); } // 고객명 PdCardCustMIO rtI00 = selectCustInfo(in.getTntInstId(), in.getCustNbr()); if (rtI00 != null) { if (logger.isDebugEnabled()) { logger.debug("getCardInfoPopUp PdCardCustMIO : {}", new Object[] { rtI00.toString() }); } out.setCustNm(rtI00.getCustNm()); } // get the information List<CardInfoPopUpSub01> rtList1 = selectListCardInfo(in); // convert to SVC out List<CardInfoPopUpSub01> svcList1 = new ArrayList<CardInfoPopUpSub01>(); if (rtList1 != null) { for (CardInfoPopUpSub01 rtRelIO1 : rtList1) { CardInfoPopUpSub01 svcRelIO1 = new CardInfoPopUpSub01(); if (logger.isDebugEnabled()) { logger.debug("getCardInfoPopUp CardInfoPopUpSub0111111 : {}", new Object[] { rtRelIO1.toString() }); } // Generated by code generator [[ svcRelIO1.setCardNbr(rtRelIO1.getCardNbr()); svcRelIO1.setPdCd(rtRelIO1.getPdCd()); svcRelIO1.setCardKndDscd(rtRelIO1.getCardKndDscd()); svcRelIO1.setCardIssueDt(rtRelIO1.getCardIssueDt()); // 상품(서비스)조회 Pd pd = _getPd(rtRelIO1.getPdCd(), "01"); // 상품 svcRelIO1.setPdNm(pd.getPdNm()); // Generated by code generator ]] svcList1.add(svcRelIO1); } out.setCardInfo(svcList1); } //return return out; }
public void register(NoticeBsicInfoIO noticeBsicInfoIO) throws BizApplicationException { List<NoticeAtchmntDocIssueIO> atcmnetIOList = noticeBsicInfoIO.getActhmntDocIssueList(); if(atcmnetIOList != null && !atcmnetIOList.isEmpty()) { AtNoticeAtchmntDocIssueDIO atNoticeAtchmntDocIssueDIO = new AtNoticeAtchmntDocIssueDIO(); _getCmnContext().setHeaderColumn(atNoticeAtchmntDocIssueDIO); atNoticeAtchmntDocIssueDIO.setNoticeId(noticeBsicInfoIO.getNoticeId()); for(NoticeAtchmntDocIssueIO aoticeAtchmntDocIssueIOItem : atcmnetIOList) { atNoticeAtchmntDocIssueDIO.setDocIssueId(aoticeAtchmntDocIssueIOItem.getDocIssueId()); _getAtNoticeAtchmntDocIssueDDso().insert(atNoticeAtchmntDocIssueDIO); } } }
public String getCndVal() throws BizApplicationException { return getRngVal() == null ? null : getRngVal().setScale(_setScale(), RoundingMode.HALF_UP).toPlainString(); }
public void saveMapSubInfo(Map<String, String> subInfoMap, StaffImpl staffImpl) throws BizApplicationException { // 0. null check if (subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 보조원장 캐시 조회결과에 따라 insert/update 판단 AtStaffSIO subInfoIO = getSubInfoCache(staffImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtStaffSIO(); subInfoIO.setStaffId(staffImpl.getStaffId()); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _getAtStaffSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(staffImpl, subInfoIO); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _getAtStaffSDso().update(subInfoIO); } // 2. 캐시 저장 staffImpl.setSubInfoCache(subInfoIO); }
static boolean isValid(String value) throws BizApplicationException{ if(!StringCoreUtils.isEmpty(value)) { for (DocCmpntEnum enumObject: values()) { if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] { value, "@docCmpnt" }); } return true; }
public ArrOpnScrnOut clone(){ try{ ArrOpnScrnOut object= (ArrOpnScrnOut)super.clone(); if ( this.arrStrctrXtnList== null ) object.arrStrctrXtnList = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrXtn> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrXtn>(arrStrctrXtnList.size()); for( bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrXtn item : arrStrctrXtnList ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrXtn)item.clone()); } object.arrStrctrXtnList = clonedList; } if ( this.arrStrctrCndList== null ) object.arrStrctrCndList = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrCnd> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrCnd>(arrStrctrCndList.size()); for( bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrCnd item : arrStrctrCndList ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrCnd)item.clone()); } object.arrStrctrCndList = clonedList; } if ( this.arrStrctrRelList== null ) object.arrStrctrRelList = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRel> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRel>(arrStrctrRelList.size()); for( bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRel item : arrStrctrRelList ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRel)item.clone()); } object.arrStrctrRelList = clonedList; } if ( this.arrStrctrPdDocList== null ) object.arrStrctrPdDocList = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrPdDoc> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrPdDoc>(arrStrctrPdDocList.size()); for( bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrPdDoc item : arrStrctrPdDocList ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrPdDoc)item.clone()); } object.arrStrctrPdDocList = clonedList; } if ( this.arrStrctrArrDocList== null ) object.arrStrctrArrDocList = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrArrDoc> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrArrDoc>(arrStrctrArrDocList.size()); for( bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrArrDoc item : arrStrctrArrDocList ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrArrDoc)item.clone()); } object.arrStrctrArrDocList = clonedList; } if ( this.children== null ) object.children = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnScrnChildOut> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnScrnChildOut>(children.size()); for( bankware.corebanking.arrangementservice.query.service.dto.ArrOpnScrnChildOut item : children ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.ArrOpnScrnChildOut)item.clone()); } object.children = clonedList; } if ( this.arrStrctrRltdPdList== null ) object.arrStrctrRltdPdList = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRltdPd> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRltdPd>(arrStrctrRltdPdList.size()); for( bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRltdPd item : arrStrctrRltdPdList ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRltdPd)item.clone()); } object.arrStrctrRltdPdList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public AaPaRcvSvcOut clone(){ try{ AaPaRcvSvcOut object= (AaPaRcvSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty( value)) { for (ReportKndEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@AssetXtnAtrbtNm"});//({0}) is invalid {1}. } return true; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, String txDt, Integer txSeqNbr, ArrRealCore arrRealCore) throws BizApplicationException { _getArrSrvcBlckngSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, arrSrvcBlckngSeqNbr, seqNbr, txDt, txSeqNbr, (ArrRealImpl)arrRealCore); }
public CmBizDayMIO select(CmBizDayMIO cmBizDayMIO) { //data Cache 적용 CmCacheProvider p = new CmCacheProvider<CmBizDayMIO>(){ @Override public CmBizDayMIO select(CmBizDayMIO cmBizDayMIO){ return _getCmBizDayM().select(cmBizDayMIO); } }; CmBizDayMIO rtnObj = super.selectCache(DataCacheCoreConfig.COMMON_BUSINESS_DAY_SELECT_CACHE, cmBizDayMIO.getInstCd().concat(cmBizDayMIO.getBaseDt()), cmBizDayMIO, p); return rtnObj; }
private BfCndTestSvcOut getAplyStartDt(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); String output = bfCnd.getAplyStartDt(); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { String cd = supplInfoVal == null ? null : String.valueOf(supplInfoVal.get(CCM03.CD)); if(_getCmClHrarcyMDso().select(cd) == null) { return false; } return true; }
public List<ArrCndCdChngHst> getArrCndChangeHistory(String cndCd, ArrRealCoreImpl arrRealImpl) throws BizApplicationException{ if( logger.isDebugEnabled() ) { logger.debug( "## <AR> ArrCndMngrImpl > getArrCndChangeHistory Start "); logger.debug( "## <AR> cndCd : {}", cndCd ); logger.debug( "## <AR> arrRealImpl : {}", arrRealImpl.getArrId() ); } List <ArrCndCore> arrCndCdList = new ArrayList<ArrCndCore>(); List<ArArrCndDSelectStsTxIO> arrCndCdChngHstList = new ArrayList<ArArrCndDSelectStsTxIO>(); if(StringCoreUtils.isEmpty(cndCd)){ arrCndCdList = arrRealImpl.getListArrCndCoreAllArrLevel(); //현재 사용되고있는 조건 전체 조회 }else{ ArrCndCore arrCndCd = arrRealImpl.getArrCndCore(cndCd); //현재 사용되고있는 조건 조회 arrCndCdList.add(arrCndCd); } if(arrCndCdList==null){ throw new BizApplicationException("AAPPDE0005", new Object[]{}); } for(ArrCndCore arrCnd : arrCndCdList){ // 계약레벨만 변경이력을 조회함 if( !arrCnd.isCndValManagedAsArrLevel() ) continue; if( !arrCnd.hasArrLevelCndVal() ) continue; // if( arrCnd.getSeqNbr() == null || arrCnd.getSeqNbr() <= 0 ) continue; // List<ArrCndCore> arrCndList = this.getArrCndHistory(arrCnd.getCndCd(), arrRealImpl, arrRealImpl.getArrOpnDt(), arrCnd.getEfctvEndDt()); List<ArArrCndDSelectStsTxIO> arrCndList = this.getArrCndHistoryListAllStatus( arrCnd.getCndCd(), arrRealImpl, arrRealImpl.getArrOpnDt()==null?arrCnd.getEfctvStartDt():arrRealImpl.getArrOpnDt(), arrCnd.getEfctvEndDt() ); for(ArArrCndDSelectStsTxIO arrCndElement : arrCndList){ arrCndCdChngHstList.add(arrCndElement); } } List<ArrCndCdChngHst> arrCndCdChngHistList = _postArrCndChangeHistoryList(arrCndCdChngHstList,arrRealImpl); if( logger.isDebugEnabled() ) { logger.debug( "## <AR> ArrCndMngrImpl > getArrCndChangeHistory END "); logger.debug( "## <AR> List<ArrCndCdChngHst> : {}", arrCndCdChngHistList ); } return arrCndCdChngHistList; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr, ScrtyIntImpl scrtyIntImpl) { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)){ return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttribute(xtnAtrbtNm, xtnAtrbtCntnt); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsScrtyIntSIO subInfoCache = getSubInfoCache(scrtyIntImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsScrtyIntSIO(); subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId()); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 2-1. insert _getAsScrtyIntSDso().insert(subInfoCache); // 3. 캐시 저장 scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 2-2. update _getAsScrtyIntSDso().update(subInfoCache); } }
public void terminateArrArrRelation(ArrArrRelTrmntnIn in) throws BizApplicationException { _getArrArrRelBiz().terminateArrArrRelation(in, this); }
public ActorCmphInqrySvcGetActorXtnInfoOut clone(){ try{ ActorCmphInqrySvcGetActorXtnInfoOut object= (ActorCmphInqrySvcGetActorXtnInfoOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String atrbtNm, DeptImpl deptImpl) throws BizApplicationException { // 1. 보조명세 캐시 조회 AtDeptSIO subInfo = getSubInfoCache(deptImpl); // 2. 보조명세 캐시가 null인 경우, null 리턴 if (subInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = subInfo.get(atrbtNm); // Casting 시 Null 방지 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public void checkInputBigDecimalData(String errorCd, BigDecimal inData, String errorMsg) throws BizApplicationException { if (null == inData || inData.compareTo(BigDecimal.ZERO) <= 0 ) { throw new BizApplicationException(errorCd, new Object[] { "@"+errorMsg }); } }
public ActorRgstSvcAddrIn clone(){ try{ ActorRgstSvcAddrIn object= (ActorRgstSvcAddrIn)super.clone(); if ( this.ctcptXtnInfoList== null ) object.ctcptXtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn> clonedList = new java.util.ArrayList<bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn>(ctcptXtnInfoList.size()); for( bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn item : ctcptXtnInfoList ){ clonedList.add( (bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn)item.clone()); } object.ctcptXtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustRprsnChngSvcElctrncAddrIn clone(){ try{ CustRprsnChngSvcElctrncAddrIn object= (CustRprsnChngSvcElctrncAddrIn)super.clone(); if ( this.ctcptXtnInfoList== null ) object.ctcptXtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn>(ctcptXtnInfoList.size()); for( bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn item : ctcptXtnInfoList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn)item.clone()); } object.ctcptXtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DeptSrchSvcGetDeptListIn clone(){ try{ DeptSrchSvcGetDeptListIn object= (DeptSrchSvcGetDeptListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AprslCore aprslCoreImpl, Integer prfClaimSeqNbr) throws BizApplicationException { _getAprslPrfClaimSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AprslImpl) aprslCoreImpl, prfClaimSeqNbr); }
public java.util.List<bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut> getChildren(){ return children; }
public AtrbtVldtnWayEnum getAttributeValidationWayCode() { // return validation code is list(L) return AtrbtVldtnWayEnum.LENGTH; }
public PdApprovalInfoSvcIn clone(){ try{ PdApprovalInfoSvcIn object= (PdApprovalInfoSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaArrSrvcVldtnRuleTestSvcIn clone(){ try{ CaArrSrvcVldtnRuleTestSvcIn object= (CaArrSrvcVldtnRuleTestSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaStdSrvcIoMgmtSvcGetStdSrvcIOListOut clone(){ try{ CaStdSrvcIoMgmtSvcGetStdSrvcIOListOut object= (CaStdSrvcIoMgmtSvcGetStdSrvcIOListOut)super.clone(); if ( this.atrbtList== null ) object.atrbtList = null; else{ java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut>(atrbtList.size()); for( bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut item : atrbtList ){ clonedList.add( (bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut)item.clone()); } object.atrbtList = clonedList; } if ( this.srvcList== null ) object.srvcList = null; else{ java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut>(srvcList.size()); for( bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut item : srvcList ){ clonedList.add( (bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut)item.clone()); } object.srvcList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<InterestCalculationSection> apply(ApplyInterestCalculationSectionExceptionIn in, List<InterestCalculationSection> intCalIntervals) throws BizApplicationException { BigDecimal loanBal = in.getLoanBal(); String addtnlPymntDt = in.getAddtnlPymntDt(); // 분할지급일 BigDecimal addtnlPymntAmt = in.getAddtnlPymntAmt(); // 분할지급금액 for (InterestCalculationSection interval : intCalIntervals) { List<CalculationType> typeList = new ArrayList<>(); for (CalculationType type : interval.getCalTps()) { String calStartDt = type.getCalStartDt(); String calEndDt = type.getCalEndDt(); // 약정이자 && 계산시작일 < 분할지급일 < 계산종료일 if (type.isAgreementInterest() && DateCoreUtils.isDt1BeforeDt2(calStartDt, addtnlPymntDt) && DateCoreUtils.isDt1BeforeDt2(addtnlPymntDt, calEndDt)) { // 계산대상금액 = 대출잔액 - 분할지급금액 BigDecimal calTgtAmt = loanBal.subtract(addtnlPymntAmt); // 계산시작일 ~ 계산종료일 (대출잔액 - 분할지급금액) CalculationType t1 = type.clone(); t1.setCalTgtAmt(calTgtAmt); typeList.add(t1); // 분할지급일 ~ 계산종료일 (분할지급금액) CalculationType t2 = type.clone(); t2.setCalStartDt(addtnlPymntDt); t2.setCalTgtAmt(addtnlPymntAmt); typeList.add(t2); } else { // 계산시작일 ~ 계산종료일 (대출잔액) CalculationType t1 = type.clone(); t1.setCalTgtAmt(loanBal); typeList.add(t1); } } // 변경된 유형 반영 interval.setCalTps(typeList); } return intCalIntervals; }
public BlRgstrnSvcIn clone(){ try{ BlRgstrnSvcIn object= (BlRgstrnSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(StlmntCalcnSubInfoInqryIn stlmntCalcnSubInfoInqryIn) throws BizApplicationException { return _getStlmntCalcnSubInfoBiz().getMapSubInfo(_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn)); }
public WorkflowServiceMgmtSvcIO clone(){ try{ WorkflowServiceMgmtSvcIO object= (WorkflowServiceMgmtSvcIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CmpsCnd> getComposingCnd(String tntInstId, String cmpxStrctrId) throws BizApplicationException { if (logger.isDebugEnabled()) { logger.debug("PdComplexStructureImpl.getComposingCnd. cmpxStrctrId : {}", cmpxStrctrId); } List<CmpsCnd> out = null; /** * DataCache START */ String uKey = PdUtil.concatenateKeys(Arrays.asList(tntInstId, cmpxStrctrId)); // Get cache data List<PdCmpxCmpsCndDIO> valList = _getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE, uKey); if (CollectionCoreUtils.isEmpty(valList)) { List<ComposingCnd> apiOutList = _getComplexStructure().getListComposingCnd(tntInstId, cmpxStrctrId); // Dummy 저장 if (CollectionCoreUtils.isEmpty(apiOutList)) { CmpsCnd dummy = new CmpsCnd(); dummy.setCmpsCndCd(CPD01.DUMMY); List<CmpsCnd> dummyList = new ArrayList<>(); dummyList.add(dummy); _getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE, uKey, dummyList); } else { out = new ArrayList<>(); for (ComposingCnd cmposingCnd : apiOutList) { CmpsCnd cmpsCnd = new CmpsCnd(); cmpsCnd.setCmpsCndCd(cmposingCnd.getComposingCndCd()); cmpsCnd.setCndTpCd(cmposingCnd.getCndTypeCd()); cmpsCnd.setMsurUnitCd(cmposingCnd.getMeasureUnitCd()); cmpsCnd.setBlwUndrDscd(cmposingCnd.getBelowUnderDscd()); cmpsCnd.setCrncyCd(cmposingCnd.getCurrencyCd()); cmpsCnd.setCmpxCndCmpsSeq(cmposingCnd.getInquirySeq()); cmpsCnd.setInqrySeq(cmposingCnd.getInquirySeq()); cmpsCnd.setIsCalculationBaseCnd(cmposingCnd.getIsCalculationBaseCnd()); cmpsCnd.setListCd(cmposingCnd.getListCd()); cmpsCnd.setVal(cmposingCnd.getVal()); out.add(cmpsCnd); } _getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE, uKey, out); } } // Cache에 저장되어 있는게 Dummy이면 null로 변환 if (CollectionUtils.isEmpty(out) || CPD01.DUMMY.equals(out.get(0).getCmpsCndCd())) { out = null; } /** * DataCache END */ // Return output return out; }
public void reject(ArrActvtyChngIn arrActvtyChngIn) throws BizApplicationException { super.changeStatus(ArrActvtyStsEnum.REJECTED.getValue(), arrActvtyChngIn); }
public void validate(String arrSrvcCd,ArrRealCore arrReal, CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { if (cust.isWalkout()){ //Customer is in walkout program. This service ({0}) could not be finished properly //고객이 워크아웃상태입니다. 본서비스({0}) 실행이 불가 합니다 throw new BizApplicationException("AAPARE0303", new Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)}); } }
public Map<String, String> getMapSubInfo(AprslCore aprslCore, Integer aprslThingSeqNbr) throws BizApplicationException { return _getAprslThingSubInfoBiz().getMapSubInfo((AprslImpl)aprslCore, aprslThingSeqNbr); }
public Map<String, String> getMapSubInfo(AprslImpl aprslImpl, Integer prfClaimSeqNbr){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 감정에 저장된 보조명세 캐시 조회 AsAprslPrfClaimSIO subInfo = getSubInfoCache(aprslImpl, prfClaimSeqNbr); // 2. 감정에 저장된 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 감정에 저장된 보조원장 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // business column만 put if(AprslPrfClaimSubInfo.FIELDS.get(entry.getKey()) == null) { continue; } // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public CaDstbTgtTaskInfoVO getDstbTgtInfo(CaDstbTgtMVO in) throws BizApplicationException{ CaDstbTgtTaskInfoVO resultInfo = new CaDstbTgtTaskInfoVO(); List<CaCaDstbTgtMIO> dstbTgtMIO = _getSvDstbTgtMDso().selectList(_getDstbTgtReqMIO(in)); if(dstbTgtMIO != null){ resultInfo = _getDstbTgtReqInfoIO(dstbTgtMIO.get(0)); List<CaCaDstbTgtDIO> dstbTgtDIO = _getSvDstbTgtDDso().selectList(_getDstbTgtReqMIO(in)); resultInfo.setDstbTgtDtl(_getDstbTgtDIO(dstbTgtDIO)); } return resultInfo; }
public String getCmpxCndYn(){ return cmpxCndYn; }
public AmtTpDtlIO getAmountType( String amtTpCd ) throws BizApplicationException { AmtTpDtlIO result = _getAmtTp().getAmountType(amtTpCd); if( null != result ){ return result; }else{ return new AmtTpDtlIO(); } }
public CaRoleMgmtSvcGetRoleScreenRelationListOut clone(){ try{ CaRoleMgmtSvcGetRoleScreenRelationListOut object= (CaRoleMgmtSvcGetRoleScreenRelationListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleScreenRelationOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleScreenRelationOut>(tblNm.size()); for( bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleScreenRelationOut item : tblNm ){ clonedList.add( (bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleScreenRelationOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value){ for (BillCtgryFormEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public AplyDstbBatRsltIO clone(){ try{ AplyDstbBatRsltIO object= (AplyDstbBatRsltIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); if ( this.dstbReqSrvrDtl== null ) object.dstbReqSrvrDtl = null; else{ java.util.List<bankware.corebanking.applicationcommon.distribution.batch.dto.AplyDstbBatRsltReqSrvrDIO> clonedList = new java.util.ArrayList<bankware.corebanking.applicationcommon.distribution.batch.dto.AplyDstbBatRsltReqSrvrDIO>(dstbReqSrvrDtl.size()); for( bankware.corebanking.applicationcommon.distribution.batch.dto.AplyDstbBatRsltReqSrvrDIO item : dstbReqSrvrDtl ){ clonedList.add( (bankware.corebanking.applicationcommon.distribution.batch.dto.AplyDstbBatRsltReqSrvrDIO)item.clone()); } object.dstbReqSrvrDtl = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void isValidByChnlCode() throws BizApplicationException { _getSrvcRstrctnDtlImpl().isValidByChnlCode(); }
public int saveCodeDetail(CaCdNbrInfoIO in) throws BizApplicationException { int out = 0; String cdNbr = in.getCdNbr(); // Delete the ex data deleteCodeDetail(in); // Savte the institution subset code for(int i = 0; i < in.getCdDtlList().size(); i++) { CaCdDtlIO cdDtlIO = in.getCdDtlList().get(i); CaCmInstSbstCdDIO daoIn = new CaCmInstSbstCdDIO(); _getCaCmnContext().setHeaderColumn(daoIn); daoIn.setCdNbr(cdNbr); daoIn.setInstCd(in.getInstCd()); daoIn.setCd(cdDtlIO.getCd()); List<CaCmInstSbstCdDIO> rtnList = _getCmInstSbstCdDDso().selectListByCondition(daoIn); if(rtnList != null && rtnList.size() > 0){ CaCmInstSbstCdDIO item = rtnList.get(0); item.setUpCdNbr(cdDtlIO.getUpCdNbr()); item.setLastChngId(_getCaCmnContext().getStaffId()); item.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue()); out += _getCmInstSbstCdDDso().update(daoIn); } else { daoIn.setUpCdNbr(cdDtlIO.getUpCdNbr()); daoIn.setLastChngId(_getCaCmnContext().getStaffId()); daoIn.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue()); out += _getCmInstSbstCdDDso().insert(daoIn); } } return out; }
public void saveMapSubInfo(Map<String, String> subInfoMap, String txDt, Integer txSeqNbr, AssetImpl assetImpl) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 자산보조명세의 종류 조회 AssetSubInfoKndEnum subInfoKnd = assetImpl.getAssetSubInfoKnd(); // 2. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 3. 보조원장 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(assetImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("assetId", assetImpl.getAssetBasicCache().getAssetId()); //PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(assetImpl, subInfoCache, txDt, txSeqNbr); // 입력된 map을 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 3-1. insert _insertSubInfo(subInfoKnd, subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(assetImpl, subInfoCache, txDt, txSeqNbr); // 입력된 map을 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 3-2. update _updateSubInfo(subInfoKnd, subInfoCache); } // 4. 캐시 저장 assetImpl.saveSubInfoCache(xtnTable, subInfoCache); }
public ArrCndCore getArrCndCore(String cndCd) throws BizApplicationException { // 해당 메소드는 ({0}) 클래스의 인스턴스로 사용할 수 없습니다. 계약담당자에게 문의바랍니다. // This method cannot be used by instance of ({0}) class. throw new BizApplicationException("AAPARE0678",new Object[]{ this.getClass().getName()}); }
public boolean isSalable(String baseDt, String baseTm) { Date baseDate = PdUtil.parseYyyyMMddHHmmssToDate(baseDt, baseTm); // 상품시작일시 <= 기준일시 < 상품종료일시 return (baseDate.after(bf.getSaleStartDt()) || baseDate.equals(bf.getSaleStartDt())) && baseDate.before(bf.getSaleEndDt()); }
public int countApproveListByStatus( CaAprvlGetListByStsIn aprvlGetListByStsIn) throws BizApplicationException { /* * 조건 처리 */ CaCmAprvlListByStsIn cmAprvlListByStsIn = _setCmAprvlListByStsIn(aprvlGetListByStsIn); /* * 호출 */ int cnt = 0; if(StringUtils.isEmpty(cmAprvlListByStsIn.getDtlAprvlStsCd())){ cnt = _getCmApprvMDso().countDemandListByStatus(cmAprvlListByStsIn); }else{ cnt = _getCmApprvMDso().countListByStatus(cmAprvlListByStsIn); } return cnt; }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (CaPrntWayTpEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] { value, "@prntWayTpCd" }); } return true; }
public List<ArrTx> getListChildTxHistory(ArrTxInqryDtIn in, ArrReal mthrArr) throws BizApplicationException{ _checkArr(mthrArr); _checkSearchPeriod(in.getInqryStartDt(),in.getInqryEndDt()); _setPgInfo(in); List<StTxMIO> txHsts = _getArrTxXtnBiz().getListByMthrArrId(_setStTxMInByArr(in,mthrArr)); return _convertListArrTx(super.getListArrTxCoreObject(txHsts)); }
public CustRprsnInqrySvcListGetListOut clone(){ try{ CustRprsnInqrySvcListGetListOut object= (CustRprsnInqrySvcListGetListOut)super.clone(); if ( this.roleList== null ) object.roleList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcRoleListIO> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcRoleListIO>(roleList.size()); for( bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcRoleListIO item : roleList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcRoleListIO)item.clone()); } object.roleList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaDstbTaskMListIn clone(){ try{ CaDstbTaskMListIn object= (CaDstbTaskMListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public LnAgrmntOpenSvcGridOut clone(){ try{ LnAgrmntOpenSvcGridOut object= (LnAgrmntOpenSvcGridOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void setHeaderColumn(IValueObject in) throws BizApplicationException { this.setColumn(in); }
public Map<String, String> getMapSubInfo(AssetCore assetImpl, Integer assetThingSeqNbr) throws BizApplicationException { return _getAssetThingSubInfoBiz().getMapSubInfo((AssetImpl)assetImpl, assetThingSeqNbr); }
public void saveMapSubInfo(Map<String, String> aprslThingSubInfoMap, AprslCore aprslCore, Integer aprslThingSeqNbr) throws BizApplicationException { _getAprslThingSubInfoBiz().saveMapSubInfo(aprslThingSubInfoMap, (AprslImpl) aprslCore, aprslThingSeqNbr); }
public static boolean isValid(String value){ for (ArrExtrnlIdNbrStsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public void doServiceAction(String arrSrvcTpCd, ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if(!this.getArrangementCore().isReal()) return; switch (arrSrvcTpCd) { case "PartialWithdrawal": _doPartialWithdrawalAction(); return; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288", new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
protected void register(CustImpl custImpl, CustStsIO custStsIO) throws BizApplicationException { AtCustMIO atCustMIO = custImpl.getCustBsicCache(); if (custStsIO == null) { return; } AtCustStsDXtnIO atCustStsDIO = new AtCustStsDXtnIO(); atCustStsDIO.setCustId(atCustMIO.getCustId()); atCustStsDIO.setCustStsSeqNbr(_getAtCustStsDXtnDso().selectNextSeqNbr(atCustMIO.getInstCd(), atCustMIO.getCustId())); atCustStsDIO.setCustStsCd(custStsIO.getCustStsCd() != null ? custStsIO.getCustStsCd() : CustStsEnum.ACTIVE.getValue()); atCustStsDIO.setStsChngDt(custStsIO.getStsChngDt()); atCustStsDIO.setStsChngHms(custStsIO.getStsChngHms()); atCustStsDIO.setCustStsChngRsnCd(custStsIO.getCustStsChngRsnCd()); atCustStsDIO.setCustStsChngRsnCntnt(custStsIO.getCustStsChngRsnCntnt()); atCustStsDIO.setEfctvEndDt(custStsIO.getEfctvEndDt() == null ? CCM01.MAX_DATE : custStsIO.getEfctvEndDt()); atCustStsDIO.setEfctvStartDt(custStsIO.getEfctvStartDt() == null ? _getCmnContext().getTxDate() : custStsIO.getEfctvStartDt()); AtCustStsDXtnIO lastAtCustStsDIO = _getAtCustStsDXtnDso().select(atCustMIO.getCustId(), atCustMIO.getInstCd(), atCustStsDIO.getEfctvStartDt(), CustStsEnum.IGNORE.getValue()); if (lastAtCustStsDIO == null) { _PKValidateCustStsD(atCustStsDIO); _getAtCustStsDXtnDso().insert(atCustStsDIO); } else { atCustStsDIO.setEfctvEndDt(DateUtils.getDateDayBefore(1, atCustStsDIO.getEfctvStartDt())); _PKValidateCustStsD(atCustStsDIO); _getAtCustStsDXtnDso().updateEfctvEndDt(atCustStsDIO, CustStsEnum.IGNORE.getValue()); atCustStsDIO.setEfctvEndDt(custStsIO.getEfctvEndDt() == null ? CCM01.MAX_DATE : custStsIO.getEfctvEndDt()); _PKValidateCustStsD(atCustStsDIO); _getAtCustStsDXtnDso().insert(atCustStsDIO); } }
public ArrCmphInqrySvcXtnInfoListOut clone(){ try{ ArrCmphInqrySvcXtnInfoListOut object= (ArrCmphInqrySvcXtnInfoListOut)super.clone(); if ( this.xtnInfoList== null ) object.xtnInfoList = null; else{ java.util.List<bankware.corebanking.deposit.query.service.dto.ArrCmphInqrySvcXtnInfoItmOut> clonedList = new java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.ArrCmphInqrySvcXtnInfoItmOut>(xtnInfoList.size()); for( bankware.corebanking.deposit.query.service.dto.ArrCmphInqrySvcXtnInfoItmOut item : xtnInfoList ){ clonedList.add( (bankware.corebanking.deposit.query.service.dto.ArrCmphInqrySvcXtnInfoItmOut)item.clone()); } object.xtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public StlmntCrctnMgmtSvcListOut clone(){ try{ StlmntCrctnMgmtSvcListOut object= (StlmntCrctnMgmtSvcListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntCrctnMgmtSvcItemOut> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntCrctnMgmtSvcItemOut>(tblNm.size()); for( bankware.corebanking.accounting.closingaccounts.service.dto.StlmntCrctnMgmtSvcItemOut item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.closingaccounts.service.dto.StlmntCrctnMgmtSvcItemOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustStaffRelSvcGetDtlIn clone(){ try{ CustStaffRelSvcGetDtlIn object= (CustStaffRelSvcGetDtlIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaCustGradeCdSvcDeleteIn clone(){ try{ CaCustGradeCdSvcDeleteIn object= (CaCustGradeCdSvcDeleteIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getInstCd() { return arrTxBsicIO.getInstCd(); }
public DuedtMgmtStsQuerySvcGetDuedtMgmtStsListIn clone(){ try{ DuedtMgmtStsQuerySvcGetDuedtMgmtStsListIn object= (DuedtMgmtStsQuerySvcGetDuedtMgmtStsListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ActorRoleDeptRIO> getListActorRoleDeptRelation() throws BizApplicationException { return getActor().getListActorRoleDeptRelation(); }
public DummyIO removeExtrnlIntrfcMsgAuthInfo(CaExtrnlIntrfcMsgAuthInfoMgmtSvcDelIn in) throws BizApplicationException{ /** * remove external interface message authentication information */ for(CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn item : in.getDeleteList()){ _getCaExtrnlAuthInfoMgmt().removeExtrnlIntrfcMsgAuthInfo(_setExtrnLIntrfcMsgAuthInfoRgstIn(item)); } return new DummyIO(); } // // @BxmServiceOperation("getTokenGnrtInfo") // @CbbSrvcInfo(srvcCd="CAPXP0068500",srvcNm="token생성조회",srvcAbrvtnNm="getTokenGnrtInfo") // public CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetTokenOut getTokenGnrtInfo(CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetTokenIn in) throws BizApplicationException{ // logger.debug("================ getTokenGnrtInfo START ================"); // logger.debug("================ ServiceIn : {}", in); // // CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetTokenOut out = new CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetTokenOut(); // // /** // * token 생성 // */ // // String token = Base64.encodeBase64String(UUID.randomUUID().toString().getBytes()).toString(); // //String token = UUID.randomUUID().toString(); // logger.debug("===================== UUID.randomUUID() : {}", UUID.randomUUID()); // logger.debug("===================== token : {}", token); // // out.setAuthFldVal(token); // // /** // * assemble output // */ // return out; // }
public List<ArArrPsbkEventOut> getListPsbkEventOnBaseDt(ArrIssmda arrIssmda, ArrReal arrReal, Integer arrIssmdaRelSeqNbr, String baseDt) throws BizApplicationException{ _checkInputAndValidate(arrIssmda,arrIssmdaRelSeqNbr,baseDt); List<ArArrPsbkEventOut> psbkEventOutList = new ArrayList<>(); List<ArArrPsbkEventDIO> selectedPsbkEventList=_selectListFromEfctvOnBaseDt(arrReal,arrIssmda.getArrIssmdaInhrncId(),arrIssmda.getArrIssmdaTpEnum().getValue(),arrIssmdaRelSeqNbr,baseDt); _setPsbkEventOutList(psbkEventOutList,selectedPsbkEventList); return psbkEventOutList; }
public Map<String, String> getMapSubInfo(ActorCore actorCore) throws BizApplicationException { return _getActorSubInfoBiz().getMapSubInfo((ActorImpl) actorCore); }
public CaSrvcPrflMgmtSvcIO clone(){ try{ CaSrvcPrflMgmtSvcIO object= (CaSrvcPrflMgmtSvcIO)super.clone(); if ( this.children== null ) object.children = null; else{ java.util.List<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcPrflMgmtSvcIO> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcPrflMgmtSvcIO>(children.size()); for( bankware.corebanking.configurationadmin.service.service.dto.CaSrvcPrflMgmtSvcIO item : children ){ clonedList.add( (bankware.corebanking.configurationadmin.service.service.dto.CaSrvcPrflMgmtSvcIO)item.clone()); } object.children = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(IValueObject subInfo, StStlmntCalcnSIO stStlmntCalcnSIOIn) { logger.debug("##<ST-StlmntCalcnSubInfoBiz> saveSubInfo"); // null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {this.getClass().getSimpleName()}); } logger.debug("##<ST-StlmntCalcnSubInfoBiz> saveSubInfo null check ok"); // 1.create a new instance of DB IO IValueObject subInfoDBIO = new StStlmntCalcnSIO(); // 2.set primary key _setKey(subInfoDBIO, stStlmntCalcnSIOIn); // 3.convert IvalueObject to DBIO VO DtoUtils.setSubInfoIO(subInfo, subInfoDBIO); // 4.insert subsidiary detail _insertSubInfo(subInfoDBIO); /* * settlement는 속성을 대부분 insert 하는 경우이므로 아래 로직을 막음 */ // IValueObject sqlOut = getSubInfo(stlmnt); // // // 해당 거래관련 보조명세 데이터가 없을 때 // if(sqlOut == null) { // _insertSubInfo(subInfoDBIO); // // 맴버변수 VO 값 설정 // Stlmnt.setStlmntSubInfo(subInfo); // // }else { // // 기 조회 된 값에 update되어할 필드 설정 // DtoUtils.setSubInfoIO(subInfo, sqlOut); // // DBIO IO에 내용필드 반영 // DtoUtils.setSubInfoIO(sqlOut, subInfoDBIO); // // _updateSubInfo(subInfoDBIO); // // 맴버변수 VO 값 설정(sqlOut은 기존 + 새로 update되어야 할 필드 모두 반영된 최신 보조명세IO) // stlmnt.setStlmntSubInfo(sqlOut); // } }
public Map<String, String> getMapSubInfo(CustTxImpl custTxImpl) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 AtCustTxSIO subInfo = getSubInfoCache(custTxImpl); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조명세 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public String getAccountingBaseDate() throws BizApplicationException { return getBusinessDate(); }
public int delete(CaAcJrRulePIO acJrRulePIO) throws BizApplicationException { //return acJrRuleP.delete(acJrRulePIO); switch( DbmsVendorNmEnum.getByValue(_getSysNonstopCoreUtil().getDbmsVendorName()) ) { case ORACLE: return _getAcJrRuleP().deleteOracle(acJrRulePIO); case MYSQL: return _getAcJrRuleP().deleteMysql(acJrRulePIO); default: throw new BizApplicationException("AAPCME0202", null); } }
public int saveIpctClInfo(CaIpctClIn in) throws BizApplicationException { //필수 입력 항목 검증 _checkStringValue(in.getIpctClCd(), new Object[] {"@ipctClCd"}); _checkStringValue(in.getActvStsCd(), new Object[] {"@actvStsCd"}); _checkStringValue(in.getNbrgAtrbtNm(),new Object[] {"@nbrAtrbtNm"}); return _getIpctMgmtBiz().saveIpctClInfo(in); }
public boolean check(Map<String, String> atrbtCntnt) throws BizApplicationException { // Implement Logic for Validate Control Center ID // check Control Center Id When transaction is not ControlCenterRegistration if( logger.isDebugEnabled() ) { logger.debug( "## <SHW> CntrlCntrIdVldtnImpl START "); } String instCd = atrbtCntnt.get("instCd"); String cntrlCntrId = atrbtCntnt.get("cntrlCntrId"); if(!StringUtils.isEmpty(cntrlCntrId)) { CntrlCntrMngrSvcGetIO mngrIn = new CntrlCntrMngrSvcGetIO(); mngrIn.setInstCd(instCd); // institute ID mngrIn.setCntrlCntrId(cntrlCntrId); // control center ID CntrlCntrMngrSvcGetIO mngrOut = _getCntrlCntr().getControlCenterBasic(mngrIn); if( mngrOut == null ) throw new BizApplicationException("AAPSVE0002", new String[] {"@cntrlCntrId"}); } if( logger.isDebugEnabled() ) { logger.debug( "## <SHW> CntrlCntrIdVldtnImpl END "); } return true; }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String pdCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, null, null, null, pdCd, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, 0, 0, false); }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String pdCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, null, null, null, pdCd, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, 0, 0, false); }
public String getPdRule(String arrPdRuleTpCd, String bizDscd, String pdTpCd, String pdTmpltCd, String pdCd, Boolean isWithoutException) throws BizApplicationException { _checkInputValidation(arrPdRuleTpCd, bizDscd); String arrPdRuleCntnt = _getArArrPdRuleMDso().selectByProduct(_getCmnContextCore().getInstCode(), arrPdRuleTpCd, bizDscd, pdTpCd, pdTmpltCd, pdCd); if (StringCoreUtils.isEmpty(arrPdRuleCntnt) && !isWithoutException) { String pdString = (pdCd == null ? (pdTmpltCd == null ? (pdTpCd == null ? bizDscd : bizDscd.concat(pdTpCd)) : pdTmpltCd) : pdCd); throw new BizApplicationException("AAPARE0521", new Object[]{arrPdRuleTpCd,pdString,_getPdNm(pdCd)}); } return arrPdRuleCntnt; }
public IntrnlArrOpnSvcIn clone(){ try{ IntrnlArrOpnSvcIn object= (IntrnlArrOpnSvcIn)super.clone(); if ( this.cndList== null ) object.cndList = null; else{ java.util.List<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrCndIn> clonedList = new java.util.ArrayList<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrCndIn>(cndList.size()); for( bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrCndIn item : cndList ){ clonedList.add( (bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrCndIn)item.clone()); } object.cndList = clonedList; } if ( this.xtnList== null ) object.xtnList = null; else{ java.util.List<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrXtnIn> clonedList = new java.util.ArrayList<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrXtnIn>(xtnList.size()); for( bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrXtnIn item : xtnList ){ clonedList.add( (bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrXtnIn)item.clone()); } object.xtnList = clonedList; } if ( this.relList== null ) object.relList = null; else{ java.util.List<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrRelIn> clonedList = new java.util.ArrayList<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrRelIn>(relList.size()); for( bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrRelIn item : relList ){ clonedList.add( (bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrRelIn)item.clone()); } object.relList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AtrlImpl atrlImpl) throws BizApplicationException { // null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 액터역할에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 AtAtrlSIO subInfoIO = getSubInfoCache(atrlImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtAtrlSIO(); subInfoIO.setAtrlId(atrlImpl.getAtrlId()); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // insert _getAtAtrlSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(atrlImpl, subInfoIO); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // update _getAtAtrlSDso().update(subInfoIO); } // 2. 캐시 저장 atrlImpl.setSubInfoCache(subInfoIO); }
public StdCustMemoChngSvcGetOut clone(){ try{ StdCustMemoChngSvcGetOut object= (StdCustMemoChngSvcGetOut)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getPdTemplateName(String instId, String pdTmpltCd) throws BizApplicationException { String mTntInstId = getMotherInstId(instId); /** * DataCache START */ String uKey = PdUtil .concatenateKeys(Arrays.asList(mTntInstId, pdTmpltCd, PdInformationDscdCoreEnum.PD.getValue())); // Get cache data String pdTemplateName = _getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_PDT_M_CACHE, uKey); if (pdTemplateName == null) { pdTemplateName = _getPdCore().getPdTemplateName(mTntInstId, pdTmpltCd); // Put cache data _getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_PDT_M_CACHE, uKey, pdTemplateName); } // Return name return pdTemplateName; }
public boolean isChannelInternet(String chnlDscd) throws BizApplicationException { return ChannelEnum.INTERNET.getValue().equals(chnlDscd) ? true : false; }
public ArrRealCore getVrtnSrcArr() throws BizApplicationException { if(this.isArrKindModification()){ return (ArrRealCore) ((ArrMdfctn)this).getOriginArr(); } if(this.isArrKindAssessment()){ return (ArrRealCore) ((ArrAsm)this).getOriginArr(); } return null; }
public static boolean isValid(String value){ for (MnySndRcvDscdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public ArrCnd getArrCnd(String cndCd, String baseDt) throws BizApplicationException { if(logger.isDebugEnabled()){ logger.debug( "## <SHW> ArrMdfctnImpl > getArrCnd START "); } ArrCnd arrCnd = getArrCndModified(cndCd, baseDt); if(logger.isDebugEnabled()){ logger.debug( "## <SHW> ArrMdfctnImpl > getArrCnd after getArrCndModified : {} ", arrCnd ); } if (arrCnd == null || (arrCnd.isCndValManagedAsArrLevel() && !arrCnd.hasArrLevelCndVal()) ) { arrCnd = getArrCndOrigin(cndCd); if(logger.isDebugEnabled()){ logger.debug( "## <SHW> ArrMdfctnImpl > getArrCnd after getArrCndOrigin : {} ", arrCnd ); } } if(logger.isDebugEnabled()){ logger.debug( "## <SHW> ArrMdfctnImpl > getArrCnd END : {}", arrCnd); } return arrCnd; }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { CaCaDstbEnvCdMIO svDstbEnvMIO = new CaCaDstbEnvCdMIO(); if(supplInfoVal.get(CCM03.CD) != null) { if(supplInfoVal.get(CCM03.INST_CD) == null || StringUtils.isEmpty(supplInfoVal.get(CCM03.CD).toString())){ svDstbEnvMIO.setInstCd(_getCaCmnContext().getInstCode()); } else { svDstbEnvMIO.setInstCd(supplInfoVal.get(CCM03.INST_CD).toString()); } svDstbEnvMIO.setDstbEnvrnmntCd(supplInfoVal.get(CCM03.CD).toString()); } svDstbEnvMIO.setActvStsCd("01"); List<CaCaDstbEnvCdMIO> svDstbEnvMList = _getSvDstbEnvMDso().selectEnvCdList(svDstbEnvMIO); if(svDstbEnvMList == null) { return false; } return true; }
public CustInfoUseAgrmntSvcSrchOut clone(){ try{ CustInfoUseAgrmntSvcSrchOut object= (CustInfoUseAgrmntSvcSrchOut)super.clone(); if ( this.infoUseAgrmntTpCdList== null ) object.infoUseAgrmntTpCdList = null; else{ java.util.List<bankware.corebanking.customer.security.service.dto.CustInfoUseAgrmntSvcInfoUseAgrmntTpOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.security.service.dto.CustInfoUseAgrmntSvcInfoUseAgrmntTpOut>(infoUseAgrmntTpCdList.size()); for( bankware.corebanking.customer.security.service.dto.CustInfoUseAgrmntSvcInfoUseAgrmntTpOut item : infoUseAgrmntTpCdList ){ clonedList.add( (bankware.corebanking.customer.security.service.dto.CustInfoUseAgrmntSvcInfoUseAgrmntTpOut)item.clone()); } object.infoUseAgrmntTpCdList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
private BfTestSvcOut getSaleStartDateTime(BfTestSvcIn in) throws BizApplicationException { BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); Bf bf = _getBfMngr().getBf(bfIn); String output = bf.getSaleStartDateTime(); BfTestSvcOut out = new BfTestSvcOut(); if(StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public void setSubInfoKnd(AssetCore asset, Integer assetThingSeqNbr) throws BizApplicationException{ ((AssetImpl)asset).setAssetThingSubInfoKnd(assetThingSeqNbr, AssetThingSubInfoKndEnum.AS_ASSET_THING_S); ((AssetImpl)asset).getAssetBasicCache().getAssetTpCd(); /* * ref.) 자산유형별로 보조명세를 관리하는 경우 아래와 같이 분기한다. switch (AssetTpEnum.getByValue(asset.getAssetBasicCache().getAssetTpCd())) { case REAL_ESTATE: ((AssetImpl) asset).setAssetThingSubInfoKnd(assetThingSeqNbr, AssetThingSubInfoKndEnum.AS_ASSET_THING_RLSTT_S); break; case MOVABLES: ((AssetImpl) asset).setAssetThingSubInfoKnd(assetThingSeqNbr, AssetThingSubInfoKndEnum.AS_ASSET_THING_MVBLS_S); .... default: break; } */ }
public ArrCndSvcIn clone(){ try{ ArrCndSvcIn object= (ArrCndSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getInstCd() { return instCd; }
public DpstLnAccrualTrgtIO clone(){ try{ DpstLnAccrualTrgtIO object= (DpstLnAccrualTrgtIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isExtendAttribute() { return stdDtoClassAtrbt.isExtendAttribute(); }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { // query data return !(_getDcDocMDso().select(null, String.valueOf(supplInfoVal.get(CCM03.CD)), null) == null); }
public ArrIssmda openArrIssmda(ArrIssmdaCrtnIn arrIssmdaCrtnIn, String issueArrId) throws BizApplicationException { _checkInput(arrIssmdaCrtnIn, issueArrId); // 확장정보명세/보조명세 분류 Map<String, String> subInfoCrtnMap = _getArrIssmdaSubInfoBiz().getMapSubInfoCrtn(arrIssmdaCrtnIn.getXtnInfoList()); ArrIssmdaImpl arrIssmda = new ArrIssmdaImpl(); arrIssmda.createArrIssmda(arrIssmdaCrtnIn, issueArrId); // 보조명세 저장 _getArrIssmdaSubInfoBiz().saveMapSubInfo(subInfoCrtnMap, (ArrIssmdaImpl) arrIssmda, arrIssmdaCrtnIn.getStsChngTxDt(), arrIssmdaCrtnIn.getStsChngTxSeqNbr()); super.saveUniqueBusinessBean(arrIssmda.getArrIssmdaTpCd(), arrIssmda.getArrIssmdaInhrncId(), arrIssmda); return arrIssmda; }
public List<XtnCdIO> getListCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { List<XtnCdIO> xtnCdIOs = new ArrayList<XtnCdIO>(); String lngCd = supplInfoVal == null ? null : String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue())); List<ArArrSrvcBlckngMIO> sqlOutList = _getArArrSrvcBlckngMDso().selectAllCd(); if( sqlOutList == null || sqlOutList.isEmpty() ) return xtnCdIOs; for(ArArrSrvcBlckngMIO out : sqlOutList) { XtnCdIO xtnCdIO = new XtnCdIO(); xtnCdIO.setCd(out.getArrSrvcBlckngCd()); if(StringCoreUtils.isEmpty(lngCd)) { xtnCdIO.setCdNm(_getTrnsfrLngCore().getTransferLanguage(CCM01.TRANS_CODE_VAL, ArrSrvcBlockingCoreEnum.cdNbr + out.getArrSrvcBlckngCd())); } else { xtnCdIO.setCdNm(_getTrnsfrLngCore().getTransferLanguage(CCM01.TRANS_CODE_VAL, ArrSrvcBlockingCoreEnum.cdNbr + out.getArrSrvcBlckngCd(), lngCd)); } xtnCdIOs.add(xtnCdIO); } return xtnCdIOs; }
public List<CaArrIssmdaTmpltIO> getListArrIssmdaTmplt(String instCd, String arrIssmdaTpCd, String prflAtrbtNm, String prflAtrbtVal) throws BizApplicationException { List<CaArrIssmdaTmpltIO> arrIssmdaTempltList = new ArrayList<CaArrIssmdaTmpltIO>(); List<CaArArrIssmdaTmpltMIO> arrIssmdaTmpltMIOList = new ArrayList<CaArArrIssmdaTmpltMIO>(); // 2020.11.12 // 계약발급매체템플릿은 개별기관의 정보만을 조회 arrIssmdaTmpltMIOList = _getArArrIssmdaTmpltMDso().selectListByPrflAtrbt(instCd, arrIssmdaTpCd, prflAtrbtNm, prflAtrbtVal); for (CaArArrIssmdaTmpltMIO arArrIssmdaTmpltMIO : arrIssmdaTmpltMIOList) { CaArrIssmdaTmpltIO arrIssmdaTmplt = _setArrIssmdaTmpltIO(arArrIssmdaTmpltMIO); List<CaArrIssmdaPrflAtrbt> prflAtrbtList = _getCaArrIssmdaPrflMgmt().getCaArrIssmdaProfileList(instCd, arArrIssmdaTmpltMIO.getArrIssmdaTmpltId()); arrIssmdaTmplt.setPrflAtrbtList(prflAtrbtList); arrIssmdaTempltList.add(arrIssmdaTmplt); } return arrIssmdaTempltList; } // 신규기관생성용 /** * <div class='en'> * @description * <pre> * Get the list of issued media template-passbook message relation. * </pre> * @seealso {@link #registerPsbkMsgRelation(CaArrPsbkMsgRgstrnIn)} : Register issued media template - passbook message relation. * </div> * * <div class='ko'> * @description * <pre> * 계약발급매체 통장메세지 관계 정보 목록을 조회한다. * </pre> * @seealso {@link #registerPsbkMsgRelation(CaArrPsbkMsgRgstrnIn)}
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AprslCore aprslCore, Integer aprslThingSeqNbr) throws BizApplicationException { _getAprslThingSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AprslImpl) aprslCore, aprslThingSeqNbr); }
public List<CmpsCnd> getCmpsCnd() throws BizApplicationException { if (!isComplexCnd()) { throw new BizApplicationException("AAPPDE0003", null); //단순조건 simple condition } // Return output return getCmpsCnd(getCmpxStrctrId()); }
public int delete(String tblNm) { return _getCmTblM().delete(tblNm); }
public void saveAprslRqstXtnInfo(AprslRqstXtnInfoEnum aprslRqstXtnAInfoEnum, String xtnAtrbtCntnt) throws BizApplicationException { // 속성명 기준으로 확장정보관리방법 판단 // 1. 확장정보명세 if(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AS_APRSL_RQST_M.getValue(), aprslRqstXtnAInfoEnum.getValue())) { super.saveAprslRqstXtnInfoByEav(aprslRqstXtnAInfoEnum.getValue(), xtnAtrbtCntnt); } // 2. 보조명세 else { _getAprslRqstSubInfoBiz().saveSubInfo(aprslRqstXtnAInfoEnum.getValue(), xtnAtrbtCntnt, this); } }
public List<CaCrncyOut> getListCurrency(CaCrncyIn in) throws BizApplicationException { List<CaCrncyOut> out = new ArrayList<CaCrncyOut>(); CaCmCrncyCdMIO inParm = new CaCmCrncyCdMIO(); inParm.setInstCd(StringUtils.isEmpty(in.getInstCd()) ? _getCmnContext().getInstCode() : in.getInstCd()); //기관코드 inParm.setCrncyCd(in.getCrncyCd()); //통화코드 inParm.setAncmntCrncyDscd(in.getAncmntCrncyDscd()); //고시통화구분코드 // Get the code detail information List<CaCmCrncyCdMIO> crncyCdOutList = _getCmCrncyCdDso().selectListByCondition(inParm); for (CaCmCrncyCdMIO cmCrncyCdIO : crncyCdOutList) { CaCrncyOut crnCyGetOut = _setCurrencyInformationToOutput(cmCrncyCdIO); out.add(crnCyGetOut); } return out; }
public IValueObject getSubInfo(StStlmntSIO stlmntS) { logger.debug("##<ST-StlmntSubInfoBiz> getSubInfo"); // 1.Interface IO 신규 IValueObject subInfoIntrfcIO = new StlmntSubInfo(); // 2.DBIO VO 신규 StStlmntSIO stStlmntSIO = new StStlmntSIO(); // 3.정산보조명세 조회 stStlmntSIO = _getStlmntSDso().select(stlmntS); // 4.DBIO VO 를 I/F VO로 변환 if(stStlmntSIO == null) { return null; }else { DtoUtils.setSubInfoIO(stStlmntSIO, subInfoIntrfcIO); } // 5.I/F VO 반환 return subInfoIntrfcIO; }
public void validate() throws BizApplicationException { switch (isValidCndValue(getSuperListCd())) { case NoError: return; default: throw new BizApplicationException("AAPARE0158" , new Object[]{ getCndCd(), getPdCnd().getCndNm(), getArrangementCore().getPd().getPdNm(), getListCdList(), getSuperListCd()}); } }
static boolean isValid(String value){ for (SrvcStatusEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public CndVal getCndVal() throws BizApplicationException { if (isComplexCnd()) { // Error if complex condition throw new BizApplicationException("AAPPDE0004", null); } CndVal cndVal = null; // Set input PdPdCndSimpleSearchIn inDao = new PdPdCndSimpleSearchIn(); inDao.setTntInstId(getInstCd()); inDao.setAplyStartDt(_getAplyStartDt()); inDao.setCndCd(getCndCd()); inDao.setCndGrpCd(getCndGrpCd()); inDao.setCndGrpTmpltCd(getCndGrpTmpltCd()); if (isListCnd()) { cndVal = _getListCndValue(inDao); } else if (isRngCnd()) { cndVal = _getRangeCndValue(inDao); } else if (isIntCnd()) { cndVal = _getInterestCndValue(inDao); } else if (isFeeCnd()) { cndVal = _getFeeCndValue(inDao); } // Return CndVal return cndVal; }
public void saveAssetXtnInfo (String xtnAtrbtNm, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr) throws BizApplicationException { _getAssetXtnInfoBiz().saveAssetXtnInfo(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, this, false); }
public void saveMapSubInfo(Map<String, String> subInfoMap, String txDt, Integer txSeqNbr, ScrtyIntImpl scrtyIntImpl) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsScrtyIntSIO subInfoCache = getSubInfoCache(scrtyIntImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsScrtyIntSIO(); subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId()); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-1. insert _getAsScrtyIntSDso().insert(subInfoCache); // 3. 캐시 저장 scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-2. update _getAsScrtyIntSDso().update(subInfoCache); } }
public List<ArrActvtyXtnInfo> getListXtnInfo() throws BizApplicationException { return _getArrActvtyBasic().getListXtnAtrbt(this); }
public Integer getTxSeqNbr(String arrId) throws BizApplicationException { /* * Get sequence number */ StTxSeqDIO in = new StTxSeqDIO(); _getCmnContextCore().setHeaderColumn(in); in.setArrId(arrId); in.setTxDt(_getCmnContextCore().getTxDate()); StTxSeqDIO out = null; /* * Activity #20144 * selectForUpdate 시 해당 primary key로 데이터가 조회 되지 않을 경우 GapLock발생(전체 row에 대한 lock이 걸림), 따라서 insert 시 deadLock발생 * deadLock방지를 위해 일반 select 후 데이터가 있을 경우만 selectForUpdate(해당 row에 대해서만 lock) */ out = _getStTxSeqDDso().select(in); if(out == null) { if(logger.isDebugEnabled()) { logger.debug("## _setTxSeqNbrAndUpdateTable --> no data "); } in.setTxSeqNbr(CCM01.ONE); _getStTxSeqDDso().insert(in); }else { if(logger.isDebugEnabled()) { logger.debug("## _setTxSeqNbrAndUpdateTable --> exist data"); } // select with lock try { out = _getStTxSeqDDso().selectWithLock(in); } catch(DasCannotAcquireLockException e) { logger.info("ERROR : {}", e); // Lock acquisition failed (arrangement id: {0}, transaction date: {1}) Please try the transaction again. throw new BizApplicationException("AAPSTE0179", new Object[] {arrId, _getCmnContextCore().getTxDate()}); } in.setTxSeqNbr(out.getTxSeqNbr() + 1); in.setOracleRowId(out.getOracleRowId()); _getStTxSeqDDso().update(in); } return in.getTxSeqNbr(); }
static boolean isValid(String value){ for (BalTpEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (AssetThingStsCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@assetThingStsCd"});//({0}) is invalid {1}. } return true; }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { _doOpenLoanAction(arrSrvcTpCd,arrCndActionRequiredValue); // switch (arrSrvcTpCd) { // case "Application": // case "OpenLoan": // break; // default: // // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 // throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); // } }
public DepoBnkArrMgmtSvcInqryIn clone(){ try{ DepoBnkArrMgmtSvcInqryIn object= (DepoBnkArrMgmtSvcInqryIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrStsChngHst> getArrStatusChangeHistory(ArrRealCoreImpl arrRealImpl) throws BizApplicationException { //거래계약분리처리 List<ArArrStsHIO> arArrStsHIOList; if(ArrKndCoreEnum.TEMPORARY.getValue().equals(arrRealImpl.getArrKindCd())){ arArrStsHIOList = _getArArrTmpryStsHDso().selectEffectiveStatusChangeHistory(arrRealImpl.getInstCd(),arrRealImpl.getArrId()); }else{ arArrStsHIOList = _getArArrStsHDso().selectEffectiveStatusChangeHistory(arrRealImpl.getInstCd(),arrRealImpl.getArrId()); } List<ArrStsChngHst> arrStsChngHstList = new ArrayList<ArrStsChngHst>(); for (ArArrStsHIO arArrStsHIO : arArrStsHIOList) { ArrStsChngHst arrStsChngHst = new ArrStsChngHst(); String arrStsCd = arArrStsHIO.getArrStsCd(); arrStsChngHst.setArrStsCd(arrStsCd); arrStsChngHst.setArrStsNm(_getCdCore().getCode(ArrStsCoreEnum.cdNbr,arrStsCd)); arrStsChngHst.setStsStartDt(arArrStsHIO.getStsStartDt()); arrStsChngHst.setStsChngTxDt(arArrStsHIO.getStsChngTxDt()); arrStsChngHst.setStsChngTxSeqNbr(arArrStsHIO.getStsChngTxSeqNbr()); arrStsChngHst.setStsChngTxHms(arArrStsHIO.getStsChngTxHms()); arrStsChngHstList.add(arrStsChngHst); } return arrStsChngHstList; }
public Map<String, String> getMapSubInfo(CustRprsnCore custRprsnCore) throws BizApplicationException { return _getCustRprsnSubInfoBiz().getMapSubInfo((CustRprsnImpl) custRprsnCore); }
public boolean isActive() { return (getArrActvtyStsCd().equals(ArrActvtyStsEnum.ACTIVE.getValue())); }
public Integer getListDataCntForConsistency() throws BizApplicationException { return _getDstbCnstncyAmAsmItmTblDDso().selectListCntForConsistency(); }
public java.lang.String getCndValDcsnLvlCd(){ return cndValDcsnLvlCd; }
public static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (ChannelTestKbankEnum item : ChannelTestKbankEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; } return false; // throw new BizApplicationException("APATE0028", new Object[] {value, "@cdNbr"}); }
public Map<String, String> getMapSubInfo(AssetImpl asset, Integer assetThingSeqNbr){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 IValueObject subInfo = getSubInfoCache(asset, assetThingSeqNbr); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조원장 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(!_isSubInfoContainsField(asset.getAssetThingSubInfoKnd(assetThingSeqNbr), entry.getKey())) { continue; } // Casting 시 Null 방지 if (entry.getValue() != null ) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public void delete() throws BizApplicationException { docBsicIO.setDocStsCd(CaDocStsEnum.DELETE.getValue()); _getDocBsic().modifyStatus(docBsicIO); }
public IValueObject getSubInfo(StStlmntCalcnSIO stlmntCalcnS) { logger.debug("##<ST-StlmntCalcnSubInfoBiz> getSubInfo"); // 1.Interface IO 신규 IValueObject subInfoIntrfcIO = new StlmntCalcnSubInfo(); // 2.DBIO VO 신규 StStlmntCalcnSIO stlmntCalcnSIO = new StStlmntCalcnSIO(); // 3.정산계산근기보조명세 조회 stlmntCalcnSIO = _getStlmntCalcnSDso().select(stlmntCalcnS); if(stlmntCalcnSIO == null) { return null; } // 4.DBIO VO 를 I/F VO로 변환 DtoUtils.setSubInfoIO(stlmntCalcnSIO, subInfoIntrfcIO); // 5.I/F VO 반환 return subInfoIntrfcIO; }
public String getSubInfo(String xtnAtrbtNm, AssetTxCore assetTx) throws BizApplicationException { return _getAssetTxSubInfoBiz().getSubInfo(xtnAtrbtNm, (AssetTxImpl)assetTx); }
public List<AtCustLoinInfoDIO> selectList(String instCd, String infoStsCd, String custId, String txDt) { return _getAtCustLoinInfoD().selectList(instCd, infoStsCd, custId, txDt); }
public CustCheckPwdOut login(String pswd) throws BizApplicationException, ParseException { //check required inputs if (StringUtils.isEmpty(pswd)) { throw new BizApplicationException("AAPCME0006", new Object[] {"@pswd"}); } return login(null, pswd, null); }
public DpstBsicQrySvcOut clone(){ try{ DpstBsicQrySvcOut object= (DpstBsicQrySvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<String> getVariable(String inFormula) throws BizApplicationException { inFormula = inFormula.trim(); if (StringCoreUtils.isEmpty(inFormula)) { throw new BizApplicationException("AAPCME0006", new Object[] {"@formula"}); } List<String> variables = new ArrayList<String>(); for (int i = 0; i < inFormula.length(); i++) { if (AmOperandPrefix.isValid(inFormula.charAt(i))) { char[] variable = new char[inFormula.length()]; int j = 0; variable[j] = inFormula.charAt(i); while (++i < inFormula.length()) if (_isValid(inFormula.charAt(i))) variable[++j] = inFormula.charAt(i); else break; char[] variableCopy = new char[j + 1]; for (int k = 0; k <= j; k++) variableCopy[k] = variable[k]; variables.add(String.copyValueOf(variableCopy)); } } return variables; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, ArrTxCore arrTx)throws BizApplicationException{ _getArrTxSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt,(ArrTxImpl)arrTx); }
public List<CmNbrgRuleCmpsDIO> selectList(String instCd, String nbrgAtrbtNm) { String cacheKey = instCd + nbrgAtrbtNm; Object cmNbrgRuleCmpsCacheObj = _getCmDataCacheManager().getCacheData(DataCacheCoreConfig.COMMON_NUMBER_RULE_COMPOSITE_SELECT_LIST_CACHE, cacheKey); List<CmNbrgRuleCmpsDIO> returnObj = new ArrayList<CmNbrgRuleCmpsDIO>(); if(cmNbrgRuleCmpsCacheObj == null) { returnObj = _getCmNbrgRuleCmpsD().selectList(instCd, nbrgAtrbtNm); if(returnObj == null || returnObj.isEmpty()){ _getCmDataCacheManager().saveCache(DataCacheCoreConfig.COMMON_NUMBER_RULE_COMPOSITE_SELECT_LIST_CACHE, cacheKey, CCM02.NO_OPINION); }else{ _getCmDataCacheManager().saveCache(DataCacheCoreConfig.COMMON_NUMBER_RULE_COMPOSITE_SELECT_LIST_CACHE, cacheKey, returnObj); } }else { if(cmNbrgRuleCmpsCacheObj.equals(CCM02.NO_OPINION)){ return returnObj; } returnObj = (List<CmNbrgRuleCmpsDIO>)cmNbrgRuleCmpsCacheObj; } return returnObj; }
public CrspndntBnkMgmtSvcInqryIn clone(){ try{ CrspndntBnkMgmtSvcInqryIn object= (CrspndntBnkMgmtSvcInqryIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void activate(ArrStsChngIn arrStsChngIn) throws BizApplicationException { _setArrStatus( ArrStsEnum.ACTIVE, arrStsChngIn ); _changeStatus( arrStsChngIn, null); }
public static boolean isValid(String value){ for (CalcnBaseAmtTpEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public List<ArrCnd> getArrCnd(Class<?> clazz) throws BizApplicationException{ return _getArrXtnUtil().convertArrCndList(super.getArrCndCore(clazz)); }
public CaStdSrvcIoMgmtSvcGetServiceAllInfoOut clone(){ try{ CaStdSrvcIoMgmtSvcGetServiceAllInfoOut object= (CaStdSrvcIoMgmtSvcGetServiceAllInfoOut)super.clone(); if ( this.atrbtList== null ) object.atrbtList = null; else{ java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut>(atrbtList.size()); for( bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut item : atrbtList ){ clonedList.add( (bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut)item.clone()); } object.atrbtList = clonedList; } if ( this.prflList== null ) object.prflList = null; else{ java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcPrflDtlOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcPrflDtlOut>(prflList.size()); for( bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcPrflDtlOut item : prflList ){ clonedList.add( (bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcPrflDtlOut)item.clone()); } object.prflList = clonedList; } if ( this.rstrctnList== null ) object.rstrctnList = null; else{ java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcRstrctnDtlOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcRstrctnDtlOut>(rstrctnList.size()); for( bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcRstrctnDtlOut item : rstrctnList ){ clonedList.add( (bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcRstrctnDtlOut)item.clone()); } object.rstrctnList = clonedList; } if ( this.outpList== null ) object.outpList = null; else{ java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut>(outpList.size()); for( bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut item : outpList ){ clonedList.add( (bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut)item.clone()); } object.outpList = clonedList; } if ( this.inpSrvcList== null ) object.inpSrvcList = null; else{ java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut>(inpSrvcList.size()); for( bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut item : inpSrvcList ){ clonedList.add( (bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut)item.clone()); } object.inpSrvcList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(IValueObject subInfo , StStlmntSIO stStlmntSIOIn) { logger.debug("##<ST-StlmntSubInfoBiz> saveSubInfo"); // null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {this.getClass().getSimpleName()}); } logger.debug("##<ST-StlmntSubInfoBiz> saveSubInfo null check ok"); // 1.create a new instance of DB IO IValueObject subInfoDBIO = new StStlmntSIO(); // 2.set primary key _setKey(subInfoDBIO, stStlmntSIOIn); // 3.convert IvalueObject to DBIO VO DtoUtils.setSubInfoIO(subInfo, subInfoDBIO); // 4.save subsidiary detail(보조명세) _insertSubInfo(subInfoDBIO); /* * settlement는 속성을 대부분 insert 하는 경우이므로 아래 로직을 막음 */ // IValueObject sqlOut = getSubInfo(stlmnt); // // // 해당 거래관련 보조명세 데이터가 없을 때 // if(sqlOut == null) { // _insertSubInfo(subInfoDBIO); // // 맴버변수 VO 값 설정 // Stlmnt.setStlmntSubInfo(subInfo); // // }else { // // 기 조회 된 값에 update되어할 필드 설정 // DtoUtils.setSubInfoIO(subInfo, sqlOut); // // DBIO IO에 내용필드 반영 // DtoUtils.setSubInfoIO(sqlOut, subInfoDBIO); // // _updateSubInfo(subInfoDBIO); // // 맴버변수 VO 값 설정(sqlOut은 기존 + 새로 update되어야 할 필드 모두 반영된 최신 보조명세IO) // stlmnt.setStlmntSubInfo(sqlOut); // } } // // /** // * set primary key of subsidiary table // * @param stlmntSIO // * @param Stlmnt // */ // private IValueObject _setKey(IValueObject stlmntSIO, String arrId, String txDt, int txSeqNbr, String amtTpCd, String prchsRtrnYn) { // stlmntSIO.set("instCd", _getCmnContext().getInstCode()); // stlmntSIO.set("arrId", arrId); // stlmntSIO.set("txDt", txDt); // stlmntSIO.set("txSeqNbr", txSeqNbr); // stlmntSIO.set("amtTpCd", amtTpCd); // stlmntSIO.set("prchsRtrnYn", prchsRtrnYn); // // return stlmntSIO; // // }
public List<PdAdtlInfoOut> getAdtnlInfo(PdAdtlInfoIn in) throws BizApplicationException { List<PdAdtlInfoOut> out = new ArrayList<>(); // 상품코드, 상품부가정보유형, 적일일자를 입력하여 해당 상품에 관련된 상품부가정보를 조회함 // Enter the product code, product additional information type code, // apply date and inquiry product additional information related to the // product PdAdditionalInfoListIn additionalIn = new PdAdditionalInfoListIn(); additionalIn.setInstitutionId(pdPdM.getInstCd()); additionalIn.setPdCd(pdPdM.getPdCd()); additionalIn.setAdditionalInfoCd(in.getAdtnlInfoCd()); additionalIn.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(), _getAplyTmString(in.getAplyTm()))); List<PdAdditionalInfoOut> additionalOut = _getPdCore().getListAdditionalInfo(additionalIn); for(PdAdditionalInfoOut item : CollectionUtils.emptyIfNull(additionalOut)) { PdAdtlInfoOut temp = new PdAdtlInfoOut(); temp.setAdtnlInfoCd(item.getAdditionalInfoCd()); temp.setPdRelStsCd(item.getPdRelationStatusCd()); temp.setAdtnlInfoCntnt(item.getAdditionalInfoContent()); temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(item.getApplyStartDate())); temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(item.getApplyEndDate())); temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(item.getApplyStartDate())); temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(item.getApplyEndDate())); out.add(temp); } return out; }
public String getMthrArrId() { return arrTxBsicIO.getMthrArrId(); }
public String getClosingAfterYn() throws BizApplicationException { return _getContextHeader().getClsgAfYn(); }
public AplctnRgstSvcSubInfoIn clone(){ try{ AplctnRgstSvcSubInfoIn object= (AplctnRgstSvcSubInfoIn)super.clone(); if ( this.cndCdList== null ) object.cndCdList = null; else{ java.util.List<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdCndIn> clonedList = new java.util.ArrayList<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdCndIn>(cndCdList.size()); for( bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdCndIn item : cndCdList ){ clonedList.add( (bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdCndIn)item.clone()); } object.cndCdList = clonedList; } if ( this.xtnList== null ) object.xtnList = null; else{ java.util.List<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdXtnIn> clonedList = new java.util.ArrayList<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdXtnIn>(xtnList.size()); for( bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdXtnIn item : xtnList ){ clonedList.add( (bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdXtnIn)item.clone()); } object.xtnList = clonedList; } if ( this.relList== null ) object.relList = null; else{ java.util.List<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdRelIn> clonedList = new java.util.ArrayList<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdRelIn>(relList.size()); for( bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdRelIn item : relList ){ clonedList.add( (bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdRelIn)item.clone()); } object.relList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public FrgnCrncyChkClctnSvcIn clone(){ try{ FrgnCrncyChkClctnSvcIn object= (FrgnCrncyChkClctnSvcIn)super.clone(); if ( this.chkInfoList== null ) object.chkInfoList = null; else{ java.util.List<bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn> clonedList = new java.util.ArrayList<bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn>(chkInfoList.size()); for( bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn item : chkInfoList ){ clonedList.add( (bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn)item.clone()); } object.chkInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "OpenDeposit": _doOpenAction(arrSrvcTpCd,arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public BigDecimal getCndRngVal(ArrangementCore arr, String cndCd) throws BizApplicationException { ArrCndRngCore arrCnd = (ArrCndRngCore) arr.getArrCndCore(cndCd); if(arrCnd == null || arrCnd.getRngVal() == null) throw new BizApplicationException("AAPARE0090", new Object[] {arr.getPdCd(), cndCd}); return arrCnd.getRngVal(); }
public CustChngSvcGetIndvInfoOut clone(){ try{ CustChngSvcGetIndvInfoOut object= (CustChngSvcGetIndvInfoOut)super.clone(); if ( this.actorCntctPntList== null ) object.actorCntctPntList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustChngSvcCntctPntListIO> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustChngSvcCntctPntListIO>(actorCntctPntList.size()); for( bankware.corebanking.customer.change.service.dto.CustChngSvcCntctPntListIO item : actorCntctPntList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustChngSvcCntctPntListIO)item.clone()); } object.actorCntctPntList = clonedList; } if ( this.actorXtnInfList== null ) object.actorXtnInfList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustChngSvcXtnInfoListIO> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustChngSvcXtnInfoListIO>(actorXtnInfList.size()); for( bankware.corebanking.customer.change.service.dto.CustChngSvcXtnInfoListIO item : actorXtnInfList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustChngSvcXtnInfoListIO)item.clone()); } object.actorXtnInfList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<XtnCdIO> getListCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { List<XtnCdIO> xtnCdIOs = new ArrayList<XtnCdIO>(); List<CmBnkMIO> cmBnkMList = new ArrayList<CmBnkMIO>(); String natCd = null; String lngCd = supplInfoVal == null ? null : String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue())); String instParmNatCd = _getInstParmProvider().getInstParm(InstParamEnum.NATION_CODE.getValue()); // nation code if (!StringCoreUtils.isEmpty(instParmNatCd)) { natCd = instParmNatCd; } // natCd cmBnkMList = _getCmBnkMDso().selectListByNatCd(natCd); if( cmBnkMList == null || cmBnkMList.isEmpty() ) return xtnCdIOs; for(CmBnkMIO out : cmBnkMList) { XtnCdIO xtnCdIO = new XtnCdIO(); xtnCdIO.setCd(out.getBnkCd()); if(StringCoreUtils.isEmpty(lngCd)) { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CdNbrCoreEnum.BANK_CODE.getValue().concat(natCd).concat(out.getBnkCd()))); } else { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CdNbrCoreEnum.BANK_CODE.getValue().concat(natCd).concat(out.getBnkCd()), lngCd)); } xtnCdIOs.add(xtnCdIO); } return xtnCdIOs; }
public CaArrCndCntrlSrvcInqryIn clone(){ try{ CaArrCndCntrlSrvcInqryIn object= (CaArrCndCntrlSrvcInqryIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ScrtyIntListInqrySvcGetScrtyIntListIn clone(){ try{ ScrtyIntListInqrySvcGetScrtyIntListIn object= (ScrtyIntListInqrySvcGetScrtyIntListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DummyIO registerStandardAbbreviation(CaStdAbrvtnMgmtSvcRegisterStdAbrvtnIn in) throws BizApplicationException { DummyIO out = new DummyIO(); // Call standard abbreviation BO CaStdAbrvtnItmIO inBo = new CaStdAbrvtnItmIO(); inBo.setStdEngAbrvtnNm(in.getStdEngAbrvtnNm()); inBo.setVrtnEngAbrvtnNm(in.getVrtnEngAbrvtnNm()); inBo.setEngWrdNm(in.getEngWrdNm()); inBo.setUseLngWrdNm2(in.getUseLngWrdNm2()); inBo.setUseLngWrdNm3(in.getUseLngWrdNm3()); _getStdAbrvtn().registerStandardAbbreviation(inBo); return out; }
public Integer getListArrBasedOnStsHistoryCount(String deptId, ArrDeptRelEnum arrDeptRel, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistoryCount(deptId, null, null, null, null, arrDeptRel, curArrSts, arrSts, inqryStartDt, inqryEndDt, false); }
public CaNbrgRuleMgmtSvcGetNbrgRuleDtlOut clone(){ try{ CaNbrgRuleMgmtSvcGetNbrgRuleDtlOut object= (CaNbrgRuleMgmtSvcGetNbrgRuleDtlOut)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getMndtryNegCndYn() { if (pdPdCndM == null) { return null; } return pdPdCndM.getMndtryNegCndYn(); }
public DtiDsrRgstSvcCmptnIn clone(){ try{ DtiDsrRgstSvcCmptnIn object= (DtiDsrRgstSvcCmptnIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String xtnAtrbtNm, AprslRqstCore aprslRqstCore) throws BizApplicationException { return _getAprslRqstSubInfoBiz().getSubInfo(xtnAtrbtNm, (AprslRqstImpl)aprslRqstCore); }
public static boolean isValid(String value) { for (MinusLnTxDscdEnum item : MinusLnTxDscdEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; }
public CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblListOut clone(){ try{ CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblListOut object= (CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblListOut)super.clone(); if ( this.atrbtList== null ) object.atrbtList = null; else{ java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblOut>(atrbtList.size()); for( bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblOut item : atrbtList ){ clonedList.add( (bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblOut)item.clone()); } object.atrbtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getNumbering(String instCd,String nbrgAtrbtNm,Map<String, Object> inpParmMap) throws BizApplicationException { return getNumbering(instCd, nbrgAtrbtNm, inpParmMap, false); }
protected AprslRqstCoreImpl getUniqueBusinessBean(String instCd, String aprslRqstId) throws BizApplicationException { return (AprslRqstCoreImpl) ApplicationContextCoreUtils.getUniqueBusinessBean(instCd + aprslRqstId, getAprslRqstImplClass()); }
public Object getAttribute(String atrbtNm) throws BizApplicationException { if(isContainAttribute(atrbtNm)) { HashMap<String,Object> mainMap = _getDataContainerItem(); return (mainMap == null) ? null : mainMap.get(atrbtNm); }else { return null; } }
public void saveSubInfo(ActorCore actorCore, String dueDlgncDscd, int dueDlgncSeqNbr, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { _getActorDueDlgncSubInfoBiz().saveSubInfo((ActorImpl) actorCore, dueDlgncDscd, dueDlgncSeqNbr, xtnAtrbtNm, xtnAtrbtCntnt); }
public PdCardNbrMIO selectCardNbrInfo(String tntInstId, String cardNbr) throws BizApplicationException { // 조회 PdCardNbrMIO out = _getPdServiceDso().selectCardNbrInfo(tntInstId, cardNbr); //return return out; }
public String getTxAblStartHms() { return txAblStartHms; }
public List<CmpsCnd> getCmpsCnd(String cmpxStrctrId) throws BizApplicationException { /** * DataCache START */ String uKey = PdUtil.concatenateKeys(Arrays.asList(getInstCd(), cmpxStrctrId)); // Get cache data List<CmpsCnd> out = _getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE, uKey); if (CollectionCoreUtils.isEmpty(out)) { String aplyDate = (StringCoreUtils.isEmpty(aplyDt)) ? _getCmnContext().getTxDate() : aplyDt; String aplyTime = (StringCoreUtils.isEmpty(aplyTm)) ? CPD01.START_TM : aplyTm; ComposingCndListIn composingCndListIn = new ComposingCndListIn(); composingCndListIn.setInstitutionId(getInstCd()); composingCndListIn.setPdCd(pd != null ? pd.getPdCd() : null); composingCndListIn.setComplexStructureId(StringUtils.isNotBlank(cmpxStrctrId) ? cmpxStrctrId: getCmpxStrctrId()); composingCndListIn.setCndCd(cndCd); composingCndListIn.setBaseDate(PdUtil.parseStringToDate(aplyDate + aplyTime)); List<ComposingCnd> composingCndList = _getPdCndCore().getListComposingCnd(composingCndListIn); if (CollectionUtils.isNotEmpty(composingCndList)) { out = new ArrayList<>(); for (ComposingCnd cmposingCnd : composingCndList) { CmpsCnd cmpsCnd = new CmpsCnd(); cmpsCnd.setCmpsCndCd(cmposingCnd.getComposingCndCd()); cmpsCnd.setCndTpCd(cmposingCnd.getCndTypeCd()); cmpsCnd.setMsurUnitCd(cmposingCnd.getMeasureUnitCd()); cmpsCnd.setBlwUndrDscd(cmposingCnd.getBelowUnderDscd()); cmpsCnd.setCrncyCd(cmposingCnd.getCurrencyCd()); cmpsCnd.setCmpxCndCmpsSeq(cmposingCnd.getInquirySeq()); cmpsCnd.setInqrySeq(cmposingCnd.getInquirySeq()); cmpsCnd.setIsCalculationBaseCnd(cmposingCnd.getIsCalculationBaseCnd()); out.add(cmpsCnd); } } // Dummy 저장 if (CollectionCoreUtils.isEmpty(out)) { CmpsCnd dummy = new CmpsCnd(); dummy.setCmpsCndCd(CPD01.DUMMY); List<CmpsCnd> dummyList = new ArrayList<>(); dummyList.add(dummy); _getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE, uKey, dummyList); } else { _getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE, uKey, out); } } // Cache에 저장되어 있는게 Dummy이면 null로 변환 if (CPD01.DUMMY.equals(out.get(0).getCmpsCndCd())) { out = Collections.emptyList(); } // Return output return out; }
public ExRtMarginMgmtSvcIO clone(){ try{ ExRtMarginMgmtSvcIO object= (ExRtMarginMgmtSvcIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CndVal getComplexCndValue(int tierNbr) throws BizApplicationException { // If isCmpxCnd is false if (!isComplexCnd()) { // Simple condition throw new BizApplicationException("AAPPDE0003", null); } // Set Input PdPdCndUnitComplexSearchIn inDao = _setPdPdCndUnitComplexSearchIn(tierNbr); if (isListCnd()) { return _getComplexListCndValue(inDao); } else if (isRngCnd()) { return _getComplexRangeCndValue(inDao); } /*else if (isIntCnd()) { return _getComplexInterestCndValue(inDao); } else if (isFeeCnd()) { return _getComplexFeeCndValue(inDao); }*/ else { return null; } }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty( value)) { for (AssetStsChngRsnEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@assetStsCd"});//({0}) is invalid {1}. } return true; }
public ArrBsicQrySvcGetAcctListByPdOut clone(){ try{ ArrBsicQrySvcGetAcctListByPdOut object= (ArrBsicQrySvcGetAcctListByPdOut)super.clone(); if ( this.acctList== null ) object.acctList = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetAcctListByPd> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetAcctListByPd>(acctList.size()); for( bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetAcctListByPd item : acctList ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetAcctListByPd)item.clone()); } object.acctList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrReal> getListArrBasedOnStsHistory(String custId, ArrCustRelEnum arrCustRelEnum, String bizDscd, String pdTpCd, String pdTmpltCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt) throws BizApplicationException { return _getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId, arrCustRelEnum, bizDscd, pdTpCd, pdTmpltCd, null, curArrSts, arrSts, inqryStartDt, inqryEndDt); }
public PdServiceApplyBenefitForCardSvcIn clone(){ try{ PdServiceApplyBenefitForCardSvcIn object= (PdServiceApplyBenefitForCardSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public java.util.List<java.lang.String> getCndCd(){ return cndCd; }
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbCnstncyArArrIssmdaTmpltMDso().selectListForConsistency(pageOffSet, pgCnt); }
public void setSubInfoKnd(ActorSubInfoKndEnum subInfoKnd) throws BizApplicationException { this.actorSubInfoKnd = subInfoKnd; }
public List<StTxCmprhnsvInfoIO> getListArrTxCmprhnsvInfoByAcctgItmCd(String deptId, String baseDt, String acctgItmCd, String crncyCd) throws BizApplicationException { // 부서별 거래 sum 조회 if(StringUtils.isEmpty(deptId)) { return _getStTxMByDeptDso().selectListSpecificAcctgItmRltdArrTxInfo(_getCmnContext().getInstCode(), baseDt, acctgItmCd, crncyCd); }else { // 특정 부서 관련 거래내역 조회 return _getStTxMByDeptDso().selectListSpecificDeptAcctgItmRltdArrTxInfo(_getCmnContext().getInstCode(), deptId, baseDt, acctgItmCd, crncyCd); } }
public RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) throws Exception { if( logger.isDebugEnabled() ) { logger.debug("#####################################################################################"); logger.debug("## DpstDailyAcrlPrprtnXtrct.execute"); logger.debug("## JobId = {}", BatchApplicationContext.getJobId()); logger.debug("## JobInstanceId = {}", BatchApplicationContext.getJobInstanceId()); logger.debug("## StepName = {}", BatchApplicationContext.getCurrentStepName()); logger.debug("## JobParameters = {}", BatchApplicationContext.getJobParameters()); logger.debug("#####################################################################################"); } _initialize(); String instCd = BatchApplicationContext.getJobParameter(DailyAcrlConstant.P_INST_CD); String baseDt = BatchApplicationContext.getJobParameter(DailyAcrlConstant.P_BASE_DT); String dailyAcrlDt = DateUtils.getDateDayBefore(1, baseDt); if( logger.isDebugEnabled() ) { logger.debug("## baseDt = {}", baseDt); logger.debug("## DailyAcrlDt = {}", dailyAcrlDt); } // 일일결산적용여부 체크 _checkDailyAccrualBasis(); // 기관파라미터 - 요구불일단리이자적용여부에 따라 상품유형 - 요구불 제외/포함 판단 String dpstDailySimpleIntRtApplyYn = instParmProvider.getInstParm(InstParamEnum.DEPOSIT_DAILY_SIMPLE_INTEREST_RATE_APPLY_YN.getValue()); DpstArrInfoIO in = new DpstArrInfoIO(); in.setInstCd(instCd); in.setBaseDt(baseDt); in.setDailyAcrlDt(dailyAcrlDt); in.setBizDscd(DailyAcrlConstant.V_BIZ_DSCD); // 업무구분코드 = 01-수신 // 일단리이자계산을 적용하는 경우만 요구불상품 유형 제외 if( CCM01.YES.equals(dpstDailySimpleIntRtApplyYn) ) { in.setPdTpCd(DailyAcrlConstant.V_DPST_PD_TP_CD); // 상품유형코드 = 10-요구불 (추출에서 제외) } // 2020-07-06 김성환 테스트 실행을 위해 계약ID를 파라미터로 전달하는 경우 해당 계약ID 정보만 추출 if( !StringUtils.isEmpty(BatchApplicationContext.getJobParameter(DailyAcrlConstant.P_ARR_ID)) ) { in.setArrId(BatchApplicationContext.getJobParameter(DailyAcrlConstant.P_ARR_ID)); } // 수신상품-일일결산 추출 대상 총 건수 조회 int totCnt = dailyAcrlPrcsBat.selectCountDpstDailyAcrlTrgt(in); if( logger.isDebugEnabled() ) { logger.debug("## DpstDailyAcrl extract count = {}", totCnt); } // 다음 Step 전달 // 실행일자 chunkContext.getStepContext().getStepExecution().getJobExecution().getExecutionContext().put(DailyAcrlConstant.P_BASE_DT, baseDt); // 일일결산일자 chunkContext.getStepContext().getStepExecution().getJobExecution().getExecutionContext().put(DailyAcrlConstant.P_DAILY_ACCRUAL_DT, dailyAcrlDt); // 총건수 chunkContext.getStepContext().getStepExecution().getJobExecution().getExecutionContext().put(DailyAcrlConstant.P_TOTAL_COUNT, totCnt); return RepeatStatus.FINISHED; }
public Map<String, String> getMapSubInfo(DeptCore deptCore) throws BizApplicationException { return _getDeptSubInfoBiz().getMapSubInfo((DeptImpl)deptCore); }
public void saveListAssetThingXtnInfo(Integer assetThingSeqNbr, List<AssetThingXtnInfoCrtnIn> xtnInfoList, String txDt, Integer txSeqNbr) throws BizApplicationException{ //EAV , CTI 분리 Map<String, String> subInfoMap = _getAssetThingSubInfoBiz().getMapSubInfoCrtn(xtnInfoList); super.saveListAssetThingXtnInfoByEav(assetThingSeqNbr, xtnInfoList, txDt, txSeqNbr); _getAssetThingSubInfoBiz().saveMapSubInfo(subInfoMap, txDt, txSeqNbr, this, assetThingSeqNbr); }
public CaNoticeMsgCdSvcGetListOut clone(){ try{ CaNoticeMsgCdSvcGetListOut object= (CaNoticeMsgCdSvcGetListOut)super.clone(); if ( this.noticeMsgCdList== null ) object.noticeMsgCdList = null; else{ java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaNoticeMsgCdSvcGetOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaNoticeMsgCdSvcGetOut>(noticeMsgCdList.size()); for( bankware.corebanking.configurationadmin.actor.service.dto.CaNoticeMsgCdSvcGetOut item : noticeMsgCdList ){ clonedList.add( (bankware.corebanking.configurationadmin.actor.service.dto.CaNoticeMsgCdSvcGetOut)item.clone()); } object.noticeMsgCdList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void register(SelfAuthBsicInfoIO selfAuthBsicInfoIO, SelfAuthCdIO selfAuthCdIO) throws BizApplicationException { // create self authorization id selfAuthBsicInfoIO.setSelfAuthId(_getNbrg().getNumbering(NumberingCoreEnum.SELF_AUTH_IDENTIFICATION.getValue())); // insert self authorization data AtSelfAuthDIO atSelfAuthDIO = new AtSelfAuthDIO(); _getCmnContext().setHeaderColumn(atSelfAuthDIO); atSelfAuthDIO.setSelfAuthId(selfAuthBsicInfoIO.getSelfAuthId()); atSelfAuthDIO.setAuthCd(selfAuthBsicInfoIO.getAuthCd()); atSelfAuthDIO.setAuthStsCd(selfAuthBsicInfoIO.getAuthStsCd()); atSelfAuthDIO.setNoticeId(selfAuthBsicInfoIO.getNoticeId()); atSelfAuthDIO.setEfctvEndTmstmp(_calculateEffectiveEndTimestamp(selfAuthCdIO)); atSelfAuthDIO.setAuthTrgtTpCd(selfAuthBsicInfoIO.getAuthTrgtTpCd()); atSelfAuthDIO.setAuthErrAllwncCnt(selfAuthBsicInfoIO.getAuthErrAllwncCnt() == null ? CCM01.ZERO : selfAuthBsicInfoIO.getAuthErrAllwncCnt()); atSelfAuthDIO.setAuthErrAtmptCnt(selfAuthBsicInfoIO.getAuthErrAtmptCnt() == null ? CCM01.ZERO : selfAuthBsicInfoIO.getAuthErrAtmptCnt()); if(AuthTrgtTpEnum.MOBILE.getValue().equals(selfAuthBsicInfoIO.getAuthTrgtTpCd()) && !StringUtils.isEmpty(selfAuthBsicInfoIO.getAuthTrgtId())) { atSelfAuthDIO.setAuthTrgtId(selfAuthBsicInfoIO.getAuthTrgtId().replace("-", "").replace(".", "")); } else { atSelfAuthDIO.setAuthTrgtId(selfAuthBsicInfoIO.getAuthTrgtId()); } if(selfAuthBsicInfoIO.getAuthDemandTmstmp() != null ) atSelfAuthDIO.setAuthDemandTmstmp(selfAuthBsicInfoIO.getAuthDemandTmstmp()); else atSelfAuthDIO.setAuthDemandTmstmp(_getCmnContext().getSystemTimestamp()); _getAtSelfAuthDDso().insert(atSelfAuthDIO); // insert self authorization extend info _getSelfAuthXtnInfo().register(selfAuthBsicInfoIO); }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { String natCd = null; String bnkCd = null; if(supplInfoVal.get(CCM03.CD) != null) { bnkCd = supplInfoVal.get(CCM03.CD).toString(); } String instParmNatCd = _getInstParmProvider().getInstParm(InstParamEnum.NATION_CODE.getValue()); // nation code if (!StringCoreUtils.isEmpty(instParmNatCd)) { natCd = instParmNatCd; } CmBnkMIO cmBnkMIOOut = _getCmBnkMDso().select(natCd, bnkCd); if(cmBnkMIOOut == null){ return false; } return true; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, ArrRealCore arrReal, String txDt, Integer txSeqNbr) throws BizApplicationException { _getArrSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, (ArrRealImpl) arrReal); }
public LcOpnSvcIn clone(){ try{ LcOpnSvcIn object= (LcOpnSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public AprslBsicInfoIO getBasicInfo() throws BizApplicationException { if(aprslBasicCache == null) { return null; } AprslBsicInfoIO aprslBsicInfoIO = new AprslBsicInfoIO(); DtoCoreUtils.setSubInfoIO(aprslBasicCache, aprslBsicInfoIO); return aprslBsicInfoIO; }
public CrncyCnvrtrSvcListOut clone(){ try{ CrncyCnvrtrSvcListOut object= (CrncyCnvrtrSvcListOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrRelPrtnrInfoOut> getListArrPrtnrRelation( String arrPrtnrRelCd, String prtnrId, String prtnrTpCd, String prtnrDtlTpCd, String baseDt, ArrRealCoreImpl arrReal) throws BizApplicationException { // 계약 자산관계 주제영역 미사용 시 skip if (!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.PARTNER_RELATION) || ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd()) ) { return new ArrayList<ArrRelPrtnrInfoOut>(); } arrPrtnrRelCd = ArrRelCoreUtil.getEmptyCheckValue(arrPrtnrRelCd); prtnrId = ArrRelCoreUtil.getEmptyCheckValue(prtnrId); List<ArArrPrtnrRIO> arArrPrtnrRIOList = _getArArrPrtnrRDso().selectListEffective(arrReal.getInstCd(), arrReal.getArrId(), prtnrId, arrPrtnrRelCd, prtnrTpCd, prtnrDtlTpCd, baseDt); return _buildListArrRelInfoOut(arArrPrtnrRIOList); }
public List<AprslAddrOut> getListAddress(String aprslId)throws BizApplicationException { List<AsAprslAddrDIO> list = _getAsAprslAddrDDso().selectList(_getCmnContextCore().getInstCode(), aprslId); //출력부조립 List<AprslAddrOut> returnList = new ArrayList<AprslAddrOut>(); if(list.size() > 0){ for(AsAprslAddrDIO temp : list){ AprslAddrOut addTemp = _getAsAprslAddrOut(temp); returnList.add(addTemp); } } return returnList; } /** * DBIO(AsAprslAddrDIO)에서 BizIO(AsAprslAddrDIO) 설정한다. * @param in : {@link AsAprslAddrDIO} * @return AsAprslAddrDIO : {@link AsAprslAddrDIO}
public List<CndCndROut> getCndCndRelation(CndCndRelIn in) throws BizApplicationException { List<CndCndROut> out = new ArrayList<>(); CndValCndValRelationListIn cndValIn = new CndValCndValRelationListIn(); cndValIn.setInstitutionId(getInstCd()); cndValIn.setPdCd(in.getPdCd()); cndValIn.setCndCd(in.getCndCd()); cndValIn.setListCd(in.getListCd()); cndValIn.setCndBetweenRelationTypeCd(in.getCndBtwnRelTpCd()); cndValIn.setBaseDate(in.getAplyDt()); List<CndCndRelationOut> relationList = _getPntCndCore().getListCndValCndValRelation(cndValIn); if(relationList != null) { for(CndCndRelationOut item : relationList) { out.add(_convertCndCndRelationOutToCndCndROut(item)); } } return out; }
public Map<String, String> getMapSubInfo(Integer arrSrvcBlckngSeqNbr, Integer seqNbr, ArrRealCore arrRealCore) throws BizApplicationException { return _getArrSrvcBlckngSubInfoBiz().getMapSubInfo(arrSrvcBlckngSeqNbr, seqNbr, (ArrRealImpl)arrRealCore); }
public int delete(CaCmAprvlTmpltMIO cmAprvlTmpltMIO) { return _getCmAprvlTmpltM().delete(cmAprvlTmpltMIO); }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String bizDscd, String pdTpCd, String pdTmpltCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, int pgNbr, int pgCnt, boolean hasVrtnArr) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, bizDscd, pdTpCd, pdTmpltCd, null, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, pgNbr, pgCnt, hasVrtnArr); }
public String getSubInfo(String xtnAtrbtNm, AprslCore aprslCore) throws BizApplicationException { return _getAprslSubInfoBiz().getSubInfo(xtnAtrbtNm, (AprslImpl)aprslCore); }
public void saveSubInfo(IValueObject subInfo , StlmntCalcnSubInfoInqryIn stlmntCalcnSubInfoInqryIn) throws BizApplicationException { _getStlmntCalcnSubInfoBiz().saveSubInfo(subInfo, _setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn)); }
public TblXtnAtrXtnAtrOut getExtendAttributeExtendAttributeDetail(String instCd, String tblNm, String atrbtNm) throws BizApplicationException { CmTblXtnAtrDIO cmTblXtnAtrDIO = _getExtendAttributeDetail(instCd, tblNm, atrbtNm); if(cmTblXtnAtrDIO != null) { return _getExtendAttributeExtendAttributeDetail(instCd, tblNm, atrbtNm, cmTblXtnAtrDIO); } return null; }
public List<TblXtnAtrbtOut> getTableExtendAttribute(String instCd, String tblNm) throws BizApplicationException { return this.getTableExtendAttribute(instCd, tblNm, XtnAtrbtVrtnCmpsEnum.NA, null); }
public DummyIO removeControlCenterBasic( CaCntrlCntrMgmtSvcCntrlCntrBsicIn in ) throws BizApplicationException { CaCntrlCntrMngrSvcGetIO mngrIn = new CaCntrlCntrMngrSvcGetIO(); mngrIn.setInstCd(in.getInstCd()); // 기관코드 mngrIn.setCntrlCntrId(in.getCntrlCntrId()); // 제어센터식별자 _getCntrlCntr().removeControlCenterBasic( mngrIn ); return new DummyIO(); }
public boolean isCancelled() { return this.arrGrpStsCd.equals(ArrGrpStsCoreEnum.CANCELED.getValue()); }
public void activate(ScrtyIntStsChngIn scrtyIntStsChngIn) throws BizApplicationException { throw new BizApplicationException("AAPASE0064",null); }
public String getNumbering(String nbrgAtrbtNm,Map<String, Object> inpParmMap) throws BizApplicationException { return getNumbering(_getCmnContext().getInstCode(), nbrgAtrbtNm, inpParmMap, false); }
public LogInSvcGetLoginUserRoleOut clone(){ try{ LogInSvcGetLoginUserRoleOut object= (LogInSvcGetLoginUserRoleOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getInstParm(String parmAtrbtNm ) throws BizApplicationException { String instCd = _getCmnContextCore().getInstCode(); String instParm = getInstitutionParameterValue(instCd, parmAtrbtNm); // 2020.11.02 // 기관파라미터값 조회 시 해당 기관의 값만을 조회하도록 수정 // 기존에는 해당 기관에 값이 정의되지 않은 경우 STDA의 값을 참조했음 return instParm; }
public StlmntManualEntryMgmtSvcListOut clone(){ try{ StlmntManualEntryMgmtSvcListOut object= (StlmntManualEntryMgmtSvcListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcItemOut> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcItemOut>(tblNm.size()); for( bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcItemOut item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcItemOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int delete(CaCmTblXtnAtrXtnAtrValDIO cmTblXtnAtrXtnAtrValDIO) { super.clearCache(DataCacheCoreConfig.COMMON_TBL_XTN_ATR_XTN_ATR_VAL_BY_CMPS_CD_CACHE); return _getCmTblXtnAtrXtnAtrValD().delete(cmTblXtnAtrXtnAtrValDIO); }
public Dept getDept(String deptId) throws BizApplicationException { Dept dept = (Dept) super.getDeptCore(deptId); return dept; }
public List<TaxRtIO> getListTaxRate(String isoNatCd, String aplyStartDt) throws BizApplicationException { return _getListTaxRate(isoNatCd, "", "", aplyStartDt, ""); }
public boolean isExistArrBnftRelation(String bnftId, String baseDt, String bizDscd, String pdTpCd, String pdTmpltCd, ArrRealCoreImpl arrReal) throws BizApplicationException { if (!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.BENEFIT_RELATION) || ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd()) ) { return false; } bnftId = ArrRelCoreUtil.getEmptyCheckValue(bnftId); bizDscd = ArrRelCoreUtil.getEmptyCheckValue(bizDscd); pdTpCd = ArrRelCoreUtil.getEmptyCheckValue(pdTpCd); pdTmpltCd = ArrRelCoreUtil.getEmptyCheckValue(pdTmpltCd); String existYn = _getArArrBnftRDso().selectExistYn(arrReal.getInstCd(), arrReal.getArrId(), bnftId, bizDscd, pdTpCd, pdTmpltCd, _getInqBaseDt(baseDt) ); return ( CCM01.YES.equals(existYn) ? true : false ); }
static boolean isValid(String value){ for (CaInstParamEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public DocInstIO modify(DocInstIO docInstIO) throws BizApplicationException { // query registration data DcDocInstDIO dcDocInstDIO = new DcDocInstDIO(); _getCmnContext().setHeaderColumn(dcDocInstDIO); if(docInstIO.getInstCd() != null) dcDocInstDIO.setInstCd(docInstIO.getInstCd()); dcDocInstDIO.setDocId(docInstIO.getDocId()); dcDocInstDIO.setEfctvStartDt(StringCoreUtils.isEmpty(docInstIO.getEfctvStartDt()) ? _getCmnContext().getTxDate() : docInstIO.getEfctvStartDt()); if(!StringCoreUtils.isEmpty(docInstIO.getDocStylesheetCntnt())) { dcDocInstDIO.setDocStylesheetUrl(docInstIO.getDocStylesheetCntnt()); } else { dcDocInstDIO.setDocStylesheetUrl(docInstIO.getDocStylesheetUrl()); } DcDocInstDIO rgstrnDcDocInstDIO = _getDcDocInstDDso().select(dcDocInstDIO.getInstCd(), dcDocInstDIO.getDocId(), dcDocInstDIO.getEfctvStartDt()); dcDocInstDIO.setDocCntnt(docInstIO.getDocCntnt()); // if(docInstIO.getDocCntnt() != null) { // dcDocInstDIO.setDocCntnt(docInstIO.getDocCntnt().getBytes()); // } dcDocInstDIO.setEfctvEndDt(StringCoreUtils.isEmpty(docInstIO.getEfctvEndDt()) ? CCM01.MAX_DATE : docInstIO.getEfctvEndDt()); // If document exists, update registration information set effective end date boolean insertFlag = true; if(rgstrnDcDocInstDIO != null) { if(logger.isDebugEnabled()) { logger.debug("_modify() : 1 = {}", rgstrnDcDocInstDIO.getEfctvStartDt()); logger.debug("_modify() : 2 = {}", docInstIO.getEfctvStartDt()); logger.debug("_modify() : 3 = {}", DateCoreUtils.getCurrentDate(DateCoreUtils.EMPTY_DATE_TYPE)); logger.debug("_modify() : 4 = {}", rgstrnDcDocInstDIO.getEfctvStartDt()); } if(rgstrnDcDocInstDIO.getEfctvStartDt().equals(docInstIO.getEfctvStartDt()) && DateCoreUtils.getCurrentDate(DateCoreUtils.EMPTY_DATE_TYPE).compareTo(rgstrnDcDocInstDIO.getEfctvStartDt()) <= 0) { _getDcDocInstDDso().updateDocCntnt(dcDocInstDIO); insertFlag = false; } else if(rgstrnDcDocInstDIO.getEfctvStartDt().equals(docInstIO.getEfctvStartDt())) { String newEfctvEndDt = dcDocInstDIO.getEfctvEndDt(); dcDocInstDIO.setEfctvEndDt(DateCoreUtils.getDateDayBefore(1, _getCmnContext().getTxDate())); //_getDcDocInstDDso().updateEfctvEndDt(dcDocInstDIO); _getDcDocInstDDso().update(dcDocInstDIO); dcDocInstDIO.setEfctvEndDt(newEfctvEndDt); dcDocInstDIO.setEfctvStartDt(_getCmnContext().getTxDate()); } else { String newEfctvEndDt = dcDocInstDIO.getEfctvEndDt(); dcDocInstDIO.setEfctvEndDt(DateCoreUtils.getDateDayBefore(1, dcDocInstDIO.getEfctvStartDt())); //_getDcDocInstDDso().updateEfctvEndDt(dcDocInstDIO); _getDcDocInstDDso().update(dcDocInstDIO); dcDocInstDIO.setEfctvEndDt(newEfctvEndDt); } // if(!rgstrnDcDocInstDIO.getEfctvStartDt().equals(docInstIO.getEfctvStartDt())) { // throw new BizApplicationException("AAPATE0065", new Object[] { "@docTmplt" }); // } // else if(DateCoreUtils.getCurrentDate(DateCoreUtils.EMPTY_DATE_TYPE).compareTo(rgstrnDcDocInstDIO.getEfctvStartDt()) > 0) { // throw new BizApplicationException("AAPATE0106", null); // } // else { // _getDcDocInstDDso().updateDocCntnt(dcDocInstDIO); // } } if(insertFlag) { // insert data _getDcDocInstDDso().insert(dcDocInstDIO); } return _setOutInformationByRegistration(docInstIO, dcDocInstDIO); }
public void close() throws ItemStreamException { if( logger.isDebugEnabled() ) { logger.debug("## [{}] DmndDailyAcrlTrgtXtrct.close", this.seqNbr); } if( this.fileWriter != null ) { this.fileWriter.close(); } DasUtils.disconnectDasExecutor(iterator); }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String pdCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, int pgNbr, int pgCnt, boolean hasVrtnArr) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, null, null, null, pdCd, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, pgNbr, pgCnt, hasVrtnArr); }
public void validate(String inputPswd, ArrRealImpl arrReal, ArrPswdTpEnum arrPswdTpEnum) throws BizApplicationException { // 비밀번호 검증대상 여부 확인 if( !_isPasswordCheckTarget(inputPswd, arrReal) ){ return; } // 비밀번호 Block 여부 검증 후 현재 오류횟수 조회 Integer errCnt = this._checkWhetherOverPswdErrCntLimit(arrReal, arrPswdTpEnum); // 계약에 등록된 비밀번호 조회 String arrPswd = getArrPassword(arrPswdTpEnum, arrReal); if(_isPasswordEmpty(arrPswd, inputPswd)){ return; } // 비밀번호 일치여부 boolean isValidPswd = !StringUtils.isEmpty(inputPswd) && inputPswd.equals(arrPswd); // 비밀번호 검증 성공 시, 현재 오류횟수 초기화 if(isValidPswd){ if(errCnt > CCM01.ZERO ){ this._resetPasswordErrorCount(arrReal, arrPswdTpEnum); } // 비밀번호 검증 실패 시, 현재 오류횟수 + 1 } else { errCnt = this._addPasswordErrorCount(arrReal, arrPswdTpEnum); // 오류허용횟수 초과로 비밀번호가 잠금상태로 바뀌는 경우 if (errCnt >= _getPswdErrAllwncCnt(arrPswdTpEnum)) { // {0}가 잠겨 있어 거래가 불가합니다. The {0} is locked. throw new BizApplicationException("AAPARE0215", new Object[]{_getArrPswdTpAtrbtNm(arrPswdTpEnum)}); } // 비밀번호 오류인 경우 // 계좌번호 또는 {0} 오류입니다. It is {0} or account number error. throw new BizApplicationException("AAPARE0573", new Object[]{_getArrPswdTpAtrbtNm(arrPswdTpEnum)}); } }
public List<StTaxOut> getListTaxGeneratedAccount(StTaxIn stTaxIn) throws BizApplicationException { //logger.debug("StlmntCoreImpl==>getListTaxGeneratedAccount : stTaxIn {} ", stTaxIn); _checkInputValue(stTaxIn.getCustId(), "custId"); _checkInputValue(stTaxIn.getInqryStartYm(), "inqryStartYrMnth"); _checkInputValue(stTaxIn.getInqryEndYm(), "inqryEndYrMnth"); _checkInputDate(stTaxIn.getInqryStartYm(), "yyyyMM"); _checkInputDate(stTaxIn.getInqryEndYm(), "yyyyMM"); /* * set inst code if input is null */ if(StringUtils.isEmpty(stTaxIn.getInstCd())){ stTaxIn.setInstCd(_getCmnContext().getInstCode()); } StTaxMIO stTaxMIO = _getTaxBasicIn(stTaxIn); List<StTaxMIO> result = _getStTaxMDso().selectTaxGeneratedAccountList(stTaxMIO); List<StTaxOut> outList = new ArrayList<StTaxOut>(); for(StTaxMIO in : result){ outList.add(_getTaxBasicOut(in)); } return outList; } /** * <div class='en'> * @description * <pre> * This method gets list of tax details that occurred on specific transaction. * </pre> * * @note {@link StTaxIn} : required fields - instCd, arrId, txDt, txSeqNbr * </div> * * <div class='ko'> * @description * <pre> * 이 메소드는 특정거래에서 발생한 수입제세내역을 조회한다. * </pre> * * @note {@link StTaxIn}
public static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (CustSnpshtTpEnum enumObject: values()) { if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] { value, "@custStaffRelCd" }); } return true; }
public ArrBsicQrySvcOut clone(){ try{ ArrBsicQrySvcOut object= (ArrBsicQrySvcOut)super.clone(); if ( this.xtnList== null ) object.xtnList = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrXtnInfo> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrXtnInfo>(xtnList.size()); for( bankware.corebanking.arrangementservice.query.service.dto.ArrXtnInfo item : xtnList ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.ArrXtnInfo)item.clone()); } object.xtnList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaActorRolePSvcChngListIn clone(){ try{ CaActorRolePSvcChngListIn object= (CaActorRolePSvcChngListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaDeptSrchSvcGetDeptOut> getChildren(){ return children; }
public String getSubInfo(String xtnAtrbtNm, AprslCore aprslCore) throws BizApplicationException { return _getAprslSubInfoBiz().getSubInfo(xtnAtrbtNm, (AprslImpl)aprslCore); }
public ArrExtrnlIdNbrInfo getArrExtrnlIdNbrInfo(ArrExtrnlIdNbrTpEnum arrExtrnlIdNbrTp) throws BizApplicationException { return super.getArrExtrnlIdNbrInfo(arrExtrnlIdNbrTp.getValue()); }
public String getNumbering(String instCd,String nbrgAtrbtNm,Map<String, Object> inpParmMap) throws BizApplicationException { return getNumbering(instCd, nbrgAtrbtNm, inpParmMap, false); }
public CashTransitSvcDtlOut clone(){ try{ CashTransitSvcDtlOut object= (CashTransitSvcDtlOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int delete(CaAtDeptRoleTmpltDIO atDeptRoleTmpltDIO){ return _getCaAtDeptRoleTmpltD().delete(atDeptRoleTmpltDIO); }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { // query data return !(_getDcDocMDso().select(null, String.valueOf(supplInfoVal.get(CCM03.CD)), DocTypEnum.STYLESHEET_FOR_PRINTING.getValue()) == null); }
public ArrReal getMthrArr(){ return (ArrReal) super.getMthrArrCore(); }
public boolean isTableAttributeValid(String xtnTblNm, String xtnAtrbtNm, String xtnAtrbtCntnt, AtrbtCheckPdInfo pd) throws BizApplicationException { return _getAtrbt().isTableAttributeValid(xtnTblNm, xtnAtrbtNm, xtnAtrbtCntnt, pd); }
public int delete(String trnsfrKnd, String trnsfrOriginKeyVal, String lngCd) throws BizApplicationException { _getCmDataCacheManager().clearInstanceCache(DataCacheCoreConfig.TRANSLATE_LANGUAGE_CACHE, lngCd.concat(trnsfrKnd).concat(trnsfrOriginKeyVal)); return _getCmMltLngTrnsltnD().delete(trnsfrKnd, trnsfrOriginKeyVal, lngCd); }
public String getCrncyCd(){ return crncyCd; }
public ArrReal getHotspotArr(ArrReal arrReal) throws BizApplicationException { return _getArrMngrAgent().getHotspotArr(arrReal); }
public List<CaArrIssmdaTmpltIO> getListArrIssmdaTmplt(String instCd) throws BizApplicationException { return getListArrIssmdaTmplt(instCd, null); }
public String getPdCd() { return pdCd; }
public int registerPrfClaim(AprslPrfClaimCrtnIn aprslPrfClaimCrtnIn) throws BizApplicationException { // 1. 확장정보와 보조명세 분리 Map<String, String> subInfoMap = _getAprslPrfClaimSubInfoBiz().getMapSubInfoCrtn(aprslPrfClaimCrtnIn.getPrfClaimXtnList()); // 2. 선순위채권 등록 Integer prfClaimSeqNbr = super.registerPrfClaim(aprslPrfClaimCrtnIn); // 3. 보조명세 저장 _getAprslPrfClaimSubInfoBiz().saveMapSubInfo(subInfoMap, this, prfClaimSeqNbr); return prfClaimSeqNbr; }
public Map<String, String> getMapXtnInfo(String aprslId, String custId, String relCd) throws BizApplicationException{ AsAprslCustXtnInfoDIO input = new AsAprslCustXtnInfoDIO(); input.setInstCd(_getCmnContextCore().getInstCode()); input.setAprslId(aprslId); input.setCustId(custId); input.setAprslCustRelCd(relCd); Map<String, String> xtnAtrbtMap = new HashMap<String, String>(); for(AsAprslCustXtnInfoDIO xtnInfo : _getAsAprslCustXtnInfoDDso().selectList(input)) { xtnAtrbtMap.put(xtnInfo.getXtnAtrbtNm(), xtnInfo.getXtnAtrbtCntnt()); } return xtnAtrbtMap; }
public Map<String, String> getMapSubInfo(Integer arrSrvcBlckngSeqNbr, Integer seqNbr, ArrRealCore arrRealCore) throws BizApplicationException { return _getArrSrvcBlckngSubInfoBiz().getMapSubInfo(arrSrvcBlckngSeqNbr, seqNbr, (ArrRealImpl)arrRealCore); }
static boolean isValid(String value) { for (LimitProcessTypeDscdCoreEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public String getSubInfo(String xtnAtrbtNm, ArrRealCore arrReal) throws BizApplicationException { return _getArrSubInfoBiz().getSubInfo(xtnAtrbtNm, (ArrRealImpl) arrReal); }
public List<StaffTxMgmtJournalXtnOut> getListJournalizationExtendResult(StaffTxMgmtJournalSrchKeyIn in) throws BizApplicationException{ _validateInput(in); /** * Inquiry Journal Entry (extend result : display debit information and credit information in a row) */ List<AcJrnzEntryDXtnOut> listOut = _getAcJrnzEntryDXtnDso().selectListExtendJrnzRslt(_getAcJrnzEntryDXtnIn(in)); // 결과값이 없으면 그대로 리턴 if(listOut == null) { return null; } if(logger.isDebugEnabled()){ logger.debug("## StaffTxImpl....getListJournalizationExtendResult() listOut 건수 : {}", listOut.size()); } /** * Set Result value */ List<StaffTxMgmtJournalXtnOut> outs = new ArrayList<StaffTxMgmtJournalXtnOut>(); for (AcJrnzEntryDXtnOut item : listOut) { outs.add(_setStaffTxMgmtJournalXtnOut(item)); } return outs; } /** * Numgering staff transaction sequence number * 스태프거래일련번호 채번 * (random numbering - CBP 5.3) * (random numbering - CBP 5.3 재수정 sonar) * * CBP 5.9.2.20220314 * 사이트에서 커스터마이징 할 수 있도록 private 에서 protected 로 변경 * 채번규칙 쓰도록 권장합니다. * (채번규칙에 가능하면 시퀀스를 사용하시고 그렇지 않은 경우 기존과 같이 병목현상이 발생할 경우 랜덤 채번을 고려하십시오. * 사이트별 상황에 맞추어 정의하십시오.) * @param CmnJrnzArea cmnJrnzArea * @return int staffTxSeqNbr * @throws BizApplicationException * * @example * <pre> * 채번규칙 사용: * Map<String, Object> inpParmMap = new HashMap<String, Object>(); * inpParmMap.put("txDt", cmnJrnzArea.getTxDt()); // 거래일 * inpParmMap.put("deptId", cmnJrnzArea.getTxDeptId()); // 거래부서코드 * inpParmMap.put("staffId", cmnJrnzArea.getTxStaffId()); // 거래스태프식별자 * String txSeqNbr = _getNbrg().getNumbering(NumberingEnum.STAFF_TRANSACTION_SEQUENCE_NUMBER.getValue(), inpParmMap); * * private Nbrg _getNbrg() { * if (nbrg == null) { * nbrg = (Nbrg) CbbApplicationContext.getBean(Nbrg.class, nbrg); * } * return nbrg; * }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (CustActvtyStsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("APATE0028", new Object[] {value, "@custActionTpCd"}); } return false; }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty( value)) { for (AprslPrfClaimXtnInfoEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@AssetXtnAtrbtNm"});//({0}) is invalid {1}. } return true; }
public CaDeptChngSvcGetChildCntIn clone(){ try{ CaDeptChngSvcGetChildCntIn object= (CaDeptChngSvcGetChildCntIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int delete(CaSvSrvcMIO svSrvcMIO) { return _getSvSrvcM().delete(svSrvcMIO); }
public CaSysSrvcLogInqrySvcOut clone(){ try{ CaSysSrvcLogInqrySvcOut object= (CaSysSrvcLogInqrySvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void activate(ArrIssmdaStsChngIn arrIssmdaStsChngIn) throws BizApplicationException { super.changeStatus(ArrIssmdaStsEnum.ACTIVATED.getValue(), arrIssmdaStsChngIn.getStsChngRsnCntnt(), arrIssmdaStsChngIn.getIssmdaStsChngBizCdNbr(), arrIssmdaStsChngIn.getIssmdaStsChngBizCd(), arrIssmdaStsChngIn.getXtnInfoList(), arrIssmdaStsChngIn.getStsChngTxDt(), arrIssmdaStsChngIn.getStsChngTxSeqNbr()); }
public List<InterestCalculationSection> apply(ApplyInterestCalculationSectionExceptionIn in, List<InterestCalculationSection> intCalIntervals) throws BizApplicationException { int agrmntPymntDD = Integer.parseInt(in.getAgrmntPymntDay()); for(InterestCalculationSection interval : intCalIntervals) { _checkIntervalInput(interval); boolean isTrmCalcnTrgt = true; // 기간산출대상여부 boolean isEndofMonth = false; // 월말일여부 int calStartDD = Integer.parseInt(interval.getCalStartDt().substring(6, 8));// 계산시작일의 일 int calEndDD = Integer.parseInt(interval.getCalEndDt().substring(6, 8)); // 계산종료일의 일 int pymntCyclDD = Integer.parseInt(interval.getPymntCyclCorrespdngDt().substring(6, 8)); // 납입주기응당일의 일 // 계산시작일의 일 = 계산종료일의 일 & // 계산시작일의 일 = 납입주기응당일의 일 if(calStartDD == calEndDD && calStartDD == pymntCyclDD) { isTrmCalcnTrgt = false; } // 계산시작일의 일 < 계산종료일의 일 else if(calStartDD < pymntCyclDD) { String oneMonthPrvDt = DateCoreUtils.getDateMonthBeforeString(1, interval.getCalEndDt()); // 계산종료일의 1개월 전 일자 = 계산시작일 ex) 4월30일, 5월31일 if(oneMonthPrvDt.equals(interval.getCalStartDt())) { isTrmCalcnTrgt = false; } oneMonthPrvDt = DateCoreUtils.getDateMonthBeforeString(1, interval.getPymntCyclCorrespdngDt()); // 납입주기응당일의 1개월 전 일자 = 계산시작일 ex) 2월28일, 3월31일 if(oneMonthPrvDt.equals(interval.getCalStartDt())) { isEndofMonth = true; } } //계산시작일의 일 > 계산종료일의 일 else if(calStartDD > pymntCyclDD) { String oneMonthAfterDt = DateCoreUtils.getDateMonthAfterString(1, interval.getCalStartDt()); // 계산시작일의 1개월 후 일자 = 계산종료일 ex) 5월31일, 6월 30일 if(oneMonthAfterDt.equals(interval.getCalEndDt())) { isTrmCalcnTrgt = false; } // 계산시작일의 1개월 후 일자 = 납입주기응당일 ex) 1월29일, 2월28일 if(oneMonthAfterDt.equals(interval.getPymntCyclCorrespdngDt())) { isEndofMonth = true; } // 월말일에 신규 첫회차 말일이 상환예정일인 경우 계산시작일 ex) 3월31일 신규 30일 약정납입일 지정시 일계산 if (isEndofMonth && interval.getCalBaseTrmCnt() == 12 && in.getOpenAcctDt().equals(interval.getCalStartDt()) && calStartDD > agrmntPymntDD) { isTrmCalcnTrgt = true; } } //상환 또는 결산 이자계산시 계산시작일의 일 = 계산종료일의 일 & 납입주기응당일과 다른 경우 // if(calStartDD == calEndDD && calStartDD != pymntCyclDD) else { if(calStartDD < pymntCyclDD) { String oneMonthPrvDt = DateCoreUtils.getDateMonthBeforeString(1, interval.getPymntCyclCorrespdngDt()); // 납입주기응당일의 1개월 전 일자 = 계산시작일 ex) 2월28일, 3월31일 if(oneMonthPrvDt.equals(interval.getCalStartDt())) { isEndofMonth = true; } } if(calStartDD > pymntCyclDD) { String oneMonthAfterDt = DateCoreUtils.getDateMonthAfterString(1, interval.getCalStartDt()); // 계산시작일의 1개월 후 일자 = 납입주기응당일 ex) 1월30일, 2월28일 if(oneMonthAfterDt.equals(interval.getPymntCyclCorrespdngDt())) { isEndofMonth = true; } } } boolean isChangeTarget = false; // 2019-07-11 if(!isTrmCalcnTrgt && interval.getCalBaseTrmCnt() != 12) { isTrmCalcnTrgt = true; isChangeTarget = true; } List<CalculationType> newCalTpList = new ArrayList<CalculationType>(); for(CalculationType calTp : interval.getCalTps()) { // 기간산출대상여부가 false 이거나 이자계산유형구분이 121이 아닌 경우 if(!isTrmCalcnTrgt || !"121".equals(calTp.getIntCalTpCd())) { newCalTpList.add(calTp); } // 기간산출대상여부가 true 이거나 이자계산유형구분이 121인 경우 else { boolean isOneMonthBefore = _isDifferenceOneMonthBefore(interval.getCalStartDt(), interval.getCalEndDt()); // 한달 미만 if(isOneMonthBefore) { CalculationType t1 = calTp.clone(); t1.setIntCalTpCd("111"); // 이자계산유형 '111' - 월단위계산약정 t1.setCalBaseTrmCnt(365); // 계산기준 - 365 newCalTpList.add(t1); } // 월말일이 상환예정일인 경우 계산시작일 ex) 2월28일, 3월30일 else if (isEndofMonth && interval.getCalBaseTrmCnt() != 12){ CalculationType t1 = calTp.clone(); t1.setIntCalTpCd("111"); // 이자계산유형 '111' - 월단위계산약정 t1.setCalBaseTrmCnt(365); // 계산기준 - 365 newCalTpList.add(t1); } // 월말일에 신규 첫회차 말일이 상환예정일인 경우 계산시작일 ex) 3월31일 신규 30일 약정납입일 지정시 일계산 else if (isEndofMonth && interval.getCalBaseTrmCnt() == 12 && in.getOpenAcctDt().equals(interval.getCalStartDt()) && calStartDD > agrmntPymntDD) { CalculationType t1 = calTp.clone(); t1.setIntCalTpCd("111"); // 이자계산유형 '111' - 월단위계산약정 t1.setCalBaseTrmCnt(365); // 계산기준 - 365 newCalTpList.add(t1); } // 한달 이후 else { // 계산시작일의 1개월 후 일자 산출 String oneMonthAfterStartDt = DateCoreUtils.getDateMonthAfterString(1, calTp.getCalStartDt()); // 산출일자의 전일 String oneDayBeforeOneMonthAfter = DateCoreUtils.getDateDayBeforeString(1, oneMonthAfterStartDt); CalculationType t1 = calTp.clone(); t1.setCalEndDt(DateCoreUtils.getDateDayBeforeString(1, oneMonthAfterStartDt)); // 계산종료일 = 계산시작일 한달 후의 전일 // 계산시작일1개월후 < 납입주기응당일 & 계산유형의 계산종료일 < 산출일자의 전일 2019-07-24 if(DateCoreUtils.isDt1AfterDt2(interval.getPymntCyclCorrespdngDt(), oneMonthAfterStartDt) && DateCoreUtils.isDt1BeforeDt2(calTp.getCalEndDt(), oneDayBeforeOneMonthAfter)) { // || TxTpDscdEnum.PARTIAL_REDEMPTION.getCode().equals(in.getTxTpDscd())) { t1.setIntCalTpCd("111"); // 이자계산유형 '111' - 월단위계산약정 t1.setCalBaseTrmCnt(365); // 계산기준 - 365 newCalTpList.add(t1); } else { // 121이 말일이면 말일의 전일로 시작일 변경 String endOfOneMonthAfter = ""; // 익월의 말일 boolean isEndOfMonth = false; if ("121".equals(t1.getIntCalTpCd()) && t1.getCalStartDt().equals(DateCoreUtils.getEndDateOfMonth(t1.getCalStartDt()))) { isEndOfMonth = true; endOfOneMonthAfter = DateCoreUtils.getEndDateOfMonth(oneMonthAfterStartDt); t1.setCalEndDt(DateCoreUtils.getDateDayBeforeString(1, endOfOneMonthAfter)); // 익월의 말일 전일 } t1.setCalBaseTrmCnt(12); // 계산기준 - 12 newCalTpList.add(t1); if(!isChangeTarget) { CalculationType t2 = calTp.clone(); t2.setIntCalTpCd("111"); // 이자계산유형 '111' - 월단위계산약정 t2.setCalStartDt(isEndOfMonth ? endOfOneMonthAfter : oneMonthAfterStartDt); // 121이 말일이면 익월의 말일, 아니면 계산시작일 한달 후 t2.setCalBaseTrmCnt(365); // 계산기준 - 365 newCalTpList.add(t2); if(IntCalDtlTpEnum.CHANGE_INTEREST_RATE.getCode().equals(in.getIntCalDtlTpDscd())) { interval.setNthCalTgtDscd(NthCalculationTargetDscdEnum.IGNORE_RECALCULATION.getCode()); } } } } } } interval.setCalTps(newCalTpList); }
public String getApprovalId(String wflowInstncId) throws BizApplicationException { return _getCmApprvMDso().selectAprvlId(wflowInstncId); }
public List<PdAdtlInfoOut> getAdtnlInfo(PdAdtlInfoIn in) throws BizApplicationException { List<PdAdtlInfoOut> out = new ArrayList<>(); // 상품코드, 상품부가정보유형, 적일일자를 입력하여 해당 상품에 관련된 상품부가정보를 조회함 // Enter the product code, product additional information type code, // apply date and inquiry product additional information related to the // product PdAdditionalInfoListIn additionalIn = new PdAdditionalInfoListIn(); additionalIn.setInstitutionId(pdPdM.getInstCd()); additionalIn.setPdCd(pdPdM.getPdCd()); additionalIn.setAdditionalInfoCd(in.getAdtnlInfoCd()); additionalIn.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(), _getAplyTmString(in.getAplyTm()))); List<PdAdditionalInfoOut> additionalOut = _getPdCore().getListAdditionalInfo(additionalIn); for(PdAdditionalInfoOut item : CollectionUtils.emptyIfNull(additionalOut)) { PdAdtlInfoOut temp = new PdAdtlInfoOut(); temp.setAdtnlInfoCd(item.getAdditionalInfoCd()); temp.setPdRelStsCd(item.getPdRelationStatusCd()); temp.setAdtnlInfoCntnt(item.getAdditionalInfoContent()); temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(item.getApplyStartDate())); temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(item.getApplyEndDate())); temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(item.getApplyStartDate())); temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(item.getApplyEndDate())); out.add(temp); } return out; }
public String getInstParm(String instCd, String parmAtrbtNm ) throws BizApplicationException { return _getInstParm(instCd, parmAtrbtNm); }
public Map<String, String> getMapSubInfo(DeptImpl dept){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 AtDeptSIO subInfo = getSubInfoCache(dept); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조명세 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public List<CaAsmItmIO> getAsmItmList(String instCd, String asmItmNm)throws BizApplicationException { List<CaAsmItmIO> outList = new ArrayList<CaAsmItmIO>(); List<CaAmAsmItmMIO> asmItmList =_getAmAsmItmMDso().selectListByAsmItmNm(instCd, asmItmNm); for (CaAmAsmItmMIO asmItm : asmItmList) { outList.add(_setAsmItm(asmItm)); } return outList; }
public Map<String, String> getMapSubInfo(CustTxImpl custTxImpl) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 AtCustTxSIO subInfo = getSubInfoCache(custTxImpl); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조명세 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public boolean isAcctgPrcsgPossiblityAtOnce() throws BizApplicationException { return _getAcctgCommUtil().isContainAttribute("AcctgPrcsngAtOnce")? true : false; } /** * <div class='en'> * @description * <pre> * It executes journalizing. * It supports to execute a list of multiple journalizing entries to be processed at once. * It is typically executed as post processing after online trnasaction. * This method provides the function to create general ledger, staff transaction accounting summation, and * journalizing entry in real time using accounting journalizing service after online service termination. * </pre> * @note This function should be performed in the accounting deferred processing service of the distributed environment. * @note If there isn't a input value, then it will process journalizing by internally inquiring data to be journaled. {@link #getListJournalProcessing()} * </div> * * <div class='ko'> * @description * <pre> * 회계요소의 분개처리를 실행하는 메소드이다. * 다건의 분개처리대상 목록을 한꺼번에 처리한다. * 일반적으로 온라인거래 이후 후처리로 실행된다. * 온라인서비스 종료 후 후행처리 서비스를 이용하여 실시간으로 총계정원장, 일계원장, 분개내역을 생성한다. * </pre> * @note 본 기능은 분산환경의 회계 디퍼드처리 서비스에서 수행해야 한다. * @note 입력값이 없을 경우, 분개처리되지 않은 데이터를 내부적으로 조회하여 분개처리한다. {@link #getListJournalProcessing()}
public CaTaxRtCdMgmtSvcSaveTaxRateCodeIn clone(){ try{ CaTaxRtCdMgmtSvcSaveTaxRateCodeIn object= (CaTaxRtCdMgmtSvcSaveTaxRateCodeIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Cust getCustByLoginIdNbr(String loginIdNbr, String actorUnqIdNbrTpCd, String actorUnqIdNbr) throws BizApplicationException { Cust cust = _getCustMngr().getCustByLoginIdNbr(loginIdNbr); if(cust == null){ return null; } /** * Check unique id number */ if(!cust.getUniqueIdNbr(actorUnqIdNbrTpCd).equals(actorUnqIdNbr)) { throw new BizApplicationException("AAPATE0045", null); } return cust; }
public void activate(String arrIssmdaStsChngRsnCd, String stsChngRsnCntnt, List<ArrIssmdaXtnInfo> xtnInfoList, String txDt, Integer txSeqNbr) throws BizApplicationException { // super.activate(arrIssmdaStsChngRsnCd, stsChngRsnCntnt, xtnInfoList, txDt, txSeqNbr); super.changeStatus(ArrIssmdaStsEnum.ACTIVATED.getValue(), stsChngRsnCntnt, ArrIssmdaStsChngRsnCoreEnum.cdNbr, arrIssmdaStsChngRsnCd, xtnInfoList, txDt, txSeqNbr); }
public Integer getListArrBasedOnStsHistoryCount(String deptId, ArrDeptRelEnum arrDeptRel, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistoryCount(deptId, null, null, null, null, arrDeptRel, curArrSts, arrSts, inqryStartDt, inqryEndDt, false); }
public static String getLastDateOfMonth(String date){ String lastDateOfTheMonth = null; int daysOfTheMonth = DateCoreUtils.getDayOfMonth(date); lastDateOfTheMonth = date.substring( 0, 4) + date.substring( 4, 6) + String.valueOf(daysOfTheMonth); return lastDateOfTheMonth; }
public MbrshpArrStsChngHstInqrySvcIn clone(){ try{ MbrshpArrStsChngHstInqrySvcIn object= (MbrshpArrStsChngHstInqrySvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public PntCndImpl getCnd(String cndCd) throws BizApplicationException { // 조건코드만 입력된 경우, 상품조회기준일자를 입력하여 유효조건조회 // if the apply date was not inputed, use the product input date to // inquiry condition PntCndIn in = new PntCndIn(); in.setCndCd(cndCd); in.setAplyDt(aplyDt); in.setAplyTm(aplyTm); // Return Output return getCnd(in); }
public void modifyDueDiligenceInfo(ActorDueDlgncMdfyIn dueDlgncMdfyIn) throws BizApplicationException { getActor().modifyDueDiligenceInfo(dueDlgncMdfyIn); }
public PdCndQuerySvcGetCndDetailIn clone(){ try{ PdCndQuerySvcGetCndDetailIn object= (PdCndQuerySvcGetCndDetailIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public FvrtAcctMgmtSvcGetFvrtAcctOut clone(){ try{ FvrtAcctMgmtSvcGetFvrtAcctOut object= (FvrtAcctMgmtSvcGetFvrtAcctOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<String> getListSrvcCdBySrvcPrflAtrbtNmAndCntnt(String instCd, String srvcPrflAtrbtNm, String srvcPrflCntnt) throws BizApplicationException{ return _getSvInstSrvcPrflDDso().selectListBySrvcPrflAtrbtNmAndCntnt(_getCaCmnContext().getStandardInstCode(), instCd, srvcPrflAtrbtNm, srvcPrflCntnt); }
public CaCdMgmtSvcCdInfoOut clone(){ try{ CaCdMgmtSvcCdInfoOut object= (CaCdMgmtSvcCdInfoOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(ActorCore actorCore, String xtnAtrbtNm) throws BizApplicationException { return _getActorSubInfoBiz().getSubInfo(xtnAtrbtNm, (ActorImpl) actorCore); }
public String getBfName(String bnftCd) throws BizApplicationException { if (StringCoreUtils.isEmpty(bnftCd)) { throw new BizApplicationException("AAPATE0067", new String[] { "bnftCd" }); } // Set input BfIn bfIn = new BfIn(); bfIn.setInstCd(_getCmnContext().getInstCode()); bfIn.setPdInfoDscd(PdInformationDscdCoreEnum.SERVICE.getValue()); bfIn.setBfCd(bnftCd); bfIn.setAplyDt(_getCmnContext().getTxDate()); // 상품조회 Bf bf = getBf(bfIn); // Return 상품명 return (bf == null) ? "" : bf.getBfNm(); }
public String getArrAgrmntChnlDscd(){ return arrAgrmntChnlDscd; }
public Map<String, String> getMapSubInfo(AssetTxImpl assetTx){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보험에 저장된 보조명세 캐시 조회 AsAssetTxSIO subInfo = getSubInfoCache(assetTx); // 2. 보험에 저장된 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보험에 저장된 보조원장 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(AssetTxSubInfo.FIELDS.get(entry.getKey()) == null) { continue; } // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public CaScrnMgmtSvcGetScrnInfoOut clone(){ try{ CaScrnMgmtSvcGetScrnInfoOut object= (CaScrnMgmtSvcGetScrnInfoOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void terminate(ArrGrpChngIn arrGrpChngIn) throws BizApplicationException { _getArrGrpBasicImpl().modifyArrStatus(arrGrpChngIn, ArrGrpStsCoreEnum.TERMINATED.getValue(), this); _getArrGrpArrRelImpl().terminateAllArGrpRelation(this); } /** * <div class='en'> * @description * <pre> * Register arrangement to the arrangement group. * </pre> * @seealso {@link #terminateArrGrpRel(ArrGrpCoreRelChngIn)} : Terminate the relation of arrangement and arrangement group. * </div> * * <div class='ko'> * @description * <pre> * 기등록된 계약그룹에 계약을 등록한다. * </pre> * @seealso {@link #terminateArrGrpRel(ArrGrpCoreRelChngIn)}
public String getTxTime() throws BizApplicationException { return _getContextHeader().getMsgDemandTmstmp().substring(8, 14); }
public CaDstbTaskMIO createDstbTaskMaster(CaDstbTaskMIO in) throws BizApplicationException { if(logger.isDebugEnabled()){ logger.debug("CaDstbMgmtSvc createDstbTaskMaster inParam => {}",in); } CaDstbTaskMVO param = _getDstbTaskMIO(in); // param.setDstbFinYn(CCM01.NO); //_getDistributionUtil().setHeaderColumn(param); param.set("lastChngGuid", _getCmnContext().getGuid()); param.set("lastChngTmstmp", _getCmnContext().getSystemTimestamp()); param.set("lastChngId", _getCmnContext().getStaffId()); CaDstbTaskMVO out = _getDstbTask().createDstbTaskMaster(param); return _getDstbTaskMIO(out); }
public AtrbtTpEnum getAttributeType() throws BizApplicationException { return (stdAtrbt == null) ? null : AtrbtTpEnum.getEnum(stdAtrbt.getAtrbtTpCd()); }
public String getSubInfo(String atrbtNm, DeptImpl deptImpl) throws BizApplicationException { // 1. 보조명세 캐시 조회 AtDeptSIO subInfo = getSubInfoCache(deptImpl); // 2. 보조명세 캐시가 null인 경우, null 리턴 if (subInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = subInfo.get(atrbtNm); // Casting 시 Null 방지 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public void removeAssetXtnInfo(AssetXtnInfoEnum assetXtnInfoEnum, String txDt, Integer txSeqNbr) throws BizApplicationException { // 속성명 기준으로 확장정보관리방법 판단 // 1. 확장정보명세 if(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AS_ASSET_M.getValue(), assetXtnInfoEnum.getValue())) { super.removeAssetXtnInfoByEav(assetXtnInfoEnum.getValue(), txDt, txSeqNbr); } // 2. 보조명세 else { _getAssetSubInfoBiz().saveSubInfo(assetXtnInfoEnum.getValue(), null, txDt, txSeqNbr, this); } }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "PartialWithdrawal": _checkInput(arrSrvcTpCd,arrCndActionRequiredValue); _doPartialWithdrawalAction(arrSrvcTpCd,arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
static boolean isValid(char charValue){ for (AmOperandPrefix enumObject: values()){ if(enumObject.getCharValue() == charValue) { return true; } } return false; }
public StaffTxMgmtSvcJournalSrchListOut clone(){ try{ StaffTxMgmtSvcJournalSrchListOut object= (StaffTxMgmtSvcJournalSrchListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcJournalSrchOut> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcJournalSrchOut>(tblNm.size()); for( bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcJournalSrchOut item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcJournalSrchOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) { for (ValCmptnMthdDscdEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public StaffTxMgmtSvcListOut clone(){ try{ StaffTxMgmtSvcListOut object= (StaffTxMgmtSvcListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcItemOut> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcItemOut>(tblNm.size()); for( bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcItemOut item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcItemOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String atrbtNm, DeptImpl deptImpl) throws BizApplicationException { // 1. 보조명세 캐시 조회 AtDeptSIO subInfo = getSubInfoCache(deptImpl); // 2. 보조명세 캐시가 null인 경우, null 리턴 if (subInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = subInfo.get(atrbtNm); // Casting 시 Null 방지 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public boolean isRequiredDoc(String docId, String clHrarcyCd) throws BizApplicationException { for (String listCd : getListCdList()) { List<Doc> docList = _getDocMngr().getListDocByClassification(listCd, clHrarcyCd); for (Doc doc : docList){ if (doc.getDocId().equals(docId)) return true; } } return false; }
public Map<String, String> getMapSubInfo(Integer arrSrvcBlckngSeqNbr, Integer seqNbr, ArrRealCoreImpl arrRealImpl) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); IValueObject subInfo = _getSubInfoCache((ArrRealImpl) arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); if (subInfo == null) { return subInfoMap; } for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public OthrCltrlMgmtSvcSaveIn clone(){ try{ OthrCltrlMgmtSvcSaveIn object= (OthrCltrlMgmtSvcSaveIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrReal> getListArrBasedOnStsHistory(String custId, ArrCustRelEnum arrCustRelEnum, String bizDscd, String pdTpCd, String pdTmpltCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt) throws BizApplicationException { return _getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId, arrCustRelEnum, bizDscd, pdTpCd, pdTmpltCd, null, curArrSts, arrSts, inqryStartDt, inqryEndDt); }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (CaRoleAthrtyAplyRngEnum item : CaRoleAthrtyAplyRngEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; } return false; }
public IpctMgmtSvcGetIpctTxEntryListOut clone(){ try{ IpctMgmtSvcGetIpctTxEntryListOut object= (IpctMgmtSvcGetIpctTxEntryListOut)super.clone(); if ( this.ipctMgmtSvcGetIpctTxEntryList== null ) object.ipctMgmtSvcGetIpctTxEntryList = null; else{ java.util.List<bankware.corebanking.common.importantcertificate.service.dto.IpctMgmtSvcGetIpctTxEntryList> clonedList = new java.util.ArrayList<bankware.corebanking.common.importantcertificate.service.dto.IpctMgmtSvcGetIpctTxEntryList>(ipctMgmtSvcGetIpctTxEntryList.size()); for( bankware.corebanking.common.importantcertificate.service.dto.IpctMgmtSvcGetIpctTxEntryList item : ipctMgmtSvcGetIpctTxEntryList ){ clonedList.add( (bankware.corebanking.common.importantcertificate.service.dto.IpctMgmtSvcGetIpctTxEntryList)item.clone()); } object.ipctMgmtSvcGetIpctTxEntryList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrRealCore getArrRealCoreByAcctNbr(String acctNbr, String acctNbrDstpCd) throws BizApplicationException { ArrRealGetIn arrRealGetIn = new ArrRealGetIn(); arrRealGetIn.setArrIdNbr(acctNbr); arrRealGetIn.setAcctNbrDstpCd(acctNbrDstpCd); arrRealGetIn.setArrExtrnlIdNbrTpCd(ArrExtrnlIdNbrTpCoreEnum.ACCOUNT_NUMBER.getValue()); return getArrRealCore(arrRealGetIn); }
public CaArrCndCntrlClassItmListOut clone(){ try{ CaArrCndCntrlClassItmListOut object= (CaArrCndCntrlClassItmListOut)super.clone(); if ( this.tblList== null ) object.tblList = null; else{ java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrCndCntrlClassItmOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrCndCntrlClassItmOut>(tblList.size()); for( bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrCndCntrlClassItmOut item : tblList ){ clonedList.add( (bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrCndCntrlClassItmOut)item.clone()); } object.tblList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(AprslCore aprslCore, Integer aprslThingSeqNbr) throws BizApplicationException { return _getAprslThingSubInfoBiz().getMapSubInfo((AprslImpl)aprslCore, aprslThingSeqNbr); }
public List<CaCustGradeCdMgmtIO> getListBasic(CaCustGradeCdMgmtIO custGradeCdMgmtIO) throws BizApplicationException { List<CaCustGradeCdMgmtIO> custGradeCdOutList = null; if(custGradeCdMgmtIO != null) { //check required inputs if(StringUtils.isEmpty(custGradeCdMgmtIO.getInstCd())){ throw new BizApplicationException("AAPCME0006", new String[] {"@instCd"}); } List<CaAtCustGradeMIO> atCustGradeMgmtdMgmtIOList = _getAtCustGradeMDso().selectBasicList(custGradeCdMgmtIO.getInstCd(), CCM01.YES); if(atCustGradeMgmtdMgmtIOList != null && !atCustGradeMgmtdMgmtIOList.isEmpty()) { custGradeCdOutList = new ArrayList<CaCustGradeCdMgmtIO>(); for(CaAtCustGradeMIO atCustGradeMgmtdMgmtIOItem: atCustGradeMgmtdMgmtIOList) { CaCustGradeCdMgmtIO custGradeCdOut = new CaCustGradeCdMgmtIO(); custGradeCdOut.setCustGradeKndTpCd(atCustGradeMgmtdMgmtIOItem.getCustGradeKndTpCd()); custGradeCdOut.setCustGradeCd(atCustGradeMgmtdMgmtIOItem.getCustGradeCd()); custGradeCdOut.setCustGradeCdCntnt(atCustGradeMgmtdMgmtIOItem.getCustGradeCdCntnt()); custGradeCdOut.setCustGradeClBaseCntnt(atCustGradeMgmtdMgmtIOItem.getCustGradeClBaseCntnt()); custGradeCdOutList.add(custGradeCdOut); } } } return custGradeCdOutList; }
public String getPdCndValAsJson() throws BizApplicationException { if (this.isMock()||(getArrangementCore().isStructure() && this.isComplex())) { return ""; } String listVal = "["; List<ListCndVal> listCndValList = _getPdCndListCodeListValueWithName(); for (ListCndVal listCndVal : listCndValList) { listVal = listVal.concat("{").concat(_makeKeyValue(LIST_CD,listCndVal.getListCd())).concat(","); // List Code listVal = listVal.concat(_makeKeyValue(LIST_CD_NAME,listCndVal.getListNm())).concat("},"); // List Name } // make the list value json array if (listVal.length() == 1) { return null; } else { listVal = listVal.substring(0,listVal.length()-1).concat("]"); } String ValString = "{\"".concat(LIST_CD_LIST).concat("\":").concat(listVal); if (!StringCoreUtils.isEmpty(getBsicVal())) { ValString = ValString.concat(",").concat(_makeKeyValue(BASIC_LIST_CD,getBsicVal())); } ValString = ValString.concat("}"); return ValString; }
public KrRoadAddrOut getKrRoadAddr(String addrId) throws BizApplicationException { CmKrRoadAddrMIO cmKrRoadAddrMIO = _getCmKrRoadAddrMDso().select(AddrHrarcyEnum.KOREA_ROAD_NAME_ADDRESS_CODE.getValue(), addrId); return _getKrRoadAddrOut(cmKrRoadAddrMIO); }
public List<CdDtlIO> getCodeNbrDetail(CdNbrInfoIO in) throws BizApplicationException { // Get the code master information CdNbrInfoIO cdMstOut = _getCodeMasterInformation(in); String cdNbrTpCd = cdMstOut.getCdNbrTpCd(); String instCd = in.getInstCd(); if(StringCoreUtils.isEmpty(instCd)) { instCd = _getCmnContextCore().getInstCode(); } cdMstOut.setInstCd(instCd); // Get the code detail information List<CdDtlIO> cdDtlOutList = _getCdDtl().getCodeDetail(cdMstOut); // Trnaslate the language if(!CCM01.XTN_CD.equals(cdNbrTpCd)) { String engCdNm = null; String cdNm = null; for(int i = 0; i < cdDtlOutList.size(); i++) { CdDtlIO cdDtlOut = cdDtlOutList.get(i); if(logger.isDebugEnabled()){ logger.debug("cdNbrTpCd => {}",cdNbrTpCd); logger.debug("cdDtlOutList => {}",cdDtlOut); } if (CCM01.EXTRNL_CD.equals(cdNbrTpCd)) { engCdNm = _getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, instCd.concat(cdDtlOut.getCdNbr().concat(cdDtlOut.getCd())), CCM01.LNG_ENG); cdNm = _getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, instCd.concat(cdDtlOut.getCdNbr().concat(cdDtlOut.getCd()))); } else if (CCM01.STD_SBST_CD.equals(cdNbrTpCd)) { engCdNm = _getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, cdMstOut.getUpCdNbr().concat(cdDtlOut.getCd()), CCM01.LNG_ENG); cdNm = _getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, cdMstOut.getUpCdNbr().concat(cdDtlOut.getCd())); } else { engCdNm = _getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, cdDtlOut.getCdNbr().concat(cdDtlOut.getCd()), CCM01.LNG_ENG); cdNm = _getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, cdDtlOut.getCdNbr().concat(cdDtlOut.getCd())); } cdDtlOut.setEngCdNm(engCdNm); cdDtlOut.setCdNm(cdNm); cdDtlOutList.set(i, cdDtlOut); } } return cdDtlOutList; }
protected AptMarketPriceOut getAptInfo(String aprslId)throws BizApplicationException { return _getAsAprslAptMarketPriceRDso().selectAptInfo(_getCmnContext().getInstCode(), aprslId); }
public BnkVrtlAcctRegtSvcIn clone(){ try{ BnkVrtlAcctRegtSvcIn object= (BnkVrtlAcctRegtSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value){ for (SndRcvTrgtDscdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public List<ArrReal> getListArrBasedOnStsHistory(String custId, ArrCustRelEnum arrCustRelEnum, String bizDscd, String pdTpCd, String pdTmpltCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt) throws BizApplicationException { return _getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId, arrCustRelEnum, bizDscd, pdTpCd, pdTmpltCd, null, curArrSts, arrSts, inqryStartDt, inqryEndDt); }
public BillCtgryCashMgmtSvcGetCrncyCashHldStsOut clone(){ try{ BillCtgryCashMgmtSvcGetCrncyCashHldStsOut object= (BillCtgryCashMgmtSvcGetCrncyCashHldStsOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaStdAtrbtMgmtSvcGetStdAtrbtOut clone(){ try{ CaStdAtrbtMgmtSvcGetStdAtrbtOut object= (CaStdAtrbtMgmtSvcGetStdAtrbtOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrCndChngMdfctnCndIn clone(){ try{ ArrCndChngMdfctnCndIn object= (ArrCndChngMdfctnCndIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ActorElctrncAddrOut> getListElctrncAddrInfo() throws BizApplicationException { return getActor().getListElctrncAddrInfo(); }
public String getLastValidTxDt(StTxMIO in, ArrReal arr) throws BizApplicationException { switch(ArrTxKndEnum.getEnum(_getArrTxCustom().getArrTxKnd((ArrRealCore)arr))) { case ARR_TX_DEMAND: return _getStTxDemandMDso().selectLastValidTxDt(in); case ARR_TX_INTERNAL: return _getStTxIntrnlMXtnDso().selectLastValidTxDt(in); case ARR_TX_TEMPRARY: return _getStTxTmpryMXtnDso().selectLastValidTxDt(in); default : return _getStTxMXtnDso().selectLastValidTxDt(in); } }
public List<ArrIntRt> getArrDepositInterestRate(Arrangement arr, ArrSrvcEnum arrSrvcTp, String prcsDt) throws BizApplicationException{ String arrIntRtTpCd = PdIntRtStrctrClCdEnum.DEPOSIT_NORMAL.getValue(); String arrSrvcTpCd = null; if(arrSrvcTp != null){ arrSrvcTpCd = arrSrvcTp.getValue(); } ArrIntRtIn arrIntRtIn = new ArrIntRtIn(); arrIntRtIn.setArr(arr); arrIntRtIn.setArrSrvcTpCd(arrSrvcTpCd); arrIntRtIn.setPdIntRtStrctrClCd(arrIntRtTpCd); arrIntRtIn.setIsGenerate(false); arrIntRtIn.setPrcsDt(prcsDt); return super.getListArrIntRtCore(arrIntRtIn); }
public void setCupldTxCntnt(String cupldTxCntnt){ this.cupldTxCntnt= cupldTxCntnt; }
public List<RoleClRIO> getListRoleClassificationRelation(String instCd, String roleId, String clHrarcyId, String clId) throws BizApplicationException { StringCoreUtils.checkStringParm(instCd, "@".concat(CCM03.INST_CD)); List<CmRoleClRIO> cmRoleClList = _getCmRoleClRDso().selectRoleList(instCd, roleId, clHrarcyId, clId); List<RoleClRIO> roleClrList = new ArrayList<RoleClRIO>(); for(CmRoleClRIO cmRoleClRIO : cmRoleClList) { roleClrList.add(_getRoleClRIO(cmRoleClRIO)); } return roleClrList; }
public void saveSubInfo(Map<String, String> subInfoMap, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if (subInfoMap == null || subInfoMap.isEmpty()){ return; } // 1. 보조명세 종류 조회 ArrSubInfoKndEnum subInfoKnd = arrRealImpl.getSubInfoKnd(); // 2. 계약에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(arrRealImpl); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("arrId", arrRealImpl.getArrId()); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // insert _insertSubInfo(subInfoKnd, subInfoCache); // save cache arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(), subInfoCache); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 변경전 이력 저장 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // update _updateSubInfo(subInfoKnd, subInfoCache); } }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { String instCd = ""; if(supplInfoVal.get(CCM03.CD) != null) { instCd = supplInfoVal.get(CCM03.CD).toString(); } if(logger.isDebugEnabled()) { logger.debug("######### CaInstMgmt checkCode in instCd : {}", instCd); } CaCmInstMIO cmInstMIO = new CaCmInstMIO(); cmInstMIO.setInstCd(instCd); if(null == _getCmInstMDso().select(cmInstMIO)) { if(logger.isDebugEnabled()) { logger.debug("######### CaInstMgmt checkCode false is null !!!"); } } else { if(logger.isDebugEnabled()) { logger.debug("######### CaInstMgmt checkCode true : {}", cmInstMIO.getFieldValues()); } } return true; }
static boolean isValid(String value){ for (CaDstbTaskChngStatusCdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public CaCmStdAtrMIO select(CaCmStdAtrMIO cmStdAtrMIO) { return _getCmStdAtrM().select(cmStdAtrMIO); }
public BalVrfctnMsmtchSvcIn clone(){ try{ BalVrfctnMsmtchSvcIn object= (BalVrfctnMsmtchSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String xtnAtrbtNm, AssetTxCore assetTx) throws BizApplicationException { return _getAssetTxSubInfoBiz().getSubInfo(xtnAtrbtNm, (AssetTxImpl)assetTx); }
public String getFaxNbr(){ return faxNbr; }
public java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocTreeDtlOut> getChildren(){ return children; }
public String getCndGrpTmpltCd(){ return cndGrpTmpltCd; }
protected List<AtStaffDlgtnRoleDIO> getListStaffDelegation(String dlgtnDeptId, String dlgtnStaffId) throws BizApplicationException { // Set search condition List<AtStaffDlgtnRoleDIO> atStaffDlgtnRoleDIOList = _getAtStaffDlgtnRoleDDso().selectListDlgtnRole(_getCmnContext().getInstCode(), dlgtnDeptId, dlgtnStaffId, StaffDlgtnStsEnum.ACTIVE.getValue(), _getCmnContext().getTxDate()); return atStaffDlgtnRoleDIOList; } // // /** // * Get staff delegation info list // * // * @param actorBsicInfoIO (required) StaffDlgtnRoleIO information(institution code, staff id, role id, start date) // * @return List<StaffDlgtnRoleIO> staff delegation info list // * @throws BizApplicationException // */ // @BxmCategory(logicalName="Get staff delegation info list") // protected List<StaffDlgtnRoleIO> getStaffDelegationDynamicList(StaffDlgtnRoleIO in) throws BizApplicationException { // // // List<StaffDlgtnRoleIO> outList = null; // // // if(in != null) { // // // List<AtStaffDlgtnRoleDIO> atStaffDlgtnRoleDIOList = _getAtStaffDlgtnRoleDDso().selectDynamic(in.getInstCd(), in.getStaffId(), in.getRoleId(), in.getEfctvStartDt()); // // // if(atStaffDlgtnRoleDIOList != null && !atStaffDlgtnRoleDIOList.isEmpty()) { // // // outList = new ArrayList<StaffDlgtnRoleIO>(); // // // for(AtStaffDlgtnRoleDIO atStaffDlgtnRoleDIOItem: atStaffDlgtnRoleDIOList) { // StaffDlgtnRoleIO staffDlgtnRoleIO = new StaffDlgtnRoleIO(); // // // staffDlgtnRoleIO.setChngRsnCntnt(atStaffDlgtnRoleDIOItem.getChngRsnCntnt()); // staffDlgtnRoleIO.setDeptId(atStaffDlgtnRoleDIOItem.getDeptId()); // staffDlgtnRoleIO.setDlgtnDeptId(atStaffDlgtnRoleDIOItem.getDlgtnDeptId()); // staffDlgtnRoleIO.setDlgtnStaffId(atStaffDlgtnRoleDIOItem.getDlgtnStaffId()); // staffDlgtnRoleIO.setEfctvEndDt(atStaffDlgtnRoleDIOItem.getEfctvEndDt()); // staffDlgtnRoleIO.setEfctvStartDt(atStaffDlgtnRoleDIOItem.getEfctvStartDt()); // staffDlgtnRoleIO.setInstCd(atStaffDlgtnRoleDIOItem.getInstCd()); // staffDlgtnRoleIO.setRoleId(atStaffDlgtnRoleDIOItem.getRoleId()); // staffDlgtnRoleIO.setStaffId(atStaffDlgtnRoleDIOItem.getStaffId()); // // // outList.add(staffDlgtnRoleIO); // } // } // } // return outList; // }
public boolean isExistArrPrtnrRelation(String arrPrtnrRelCd, String prtnrId, String prtnrTpCd, String prtnrDtlTpCd, String baseDt) throws BizApplicationException { return _getArrPrtnrRelBiz().isExistArrPrtnrRelation(arrPrtnrRelCd, prtnrId, prtnrTpCd, prtnrDtlTpCd, baseDt, this); }
public String getPdTypeName() throws BizApplicationException { /** * DataCache START */ String uKey = PdUtil .concatenateKeys(Arrays.asList(getInstCd(), pdPdM.getPdInfoDscd(), getBizDscd(), getPdTpCd())); // Get cache data String pdTypeName = _getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_PD_TYP_M_CACHE, uKey); if (pdTypeName == null) { // 포인트유형조회 pdTypeName = _getPdCore().getPdTypeName(getInstCd(), getBizDscd(), getPdTpCd()); // Put cache data _getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_PD_TYP_M_CACHE, uKey, pdTypeName); } // Return name return pdTypeName; }
public CaDstbSystemColumnIO clone(){ try{ CaDstbSystemColumnIO object= (CaDstbSystemColumnIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int getManualEntryTotalCount(ManualEntrySrchIn in) throws BizApplicationException { return _getAcManualEntryTxMDso().selectTotalCount(_setAcManualEntrySelectListIn(in)); }
public void isValidByPdCode( String pdCd ) throws BizApplicationException { _getSrvcRstrctnDtlImpl().isValidByPdCode(pdCd); }
public boolean isAlive() { switch (ArrGrpStsCoreEnum.getEnum(getArrGrpStsCd())) { case CANCELED: case TERMINATED: return false; default: return true; } }
public BalMgmtPIO getBalMgmtP(String bizDscd,String pdTpCd,String pdTmpltCd,String pdCd,String amtTpCd,String balTpCd) throws BizApplicationException{ String key = _getKeyString(pdCd,amtTpCd,balTpCd, null); BalMgmtPIO out = _getStDataCacheManager().getCacheData(DataCacheCoreConfig.BALANCE_PARAMETER_CACHE, key); if (out == null){ // Inquiry Balance Management Parameter from DB StPdBalMgmtPIO stPdBalMgmtPIO = _getStPdBalMgmtPDso().selectByAmtTp(_getStPdBalMgmtPIO(bizDscd,pdTpCd,pdTmpltCd,pdCd,amtTpCd,balTpCd)); out = (stPdBalMgmtPIO == null)? null : _getBalMgmtPIO(stPdBalMgmtPIO); if (out != null) _getStDataCacheManager().saveCache(DataCacheCoreConfig.BALANCE_PARAMETER_CACHE,key,out); }else{ if (logger.isDebugEnabled()){ logger.debug("getBalMgmtP from memory : {}",out); } } return out; }
public void modifyDueDiligenceInfo(ActorDueDlgncMdfyIn dueDlgncMdfyIn) throws BizApplicationException { // 액터 확장정보 분리 List<ActorXtnAtrbtRgstIn> actorXtnInfoList = _getActorSubInfoBiz().getListActorXtnInfoRgst(this, dueDlgncMdfyIn.getDueDlgncXtnInfoList()); // 액터 확장정보 저장 this.saveListXtnInfo(actorXtnInfoList); // 확인의무 확장정보 분리 separate subsidiary information from extend information Map<String, String> subInfoMap = _getActorDueDlgncSubInfoBiz().getMapSubInfoCrtn(dueDlgncMdfyIn.getDueDlgncXtnInfoList()); // 확인의무 EAV 저장 save extend information super.modifyDueDiligenceInfoByEav(dueDlgncMdfyIn, null); // 확인의무 CTI 저장 save subsidiary information _getActorDueDlgncSubInfoBiz().saveMapSubInfo(this, dueDlgncMdfyIn.getDueDlgncDscd(), dueDlgncMdfyIn.getDueDlgncSeqNbr(), subInfoMap); }
public DocPrntIO printTemporaryDocIssue(DocPrntIO docPrntIO) throws BizApplicationException { return _transferDocIssue(docPrntIO); } /** * <div class='en'> * @description * <pre> * It registers status change history of issued document. * </pre> * @seealso * </div> * * <div class='ko'> * @description * <pre> * 발급문서의 발급상태변경 이력을 등록한다. * </pre> * @seealso * </div> * * @param docCore (required) : document object * @param stylesheetDoc (required) : stylesheet document object * @param docIssueIO (required) : document information for issue * @return * @throws BizApplicationException * @since 3.0.0 * @example * <pre> * DocIssueIO docIssueIO = _getDocIssueBsic().getInformation(instCd, docIssueId); * DocCore docCore = getDocCore(instCd, docIssueIO.getDocId()); * DocCore stylesheetDoc = null; * if(isDocId(docIssueIO.getDocStylesheetUrl())) { * stylesheetDoc = getDocCore(docIssueIO.getDocStylesheetUrl()); * }
static boolean isValid(String value){ for (AsmArrRelStsCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
private BfCndTestSvcOut getCmpsCnd(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); List<CmpsCnd> output = bfCnd.getCmpsCnd(); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (CollectionUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public DtoClassAtrbt getStandardDtoClassAttribute() { return stdDtoClassAtrbt; }
public List<CaXpExtrnlIntrfcMsgInfoDIO> selectMsgFldLvlValList(CaXpExtrnlIntrfcMsgInfoDIO xpExtrnlIntrfcMsgInfoDIO) { return _getCaXpExtrnlMsgInfoD().selectMsgFldLvlValList(xpExtrnlIntrfcMsgInfoDIO); }
public List<CaArArrPsbkMsgMIO > selectList(String instCd){ return _getCaArArrPsbkMsgM().selectList(instCd); }
public Integer getNthNbr() { return nthNbr; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AtrlImpl atrlImpl) throws BizApplicationException { // null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 액터역할에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 AtAtrlSIO subInfoIO = getSubInfoCache(atrlImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtAtrlSIO(); subInfoIO.setAtrlId(atrlImpl.getAtrlId()); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // insert _getAtAtrlSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(atrlImpl, subInfoIO); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // update _getAtAtrlSDso().update(subInfoIO); } // 2. 캐시 저장 atrlImpl.setSubInfoCache(subInfoIO); }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { // query data return !(_getDcDocMDso().select(null, String.valueOf(supplInfoVal.get(CCM03.CD)), null) == null); }
protected void register(CustImpl custImpl, AtCustCrtfctAplctnDIO atCustCrtfctAplctnDIO) throws BizApplicationException { AtCustMIO atCustMIO = custImpl.getCustBsicCache(); if (atCustCrtfctAplctnDIO == null) { return; } atCustCrtfctAplctnDIO.setInstCd(atCustMIO.getInstCd()); atCustCrtfctAplctnDIO.setCustId(atCustMIO.getCustId()); if (StringUtils.isEmpty(atCustCrtfctAplctnDIO.getAplctnDt())) { atCustCrtfctAplctnDIO.setAplctnDt(_getCmnContext().getTxDate()); } if (StringUtils.isEmpty(atCustCrtfctAplctnDIO.getAplctnHms())) { atCustCrtfctAplctnDIO.setAplctnHms(_getCmnContext().getTxTime()); } // get report sequence number atCustCrtfctAplctnDIO.setAplctnSeqNbr(_getAtCustCrtfctAplctnDDso().selectNextAplctnSeqNbr(atCustMIO.getInstCd(), atCustCrtfctAplctnDIO.getAplctnDt())); // insert customer certificate application information _checkPKValidation(atCustCrtfctAplctnDIO); _getAtCustCrtfctAplctnDDso().insert(atCustCrtfctAplctnDIO); }
public CustCmphInqrySvcGetCustCntctPntOut clone(){ try{ CustCmphInqrySvcGetCustCntctPntOut object= (CustCmphInqrySvcGetCustCntctPntOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveMapSubInfo(Map<String, String> aprslSubInfoMap, AprslCore aprslCore) throws BizApplicationException { _getAprslSubInfoBiz().saveMapSubInfo(aprslSubInfoMap, (AprslImpl) aprslCore); }
public String getSaleEndTime() { if (pdPdM == null) { return CPD01.END_TM; } // Return output return (pdPdM.getSaleEndDt() == null) ? CPD01.END_TM : PdUtil.parseDateToHHMMSS(pdPdM.getSaleEndDt()); }
public String getLstVal(CndClassIn in) throws BizApplicationException { String out = PdCndAplyTmDscdCoreEnum.AM.getValue(); if (logger.isDebugEnabled()) { logger.debug( "DailyLimitCountImpl getBnftGrpRngLimitVal out : {}, tntInstId : {}, custId : {}, remainingCount : {}", new Object[] { out, in.getTntInstId(), in.getCustId(), out }); } return out; }
public void doServiceAction(String arrSrvcTpCd, ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "ArrangementConditionTest": case "IntraRealTmTrnsfr": case "InterRealTmTrnsfrOut": _doMoneyTransferAction(arrSrvcTpCd,arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public UndrExmntnAprvlSvcAprvlInfoIn clone(){ try{ UndrExmntnAprvlSvcAprvlInfoIn object= (UndrExmntnAprvlSvcAprvlInfoIn)super.clone(); if ( this.aplctnInfo==null ) object.aplctnInfo = null; else object.aplctnInfo = (bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcAplctnIn)this.aplctnInfo.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getDeptId() { return tlrDtlIO.getDeptId(); }
public java.lang.String getArrMtrtyDt(){ return arrMtrtyDt; }
public boolean isOceanbase() throws BizApplicationException { DbmsVendorNmEnum vender = DbmsVendorNmEnum.getByValue(getDbmsVendorName()); if (vender == DbmsVendorNmEnum.OCEANBASE) return true; else return false; }
public List<InterestCalculationSection> apply(ApplyInterestCalculationSectionExceptionIn in, List<InterestCalculationSection> intCalIntervals) throws BizApplicationException { int advPymntDayCnt = in.getAdvPymntDayCnt(); String maturityDt = in.getMaturityDt(); String advPymntAplyMthdDscd = in.getAdvPymntAplyMthdDscd(); // 지연이자 면제 Option CalculationType delayInt = new CalculationType(); delayInt.setInstCd(in.getInstCd()); delayInt.setIntCalTpCd("212"); delayInt.setIntCalTgt(false); // 선납일수 적용 약정이자 Option (잔액연체) CalculationType agrmntBalOvrduInt = new CalculationType(); agrmntBalOvrduInt.setInstCd(in.getInstCd()); agrmntBalOvrduInt.setIntCalTpCd("152"); // 선납일수 적용 약정이자 Option (상환원금) CalculationType agrmntPrncplInt = new CalculationType(); agrmntPrncplInt.setInstCd(in.getInstCd()); agrmntPrncplInt.setIntCalTpCd("159"); for (InterestCalculationSection interval : intCalIntervals) { List<CalculationType> typeList = new ArrayList<>(); for (CalculationType type : interval.getCalTps()) { int intCalTp = Integer.parseInt(type.getIntCalTpCd()); // 계산유형 String calStartDt = type.getCalStartDt(); String calEndDt = type.getCalEndDt(); CalculationType option = null; if (intCalTp == 201 || intCalTp == 202 || intCalTp == 203) { // 지연이자 면제 option = delayInt; } else if (!AdvPymntAplyMthdDscdEnum.ONLY_APPLY_FOR_DELAY_INT.getCode() .equals(advPymntAplyMthdDscd)) { // 선납일수적용방법구분 = 지연이자 구간만 적용인 경우 잔액연체이자 선납 적용하지 않음 if (intCalTp == 302) { // 잔액연체이자 약정금리 적용 (상환원금) option = agrmntPrncplInt; } else if (intCalTp == 301 || intCalTp == 309) { // 잔액연체이자 약정금리 적용 (잔액) option = agrmntBalOvrduInt; } } if (option != null && advPymntDayCnt > 0) { String advPymntPossibleDt = calEndDt; // 만기일 후 선납일수 적용 안함 if (intCalTp == 301 || intCalTp == 302 || intCalTp == 309) { String calStartPrvDt = DateCoreUtils.getDateDayBeforeString(1, calStartDt); advPymntPossibleDt = DateCoreUtils.max(calStartPrvDt, DateCoreUtils.min(maturityDt, calEndDt)); } // 계산시작일 ~ 선납일수적용가능일 일수산출 int calDayCnt = DateCoreUtils.getPeriodBetweenString(calStartDt, advPymntPossibleDt) + 1; int aplyDayCnt = Math.min(advPymntDayCnt, calDayCnt); // 적용일수 // 계산시작일 ~ 적용선납일수 경과 후의 일자산출 String aplyEndDt = DateCoreUtils.getDateDayAfterString(aplyDayCnt - 1, calStartDt); // 분할 적용 typeList.addAll(CalculationTypeUtil.split(type, calStartDt, aplyEndDt, option)); advPymntDayCnt -= aplyDayCnt; } else { typeList.add(type); } } // 변경된 유형 반영 interval.setCalTps(typeList); } // 선납일수 반영 in.setAdvPymntDayCnt(advPymntDayCnt); return intCalIntervals; }
public List<AddrDtlIO> getListGuGun(AddrHrarcyEnum addrHrarcyEnum, String cityPrvncCd) throws BizApplicationException { List<AddrDtlIO> addrDtlIOList = new ArrayList<AddrDtlIO>(); if (StringUtils.isEmpty(cityPrvncCd)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@cityPrvncCd" }); } switch (addrHrarcyEnum) { case KOREA_ROAD_NAME_ADDRESS_CODE: addrDtlIOList = _getKoreaGuGunList(cityPrvncCd); break; default: break; } return addrDtlIOList; }
public List<CndGrpTmpltCndTmpltRel> getListCndGrpTmpltCndTmpltRel(String tntInstId, String cndGrpTmpltTpCd) throws BizApplicationException { return this.getListCndGrpTmpltCndTmpltRel(tntInstId, cndGrpTmpltTpCd , _getCmnContext().getTxDate() + _getCmnContext().getTxTime()); }
public List<ArrIssmdaTmpltIO> getListArrIssmdaTmplt(String instCd, String arrIssmdaTpCd) throws BizApplicationException { List<ArrIssmdaTmpltIO> arrIssmdaTempltList = new ArrayList<ArrIssmdaTmpltIO>(); List<ArArrIssmdaTmpltMIO> arrIssmdaTmpltMIOList = new ArrayList<ArArrIssmdaTmpltMIO>(); if (StringCoreUtils.isEmpty(instCd)) { throw new BizApplicationException("AAPCME0006", new Object[]{"@instCd"}); } // 2020.11.12 // 계약발급매체템플릿은 개별기관의 정보만을 조회 arrIssmdaTmpltMIOList = _getArArrIssmdaTmpltMDso().selectListByTpCd(instCd, StringCoreUtils.isEmpty(arrIssmdaTpCd) ? null : arrIssmdaTpCd); for (ArArrIssmdaTmpltMIO arArrIssmdaTmpltMIO : arrIssmdaTmpltMIOList) { ArrIssmdaTmpltIO arrIssmdaTmplt = _setArrIssmdaTmpltIO(arArrIssmdaTmpltMIO); List<ArrIssmdaPrflAtrbt> prflAtrbtList = _getArrIssmdaPrflCore().getListArrIssmdaProfile(instCd, arArrIssmdaTmpltMIO.getArrIssmdaTmpltId()); arrIssmdaTmplt.setPrflAtrbtList(prflAtrbtList); arrIssmdaTempltList.add(arrIssmdaTmplt); } return arrIssmdaTempltList; }
public int isContentValid(AtrbtTpEnum atrbtTpcd, AtrbtVldtnWayEnum atrbtVldtnWayCd, String vldtnRule, String atrbtCntnt) throws BizApplicationException { // Type validation if (!_getAtrbt().isValidType(atrbtTpcd, atrbtCntnt)) { return AtrbtVldRsltEnum.VLD_NO_T.getValue(); } // Check the contents validation according to validation way if (atrbtVldtnWayCd != null) { int result = _getAtrbt().isValidContent(atrbtTpcd, atrbtVldtnWayCd, vldtnRule, atrbtCntnt); if (result != AtrbtVldRsltEnum.VLD_OK.getValue()) { return result; } } return AtrbtVldRsltEnum.VLD_OK.getValue(); }
public void registerBalanceVerificationMsmtchCntnt(List<BalVrfctnMsmtchOut> balVrfctnMsmtchOutList) throws BizApplicationException { if(logger.isDebugEnabled()) { logger.debug(" ############# registerBalanceVerificationMsmtchCntnt : {}", balVrfctnMsmtchOutList); } for (BalVrfctnMsmtchOut balVrfctnMsmtchOut : balVrfctnMsmtchOutList) { if(logger.isDebugEnabled()) { logger.debug(" ############# registerBalanceVerificationMsmtchCntnt loop : {}", balVrfctnMsmtchOut); } //입력항목 체크 _checkInputValue(balVrfctnMsmtchOut); //DBIO VO로 변환 AcBalVrfctnMsmtchDIO acBalVrfctnMsmtchDIO = new AcBalVrfctnMsmtchDIO(); _setAcBalVrfctnMsmtchDIO(acBalVrfctnMsmtchDIO, balVrfctnMsmtchOut); //잔액대사불일치관리 (불일치내용 갱신) _getAcBalVrfctnMsmtchDDso().updateMsmtchCntnt(acBalVrfctnMsmtchDIO); } }
public void doServiceAction(String arrSrvCd,ArrActionRequiredValue arrActionRequiredValue) throws BizApplicationException { // 고객레벨한도관리여부가 "Y"인 경우 조건행동(한도조건) 및 한도잔액관리를 위해 회원계약을 모계약으로 임시지정한다. if(_isTargetArrForSettingMthrArr(arrActionRequiredValue)) { this.setMthrArrId(_getArrCustCoreMngr().getMembershipArrCore(this.getMainArrCustId()).getArrId()); } super.doServiceAction(arrSrvCd, arrActionRequiredValue); }
public AssetRegionClIO getAssetRegionClassification(AssetRegionClIO in) throws BizApplicationException { AsAssetRegionClMIO input = new AsAssetRegionClMIO(); input.setInstCd(_getCmnContextCore().getInstCode()); input.setAddrHrarcyCd(in.getAddrHrarcyCd()); input.setAddrId(in.getAddrId()); input.setAssetAddrRegionClCrtrCd(in.getAssetAddrRegionClCrtrCd()); if(in.getAplyStartDt() == null) { input.setAplyStartDt(_getCmnContextCore().getTxDate()); } else { input.setAplyStartDt(in.getAplyStartDt()); } AssetRegionClIO out = new AssetRegionClIO(); AsAssetRegionClMIO asAssetRegionClMIO = _AsAssetRegionClMDso().selectMax(input); if(asAssetRegionClMIO != null){ out.setAddrHrarcyCd(asAssetRegionClMIO.getAddrHrarcyCd());// set [주소체계코드] out.setAddrId(asAssetRegionClMIO.getAddrId());// set [주소식별자] out.setAssetAddrRegionClCrtrCd(asAssetRegionClMIO.getAssetAddrRegionClCrtrCd());// set [자산지역분류기준코드] out.setAplyStartDt(asAssetRegionClMIO.getAplyStartDt());// set [적용시작년월일] out.setAplyEndDt(asAssetRegionClMIO.getAplyEndDt());// set [적용종료년월일] out.setAssetAddrRegionClCd(asAssetRegionClMIO.getAssetAddrRegionClCd());// set [자산지역분류코드] } return out; }
public List<CaCoaDtlIO> getListManualEntryCoa(CaCoaDtlIO coaDtlIO, Integer pageNum, Integer pageCount) throws BizApplicationException { if(pageNum == null || pageNum == 0) pageNum = 1; if(pageCount == null || pageCount == 0) pageCount = 1000; Integer pageOffset = PaginationUtils.getPgOffset(pageNum, pageCount); if(logger.isDebugEnabled()){ logger.debug("## pageOffset:{}", pageOffset); logger.debug("## pageCount:{}", pageCount); } /** * Inquiry Coa List */ List<CaAcCoaMIO> listAcCoaMIO = _getAcCoaMDso().selectManualEntryListCoa(_getAcCoaMIO(coaDtlIO),pageOffset, pageCount); /** * Result set */ List<CaCoaDtlIO> outs = new ArrayList<CaCoaDtlIO>(); for (CaAcCoaMIO acCoaMIO : listAcCoaMIO) { outs.add(_getManualEntryCoaDtlIO(acCoaMIO)); } return outs; }
public CaInstSrvcIO getInstService(String instCd, String srvcCd) throws BizApplicationException { // Mandatory Input if (StringUtils.isEmpty(instCd)) instCd = _getCaCmnContext().getInstCode(); if (StringUtils.isEmpty(srvcCd)) throw new BizApplicationException("AAPCME0006", new Object[]{"@srvcCd"}); CaInstSrvcIO instSrvc = _getInstitutionService(instCd, srvcCd); // Check service status if(instSrvc != null && instSrvc.getSrvc() != null && !CaCSV01.SRVC_STS_ACTIVE.equals(instSrvc.getSrvc().getSrvcStsCd())) { throw new BizApplicationException("AAPCME0186", new Object[]{srvcCd, instSrvc.getSrvc().getSrvcStsCd()}); } // 서비스 다국어 검증 if(CbbApplicationContext.isTestServer()) { if (StringUtils.isEmpty(_getTrnsfrLng().getTransferLanguage(srvcCd))) { throw new BizApplicationException("AAPCME0177", new Object[] { srvcCd }); } } return instSrvc; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AprslCore aprslCore, Integer aprslThingSeqNbr) throws BizApplicationException { _getAprslThingSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AprslImpl) aprslCore, aprslThingSeqNbr); }
public PrtnrDeptSrchSvcTreeListOut clone(){ try{ PrtnrDeptSrchSvcTreeListOut object= (PrtnrDeptSrchSvcTreeListOut)super.clone(); if ( this.children== null ) object.children = null; else{ java.util.List<bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut> clonedList = new java.util.ArrayList<bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut>(children.size()); for( bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut item : children ){ clonedList.add( (bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut)item.clone()); } object.children = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CnsltnSrchSvcOut clone(){ try{ CnsltnSrchSvcOut object= (CnsltnSrchSvcOut)super.clone(); if ( this.cnsltnList== null ) object.cnsltnList = null; else{ java.util.List<bankware.corebanking.underexamination.query.service.dto.CnsltnSrchSvcGetSts> clonedList = new java.util.ArrayList<bankware.corebanking.underexamination.query.service.dto.CnsltnSrchSvcGetSts>(cnsltnList.size()); for( bankware.corebanking.underexamination.query.service.dto.CnsltnSrchSvcGetSts item : cnsltnList ){ clonedList.add( (bankware.corebanking.underexamination.query.service.dto.CnsltnSrchSvcGetSts)item.clone()); } object.cnsltnList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CmCdMIO select(CmCdMIO cmCdMIO) { return _getCmCdM().selectByCondition(cmCdMIO); }
public CaStyleSvcTextStyleIO clone(){ try{ CaStyleSvcTextStyleIO object= (CaStyleSvcTextStyleIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Object getCndClassObject(String cndCd) { Class<?> cndClass = BaCndClassMapEnum.getEnumByCode(cndCd).getClazz(); try { return cndClass.newInstance(); } catch (InstantiationException | IllegalAccessException e) { throw new BizApplicationException("AAPPDE0021", new Object[] { cndCd }); } }
public List<TblXtnAtrbtOut> getTableExtendAttribute(String instCd, String tblNm, XtnAtrbtVrtnCmpsEnum xtnAtrbtVrtnCmpsCd, Map<String, String> mapCnd) throws BizApplicationException { // Check input if (StringCoreUtils.isEmpty(instCd)) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@instCd" }); } if (StringCoreUtils.isEmpty(tblNm)) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@tblNm" }); } if (xtnAtrbtVrtnCmpsCd == null || StringCoreUtils.isEmpty(xtnAtrbtVrtnCmpsCd.getValue())) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } if (!XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd) && !XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd) && (mapCnd == null || mapCnd.isEmpty())) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } List<TblXtnAtrbtOut> out = new ArrayList<TblXtnAtrbtOut>(); List<String> itmList = new ArrayList<String>(); // Set condition if (XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)) { // skip; } else if (XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)) { itmList.add(" "); } else if (XtnAtrbtVrtnCmpsEnum.PD_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb1 = new StringBuilder(); sb1.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb1.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb1.append("\"pdTmpltCd\":").append("\"").append(mapCnd.get("pdTmpltCd")).append("\","); sb1.append("\"pdCd\":").append("\"").append(mapCnd.get("pdCd")).append("\"}"); itmList.add(sb1.toString()); StringBuilder sb2 = new StringBuilder(); sb2.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb2.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb2.append("\"pdTmpltCd\":").append("\"").append(mapCnd.get("pdTmpltCd")).append("\","); sb2.append("\"pdCd\":\"\"}"); itmList.add(sb2.toString()); StringBuilder sb3 = new StringBuilder(); sb3.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb3.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb3.append("\"pdTmpltCd\":\"\",").append("\"pdCd\":\"\"}"); itmList.add(sb3.toString()); StringBuilder sb4 = new StringBuilder(); sb4.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb4.append("\"pdTpCd\":\"\",").append("\"pdTmpltCd\":\"\",").append("\"pdCd\":\"\"}"); itmList.add(sb4.toString()); } else if (XtnAtrbtVrtnCmpsEnum.ACTOR_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"actorTpCd\":").append("\"").append(mapCnd.get("actorTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.ARR_ARR_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrArrRelCd\":").append("\"").append(mapCnd.get("arrArrRelCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.ARR_CUST_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrCustRelCd\":").append("\"").append(mapCnd.get("arrCustRelCd")).append("\"}"); itmList.add(sb.toString()); /* 2016.03.29 hongun.song 추가*/ } else if(XtnAtrbtVrtnCmpsEnum.ARR_ACTVTY_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrActvtyTpCd\":").append("\"").append(mapCnd.get("arrActvtyTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.ARR_SRVC_BLCKNG_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrSrvcBlckngCd\":").append("\"").append(mapCnd.get("arrSrvcBlckngCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.ARR_ISSMDA_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrIssmdaTpCd\":").append("\"").append(mapCnd.get("arrIssmdaTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.DUE_DLGNC_DSCD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"dueDlgncDscd\":").append("\"").append(mapCnd.get("dueDlgncDscd")).append("\"}"); itmList.add(sb.toString()); if(mapCnd.get("actorTpCd") != null){ StringBuilder sbAct = new StringBuilder(); sbAct.append("{").append("\"actorTpCd\":").append("\"").append(mapCnd.get("actorTpCd")).append("\"}"); itmList.add(sbAct.toString()); } } else if(XtnAtrbtVrtnCmpsEnum.ARR_DOC_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrDocRelCd\":").append("\"").append(mapCnd.get("arrDocRelCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.PRTNR_DTL_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"prtnrDtlTpCd\":").append("\"").append(mapCnd.get("prtnrDtlTpCd")).append("\"}"); itmList.add(sb.toString()); }else { // Input field is incorrect. Information for Checking : {0} throw new BizApplicationException("AAPSVE0001", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn inDao = new CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn(); inDao.setStdInstCd(_getCmnContextCore().getStandardInstCode()); inDao.setInstCd(instCd); inDao.setTblNm(tblNm); inDao.setJsonKeyValCntnt(itmList); if (XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)) { inDao.setXtnAtrbtVrtnCmpsCd(""); } else if (XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)) { inDao.setXtnAtrbtVrtnCmpsCd(XtnAtrbtVrtnCmpsEnum.NA.getValue()); } else { inDao.setXtnAtrbtVrtnCmpsCd(xtnAtrbtVrtnCmpsCd.getValue()); } /* // [AS-IS] 1. 개별+표준 기관 데이터 조회 // 2. 조회결과 검증처리(표준기관인 경우 표준기관의 확장속이 정의 여부 확인 // 3. (개별+표준 기관 데이터 미 존재시 )표준기관의 데이터 조회 // execute query List<CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut> xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); for(CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut xtnAtrbtOut : xtnAtrbtList) { if(_getCmnContextCore().getStandardInstCode().equals(xtnAtrbtOut.getInstCd())) { CmTblXtnAtrDIO cmTblXtnAtrDIO = _getCmTblXtnAtrDDso().select(_getCmnContextCore().getStandardInstCode(), tblNm, xtnAtrbtOut.getXtnAtrbtNm()); if(cmTblXtnAtrDIO != null && StringCoreUtils.isEmpty(cmTblXtnAtrDIO.getInstIndvDfntnMndtryYn()) && CCM01.YES.equals(_getCmTblXtnAtrDDso().select(_getCmnContextCore().getStandardInstCode(), tblNm, xtnAtrbtOut.getXtnAtrbtNm()).getInstIndvDfntnMndtryYn())) { throw new BizApplicationException("AAPCME0182", new Object[] { xtnAtrbtOut.getXtnAtrbtNm() }); } } } // one more try with standard institution if(xtnAtrbtList.isEmpty()) { inDao.setInstCd(_getCmnContextCore().getStandardInstCode()); xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); } */ // [TO-BE] 1. 개별+표준 기관 데이터 조회 // 2. 조회결과 검증처리(표준기관인 경우 표준기관의 확장속이 정의 여부 확인 // 3. (개별+표준 기관 데이터 미 존재시 )표준기관의 데이터 조회 // execute query List<CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut> xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); // //체크로직 제외함 (cm_tbl_xtn_atr_d.INST_INDV_DFNTN_MNDTRY_YN 기관개별정의필수여부) // for(CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut xtnAtrbtOut : xtnAtrbtList) { // } //개별 조회시 표준기관 데이터도 조회해 오므로 의미없는 쿼리라서 삭제함 // // one more try with standard institution // if(xtnAtrbtList.isEmpty()) { // inDao.setInstCd(_getCmnContextCore().getStandardInstCode()); // xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); // } // set output for (CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut xtnAtrbt : xtnAtrbtList) { TblXtnAtrbtOut outParm = new TblXtnAtrbtOut(); outParm.setTblNm(xtnAtrbt.getTblNm()); outParm.setXtnAtrbtNm(xtnAtrbt.getXtnAtrbtNm()); outParm.setMndtryYn(xtnAtrbt.getMndtryYn()); outParm.setScrnInpYn(xtnAtrbt.getScrnInpYn()); outParm.setScrnChngAblYn(xtnAtrbt.getScrnChngAblYn()); outParm.setCustInqryTrgtYn(xtnAtrbt.getCustInqryTrgtYn()); outParm.setIntrnlInqryTrgtYn(xtnAtrbt.getIntrnlInqryTrgtYn()); outParm.setAtrbtTpCd(xtnAtrbt.getAtrbtTpCd()); outParm.setCdNbr(xtnAtrbt.getCdNbr()); outParm.setClHrarcyId(xtnAtrbt.getClHrarcyId()); if(StringCoreUtils.isEmpty(xtnAtrbt.getAtrbtTpCd())) { StdAtrbtIO stdAtrbt = _getStdAtrbtProvider().getStandardAttribute(xtnAtrbt.getXtnAtrbtNm()); if(stdAtrbt != null && stdAtrbt.getAtrbtTpCd() != null) { outParm.setAtrbtTpCd(stdAtrbt.getAtrbtTpCd()); } } out.add(outParm); } return out; }
public String getTxRmkCntnt() { return arrTxBsicIO.getTxRmkCntnt(); } public String getCrncyCd() { return arrTxBsicIO.getCrncyCd(); }
public List<XtnCdIO> getListCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { // 2018.09.04 keewoong.hong add Sonar 정적분석 결과 반영 List<XtnCdIO> xtnCdIOs = new ArrayList<XtnCdIO>(); if(supplInfoVal == null) return xtnCdIOs; CaCaDstbEnvCdMIO svDstbEnvMIO = new CaCaDstbEnvCdMIO(); if(supplInfoVal.get(CCM03.INST_CD) == null){ svDstbEnvMIO.setInstCd(_getCaCmnContext().getInstCode()); } else { svDstbEnvMIO.setInstCd(supplInfoVal.get(CCM03.INST_CD).toString()); } svDstbEnvMIO.setActvStsCd("01"); List<CaCaDstbEnvCdMIO> svDstbEnvMList = _getSvDstbEnvMDso().selectEnvCdList(svDstbEnvMIO); String lngCd = String.valueOf(supplInfoVal.get(CaInstParamEnum.LANGUAGE_CODE.getValue())); if( svDstbEnvMList == null || svDstbEnvMList.isEmpty() ) return xtnCdIOs; for(CaCaDstbEnvCdMIO out : svDstbEnvMList) { XtnCdIO xtnCdIO = new XtnCdIO(); xtnCdIO.setCd(out.getDstbEnvrnmntCd()); if(StringUtils.isEmpty(lngCd)) { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CaCCA01.DSTB_ENV_CD + out.getDstbEnvrnmntCd())); } else { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CaCCA01.DSTB_ENV_CD + out.getDstbEnvrnmntCd(), lngCd)); } xtnCdIOs.add(xtnCdIO); } return xtnCdIOs; }
public ActorChngSvcIn clone(){ try{ ActorChngSvcIn object= (ActorChngSvcIn)super.clone(); if ( this.actorXtnInfoList== null ) object.actorXtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.ActorChngSvcXtnInfoListIn> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.ActorChngSvcXtnInfoListIn>(actorXtnInfoList.size()); for( bankware.corebanking.customer.change.service.dto.ActorChngSvcXtnInfoListIn item : actorXtnInfoList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.ActorChngSvcXtnInfoListIn)item.clone()); } object.actorXtnInfoList = clonedList; } if ( this.actorNmList== null ) object.actorNmList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.ActorChngSvcActorNmListIn> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.ActorChngSvcActorNmListIn>(actorNmList.size()); for( bankware.corebanking.customer.change.service.dto.ActorChngSvcActorNmListIn item : actorNmList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.ActorChngSvcActorNmListIn)item.clone()); } object.actorNmList = clonedList; } if ( this.actorRelList== null ) object.actorRelList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.ActorChngSvcActorRelListIn> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.ActorChngSvcActorRelListIn>(actorRelList.size()); for( bankware.corebanking.customer.change.service.dto.ActorChngSvcActorRelListIn item : actorRelList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.ActorChngSvcActorRelListIn)item.clone()); } object.actorRelList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrPlanIO getArrPlan(Integer plnSeqNbr,ArrRealCoreImpl arrReal) throws BizApplicationException { return _getArrPlanImpl().getArrPlan(plnSeqNbr,arrReal); }
public String getPntName(String pntCd) throws BizApplicationException { if (StringCoreUtils.isEmpty(pntCd)) { throw new BizApplicationException("AAPATE0067", new String[] { "pdCd" }); }
public String getInstCd() { return pdPdM.getInstCd(); }
public BalTpDtlIO getBalType(String balTpCd) throws BizApplicationException { _checkBalTypeCode(balTpCd); StBalTpMIO stBalTpCdIO = _getStDataCacheManager().getCacheData(DataCacheCoreConfig.BALANCE_TYPE_CACHE, balTpCd); if(stBalTpCdIO == null){ stBalTpCdIO = _getStBalTpCdDso().select(balTpCd); if(stBalTpCdIO == null){ //Balance type code is not exist throw new BizApplicationException("AAPSTE0005", new Object[] {balTpCd}); } _getStDataCacheManager().saveCache(DataCacheCoreConfig.BALANCE_TYPE_CACHE,balTpCd,stBalTpCdIO); }else{ if (logger.isDebugEnabled()){ logger.debug("getBalanceType from memory : {}",stBalTpCdIO); } } return _setBalTpDtlIO(stBalTpCdIO); }
public void saveAddrInfo(List<ActorAddrRgstIn> actorAddrInList) throws BizApplicationException { getActor().saveAddrInfo(actorAddrInList); }
public void modify(ArrMdfctnIn arrMdfctnIn, ArrRealImpl originArrReal) throws BizApplicationException { ArrMdfctn arrMdfctn = _getArrMngrImpl().createArrMdfctn(arrMdfctnIn, false, originArrReal); adaptArrMdfctn(arrMdfctn,arrMdfctnIn.getRqstDt(),arrMdfctnIn.getTxDt(),arrMdfctnIn.getTxSeqNbr(), originArrReal); }
public String getSubInfo(String xtnAtrbtNm, AprslRqstCore aprslRqstCore) throws BizApplicationException { return _getAprslRqstSubInfoBiz().getSubInfo(xtnAtrbtNm, (AprslRqstImpl)aprslRqstCore); }
public String getXtnInfo(ArrTxCoreImpl arrTx, String xtnAtrbtNm, boolean isEavOnly) throws BizApplicationException { // 1. Site Base에서 호출된 경우 확장정보명세만 조회 if (isEavOnly) { return _getXtnInfo(arrTx, xtnAtrbtNm); } // 2. 속성명 기준으로 확장방법 판단 // 2-1. 확장정보명세 if (!_getTblXtnAtrbt().isExtendWayEav(_getArrTxClsfctnCustom().getArrTxKndTblNm(arrTx.getArrCore()),xtnAtrbtNm)) { return _getXtnInfo(arrTx, xtnAtrbtNm); } // 2-2. 보조원장 return _getArrTxXtnInfoCustom().getSubInfo(xtnAtrbtNm, arrTx); }
public TrnsRsrvtnSvcOut clone(){ try{ TrnsRsrvtnSvcOut object= (TrnsRsrvtnSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaXpExtrnlIntrfcMsgCdMappingDIO clone(){ try{ CaXpExtrnlIntrfcMsgCdMappingDIO object= (CaXpExtrnlIntrfcMsgCdMappingDIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String atrbtNm, AsmCore asm) { return _getAsmSubInfoBiz().getSubInfo(atrbtNm, (AsmImpl)asm); }
private BfTestSvcOut getBizDscd(BfTestSvcIn in) throws BizApplicationException { BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); Bf bf = _getBfMngr().getBf(bfIn); String output = bf.getBizDscd(); BfTestSvcOut out = new BfTestSvcOut(); if(StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public List<CaTblXtnAtrbtOut> getTableExtendAttribute(String instCd, String tblNm, CaXtnAtrbtVrtnCmpsEnum xtnAtrbtVrtnCmpsCd, Map<String, String> mapCnd) throws BizApplicationException { // Check input if (StringUtils.isEmpty(instCd)) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@instCd" }); } if (StringUtils.isEmpty(tblNm)) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@tblNm" }); } if (xtnAtrbtVrtnCmpsCd == null || StringUtils.isEmpty(xtnAtrbtVrtnCmpsCd.getValue())) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } if (!CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd) && !CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd) && (mapCnd == null || mapCnd.isEmpty())) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } List<CaTblXtnAtrbtOut> out = new ArrayList<CaTblXtnAtrbtOut>(); List<String> itmList = new ArrayList<String>(); // Set condition if (CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)) { // skip; } else if (CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)) { itmList.add(" "); } else if (CaXtnAtrbtVrtnCmpsEnum.PD_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb1 = new StringBuilder(); sb1.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb1.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb1.append("\"pdTmpltCd\":").append("\"").append(mapCnd.get("pdTmpltCd")).append("\","); sb1.append("\"pdCd\":").append("\"").append(mapCnd.get("pdCd")).append("\"}"); itmList.add(sb1.toString()); StringBuilder sb2 = new StringBuilder(); sb2.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb2.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb2.append("\"pdTmpltCd\":").append("\"").append(mapCnd.get("pdTmpltCd")).append("\","); sb2.append("\"pdCd\":\"\"}"); itmList.add(sb2.toString()); StringBuilder sb3 = new StringBuilder(); sb3.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb3.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb3.append("\"pdTmpltCd\":\"\",").append("\"pdCd\":\"\"}"); itmList.add(sb3.toString()); StringBuilder sb4 = new StringBuilder(); sb4.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb4.append("\"pdTpCd\":\"\",").append("\"pdTmpltCd\":\"\",").append("\"pdCd\":\"\"}"); itmList.add(sb4.toString()); } else if (CaXtnAtrbtVrtnCmpsEnum.ACTOR_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"actorTpCd\":").append("\"").append(mapCnd.get("actorTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_ARR_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrArrRelCd\":").append("\"").append(mapCnd.get("arrArrRelCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_CUST_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrCustRelCd\":").append("\"").append(mapCnd.get("arrCustRelCd")).append("\"}"); itmList.add(sb.toString()); /* 2016.03.29 hongun.song 추가*/ } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_ACTVTY_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrActvtyTpCd\":").append("\"").append(mapCnd.get("arrActvtyTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_SRVC_BLCKNG_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrSrvcBlckngCd\":").append("\"").append(mapCnd.get("arrSrvcBlckngCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_ISSMDA_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrIssmdaTpCd\":").append("\"").append(mapCnd.get("arrIssmdaTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.DUE_DLGNC_DSCD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"dueDlgncDscd\":").append("\"").append(mapCnd.get("dueDlgncDscd")).append("\"}"); itmList.add(sb.toString()); if(mapCnd.get("actorTpCd") != null){ StringBuilder sbAct = new StringBuilder(); sbAct.append("{").append("\"actorTpCd\":").append("\"").append(mapCnd.get("actorTpCd")).append("\"}"); itmList.add(sbAct.toString()); } } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_DOC_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrDocRelCd\":").append("\"").append(mapCnd.get("arrDocRelCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.PRTNR_DTL_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"prtnrDtlTpCd\":").append("\"").append(mapCnd.get("prtnrDtlTpCd")).append("\"}"); itmList.add(sb.toString()); }else { // Input field is incorrect. Information for Checking : {0} throw new BizApplicationException("AAPSVE0001", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn inDao = new CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn(); inDao.setStdInstCd(_getCaCmnContext().getStandardInstCode()); inDao.setInstCd(instCd); inDao.setTblNm(tblNm); inDao.setJsonKeyValCntnt(itmList); if (CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)) { inDao.setXtnAtrbtVrtnCmpsCd(""); } else if (CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)) { inDao.setXtnAtrbtVrtnCmpsCd(CaXtnAtrbtVrtnCmpsEnum.NA.getValue()); } else { inDao.setXtnAtrbtVrtnCmpsCd(xtnAtrbtVrtnCmpsCd.getValue()); } // execute query List<CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut> xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); for(CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut xtnAtrbtOut : xtnAtrbtList) { if(_getCaCmnContext().getStandardInstCode().equals(xtnAtrbtOut.getInstCd())) { CaCmTblXtnAtrDIO cmTblXtnAtrDIO = _getCmTblXtnAtrDDso().select(_getCaCmnContext().getStandardInstCode(), tblNm, xtnAtrbtOut.getXtnAtrbtNm()); if(cmTblXtnAtrDIO != null && StringUtils.isEmpty(cmTblXtnAtrDIO.getInstIndvDfntnMndtryYn()) && CCM01.YES.equals(_getCmTblXtnAtrDDso().select(_getCaCmnContext().getStandardInstCode(), tblNm, xtnAtrbtOut.getXtnAtrbtNm()).getInstIndvDfntnMndtryYn())) { throw new BizApplicationException("AAPCME0182", new Object[] { xtnAtrbtOut.getXtnAtrbtNm() }); } } } // one more try with standard institution if(xtnAtrbtList.isEmpty()) { inDao.setInstCd(_getCaCmnContext().getStandardInstCode()); xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); } // set output for (CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut xtnAtrbt : xtnAtrbtList) { CaTblXtnAtrbtOut outParm = new CaTblXtnAtrbtOut(); outParm.setTblNm(xtnAtrbt.getTblNm()); outParm.setXtnAtrbtNm(xtnAtrbt.getXtnAtrbtNm()); outParm.setMndtryYn(xtnAtrbt.getMndtryYn()); outParm.setScrnInpYn(xtnAtrbt.getScrnInpYn()); outParm.setScrnChngAblYn(xtnAtrbt.getScrnChngAblYn()); outParm.setCustInqryTrgtYn(xtnAtrbt.getCustInqryTrgtYn()); outParm.setIntrnlInqryTrgtYn(xtnAtrbt.getIntrnlInqryTrgtYn()); outParm.setAtrbtTpCd(xtnAtrbt.getAtrbtTpCd()); outParm.setCdNbr(xtnAtrbt.getCdNbr()); outParm.setClHrarcyId(xtnAtrbt.getClHrarcyId()); if(StringUtils.isEmpty(xtnAtrbt.getAtrbtTpCd())) { CaStdAtrbtIO stdAtrbt = _getStdAtrbtMgmt().getStandardAttribute(xtnAtrbt.getXtnAtrbtNm()); if(stdAtrbt != null && stdAtrbt.getAtrbtTpCd() != null) { outParm.setAtrbtTpCd(stdAtrbt.getAtrbtTpCd()); } } out.add(outParm); } return out; }
public void saveSubInfo(IValueObject subInfo, AsmImpl asm) { // 1. 입력값 검증 if(subInfo == null) { throw new BizApplicationException("AAPCME0006", new Object[] {AsmSubInfo.class.getSimpleName()}); } // 2. 속성 검증 (코드값 검증) for(Entry<String,Object> entry : subInfo.getFieldValues().entrySet()) { if(entry.getValue()!=null) { _getAtrbtChk().checkStandardAttribute(entry.getKey(), String.valueOf(entry.getValue())); } } // 3. 심사보조명세정보 조회(캐시로부터) IValueObject oldCache = getSubInfoCache(asm); // 5. DB 반영 if(oldCache == null) { // 4.1.1 DBIO VO 생성 & set primary key oldCache = new AmAsmSIO(); oldCache.set("instCd",_getCmnContext().getInstCode()); oldCache.set("asmId",asm.getBasicInfo().getAsmId()); // 4.1.2 Interface VO -> DBIO VO DtoUtils.setSubInfoIO(subInfo, oldCache); // 4.1.3 insert _getAmAsmSDso().insert((AmAsmSIO)oldCache); asm.setAsmSubInfoCache(oldCache); }else { // 4.2.1 속성변경 여부 검증(변경된 속성이 없음 리턴) if (!DtoUtils.isValChanged(subInfo, oldCache)) { return; } DtoUtils.setSubInfoIO(subInfo, oldCache); // 4.2.4 update _getAmAsmSDso().update((AmAsmSIO)oldCache); } }
public List<CaSrvcPrflGetInstSrvcDtlIO> getListInstServiceByProfile(CaSrvcPrflGetInstSrvcIO in) throws BizApplicationException { List<CaSrvcPrflGetInstSrvcDtlIO> out = new ArrayList<CaSrvcPrflGetInstSrvcDtlIO>(); List<CaSvSrvcMIO> daoList = _getListInstitutionServiceBasic(in); for( CaSvSrvcMIO tmpList : daoList ) { CaSrvcPrflGetInstSrvcDtlIO srvcBsicIO = new CaSrvcPrflGetInstSrvcDtlIO(); srvcBsicIO.setSrvcCd(tmpList.getSrvcCd()); //서비스코드 srvcBsicIO.setSrvcNm(tmpList.getSrvcNm()); //서비스명 srvcBsicIO.setSrvcAbrvtnNm(tmpList.getSrvcAbrvtnNm()); //서비스약어명 srvcBsicIO.setCmpntCd(tmpList.getCmpntCd()); //컴포넌트코드 srvcBsicIO.setSrvcClassNm(tmpList.getSrvcClassNm()); //서비스클래스명 srvcBsicIO.setSrvcFtrCntnt(tmpList.getSrvcFtrCntnt()); //서비스특성내용 srvcBsicIO.setOprtnNm(tmpList.getOprtnNm()); //오퍼레이션명 srvcBsicIO.setInpDtoNm(tmpList.getInpDtoNm()); //입력DTO명 srvcBsicIO.setOutpDtoNm(tmpList.getOutpDtoNm()); //출력DTO명 out.add( srvcBsicIO ); } return out; }
public void registerArrPlanExecutionResultAsDeactivated(Integer plnSeqNbr) throws BizApplicationException { _getArrPlanXtnBiz().registerArrPlanExecutionAsDeactivated(plnSeqNbr, false, this); }
public CustCmphInqrySvcGetCustRelCdIn clone(){ try{ CustCmphInqrySvcGetCustRelCdIn object= (CustCmphInqrySvcGetCustRelCdIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String checkPassword(StaffBsicInfoIO staffBsicInfo, String pswd) throws BizApplicationException { String securityCheckRsltTpCd = null; if (staffBsicInfo == null) { return SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue(); } if (staffBsicInfo.getPswd() == null) { securityCheckRsltTpCd = SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue(); } else { if (staffBsicInfo.getPswd().equals(pswd)) { securityCheckRsltTpCd = SecurityCheckRsltTpEnum.SUCCESS.getValue(); } else { securityCheckRsltTpCd = SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue(); } } return securityCheckRsltTpCd; }
public CustGrpMgmtSvcIn clone(){ try{ CustGrpMgmtSvcIn object= (CustGrpMgmtSvcIn)super.clone(); if ( this.custGrpList== null ) object.custGrpList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustGrpMgmtSvcDtlIO> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustGrpMgmtSvcDtlIO>(custGrpList.size()); for( bankware.corebanking.customer.change.service.dto.CustGrpMgmtSvcDtlIO item : custGrpList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustGrpMgmtSvcDtlIO)item.clone()); } object.custGrpList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DlgtnRoleMgmtSvcGetDelegationRoleListIn clone(){ try{ DlgtnRoleMgmtSvcGetDelegationRoleListIn object= (DlgtnRoleMgmtSvcGetDelegationRoleListIn)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void doServiceAction(String arrSrvcTpCd, ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { Cust mainCust =_getCustMngr().getCust(super.getArr().getMainArrCustId()); if (mainCust == null){ return; } // 개인고객이 아닌 경우 가입가능고객직업유형 검증을 수행하지 않는다. if(!mainCust.isIndividual()){ return; } if (StringUtils.isEmpty(getListCd())) { //Customer job type is not exist To make decision whether This product ({0},{1}) purchase is allowed or Not //본 상품({0},{1})의 판매가능 여부 확인을 위한 고객의 직업유형이 존재하지 않습니다. throw new BizApplicationException("AAPARE0724" , new Object[]{getArrangementCore().getPd().getPdCd(),getArrangementCore().getPd().getPdNm()}); } if (!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){ //This product purchase is not allowed to customer gender type ({0},{1}) //본 상품의 판매는 고객직업유형 ({0},{1})에게 허용되지 않습니다 throw new BizApplicationException("AAPARE0693" , new Object[]{getListCd(),_getCd().getCode("A0295",getListCd())}); } }
public CaSysIntrfcInfoInsertResultOut clone(){ try{ CaSysIntrfcInfoInsertResultOut object= (CaSysIntrfcInfoInsertResultOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getCndVal() throws BizApplicationException { return getRngVal() == null ? null : getRngVal().setScale(_setScale(), RoundingMode.HALF_UP).toPlainString(); }
public ActorRgstSvcElctrncAddrIn clone(){ try{ ActorRgstSvcElctrncAddrIn object= (ActorRgstSvcElctrncAddrIn)super.clone(); if ( this.ctcptXtnInfoList== null ) object.ctcptXtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn> clonedList = new java.util.ArrayList<bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn>(ctcptXtnInfoList.size()); for( bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn item : ctcptXtnInfoList ){ clonedList.add( (bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn)item.clone()); } object.ctcptXtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AssetCore assetImpl, Integer assetThingSeqNbr, String txDt, Integer txSeqNbr) throws BizApplicationException { _getAssetThingSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, (AssetImpl) assetImpl, assetThingSeqNbr); }
public void getBizApplicationException(String errorCd, String msg1, String msg2, String msg3, String msg4) throws BizApplicationException { throw new BizApplicationException(errorCd, new String[] { msg1, msg2, msg3, msg4 }); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if( logger.isDebugEnabled() ) { logger.debug("#@# N0026 ArrCndLoanInterestGraceOneTimePermittedTermImpl Start"); } switch (arrSrvcTpCd) { case "InterestGrace": _doInterestGraceAction(arrSrvcTpCd, arrCndActionRequiredValue); return; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public CaDeptChngSvcClsrIn clone(){ try{ CaDeptChngSvcClsrIn object= (CaDeptChngSvcClsrIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaNoticeMsgCdSvcRgstRelIn clone(){ try{ CaNoticeMsgCdSvcRgstRelIn object= (CaNoticeMsgCdSvcRgstRelIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaDstbTgtDIO clone(){ try{ CaDstbTgtDIO object= (CaDstbTgtDIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DummyIO modifyExtrnlIntrfcMsgAuthInfo(CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn in) throws BizApplicationException{ logger.debug("========== modifyExtrnlIntrfcMsgAuthInfo IN: {}", in); _getCaExtrnlAuthInfoMgmt().modifyExtrnlIntrfcMsgAuthInfo(_setExtrnLIntrfcMsgAuthInfoRgstIn(in)); return new DummyIO(); }
public boolean isPreferentialInterestProvideCndApplyRulePass(List<ProvideCnd> prvdCndList) throws BizApplicationException { if (logger.isDebugEnabled()) { logger.debug("<pd> isPreferentalIntPrvdCndRulePass input prvdCndListSize : {}", prvdCndList.size()); for (ProvideCnd inPrvdCnd : prvdCndList) { logger.debug("<pd> isPreferentalIntPrvdCndRulePass input cndCd : {}", inPrvdCnd.getCndCd()); logger.debug("<pd> isPreferentalIntPrvdCndRulePass input cndVal : {}", inPrvdCnd.getVal()); logger.debug("<pd> isPreferentalIntPrvdCndRulePass input cndVal : {}", inPrvdCnd.getListCd()); } } PrefInterestProvideCndPassApplyRuleIn prefInterestProvideCndPassApplyRuleIn = new PrefInterestProvideCndPassApplyRuleIn(); prefInterestProvideCndPassApplyRuleIn.setInstitutionId(getInstCd()); prefInterestProvideCndPassApplyRuleIn.setBaseDate(PdUtil.parseStringToDate(_getCmnContext().getTxDate() + _getCmnContext().getTxTime())); prefInterestProvideCndPassApplyRuleIn.setCndGroupTemplateCd(getCndGrpTmpltCd()); prefInterestProvideCndPassApplyRuleIn.setCndGroupCd(getCndGrpCd()); prefInterestProvideCndPassApplyRuleIn.setCndCd(getCndCd()); // prefInterestProvideCndPassApplyRuleIn.setPdCd(pd.getPdCd()); if (CollectionUtils.isNotEmpty(prvdCndList)) { List<com.bankware.pf.product.api.models.ProvideCnd> apiProvideCndList = new ArrayList<>(); for (ProvideCnd provideCnd : prvdCndList) { com.bankware.pf.product.api.models.ProvideCnd apiProvideCnd = new com.bankware.pf.product.api.models.ProvideCnd(); apiProvideCnd.setProvideCndSeqNum(provideCnd.getProvidedCndSeqNbr()); apiProvideCnd.setCndCd(provideCnd.getCndCd()); apiProvideCnd.setCndTypeCd(provideCnd.getCndTpCd()); if (provideCnd.getCndTpCd().equals(CndTypeCoreEnum.RANGE.getValue())) { apiProvideCnd.setMeasureUnitCd(provideCnd.getMsurUnitCd()); apiProvideCnd.setCurrencyCd(provideCnd.getCrncyCd()); apiProvideCnd.setVal(provideCnd.getVal()); } else if (provideCnd.getCndTpCd().equals(CndTypeCoreEnum.LIST.getValue())) { apiProvideCnd.setListCd(provideCnd.getListCd()); } if (CollectionUtils.isNotEmpty(provideCnd.getProvideCndAdtnlInfoOutList())) { List<com.bankware.pf.product.api.models.ProvideCndAdditionalInfoOut> apiProvideCndAdditionalInfoOutList = new ArrayList<>(); for (ProvideCndAdditionalInfoOut provideCndAdditionalInfoOut : provideCnd.getProvideCndAdtnlInfoOutList()) { com.bankware.pf.product.api.models.ProvideCndAdditionalInfoOut apiProvideCndAdditionalInfoOut = new com.bankware.pf.product.api.models.ProvideCndAdditionalInfoOut(); apiProvideCndAdditionalInfoOut.setAdditionalInfoTypeDscd(provideCndAdditionalInfoOut.getAdditionalInfoTypeDscd()); if (CollectionUtils.isNotEmpty(provideCndAdditionalInfoOut.getAdditionalInfoValList())) { List<String> additionalInfoValList = new ArrayList<>(); for (String additionalInfoVal : provideCndAdditionalInfoOut.getAdditionalInfoValList()) { additionalInfoValList.add(additionalInfoVal); } apiProvideCndAdditionalInfoOut.setAdditionalInfoValList(additionalInfoValList); } apiProvideCndAdditionalInfoOutList.add(apiProvideCndAdditionalInfoOut); } apiProvideCnd.setProvideCndAdditionalInfoOutList(apiProvideCndAdditionalInfoOutList); } apiProvideCndList.add(apiProvideCnd); } prefInterestProvideCndPassApplyRuleIn.setProvideCndList(apiProvideCndList); if (logger.isDebugEnabled()) { logger.debug("<pd> isPreferentalIntPrvdCndRulePass PD API input apiProvideCndList size : {}", apiProvideCndList.size()); for (com.bankware.pf.product.api.models.ProvideCnd apiPrvdCnd : apiProvideCndList) { logger.debug("<pd> isPreferentalIntPrvdCndRulePass PD API input cndCd : {}", apiPrvdCnd.getCndCd()); logger.debug("<pd> isPreferentalIntPrvdCndRulePass PD API input cndVal : {}",apiPrvdCnd.getVal()); logger.debug("<pd> isPreferentalIntPrvdCndRulePass PD API input cndVal : {}",apiPrvdCnd.getListCd()); } } } return _getPdCndCore().isPrefInterestProvideCndPassApplyRule(prefInterestProvideCndPassApplyRuleIn); }
public void saveMapSubInfo(Map<String, String> arrXtnInfoMap, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if (arrXtnInfoMap == null || arrXtnInfoMap.isEmpty()) { return; } // 1. 기존 보조명세 캐시 조회결과에 따라 insert/update 판단 ArArrSrvcBlckngSIO subInfoCache = _getSubInfoCache(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = new ArArrSrvcBlckngSIO(); subInfoCache.setArrId(arrRealImpl.getArrId()); subInfoCache.setArrSrvcBlckngSeqNbr(arrSrvcBlckngSeqNbr); subInfoCache.setSeqNbr(seqNbr); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveArArrSrvcBlckngSubH(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(arrXtnInfoMap, subInfoCache); // insert _getArArrSrvcBlckngSDso().insert(subInfoCache); // save cache _saveSubInfoCache(subInfoCache, arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(arrXtnInfoMap, subInfoCache)) { return; } // 변경전 이력 저장 _saveArArrSrvcBlckngSubH((ArrRealImpl) arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(arrXtnInfoMap, subInfoCache); // update _getArArrSrvcBlckngSDso().update(subInfoCache); } }
public CaExtrnlIntrfcMsgAuthInfoMgmtSvcDelIn clone(){ try{ CaExtrnlIntrfcMsgAuthInfoMgmtSvcDelIn object= (CaExtrnlIntrfcMsgAuthInfoMgmtSvcDelIn)super.clone(); if ( this.deleteList== null ) object.deleteList = null; else{ java.util.List<bankware.corebanking.configurationadmin.externalproxy.service.dto.CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.externalproxy.service.dto.CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn>(deleteList.size()); for( bankware.corebanking.configurationadmin.externalproxy.service.dto.CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn item : deleteList ){ clonedList.add( (bankware.corebanking.configurationadmin.externalproxy.service.dto.CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn)item.clone()); } object.deleteList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaRoleMgmtSvcGetRoleScreenRelationOut clone(){ try{ CaRoleMgmtSvcGetRoleScreenRelationOut object= (CaRoleMgmtSvcGetRoleScreenRelationOut)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String registerControlCenterBasic(CaCntrlCntrMngrSvcGetIO in) throws BizApplicationException { // 입력항목 매핑 CaSvCntrlCntrMIO daoIn = _setInputControlCenterBasic( in ); // 제어센터식별자 채번 // 채번규칙 : 제어센터코드(2) + 일련번호 String cntrlCntrId = _getSvCntrlCntrMDso().selectMaxCntrlCntrId( daoIn ); cntrlCntrId = daoIn.getCntrlCntrTpCd() + "0000000000000".substring(0, 13 - cntrlCntrId.length()) + cntrlCntrId; // 제어센터식별자 채번 daoIn.setCntrlCntrId( cntrlCntrId ); _getSvCntrlCntrMDso().insert(daoIn); return daoIn.getCntrlCntrId(); // 제어센터식별자 리턴 }
public void registerDocReferenceAttributeList(List<CaDocRefAtrbtIO> docRefAtrbtList) throws BizApplicationException { _getDocRefAtrbt().create(getDocInst(), docRefAtrbtList); setReferenceObjectList(docRefAtrbtList); }
public void saveMapSubInfo(Map<String, String> subInfoMap, String txDt, Integer txSeqNbr, InsrncImpl insrncImpl) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsInsrncSIO subInfoCache = getSubInfoCache(insrncImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsInsrncSIO(); subInfoCache.setInsrncId(insrncImpl.getInsrncBasicCache().getInsrncId()); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(insrncImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-1. insert _getAsInsrncSDso().insert(subInfoCache); // 3. 캐시 저장 insrncImpl.setInsrncSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(insrncImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-2. update _getAsInsrncSDso().update(subInfoCache); } }
public List<CaStPdXtnAmtTpMIO> selectList(CaStPdXtnAmtTpMIO stPdXtnAmtTpCdIO) throws BizApplicationException { return _getStPdXtnAmtTpCd().selectList(stPdXtnAmtTpCdIO); }
public void validate(String arrSrvcCd,ArrRealCore arrReal, CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { if (cust.isClosingBzman()){ //Customer's business is closed. This service ({0}) could not be finished properly //고객이 폐업상태입니다. 본서비스({0}) 실행이 불가 합니다 throw new BizApplicationException("AAPARE0297", new Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)}); } }
public List<CaAssetKndBaseIO> getListAssetKind(String instCd,String assetTpCd, String higherAssetKndCd) throws BizApplicationException{ List<CaAssetKndBaseIO> assetKndList = new ArrayList<CaAssetKndBaseIO>(); CaAsAssetKndMIO asAssetKndMIn = new CaAsAssetKndMIO(); asAssetKndMIn.setInstCd(instCd); asAssetKndMIn.setAssetTpCd(assetTpCd); asAssetKndMIn.setHighAssetKndCd(higherAssetKndCd); for(CaAsAssetKndMIO assetKndM : _getAsAssetKndMDso().selectList(asAssetKndMIn)){ CaAssetKndBaseIO assetKndBaseIO = _setAssetKndBaseIO(assetKndM); assetKndList.add(assetKndBaseIO); } return assetKndList; }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if(logger.isDebugEnabled()){ logger.debug("ArrCndPdArrChnlImpl - getListCd : {}", getListCd()); logger.debug("ArrCndPdArrChnlImpl - isValidCndValue(getListCd() ", isValidCndValue(getListCd())); } if (!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){ // This product is not allowed to trade channel . Target Products : {0} please contact help desk // 취급하고자 하는 상품이 거래 가능한 채널이 아닙니다. 대상상품 : {0} throw new BizApplicationException("AAPARE0328" , new String[]{getArrangementCore().getPd().getPdNm()}); } }
public void saveMapSubInfo(Map<String, String> subInfoMap, CustImpl custImpl) throws BizApplicationException { // 0. null check if (subInfoMap == null || subInfoMap.isEmpty()) { return; } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustSIO subInfoIO = getSubInfoCache(custImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtCustSIO(); subInfoIO.setCustId(custImpl.getCustId()); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _getAtCustSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(custImpl, subInfoIO); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _getAtCustSDso().update(subInfoIO); } // 2. 캐시 저장 custImpl.setSubInfoCache(subInfoIO); }
public void saveSubInfo(IValueObject subInfo, String txDt, Integer txSeqNbr, AssetImpl assetImpl, Integer assetThingSeqNbr) throws BizApplicationException{ // 0. null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {_getNewSubInfo(assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr)).getClass().getSimpleName()}); } logger.debug("## <AS> saveSubInfo -> subInfo = {} :: ", subInfo.getFieldValues()); // 1. 자산물건보조명세의 종류 조회 AssetThingSubInfoKndEnum subInfoKnd = assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr); // 2. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 for(Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(entry.getValue() != null) { _getAtrbtChk().checkStandardAttribute(entry.getKey(), String.valueOf(entry.getValue())); } } // 3. 보조원장 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(assetImpl, assetThingSeqNbr); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("assetId", assetImpl.getAssetBasicCache().getAssetId()); // PK setting subInfoCache.set("assetThingSeqNbr", assetThingSeqNbr); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(assetImpl, assetThingSeqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 3-1. insert _insertSubInfo(subInfoKnd, subInfoCache); // 4. 캐시 저장 _saveSubInfoCache(subInfoKnd, subInfoCache, assetImpl, assetThingSeqNbr); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfo, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(assetImpl, assetThingSeqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 3-2. update _updateSubInfo(subInfoKnd, subInfoCache); } }
public ResetMembershipTransactionPasswordIn clone(){ try{ ResetMembershipTransactionPasswordIn object= (ResetMembershipTransactionPasswordIn)super.clone(); if ( this.xtnAtrbtList== null ) object.xtnAtrbtList = null; else{ java.util.List<bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO> clonedList = new java.util.ArrayList<bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO>(xtnAtrbtList.size()); for( bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO item : xtnAtrbtList ){ clonedList.add( (bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO)item.clone()); } object.xtnAtrbtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<BfCnd> getCndMultiple(List<String> cndCdList, String aplyStartDt, String aplyStartTm, String aplyEndDt, String aplyEndTm) throws BizApplicationException { BfCndMltplIn in = new BfCndMltplIn(); in.setAplyStartDt(aplyStartDt); in.setAplyStartTm(aplyStartTm); in.setAplyEndDt(aplyEndDt); in.setAplyEndTm(aplyEndTm); in.setCndCdList(cndCdList); return getCndMultiple(in); }
public static boolean isValid(String value) { for (ProductInfoContentsDistinctionCodeEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } // Return Output return false; }
public String getSubInfo(ActorCore actorCore, String xtnAtrbtNm) throws BizApplicationException { return _getActorSubInfoBiz().getSubInfo(xtnAtrbtNm, (ActorImpl) actorCore); }
public static String getRckngDt(CmnContextCore cmnContextCore) throws BizApplicationException { String rckngDt = cmnContextCore.getRckngDt(); if (StringCoreUtils.isEmpty(rckngDt)) { rckngDt = cmnContextCore.getTxDate(); } return rckngDt; }
public void delete(InsrncStsChngIn in) throws BizApplicationException { super.delete(in); }
public TxQrySvcHstListOut clone(){ try{ TxQrySvcHstListOut object= (TxQrySvcHstListOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public getter /* (non-Javadoc) * @see bankware.corebanking.core.arrangement.arrangementcondition.interfaces.ArrCndCore#getInstCd() */ @Override public String getInstCd() { return instCd; }
public CaSysSrvcLogInqrySvcOut clone(){ try{ CaSysSrvcLogInqrySvcOut object= (CaSysSrvcLogInqrySvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSaleEndDateTime() { // Return output return PdUtil.concatenateKeys(Arrays.asList(getSaleEndDt(), getSaleEndTime())); }
public BfCardInfoPopUpOut clone(){ try{ BfCardInfoPopUpOut object= (BfCardInfoPopUpOut)super.clone(); if ( this.cardInfo== null ) object.cardInfo = null; else{ java.util.List<bankware.corebanking.benefitapply.service.dto.BfCardInfoPopUpSub01> clonedList = new java.util.ArrayList<bankware.corebanking.benefitapply.service.dto.BfCardInfoPopUpSub01>(cardInfo.size()); for( bankware.corebanking.benefitapply.service.dto.BfCardInfoPopUpSub01 item : cardInfo ){ clonedList.add( (bankware.corebanking.benefitapply.service.dto.BfCardInfoPopUpSub01)item.clone()); } object.cardInfo = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public TxHstQrySvcGetInqDpstAcctInfoListIn clone(){ try{ TxHstQrySvcGetInqDpstAcctInfoListIn object= (TxHstQrySvcGetInqDpstAcctInfoListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean check(String nbr) throws BizApplicationException { if(!DataCheckUtils.checkBusinessmanRegistrationNbr(nbr)) { throw new BizApplicationException("AAPCME0158", null); } return true; }
public AprvlVldtnExctnRgstSvcSaveIn clone(){ try{ AprvlVldtnExctnRgstSvcSaveIn object= (AprvlVldtnExctnRgstSvcSaveIn)super.clone(); if ( this.aprvlVldtnExctnRgstInfo== null ) object.aprvlVldtnExctnRgstInfo = null; else{ java.util.List<bankware.corebanking.underexamination.approval.service.dto.AprvlVldtnExctnRgstInfo> clonedList = new java.util.ArrayList<bankware.corebanking.underexamination.approval.service.dto.AprvlVldtnExctnRgstInfo>(aprvlVldtnExctnRgstInfo.size()); for( bankware.corebanking.underexamination.approval.service.dto.AprvlVldtnExctnRgstInfo item : aprvlVldtnExctnRgstInfo ){ clonedList.add( (bankware.corebanking.underexamination.approval.service.dto.AprvlVldtnExctnRgstInfo)item.clone()); } object.aprvlVldtnExctnRgstInfo = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public AssetKndXtnInfoIO getExtendAtrbtInfo(String assetKndCd, String xtnAtrbtNm) throws BizApplicationException { return super.getExtendAtrbtInfo(assetKndCd, xtnAtrbtNm); }
public AprvlRgstSvcGetIn clone(){ try{ AprvlRgstSvcGetIn object= (AprvlRgstSvcGetIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getInstParm(String instCd, String parmAtrbtNm ) throws BizApplicationException { return super.getInstitutionParameterValue(instCd, parmAtrbtNm); }
public void saveSubInfo(ActorCore actorCore, String dueDlgncDscd, int dueDlgncSeqNbr, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { _getActorDueDlgncSubInfoBiz().saveSubInfo((ActorImpl) actorCore, dueDlgncDscd, dueDlgncSeqNbr, xtnAtrbtNm, xtnAtrbtCntnt); }
public boolean check(Map<String, String> atrbtCntnt) throws BizApplicationException { if(logger.isDebugEnabled()) { logger.debug("SrvcMndtryCmpxVldtnImpl : {}", atrbtCntnt); logger.debug("SrvcMndtryCmpxVldtnImpl : header={}, input={}", _getCmnContext().getServiceCode(), atrbtCntnt.get("srvcCd")); } if(_getCmnContext().getServiceCode().equals(atrbtCntnt.get("srvcCd"))) { for(Map.Entry<String, String> atrbt: atrbtCntnt.entrySet()) { if(StringUtils.isEmpty(atrbt.getValue())) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] {"@" + atrbt.getKey()}); } } } return true; }
public int delete(String srvcPrflAtrbtNm) { return _getSvSrvcPrflAtrbtD().delete(srvcPrflAtrbtNm); }
public List<CaMenuItemOut> getMenuByInstUserGroupChannel(String instCd, String userGrpCd, String chnlCd, String lngCd) throws BizApplicationException { _checkInput(instCd, userGrpCd, chnlCd); List<CaSvUserGrpMenuMSelectListForChnlMenuOut> selectList = null; selectList = _selectListMenuForLoginUser(instCd, userGrpCd, chnlCd, lngCd, ""); List<CaMenuItemOut> outList = new ArrayList<CaMenuItemOut>(); for (CaSvUserGrpMenuMSelectListForChnlMenuOut select : selectList) { CaMenuItemOut out = new CaMenuItemOut(); out.setMenuId(select.getMenuId());// set [메뉴식별자] out.setMenuNm(select.getMenuNm());// set [메뉴명] out.setSeqNbr(select.getSeqNbr());// set [일련번호] out.setMenuItmNm(select.getMenuItmNm());// set [메뉴항목명] out.setParmVal(select.getParmVal());// set [메뉴항목속성명] out.setUpSeqNbr(select.getUpSeqNbr());// set [상위일련번호] out.setScrnId(select.getScrnId());// set [화면식별자] out.setScrnNbr(select.getScrnNbr());// set [화면번호] out.setScrnNm(select.getScrnNm());// set [화면명] out.setLeadingScrnId(select.getLeadingScrnId());// set [선행화면식별자] out.setScrnGenPtrnCd(select.getScrnGenPtrnCd());// set [화면생성패턴코드] out.setScrnAtrbtNm(select.getScrnAtrbtNm());// set [화면속성명] out.setIconNm(select.getIconNm()); out.setScrnUrlAddr(select.getScrnUrlAddr()); outList.add(out); } return outList; }
public RegisterMbrshpRelationWithOperationalAcctMsvcIn clone(){ try{ RegisterMbrshpRelationWithOperationalAcctMsvcIn object= (RegisterMbrshpRelationWithOperationalAcctMsvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public PdCndMltplVdlnOut getCndMltplVdln(PdCndMltplVdlnIn in) throws BizApplicationException { ValidateInputCndValIn validationIn = new ValidateInputCndValIn(); validationIn.setInstitutionId(getInstCd()); validationIn.setCndList(_convertToPdCndMultipleValidationCndListInList(in.getCndList())); validationIn.setPdCd(getPdCd()); validationIn.setBaseDate(PdUtil.parseStringToDate(in.getAplyDt())); ValidateInputCndValOut validateOut = _getPdCndCore().validateInputCndVal(validationIn); return _convertValidateInputCndValOutToPdCndMltplVdlnOut(validateOut); }
public ArrCndCore getArrCndCore(String cndCd, String baseDt) throws BizApplicationException { return _getArrRealCoreFundamentalAgent().getArrCndCore(cndCd, baseDt, this); }
public BfComplexCndStructureInfoOut getComplexCndStructureInfo(List<CmpsCnd> cmpsCndList) throws BizApplicationException { BfComplexCndStructureInfoOut out = new BfComplexCndStructureInfoOut(); ComplexCndTierNumIn complexCndTierNumIn = new ComplexCndTierNumIn(); complexCndTierNumIn.setInstitutionId(getInstCd()); complexCndTierNumIn.setComplexStructureId(getCmpxStrctrId()); if (CollectionUtils.isNotEmpty(cmpsCndList)) { List<ComposingCnd> composingCndList = new ArrayList<>(); for (CmpsCnd cmpsCnd : cmpsCndList) { ComposingCnd composingCnd = new ComposingCnd(); composingCnd.setComposingCndCd(cmpsCnd.getCmpsCndCd()); composingCnd.setCndTypeCd(cmpsCnd.getCndTpCd()); composingCnd.setMeasureUnitCd(cmpsCnd.getMsurUnitCd()); composingCnd.setBelowUnderDscd(cmpsCnd.getBlwUndrDscd()); composingCnd.setCurrencyCd(cmpsCnd.getCrncyCd()); composingCnd.setInquirySeq(cmpsCnd.getCmpxCndCmpsSeq()); composingCnd.setListCd(cmpsCnd.getListCd()); composingCnd.setVal(cmpsCnd.getVal()); composingCnd.setIsCalculationBaseCnd(cmpsCnd.isIsCalculationBaseCnd()); composingCndList.add(composingCnd); } complexCndTierNumIn.setComposingCndList(composingCndList); } com.bankware.pf.product.api.models.BfComplexCndStructureInfoOut bfComplexCndStructureInfoOut = BfCndCoreImpl.getInstance().getComplexCndTierNum(complexCndTierNumIn); if (bfComplexCndStructureInfoOut != null) { out.setCmpxStrctrId(bfComplexCndStructureInfoOut.getComplexStructureId()); out.setTierNbr(bfComplexCndStructureInfoOut.getTierNum()); } // Return output return out; }
public boolean checkCode(CaCdNbrInfoIO in, String cd) throws BizApplicationException { String instCd = in.getInstCd(); if(StringUtils.isEmpty(instCd)) { instCd = _getCaCmnContext().getInstCode(); } CaCmInstSbstCdDIO daoIn = new CaCmInstSbstCdDIO(); daoIn.setInstCd(instCd); daoIn.setCdNbr(in.getCdNbr()); daoIn.setCd(cd); daoIn.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue()); List<CaCmInstSbstCdDIO> daoOutList = _getCmInstSbstCdDDso().selectListByCondition(daoIn); if(daoOutList == null || daoOutList.isEmpty()) { return false; } return true; }
public List<XtnCdIO> getListCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { List<XtnCdIO> xtnCdIOs = new ArrayList<XtnCdIO>(); List<CmClHrarcyMIO> cdList = _getCmClHrarcyMDso().selectAll(); //TODO 기관파라미터ENUM 으로 변경 String lngCd = supplInfoVal == null ? null : String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue())); for (CmClHrarcyMIO cd : cdList) { XtnCdIO xtnCdIO = new XtnCdIO(); xtnCdIO.setCd(cd.getClHrarcyId()); if(StringCoreUtils.isEmpty(lngCd)) { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CdNbrCoreEnum.CLASSIFICATION_HIERARCHY_CD.getValue().concat(cd.getClHrarcyId()))); } else { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CdNbrCoreEnum.CLASSIFICATION_HIERARCHY_CD.getValue().concat(cd.getClHrarcyId()), lngCd)); } xtnCdIOs.add(xtnCdIO); } return xtnCdIOs; }
public AprvSrchSvcIn clone(){ try{ AprvSrchSvcIn object= (AprvSrchSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value){ for (StlmntCrctnDscdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public PrtnrDeptSrchSvcTreeOut clone(){ try{ PrtnrDeptSrchSvcTreeOut object= (PrtnrDeptSrchSvcTreeOut)super.clone(); if ( this.deptList== null ) object.deptList = null; else{ java.util.List<bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut> clonedList = new java.util.ArrayList<bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut>(deptList.size()); for( bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut item : deptList ){ clonedList.add( (bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut)item.clone()); } object.deptList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaSysSrvcLogInqrySvcIn clone(){ try{ CaSysSrvcLogInqrySvcIn object= (CaSysSrvcLogInqrySvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(ArrTxImpl arrTx){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 정산거래보조명세 조회 IValueObject subInfo = getSubInfoCache(arrTx); // 보조명세 정보가 없을 경우 빈Map return if(subInfo == null) { return subInfoMap; } // 정산보조명세Map set for(Entry<String,Object> entry : subInfo.getFieldValues().entrySet()) { if(!_isFieldOfSubInfo(arrTx, entry.getKey())) { continue; } if(entry.getValue()!=null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public String getCode(String cdNbr, String code) throws BizApplicationException { CaCmnCdCheckIn in = new CaCmnCdCheckIn(); in.setCdNbr(cdNbr); in.setCd(code); return getCode(in).getCdNm(); }
public CaPdInfoInqrySvcOut getListPdInfo(CaPdInfoInqrySvcIn in) throws BizApplicationException { /** Get Product List for ComboBox */ List<CaPdInfoProviderIO> rslt = _getCaPdInfoProvider().getListPdInfo(_setPdInfoProviderIO(in)); CaPdInfoInqrySvcOut out = new CaPdInfoInqrySvcOut(); out.setTbl(_setPdPdInfoProviderSrvcTblOutList(rslt)); return out; }
public Integer getCustCountByName(String instCd, String actorNm, String custStsCd, String actorNmTpCd, String actorTpCd) throws BizApplicationException { /* query actor name */ return _getAtActorNmDXtnDso().selectCustCountByCustNm(instCd, actorNm, actorNmTpCd, actorTpCd, _getCmnContext().getTxDate(), CustStsEnum.IGNORE.getValue(), ActorStsEnum.IGNORE.getValue(), InfoStsEnum.NORMAL.getValue(), custStsCd); }
public CaXpExtrnlIntrfcMsgHdrInfoDIO clone(){ try{ CaXpExtrnlIntrfcMsgHdrInfoDIO object= (CaXpExtrnlIntrfcMsgHdrInfoDIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty(value)) { for (IpctTxTpCdEnum item : IpctTxTpCdEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; } return false; }
public AsmBsicInfoIO changeAsmStatus(String asmStsCd ) throws BizApplicationException { // 2. 심사기본 자산상태 변경 ("부결"상태로 변경) return _getAsmBsicBiz().changeAsmStatus(getBasicInfo().getAsmId(), asmStsCd); }
public CaDocSrchSvcGetDocClTreeListOut clone(){ try{ CaDocSrchSvcGetDocClTreeListOut object= (CaDocSrchSvcGetDocClTreeListOut)super.clone(); if ( this.docClTree== null ) object.docClTree = null; else{ java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeOut>(docClTree.size()); for( bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeOut item : docClTree ){ clonedList.add( (bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeOut)item.clone()); } object.docClTree = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(PrtnrCore prtnrCore, String xtnAtrbtNm) throws BizApplicationException { return _getPrtnrSubInfoBiz().getSubInfo(xtnAtrbtNm, (PrtnrImpl) prtnrCore); }
public CaClassMgmtSvcSaveClassInfoIn clone(){ try{ CaClassMgmtSvcSaveClassInfoIn object= (CaClassMgmtSvcSaveClassInfoIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public StlmntGlQuerySvcSrchKeyIn clone(){ try{ StlmntGlQuerySvcSrchKeyIn object= (StlmntGlQuerySvcSrchKeyIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean checkCode(CaCdNbrInfoIO in, String cd) throws BizApplicationException { String xtnCdClassNm = in.getXtnCdClassNm(); String lngCd = in.getLngCd(); if (StringUtils.isEmpty(xtnCdClassNm)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@xtnCdClassNm" }); } // 해당 클래스의 빈명 추출 해야 된다. CaCbpClassIO cbpClass = _getCbpClass().getClassInfo(xtnCdClassNm); String beanName = cbpClass.getBeanNm(); if(logger.isDebugEnabled()) { logger.debug("lyj beanName : {}", beanName); } if(!CCM01.CHAR_AT.equals(beanName)) { xtnCdClassNm = beanName; } if (StringUtils.isEmpty(lngCd)) { lngCd = _getCaCmnContext().getLanguageCode(); } String cdNbr = in.getCdNbr(); String instCd = in.getInstCd(); if(StringUtils.isEmpty(in.getInstCd())) { instCd = _getCaCmnContext().getInstCode(); } // Get the login user's language code name Map<String, Object> supplInfoVal = new HashMap<String, Object>(); supplInfoVal.put(CaInstParamEnum.LANGUAGE_CODE.getValue(), lngCd); supplInfoVal.put(CaInstParamEnum.INSTITUTION_CODE.getValue(), instCd); supplInfoVal.put(CCM03.CD, cd); XtnCdCore xtdCd = (XtnCdCore) CbbApplicationContext.getBean(xtnCdClassNm); return xtdCd.checkCode(cdNbr, supplInfoVal); }
public FxFeeDtlIO clone(){ try{ FxFeeDtlIO object= (FxFeeDtlIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public PdMerchantGroupDetailInqrySvcIn clone(){ try{ PdMerchantGroupDetailInqrySvcIn object= (PdMerchantGroupDetailInqrySvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Integer delete(ArArrIssmdaBlckngXtnDIO arArrIssmdaBlckngXtnDIO){ return _getArArrIssmdaBlckngXtnD().delete(arArrIssmdaBlckngXtnDIO); }
public Integer getListDataCntForConsistency() throws BizApplicationException { return _getDstbCnstncySvScrnMDso().selectListCntForConsistency(); }
public CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut clone(){ try{ CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut object= (CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut)super.clone(); if ( this.xtnAtrbtXtnAtrbtDtlList== null ) object.xtnAtrbtXtnAtrbtDtlList = null; else{ java.util.List<bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl>(xtnAtrbtXtnAtrbtDtlList.size()); for( bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl item : xtnAtrbtXtnAtrbtDtlList ){ clonedList.add( (bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl)item.clone()); } object.xtnAtrbtXtnAtrbtDtlList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public StlmntPrgrsMgmtSvcSrchModifyIn clone(){ try{ StlmntPrgrsMgmtSvcSrchModifyIn object= (StlmntPrgrsMgmtSvcSrchModifyIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveMapSubInfo(Map<String, String> staffXtnInfoHash, StaffCore staffCore) throws BizApplicationException { _getStaffSubInfoBiz().saveMapSubInfo(staffXtnInfoHash, (StaffImpl) staffCore); }
public void validate(CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { validate(null, cust, vldtnRequiredValMap); }
static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty(value)) { for (DocIssueStsChngRsnEnum enumObject: values()) { if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] { value, "@docIssueStsChngRsnCd" }); } return true; }
public String getCndVal() throws BizApplicationException { // 해당 메소드는 ({0}) 클래스의 인스턴스로 사용할 수 없습니다. 계약담당자에게 문의바랍니다. // This method cannot be used by instance of ({0}) class. throw new BizApplicationException("AAPARE0678",new Object[]{this.getClass().getName()}); }
public int modifyArrTx(StTxMIO stTxMIO, ArrRealCore arr) throws BizApplicationException { switch(ArrTxKndCoreEnum.getEnum(getArrTxKnd(arr))) { case ARR_TX_INTERNAL : return _getStTxIntrnlMDso().updateArrTx(stTxMIO); case ARR_TX_TEMPRARY: return _getStTxTmpryMDso().updateArrTx(stTxMIO); case ARR_TX_NORMAL: return _getStTxMDso().updateArrTx(stTxMIO); default: throw new BizApplicationException("AAPSTE0212"); } }
public void saveSubInfo(IValueObject subInfo, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {_getNewSubInfo(arrRealImpl.getSubInfoKnd()).getClass().getSimpleName()}); } // 1. 보조명세 종류 조회 ArrSubInfoKndEnum subInfoKnd = arrRealImpl.getSubInfoKnd(); // 2. 계약에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(arrRealImpl); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("arrId", arrRealImpl.getArrId()); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // insert _insertSubInfo(subInfoKnd, subInfoCache); // save cache arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(), subInfoCache); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfo, subInfoCache)) { return; } // 변경전 이력 저장 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // update _updateSubInfo(subInfoKnd, subInfoCache); } }
public AprvlCndMgmtSvcGetAprvlCndListOut clone(){ try{ AprvlCndMgmtSvcGetAprvlCndListOut object= (AprvlCndMgmtSvcGetAprvlCndListOut)super.clone(); if ( this.cndList== null ) object.cndList = null; else{ java.util.List<bankware.corebanking.configurationadmin.approval.service.dto.AprvlCndMgmtSvcGetAprvlCndListCndOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.approval.service.dto.AprvlCndMgmtSvcGetAprvlCndListCndOut>(cndList.size()); for( bankware.corebanking.configurationadmin.approval.service.dto.AprvlCndMgmtSvcGetAprvlCndListCndOut item : cndList ){ clonedList.add( (bankware.corebanking.configurationadmin.approval.service.dto.AprvlCndMgmtSvcGetAprvlCndListCndOut)item.clone()); } object.cndList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaCmNbrgRuleMIO select(CaCmNbrgRuleMIO cmNbrgRuleMIO) { return _getCaCmNbrgRuleM().select(cmNbrgRuleMIO); }
public void terminate(ArrIssmdaStsChngIn arrIssmdaStsChngIn) throws BizApplicationException { super.changeStatus(ArrIssmdaStsEnum.TERMINATED.getValue(), arrIssmdaStsChngIn.getStsChngRsnCntnt(), arrIssmdaStsChngIn.getIssmdaStsChngBizCdNbr(), arrIssmdaStsChngIn.getIssmdaStsChngBizCd(), arrIssmdaStsChngIn.getXtnInfoList(), arrIssmdaStsChngIn.getStsChngTxDt(), arrIssmdaStsChngIn.getStsChngTxSeqNbr()); }
public String getTransferLanguage(String trnsfrKnd, String trnsfrKeyVal) throws BizApplicationException { return getTransferLanguage(trnsfrKnd, trnsfrKeyVal, _getCmnContextCore().getLanguageCode()); }
public List<InterestCalculationSection> apply(ApplyInterestCalculationSectionExceptionIn in, List<InterestCalculationSection> intCalIntervals) throws BizApplicationException { String maturityDt = in.getMaturityDt(); // 만기년월일 List<InterestCalculationSection> newIntervals = new ArrayList<>(); for (InterestCalculationSection interval : intCalIntervals) { String calEndDt = interval.getCalEndDt(); // 만기일 < 계산종료일 (삭제) if(DateCoreUtils.isDt1BeforeDt2(maturityDt, calEndDt)) { continue; } // 만기일 = 계산종료일 (201 -> 205) else if(calEndDt.equals(maturityDt)) { for(CalculationType type : interval.getCalTps()) { if("201".equals(type.getIntCalTpCd())) { type.setIntCalTpCd("205"); } } } newIntervals.add(interval); } return newIntervals; }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "Disbursement": _doDisbursementAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "Repayment" : _doRepaymentAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "ReduceLimit" : _doReduceLoanLimtAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "IncreaseLimit" : _doIncreaseLoanLimitAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "IncreaseTermExtension" : _doIncreaseLoanLimitAction(arrSrvcTpCd, arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public String getBizDscd(){ return bizDscd; }
public List<ArrReal> getCustOwnArrRealAliveNotActive (String custId,String bizDscd,String pdTpCd,String pdTmpltCd) throws BizApplicationException { //return _getArrRealRelationAgentImpl().getCustOwnArrRealAliveNotActive(custId,ArrCustRelEnum.MAIN_CONTRACTOR.getValue(),bizDscd,pdTpCd,pdTmpltCd); return _getArrCustRelQryBizImpl().getListArrRealByArrStsList( custId, ArrStsEnum.getAliveNotActiveArrStsEnumList(), ArrCustRelEnum.MAIN_CONTRACTOR.getValue(), bizDscd, pdTpCd, pdTmpltCd, null, 0, 0, false); }
public BigDecimal getRoundAmountByCurrencyCode(String crncyCd, BigDecimal amt, int roundingMode) throws BizApplicationException { if(StringCoreUtils.isEmpty(crncyCd) || amt == null) { return amt; } // 기관코드의 통화정보를 먼저 조회하고, 해당 기관코드에 통화정보가 존재하지 않으면 STDA의 통화정보를 return 한다. CrncyGetOut out = this.getCurrency(_getCmnContext().getInstCode(), crncyCd); if(out == null) { out = this.getCurrency(crncyCd); if(out == null) { return amt; } } BigDecimal modifiedAmt = amt.setScale(out.getDcmlPntLen(), roundingMode); return modifiedAmt; }
public IValueObject getSubInfo(StlmntCalcnSubInfoInqryIn stlmntCalcnSubInfoInqryIn) throws BizApplicationException { return _getStlmntCalcnSubInfoBiz().getSubInfo(_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn)); }
public String getInstCd() { String tntInstId = null; if (pdPdCndM == null) { tntInstId = this.instCd; if (StringCoreUtils.isEmpty(tntInstId)) { return null; } } else { tntInstId = pdPdCndM.getInstCd(); } // Return 기관코드 return tntInstId; }
public void saveSubInfo(AprslPrfClaimSubInfo subInfo, AprslImpl aprslImpl, Integer prfClaimSeqNbr) throws BizApplicationException{ // 0. null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {AprslPrfClaimSubInfo.class.getSimpleName()}); } logger.debug("## <AS> saveSubInfo -> subInfo = {} :: ", subInfo.getFieldValues()); // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 for(Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(entry.getValue() != null) { _getAtrbtChk().checkStandardAttribute(entry.getKey(), String.valueOf(entry.getValue())); } } // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsAprslPrfClaimSIO subInfoCache = getSubInfoCache(aprslImpl, prfClaimSeqNbr); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsAprslPrfClaimSIO(); subInfoCache.setAprslId(aprslImpl.getAprslBasicCache().getAprslId()); // PK setting subInfoCache.setPrfClaimSeqNbr(prfClaimSeqNbr); // PK setting // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 2-1. insert _getAsAprslPrfClaimSDso().insert(subInfoCache); // 3. 캐시 저장 _saveSubInfoCache(subInfoCache, aprslImpl, prfClaimSeqNbr); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfo, subInfoCache)) { return; } // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 2-2. update _getAsAprslPrfClaimSDso().update(subInfoCache); } }
public List<PntCnd> getAllCnd() throws BizApplicationException { List<PntCnd> out = new ArrayList<PntCnd>(); AllPntCndListIn cndIn = new AllPntCndListIn(); cndIn.setInstitutionId(pdPdM.getInstCd()); cndIn.setPntCd(pdPdM.getPdCd()); List<PntCndBaseOut> cndList = _getPntCndCore().getListAllPntCnd(cndIn); if (!CollectionCoreUtils.isEmpty(cndList)) { for (PntCndBaseOut cndBaseOut : cndList) { PntCndImpl cnd = new PntCndImpl(this, aplyDt, aplyTm, _convertPntCndBaseOutToPdPdMIO(cndBaseOut)); out.add(cnd); } } // Return Output return out; }
public SrvcBlckngTrmntSvcOut clone(){ try{ SrvcBlckngTrmntSvcOut object= (SrvcBlckngTrmntSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(ActorImpl actorImpl, String ctcptId, Integer ctcptChngSeqNbr) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 AtActorCtcptSIO subInfo = getSubInfoCache(actorImpl, ctcptId, ctcptChngSeqNbr); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조명세 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public ArrMrchntInfoIO clone(){ try{ ArrMrchntInfoIO object= (ArrMrchntInfoIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Integer getListDataCntForConsistency() throws BizApplicationException { return _getDstbCnstncyArArrSrvcXtnAtrbtRDso().selectListCntForConsistency(); }
public CustCmphInqrySvcGetCustLoinIdNbrIn clone(){ try{ CustCmphInqrySvcGetCustLoinIdNbrIn object= (CustCmphInqrySvcGetCustLoinIdNbrIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaLeasePrtctnMgmtSvcGetLeasePrtctnListOut clone(){ try{ CaLeasePrtctnMgmtSvcGetLeasePrtctnListOut object= (CaLeasePrtctnMgmtSvcGetLeasePrtctnListOut)super.clone(); if ( this.leasePrtctnList== null ) object.leasePrtctnList = null; else{ java.util.List<bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn>(leasePrtctnList.size()); for( bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn item : leasePrtctnList ){ clonedList.add( (bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn)item.clone()); } object.leasePrtctnList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustPrsnlChngSvcModifyIn clone(){ try{ CustPrsnlChngSvcModifyIn object= (CustPrsnlChngSvcModifyIn)super.clone(); if ( this.actorCntctPntList== null ) object.actorCntctPntList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcCntctPntListIO> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcCntctPntListIO>(actorCntctPntList.size()); for( bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcCntctPntListIO item : actorCntctPntList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcCntctPntListIO)item.clone()); } object.actorCntctPntList = clonedList; } if ( this.actorXtnInfoList== null ) object.actorXtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcXtnInfoListIO> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcXtnInfoListIO>(actorXtnInfoList.size()); for( bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcXtnInfoListIO item : actorXtnInfoList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcXtnInfoListIO)item.clone()); } object.actorXtnInfoList = clonedList; } if ( this.actorNmList== null ) object.actorNmList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorNmListIO> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorNmListIO>(actorNmList.size()); for( bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorNmListIO item : actorNmList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorNmListIO)item.clone()); } object.actorNmList = clonedList; } if ( this.actorRelList== null ) object.actorRelList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorRelListIO> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorRelListIO>(actorRelList.size()); for( bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorRelListIO item : actorRelList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorRelListIO)item.clone()); } object.actorRelList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustRprsnInqrySvcGetElctrncAddrOut clone(){ try{ CustRprsnInqrySvcGetElctrncAddrOut object= (CustRprsnInqrySvcGetElctrncAddrOut)super.clone(); if ( this.ctcptXtnInfoList== null ) object.ctcptXtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut>(ctcptXtnInfoList.size()); for( bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut item : ctcptXtnInfoList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut)item.clone()); } object.ctcptXtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public StTxEntryExRtDIO select(StTxEntryExRtDIO stTxEntryExRtDIO) { return _getStTxTmpryEntryExRtD().select(stTxEntryExRtDIO); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr, ScrtyIntImpl scrtyIntImpl) { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)){ return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttribute(xtnAtrbtNm, xtnAtrbtCntnt); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsScrtyIntSIO subInfoCache = getSubInfoCache(scrtyIntImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsScrtyIntSIO(); subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId()); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 2-1. insert _getAsScrtyIntSDso().insert(subInfoCache); // 3. 캐시 저장 scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 2-2. update _getAsScrtyIntSDso().update(subInfoCache); } }
public ArArrAssetRStsHIO select(ArArrAssetRStsHIO arArrAssetRStsHIO) { return _getArArrAssetRStsH().select(arArrAssetRStsHIO); }
public void saveMapSubInfo(Map<String, String> subInfoMap, CustImpl custImpl) throws BizApplicationException { // 0. null check if (subInfoMap == null || subInfoMap.isEmpty()) { return; } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustSIO subInfoIO = getSubInfoCache(custImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtCustSIO(); subInfoIO.setCustId(custImpl.getCustId()); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _getAtCustSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(custImpl, subInfoIO); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _getAtCustSDso().update(subInfoIO); } // 2. 캐시 저장 custImpl.setSubInfoCache(subInfoIO); }
public void saveSubInfo(IValueObject subInfo , StStlmntSIO stStlmntSIOIn) { logger.debug("##<ST-StlmntSubInfoBiz> saveSubInfo"); // null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {this.getClass().getSimpleName()}); } logger.debug("##<ST-StlmntSubInfoBiz> saveSubInfo null check ok"); // 1.create a new instance of DB IO IValueObject subInfoDBIO = new StStlmntSIO(); // 2.set primary key _setKey(subInfoDBIO, stStlmntSIOIn); // 3.convert IvalueObject to DBIO VO DtoUtils.setSubInfoIO(subInfo, subInfoDBIO); // 4.save subsidiary detail(보조명세) _insertSubInfo(subInfoDBIO); /* * settlement는 속성을 대부분 insert 하는 경우이므로 아래 로직을 막음 */ // IValueObject sqlOut = getSubInfo(stlmnt); // // // 해당 거래관련 보조명세 데이터가 없을 때 // if(sqlOut == null) { // _insertSubInfo(subInfoDBIO); // // 맴버변수 VO 값 설정 // Stlmnt.setStlmntSubInfo(subInfo); // // }else { // // 기 조회 된 값에 update되어할 필드 설정 // DtoUtils.setSubInfoIO(subInfo, sqlOut); // // DBIO IO에 내용필드 반영 // DtoUtils.setSubInfoIO(sqlOut, subInfoDBIO); // // _updateSubInfo(subInfoDBIO); // // 맴버변수 VO 값 설정(sqlOut은 기존 + 새로 update되어야 할 필드 모두 반영된 최신 보조명세IO) // stlmnt.setStlmntSubInfo(sqlOut); // } } // // /** // * set primary key of subsidiary table // * @param stlmntSIO // * @param Stlmnt // */ // private IValueObject _setKey(IValueObject stlmntSIO, String arrId, String txDt, int txSeqNbr, String amtTpCd, String prchsRtrnYn) { // stlmntSIO.set("instCd", _getCmnContext().getInstCode()); // stlmntSIO.set("arrId", arrId); // stlmntSIO.set("txDt", txDt); // stlmntSIO.set("txSeqNbr", txSeqNbr); // stlmntSIO.set("amtTpCd", amtTpCd); // stlmntSIO.set("prchsRtrnYn", prchsRtrnYn); // // return stlmntSIO; // // }
public boolean isValidType(AtrbtTpEnum atrbtTp, Integer dcmlPntLen, String atrbtCntnt) throws BizApplicationException { if (logger.isDebugEnabled()) { logger.debug("atrbtTpCd={}", atrbtTp); logger.debug("atrbtCntnt={}", atrbtCntnt); } if (atrbtTp == null) { throw new BizApplicationException("AAPCME0037", new Object[] { atrbtTp }); } // Validate attribute type switch (atrbtTp) { case TEXT: // text return (StringCoreUtils.isEmpty(atrbtCntnt)) ? false : true; case TEXT_DATE: // date return DateCoreUtils.isValidDate(atrbtCntnt); case TEXT_NUMBER: // number return DataCheckCoreUtils.isNumeric(atrbtCntnt); case NUMBER: // number boolean chkNbr = DataCheckCoreUtils.isNumeric(atrbtCntnt); if(logger.isDebugEnabled()) { logger.debug(" ########### isValidType NUMBER chkNbr : {}", chkNbr); } if(chkNbr) { // 소수점자리수 검증 return _isValidDecimalPoint(dcmlPntLen, atrbtCntnt); } else { return chkNbr; } case TEXT_ALPHA_NUMERIC: // Alpha-Number return DataCheckCoreUtils.isAlphaNumeric(atrbtCntnt); case YES_OR_NO: // yes or no return (CCM01.YES.equals(atrbtCntnt) || CCM01.NO.equals(atrbtCntnt)) ? true : false; case PASSWORD: // Password return DataCheckCoreUtils.isValidPassword(atrbtCntnt); case TIMESTAMP: // timestamp return true; case JSON: // json return DataCheckCoreUtils.isJson(atrbtCntnt); case EMPTY: return true; default: throw new BizApplicationException("AAPCME0037", new Object[] { atrbtTp }); } }
public CustCheckPwdOut login(String pswd) throws BizApplicationException, ParseException { //check required inputs if (StringUtils.isEmpty(pswd)) { throw new BizApplicationException("AAPCME0006", new Object[] {"@pswd"}); } return login(null, pswd, null); }
public List<KrRoadAddrOut> getAddrByRoadName(String cityPrvncAddr,String cityGunGuAddr, String roadNm, Integer bldgMainNbr,Integer bldgSubNbr) throws BizApplicationException { List<CmKrRoadAddrMIO> cmKrRoadAddrMList = _getCmKrRoadAddrMDso().selectByRoad(AddrHrarcyEnum.KOREA_ROAD_NAME_ADDRESS_CODE.getValue(), cityPrvncAddr, cityGunGuAddr, roadNm, bldgMainNbr, bldgSubNbr); List<KrRoadAddrOut> out = new ArrayList<KrRoadAddrOut>(); if(cmKrRoadAddrMList.isEmpty()) { return out; } for(CmKrRoadAddrMIO cmKrRoadAddrMIO : cmKrRoadAddrMList) { KrRoadAddrOut krRoadAddrOut = new KrRoadAddrOut(); krRoadAddrOut = _getKrRoadAddrOut(cmKrRoadAddrMIO); if(krRoadAddrOut != null) { out.add(krRoadAddrOut); } } return out; }
public List<ArArrAplyIntRtDXtnIO> selectList(ArArrAplyIntRtDXtnIO arArrAplyIntRtDXtnIO) { return _getArArrAplyIntRtDXtn().selectList(arArrAplyIntRtDXtnIO); }
public BigDecimal eval(List<BigDecimal> values) { if (values == null || values.size() < 2 ) return null; int index = values.get(values.size()-1).intValue(); if (values.size() <= index + 1 ) return null; return values.get(values.size() - 2 - index); }
public void saveMapSubInfo(Map<String, String> deptXtnInfoHash, DeptCore deptCore) throws BizApplicationException { _getDeptSubInfoBiz().saveMapSubInfo(deptXtnInfoHash, (DeptImpl) deptCore); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, CustRprsnImpl custRprsnImpl) throws BizApplicationException { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustRprsnSIO subInfoIO = getSubInfoCache(custRprsnImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtCustRprsnSIO(); subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId()); // 입력된 속성명과 속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // insert _getAtCustRprsnSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(custRprsnImpl, subInfoIO); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // update _getAtCustRprsnSDso().update(subInfoIO); } // 2. 캐시 저장 custRprsnImpl.setSubInfoCache(subInfoIO); }
public ArrCnd getArrCnd(String cndCd) throws BizApplicationException { return (ArrCnd) super.getArrCndCore(cndCd); }
public static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (InsrncFeePymntCyclCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@InsrncItmCd"});//({0}) is invalid {1}. } return true; }
public Pd getPd() throws BizApplicationException { if (this.pd == null) { String lastAgrmntDt = getArrLstAgrmntAndOpnDt(); if (StringCoreUtils.isEmpty(lastAgrmntDt)) { lastAgrmntDt = getArrStsDt(); } setPd(_getPd(getInstCd(), lastAgrmntDt, getArrOpnHms(), getPdCd())); // Product Information } return this.pd; }
public List<CaPdInfoProviderIO> getListPdComboBox(CaPdInfoProviderIO in) throws BizApplicationException { // Set Input _setCaPdInfoProviderIO( in ); List<CaPdInfoProviderIO> daoList = null; if (!StringUtils.isEmpty(in.getPdTmpltCd())) { daoList = _getPdPdMDso().selectListPdCdCmb(in); // inquire list of product } else if (!StringUtils.isEmpty(in.getPdTpCd())) { daoList = _getPdPdMDso().selectListPdTmpltCdCmb(in); // inquire list of product template } else { daoList = _getPdPdMDso().selectListPdTpCdCmb(in); // inquire list of type of product } return daoList; }
public DummyIO saveMenu(CaMenuMgmtSvcGetMenuItemListIO input) throws BizApplicationException { String menuId = input.getMenuId(); int seqNbr = _getMenuMgmt().getMaxSeqNbr(menuId); List<CaCmnCdCheckOut> cdList = _getCd().getListCode(CaCdNbrEnum.LANGUAGE_CD.getValue()); if(cdList != null) { // 영문을 제외한 언어코드를 순서대로 적재한다. (단어, 복합단어의 영문명은 다국어가 아닌 자체 테이블의 값을 조회함) int cntLngCd = 1; HashMap<Integer, String> useCodeList = new HashMap<Integer, String>(); for(CaCmnCdCheckOut cdOut : cdList){ useCodeList.put(new Integer(cntLngCd++), cdOut.getCd()); } } List<CaMenuRegisterIO> menuSaveList = new ArrayList<CaMenuRegisterIO>(); List<CaMenuRegisterIO> menuModifyList = new ArrayList<CaMenuRegisterIO>(); List<CaMenuRegisterIO> menuRemoveList = new ArrayList<CaMenuRegisterIO>(); Deque<List<CaMenuMgmtSvcGetMenuItemIO>> iOSub01Stack = new LinkedList<List<CaMenuMgmtSvcGetMenuItemIO>>(); iOSub01Stack.add(input.getMenuItemList()); while (!iOSub01Stack.isEmpty()) { List<CaMenuMgmtSvcGetMenuItemIO> iOSub01List = iOSub01Stack.pollLast(); for (CaMenuMgmtSvcGetMenuItemIO menuItemIn : iOSub01List) { CaMenuRegisterIO menu01IOObj; switch (CaTxTpDscdEnum.getEnum(menuItemIn.getTxTpDscd())) { case CREATION: menu01IOObj = new CaMenuRegisterIO(); menu01IOObj.setSeqNbr(++seqNbr); menu01IOObj.setMenuItmNm(menuItemIn.getMenuNm()); menu01IOObj.setUpSeqNbr(menuItemIn.getUpSeqNbr()); menu01IOObj.setPstnNbr(menuItemIn.getPstnNbr()); menu01IOObj.setScrnId(menuItemIn.getScrnId()); menu01IOObj.setParmVal(menuItemIn.getParmVal()); menu01IOObj.setMenuItmNm1(menuItemIn.getMenuItmAtrbtNm1()); menu01IOObj.setMenuItmNm2(menuItemIn.getMenuItmAtrbtNm2()); menu01IOObj.setMenuItmNm3(menuItemIn.getMenuItmAtrbtNm3()); menu01IOObj.setMenuPrcsngDscd(menuItemIn.getMenuPrcsngDscd()); menu01IOObj.setDfltScrnTrgtYn(menuItemIn.getDfltScrnTrgtYn()); menu01IOObj.setIconNm(menuItemIn.getIconNm()); menuSaveList.add(menu01IOObj); if (menuItemIn.getChildren() != null && menuItemIn.getChildren().size() > 0) { for(CaMenuMgmtSvcGetMenuItemIO childrenIO:menuItemIn.getChildren()){ if(childrenIO.getUpSeqNbr()==null){ childrenIO.setUpSeqNbr(seqNbr); } } iOSub01Stack.add(menuItemIn.getChildren()); } break; case UPDATE: menu01IOObj = new CaMenuRegisterIO(); menu01IOObj.setSeqNbr(menuItemIn.getMenuSeqNbr().intValue()); menu01IOObj.setMenuItmNm(menuItemIn.getMenuNm()); menu01IOObj.setUpSeqNbr(menuItemIn.getUpSeqNbr()); menu01IOObj.setPstnNbr(menuItemIn.getPstnNbr()); menu01IOObj.setScrnId(menuItemIn.getScrnId()); menu01IOObj.setParmVal(menuItemIn.getParmVal()); menu01IOObj.setMenuItmNm1(menuItemIn.getMenuItmAtrbtNm1()); menu01IOObj.setMenuItmNm2(menuItemIn.getMenuItmAtrbtNm2()); menu01IOObj.setMenuItmNm3(menuItemIn.getMenuItmAtrbtNm3()); menu01IOObj.setMenuPrcsngDscd(menuItemIn.getMenuPrcsngDscd()); menu01IOObj.setDfltScrnTrgtYn(menuItemIn.getDfltScrnTrgtYn()); menu01IOObj.setIconNm(menuItemIn.getIconNm()); menuModifyList.add(menu01IOObj); if (menuItemIn.getChildren() != null && menuItemIn.getChildren().size() > 0) { iOSub01Stack.add(menuItemIn.getChildren()); } break; case DELETE: menu01IOObj = new CaMenuRegisterIO(); menu01IOObj.setSeqNbr(menuItemIn.getMenuSeqNbr().intValue()); menuRemoveList.add(menu01IOObj); break; default: if (menuItemIn.getChildren() != null && menuItemIn.getChildren().size() > 0) { iOSub01Stack.add(menuItemIn.getChildren()); } break; } } } if(!menuSaveList.isEmpty()){ _getMenuMgmt().saveMenu(menuId, menuSaveList); } if(!menuModifyList.isEmpty()){ _getMenuMgmt().modifyMenu(menuId, menuModifyList); } if(!menuRemoveList.isEmpty()){ _getMenuMgmt().removeMenu(menuId, menuRemoveList); } return new DummyIO(); }
public String getCrncyCd() throws BizApplicationException { if (isComplexAndTierIsNotDecided()) { return null; } if (isComplex()) { return _getCmpxRngCndValSub1().getCrncyCd(); } return _getSmplRngCndVal().getCrncyCd(); }
public CaArrPsbkMsgMgmtTestSvcOut clone(){ try{ CaArrPsbkMsgMgmtTestSvcOut object= (CaArrPsbkMsgMgmtTestSvcOut)super.clone(); if ( this.psbkMsgInfo==null ) object.psbkMsgInfo = null; else object.psbkMsgInfo = (bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcOut)this.psbkMsgInfo.clone(); if ( this.psbkMsgList== null ) object.psbkMsgList = null; else{ java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg>(psbkMsgList.size()); for( bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg item : psbkMsgList ){ clonedList.add( (bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg)item.clone()); } object.psbkMsgList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DueDiligenceInqryTrgtSvcListOut clone(){ try{ DueDiligenceInqryTrgtSvcListOut object= (DueDiligenceInqryTrgtSvcListOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public LnArrChngSvcListIn clone(){ try{ LnArrChngSvcListIn object= (LnArrChngSvcListIn)super.clone(); if ( this.arrRelChngIn== null ) object.arrRelChngIn = null; else{ java.util.List<bankware.corebanking.loan.conditionchange.service.dto.LnArrChngSvcIn> clonedList = new java.util.ArrayList<bankware.corebanking.loan.conditionchange.service.dto.LnArrChngSvcIn>(arrRelChngIn.size()); for( bankware.corebanking.loan.conditionchange.service.dto.LnArrChngSvcIn item : arrRelChngIn ){ clonedList.add( (bankware.corebanking.loan.conditionchange.service.dto.LnArrChngSvcIn)item.clone()); } object.arrRelChngIn = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaStdAtrbtMgmtSvcGetStdAtrbtListIn clone(){ try{ CaStdAtrbtMgmtSvcGetStdAtrbtListIn object= (CaStdAtrbtMgmtSvcGetStdAtrbtListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String xtnAtrbtNm, AssetCore assetImpl, Integer assetThingSeqNbr) throws BizApplicationException { return _getAssetThingSubInfoBiz().getSubInfo(xtnAtrbtNm, (AssetImpl)assetImpl, assetThingSeqNbr); }
public int delete(CaCmTaxRtDIO caCmTaxRtDIO) { // super.clearCache(DataCacheCoreConfig.COMMON_CURRENCY_CODE_CACHE); // super.clearCache(DataCacheCoreConfig.COMMON_CURRENCY_CODE_LIST_CACHE); return _getCaCmTaxRtD().delete(caCmTaxRtDIO); }
public Map<String, String> getMapSubInfo(AssetImpl asset){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 IValueObject subInfo = getSubInfoCache(asset); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조원장 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // business column만 put if(!_isSubInfoContainsField(asset.getAssetSubInfoKnd(), entry.getKey())) { continue; } // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if(logger.isDebugEnabled()){ logger.debug("## <AR> ArrCndDepositLimitAmountImpl doServiceAction"); } switch (arrSrvcTpCd) { case "Deposit": _doDepositAction(arrSrvcTpCd,arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
protected void register(CustRprsnImpl custRprsnImpl, AtCustRprsnLoinInfoDIO atCustRprsnLoinInfoDIO) throws BizApplicationException { if (atCustRprsnLoinInfoDIO == null) { return; } AtCustRprsnMIO atCustRprsnMIO = custRprsnImpl.getRprsnBsicCache(); atCustRprsnLoinInfoDIO.setCustRprsnId(atCustRprsnMIO.getCustRprsnId()); atCustRprsnLoinInfoDIO.setRprsnLoinInfoStsCd(InfoStsEnum.NORMAL.getValue()); if (StringUtils.isEmpty(atCustRprsnLoinInfoDIO.getRprsnLoinInfoStsRsnCd())) { atCustRprsnLoinInfoDIO.setRprsnLoinInfoStsRsnCd(PswdChngRsnEnum.OWNER_REQUEST.getValue()); } int seqNbr = _getAtCustRprsnLoinInfoDDso().selectNextSeqNbr(atCustRprsnLoinInfoDIO.getInstCd(), atCustRprsnMIO.getCustRprsnId()); atCustRprsnLoinInfoDIO.setLoinSeqNbr(seqNbr); try { atCustRprsnLoinInfoDIO.setEncrptnPswd(atCustRprsnLoinInfoDIO.getEncrptnPswd()); } catch (Exception e) { if (logger.isDebugEnabled()) { logger.debug("#### CustRprsnLoinInfo register error {}", e); } throw new BizApplicationException("AAPCME0000", new String[] { "Save login information", "Encrypt password" }); } _getAtCustRprsnLoinInfoDDso().insert(atCustRprsnLoinInfoDIO); }
public void delete(String instCd, CaDocBsicIO docBsicIO, CaDocClIO docClIO) throws BizApplicationException { CaDcDocClMIO dcDocClIO = new CaDcDocClMIO(); _getCmnContext().setHeaderColumn(dcDocClIO); if(!StringUtils.isEmpty(instCd)) dcDocClIO.setInstCd(instCd); dcDocClIO.setDocId(docBsicIO.getDocId()); dcDocClIO.setClId(docClIO.getClId()); dcDocClIO.setClHrarcyId(docClIO.getClHrarcyId()); // get registered information List<CaDcDocClMIO> dcDocClIOList = _getInformationList(dcDocClIO.getInstCd(), null, null, dcDocClIO.getDocId(), null); boolean isRegistered = false; if(dcDocClIOList != null && !dcDocClIOList.isEmpty()) { for(CaDcDocClMIO dcDocClIOItem : dcDocClIOList) { if(dcDocClIOItem.getClId().equals(docClIO.getClId()) && dcDocClIOItem.getClHrarcyId().equals(docClIO.getClHrarcyId())) { isRegistered = true; break; } } } if(isRegistered) { // insert data _getDcDocClDso().delete(dcDocClIO); } }
public void modifyPrgrsStart(List<DstbCtvdDIO> dstbCtvdDIOList, DstbCtvdChngPrgrsStartIn dstbCtvdChngPrgrsStartIn) throws BizApplicationException{ for(DstbCtvdDIO data : dstbCtvdDIOList){ if(dstbCtvdChngPrgrsStartIn.getDstbSrvrId().equals(data.getDstbSrvrId())){ if(dstbCtvdChngPrgrsStartIn.getDstbTblId().equals(data.getDstbTblId())){ _modifyPrgrsStart(data, dstbCtvdChngPrgrsStartIn); } } } }
public String getCndTpCd() { if (pdPdCndM == null) { return null; } return pdPdCndM.getCndTpCd(); }
public AnncExRtSvcOut clone(){ try{ AnncExRtSvcOut object= (AnncExRtSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public BaTestSvcOut clone(){ try{ BaTestSvcOut object= (BaTestSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void validate(String arrSrvcCd,ArrRealCore arrReal, CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { if (_getCmnContext().isSelfChannel() && !arrReal.getMainArrCustId().equals(_getCmnContext().getCustId())){ // 현재 고객이 주계약권한을 가진 공동계약자인 경우 예외처리 if( _isJointContractorAsMainAuth((ArrReal)arrReal, _getCmnContext().getCustId() )) return; //Arrangement's main customer is not same with self-service channel's user. This service ({0}) could not performs properly //계약의 소유주와 본 셀프서비스 채널의 사용자가 동일하지 않습니다. 본서비스({0}) 실행이 불가 합니다 throw new BizApplicationException("AAPARE0335", new Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)}); } }
public List<CaInstParmInfo> getListInstParm(String instCd, CaInstParamTypeEnum instParamTypeEnum) throws BizApplicationException { List<CaInstParmAtrbtInfo> instParmAtrbtList = new ArrayList<CaInstParmAtrbtInfo>(); String instParmTpCd = ""; if(instParamTypeEnum != null && CaInstParamTypeEnum.isValid(instParamTypeEnum.getValue())) { instParmTpCd = instParamTypeEnum.getValue(); } List<CaCmInstPAtrMIO> cmInstPAtrMIOList = _getInstParmBiz().getListInstParmAttributeUsingTpCd(instParmTpCd); _buildInstitutionParameterAttributeListAndHash(instParmAtrbtList, cmInstPAtrMIOList); List<CaInstParmInfo> instParmList = new ArrayList<CaInstParmInfo>(); for (CaInstParmAtrbtInfo instParmAtrbt : instParmAtrbtList){ instParmList.add(_getOneInstitutionParameter(instCd, instParmAtrbt, false)); } return instParmList; }
public String getRoleNameById(String instCd, String roleId) throws BizApplicationException { CaRoleIO param = new CaRoleIO(); param.setInstCd(instCd); param.setRoleId(roleId); param = this.getRole(param); if(param!=null) return param.getRoleNm(); else return null; }
public PdQrySvcGetPdIntegratedInformationOut clone(){ try{ PdQrySvcGetPdIntegratedInformationOut object= (PdQrySvcGetPdIntegratedInformationOut)super.clone(); if ( this.productBase==null ) object.productBase = null; else object.productBase = (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBaseOut)this.productBase.clone(); if ( this.classification== null ) object.classification = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdClasfRelationOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdClasfRelationOut>(classification.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdClasfRelationOut item : classification ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdClasfRelationOut)item.clone()); } object.classification = clonedList; } if ( this.between== null ) object.between = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut>(between.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut item : between ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut)item.clone()); } object.between = clonedList; } if ( this.document== null ) object.document = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdDocRelationOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdDocRelationOut>(document.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdDocRelationOut item : document ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdDocRelationOut)item.clone()); } object.document = clonedList; } if ( this.additional== null ) object.additional = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdAdtnInfoOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdAdtnInfoOut>(additional.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdAdtnInfoOut item : additional ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdAdtnInfoOut)item.clone()); } object.additional = clonedList; } if ( this.detail== null ) object.detail = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdNameDetailOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdNameDetailOut>(detail.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdNameDetailOut item : detail ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdNameDetailOut)item.clone()); } object.detail = clonedList; } if ( this.branch== null ) object.branch = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBrnchRelOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBrnchRelOut>(branch.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBrnchRelOut item : branch ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBrnchRelOut)item.clone()); } object.branch = clonedList; } if ( this.customer== null ) object.customer = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdCustmSegmentRelationOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdCustmSegmentRelationOut>(customer.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdCustmSegmentRelationOut item : customer ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdCustmSegmentRelationOut)item.clone()); } object.customer = clonedList; } if ( this.employee== null ) object.employee = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdEmployeeRelationOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdEmployeeRelationOut>(employee.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdEmployeeRelationOut item : employee ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdEmployeeRelationOut)item.clone()); } object.employee = clonedList; } if ( this.conditionInfoList== null ) object.conditionInfoList = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationConditionGroupOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationConditionGroupOut>(conditionInfoList.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationConditionGroupOut item : conditionInfoList ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationConditionGroupOut)item.clone()); } object.conditionInfoList = clonedList; } if ( this.prfIntRtAplyRule==null ) object.prfIntRtAplyRule = null; else object.prfIntRtAplyRule = (bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailAplyRuleOut)this.prfIntRtAplyRule.clone(); if ( this.bizCategory== null ) object.bizCategory = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut>(bizCategory.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut item : bizCategory ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut)item.clone()); } object.bizCategory = clonedList; } if ( this.point== null ) object.point = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut>(point.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut item : point ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut)item.clone()); } object.point = clonedList; } if ( this.merchant== null ) object.merchant = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdMrchntRelOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdMrchntRelOut>(merchant.size()); for( bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdMrchntRelOut item : merchant ){ clonedList.add( (bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdMrchntRelOut)item.clone()); } object.merchant = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isActive() { return this.arrGrpStsCd.equals(ArrGrpStsCoreEnum.ACTIVE.getValue()); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AprslCore aprslCoreImpl, Integer prfClaimSeqNbr) throws BizApplicationException { _getAprslPrfClaimSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AprslImpl) aprslCoreImpl, prfClaimSeqNbr); }
public boolean isValid(CdNbrInfoIO in, String vldtnRule) throws BizApplicationException { boolean result = false; if(StringCoreUtils.isEmpty(vldtnRule)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@vldtnRule" }); } if(vldtnRule.equals(CCM01.IS_CM_CD_INST_D_EMPTY)) { // Check the code number in CmCdInstD table // If result is not found, return true CdNbrInfoIO boIn = new CdNbrInfoIO(); boIn.setCdNbr(in.getCdNbr()); if(_getExtrnlCdImpl().getCodeDetail(boIn).size() == 0) { result = true; } } else if(vldtnRule.equals(CCM01.IS_CM_INST_SBST_CD_D_EMPTY)) { // Check the code number in CmInstSbstCdD table // If result is not found, return true CdNbrInfoIO boIn = new CdNbrInfoIO(); boIn.setCdNbr(in.getCdNbr()); if(_getInstSbstCdImpl().getCodeDetail(boIn).size() == 0 && _getStdCdImpl().getCodeDetail(boIn).size() == 0) { result = true; } } else if(vldtnRule.equals(CCM01.IS_CM_CD_D_EMPTY)) { // Check the code number in CmCdD table // If result is not found, return true CdNbrInfoIO boIn = new CdNbrInfoIO(); boIn.setCdNbr(in.getCdNbr()); if(_getStdCdImpl().getCodeDetail(boIn).size() == 0) { result = true; } } else if(vldtnRule.equals(CCM01.HAS_INST_SBST_CD)) { CdNbrInfoIO boIn = new CdNbrInfoIO(); boIn.setCdNbr(in.getCdNbr()); boIn.setInstCd(in.getInstCd()); if(_getInstSbstCdImpl().getCodeDetailSize(boIn) > 0) { result = true; } } return result; }
public void modifyArrMaturityDate(String txDt, Integer txSeqNbr) throws BizApplicationException { // 해당 메소드는 ({0}) 클래스의 인스턴스로 사용할 수 없습니다. 계약담당자에게 문의바랍니다. // This method cannot be used by instance of ({0}) class. throw new BizApplicationException("AAPARE0678",new Object[]{this.getClass().getName()}); }
public PdTemplateQuerySvcGetCndGrpTmpltListTypeOut clone(){ try{ PdTemplateQuerySvcGetCndGrpTmpltListTypeOut object= (PdTemplateQuerySvcGetCndGrpTmpltListTypeOut)super.clone(); if ( this.childCatalogList== null ) object.childCatalogList = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut>(childCatalogList.size()); for( bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut item : childCatalogList ){ clonedList.add( (bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut)item.clone()); } object.childCatalogList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(CustRprsnCore custRprsnCore) throws BizApplicationException { return _getCustRprsnSubInfoBiz().getMapSubInfo((CustRprsnImpl) custRprsnCore); }
static boolean isValid(String value) { for (CndValueDecisionLevelCoreEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public boolean isArrXtnInfoHasValue(String xtnAtrbtNm)throws BizApplicationException { return getMapArrXtnInfoInRaw().get(xtnAtrbtNm)==null?false:true; }
public StaffChngSvcElctrncAddrListIO clone(){ try{ StaffChngSvcElctrncAddrListIO object= (StaffChngSvcElctrncAddrListIO)super.clone(); if ( this.ctcptXtnInfoList== null ) object.ctcptXtnInfoList = null; else{ java.util.List<bankware.corebanking.staff.basicinfomanagement.service.dto.StaffChngSvcCtcptXtnListIO> clonedList = new java.util.ArrayList<bankware.corebanking.staff.basicinfomanagement.service.dto.StaffChngSvcCtcptXtnListIO>(ctcptXtnInfoList.size()); for( bankware.corebanking.staff.basicinfomanagement.service.dto.StaffChngSvcCtcptXtnListIO item : ctcptXtnInfoList ){ clonedList.add( (bankware.corebanking.staff.basicinfomanagement.service.dto.StaffChngSvcCtcptXtnListIO)item.clone()); } object.ctcptXtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int delete(StArrCashFlowDIO stArrCashFlowDIO) { return _getStArrCashFlowD().delete(stArrCashFlowDIO); }
public ArArrDocRXtnInfoDIO select(ArArrDocRXtnInfoDIO arArrDocRXtnInfoDIO) { return _getArArrDocRXtnInfoD().select(arArrDocRXtnInfoDIO); }
public List<BfCnd> getCndMultiple(List<String> cndCdList) throws BizApplicationException { BfCndMltplIn in = new BfCndMltplIn(); in.setAplyStartDt(baseDaring); in.setAplyStartTm(baseTimeString); in.setAplyEndDt(baseDaring); in.setAplyEndTm(baseTimeString); in.setCndCdList(cndCdList); return getCndMultiple(in); }
public Map<String, String> getMapSubInfo(StaffCore staffCore) throws BizApplicationException { return _getStaffSubInfoBiz().getMapSubInfo((StaffImpl)staffCore); }
public PrtnrDeptChngSvcGetRoleOut clone(){ try{ PrtnrDeptChngSvcGetRoleOut object= (PrtnrDeptChngSvcGetRoleOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrTxBsicIO> getListArrTxPassbookHistory(StTxPsbkHstIn stTxPsbkHstIn, ArrReal arr) throws BizApplicationException { if (arr == null) { throw new BizApplicationException("AAPARE0007", null); } List<ArrTxBsicIO> arrTxBsicList = null; if (stTxPsbkHstIn.getPgNbr() < 1) { stTxPsbkHstIn.setPgNbr(1); } if (stTxPsbkHstIn.getPgCnt() < 1 || stTxPsbkHstIn.getPgCnt() > 1000) { stTxPsbkHstIn.setPgCnt(1000); } stTxPsbkHstIn.setPgNbr( (stTxPsbkHstIn.getPgNbr() - 1 ) * stTxPsbkHstIn.getPgCnt() ); StTxMXtnIn stTxMXtnIn = new StTxMXtnIn(); stTxMXtnIn.setArrId(arr.getArrId());// set [계약식별자] stTxMXtnIn.setTxSeqNbr(stTxPsbkHstIn.getTxSeqNbr());// set [거래일련번호] stTxMXtnIn.setTxDt(stTxPsbkHstIn.getTxDt());// set [거래년월일] stTxMXtnIn.setPgNbr(stTxPsbkHstIn.getPgNbr());// set [페이지번호] stTxMXtnIn.setPgCnt(stTxPsbkHstIn.getPgCnt());// set [페이지건수] stTxMXtnIn.setInqryStartDt(stTxPsbkHstIn.getInqryStartDt()); stTxMXtnIn.setInqryEndDt(stTxPsbkHstIn.getInqryEndDt()); stTxMXtnIn.setInstCd(_getCmnContext().getInstCode()); stTxMXtnIn.setPgNbr(stTxPsbkHstIn.getPgNbr()); List<StTxMXtnIO> txPsbkHistory = new ArrayList<StTxMXtnIO>(); if (stTxPsbkHstIn.getPsbkInqryDscd() == null) { // psbkInqryDstnctnCd 값은 필수 입력항목입니다. throw new BizApplicationException("AAPCME0006", new Object[] { "@psbkInqryDstnctnCd" }); } switch(ArrTxPsbkDscdEnum.getEnum(stTxPsbkHstIn.getPsbkInqryDscd())){ // 특정일자 이후 통장내역 조회 case AFTER_SPECIFIC_DATE: txPsbkHistory = _getArrTxXtnBiz().getListArrTxPassbookHistoryByDate(stTxMXtnIn, arr); break; // 특정거래 이후 case AFTER_SPECIFIC_TRANSACTION: txPsbkHistory = _getArrTxXtnBiz().getListArrTxPassbookHistoryByTx(stTxMXtnIn, false, arr); break; // 특정거래 이후 (해당거래포함) case AFTER_SPECIFIC_TRANSACTION_INCLUDING_THAT: txPsbkHistory = _getArrTxXtnBiz().getListArrTxPassbookHistoryByTx(stTxMXtnIn, true, arr); break; // 최근기준 case RECENTLY: txPsbkHistory = _getArrTxXtnBiz().getListArrTxPassbookHistoryRecently(stTxMXtnIn, arr); break; // 특정기간 통장내역 조회 case PERIOD: // 구간 체크 _checkSearchPeriod(stTxPsbkHstIn.getInqryStartDt(), stTxPsbkHstIn.getInqryEndDt()); txPsbkHistory = _getArrTxXtnBiz().getListArrTxPassbookHistoryInPeriod(stTxMXtnIn, arr); break; default : throw new BizApplicationException("AAPSTE0125", new Object[] { stTxPsbkHstIn.getPsbkInqryDscd() }); } arrTxBsicList = new ArrayList<ArrTxBsicIO>(); for (StTxMXtnIO stTxMXtnIO : txPsbkHistory) { arrTxBsicList.add(_getArrTxBasic(stTxMXtnIO)); } return arrTxBsicList; }
public CaCdMgmtSvcGetCdDtlListOut clone(){ try{ CaCdMgmtSvcGetCdDtlListOut object= (CaCdMgmtSvcGetCdDtlListOut)super.clone(); if ( this.cdDtlList== null ) object.cdDtlList = null; else{ java.util.List<bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcGetCdDtlOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcGetCdDtlOut>(cdDtlList.size()); for( bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcGetCdDtlOut item : cdDtlList ){ clonedList.add( (bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcGetCdDtlOut)item.clone()); } object.cdDtlList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSrvcNm() { try { SrvcCore srvc = _getSrvcMngr().getServiceCore(this.getTxCd()); return (srvc == null)? null : srvc.getServiceName(); }catch (BizApplicationException e){ logger.info("Handled Error : {}", e); try { return this.getTxCd(); } catch (Exception e1) { throw e1; } } }
public void saveMapSubInfo(ActorCore actorCore, String dueDlgncDscd, int dueDlgncSeqNbr, Map<String, String> xtnInfoMap) throws BizApplicationException { _getActorDueDlgncSubInfoBiz().saveMapSubInfo((ActorImpl) actorCore, dueDlgncDscd, dueDlgncSeqNbr, xtnInfoMap); }
public List<CaAssetRegionClIO> getListAssetRegionClassification(String instCd, String assetAddrRegionClCrtrCd, String baseDt, String addrId, Integer pageNbr, Integer pageCnt) throws BizApplicationException { List<CaAssetRegionClIO> outList = new ArrayList<CaAssetRegionClIO>(); addrId = addrId + "%"; List<CaAsAssetRegionClMIO> asAssetRegionClList = _AsAssetRegionClMDso().selectList (instCd, CaAddrHrarcyEnum.KOREA_STATUTORY_DONG_CODE.getValue(), assetAddrRegionClCrtrCd, baseDt, addrId, pageNbr, pageCnt); for(CaAsAssetRegionClMIO item :asAssetRegionClList) { CaAssetRegionClIO assetRegionClIO = new CaAssetRegionClIO(); // Generated by code generator [[ assetRegionClIO.setAddrHrarcyCd(item.getAddrHrarcyCd()); assetRegionClIO.setAddrId(item.getAddrId()); assetRegionClIO.setAssetAddrRegionClCrtrCd(item.getAssetAddrRegionClCrtrCd()); assetRegionClIO.setAplyStartDt(item.getAplyStartDt()); assetRegionClIO.setAplyEndDt(item.getAplyEndDt()); assetRegionClIO.setAssetAddrRegionClCd(item.getAssetAddrRegionClCd()); // Generated by code generator ]] outList.add(assetRegionClIO); } return outList; }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "InterRealTmTrnsfrOut": case "IntraRealTmTrnsfr": _doMoneyTransferAction(arrSrvcTpCd, arrCndActionRequiredValue); return; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (CustDocRelEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@custDocRelCd"}); } return true; }
public PdCndQueryBizProcGetCndDetailFeeDiscountComplexValueOut clone(){ try{ PdCndQueryBizProcGetCndDetailFeeDiscountComplexValueOut object= (PdCndQueryBizProcGetCndDetailFeeDiscountComplexValueOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ExctnTrnsfrIn clone(){ try{ ExctnTrnsfrIn object= (ExctnTrnsfrIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CndVal getComplexCndValue(List<CmpsCnd> cmpsCndList, List<ProvideCnd> prvdCndList) throws BizApplicationException { if (!isComplexCnd()) { throw new BizApplicationException("AAPPDE0003", null); } CndVal cndVal = null; // Set the composing condition value to input DTO // 입력된 구성조건값을 입력DTO에 set함 PdPdCndUnitComplexSearchIn inDaoS010 = _setPdPdCndUnitComplexSearchIn(); inDaoS010.setTierNbr(getComplexCndStructureInfo(cmpsCndList).getTierNbr()); if (isListCnd()) { // 복합목록조건값 조회 cndVal = _getComplexListCndValue(inDaoS010); } else if (isRngCnd()) { // 복합범위조건값 조회 cndVal = _getComplexRangeCndValue(inDaoS010); } else if (isIntCnd()) { // 우대금리일 경우 제공조건에따른 규칙을 계산하여 아래 로직을 태울지말지 결정 if (isPreferentialInterestCnd() && !isPreferentialInterestProvideCndApplyRulePass(prvdCndList)) { return null; } // 복합금리조건값 조회 cndVal = _getComplexInterestCndValue(inDaoS010); } else if (isFeeCnd()) { // 복합수수료조건값 조회 cndVal = _getComplexFeeCndValue(inDaoS010); } // Return complex condition value return cndVal; }
public String getAttributeValidationExtendRule() { return (isValidationTailored)? atrbtVldtnXtnRule : stdDtoClassAtrbt.getAttributeValidationExtendRule() ; }
public void saveMapSubInfo(Map<String, String> aprslPrfClaimSubInfoMap, AprslCore aprslCore, Integer prfClaimSeqNbr) throws BizApplicationException { _getAprslPrfClaimSubInfoBiz().saveMapSubInfo(aprslPrfClaimSubInfoMap, (AprslImpl) aprslCore, prfClaimSeqNbr); }
public StlmntBsicIO modifySuspendFeeToRepaid(StlmntBsicIO in, int txSeqNbr) throws BizApplicationException{ logger.debug("StlmntCoreImpl==>modifySuspendFeeToRepaid :StlmntBsicIO {} ",in); //Check whether the required item is entered or not if (in == null) throw new BizApplicationException("AAPSTE0108", new Object[] { "Settlement detail information" }); if (txSeqNbr == 0) throw new BizApplicationException("AAPSTE0108", new Object[] { "@txSeqNbr" }); if (StringCoreUtils.isEmpty(in.getAmtTpCd())) throw new BizApplicationException("AAPSTE0108", new Object[] { "@amtTpCd" }); if (StringCoreUtils.isEmpty(in.getInstCd())) throw new BizApplicationException("AAPSTE0108", new Object[] { "@instCd" }); if (StringCoreUtils.isEmpty(in.getArrId())) throw new BizApplicationException("AAPSTE0108", new Object[] { "@arrId" }); if (StringCoreUtils.isEmpty(in.getTxDt())) throw new BizApplicationException("AAPSTE0108", new Object[] { "@txDt" }); if (in.getTxSeqNbr() == 0) throw new BizApplicationException("AAPSTE0108", new Object[] { "@txSeqNbr" }); StlmntBsicIO stlmntBsicIO = this.getSettlementBasic(in); if (stlmntBsicIO == null){ //Fee detail information is not found for repayment processing throw new BizApplicationException("AAPSTE0109", null); } if (!RcptStsCoreEnum.SUSPEND.getValue().equals(stlmntBsicIO.getRcptStsCd())){ //The fee is already paid. throw new BizApplicationException("AAPSTE0110", null); } //Update suspend fee settlement information to repaid stlmntBsicIO.setRcptStsCd(RcptStsCoreEnum.AFTER_SUSPEND_RECEIPT.getValue()); stlmntBsicIO.setRcptArrId(in.getRcptArrId()); stlmntBsicIO.setRcptTxDt(_getCmnContext().getTxDate()); stlmntBsicIO.setRcptTxSeqNbr(txSeqNbr); stlmntBsicIO.setPrchsRtrnYn(in.getPrchsRtrnYn()); int result = _getStStlmntMDso().updateReceiptStatus(_getStStlmntMIO(stlmntBsicIO)); if (result == 0){ throw new BizApplicationException("AAPACE1001", null); } return this.getSettlementBasic(in); }
public String getSubInfo(String atrbtNm, AprslImpl aprslImpl, Integer aprslThingSeqNbr) throws BizApplicationException { // 1. 보조명세 캐시 조회 IValueObject aprslThingSubInfo = getSubInfoCache(aprslImpl, aprslThingSeqNbr); // 2. 보조원장 캐시가 null인 경우, null 리턴 if (aprslThingSubInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = aprslThingSubInfo.get(atrbtNm); // 속성값이 null인경우 null리턴 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public void apply(ArrStsChngIn arrStsChngIn) throws BizApplicationException { _setArrStatus( ArrStsEnum.APPLIED, arrStsChngIn ); _changeStatus( arrStsChngIn, null); }
public CustRprsnLoginSvcGetHstOut clone(){ try{ CustRprsnLoginSvcGetHstOut object= (CustRprsnLoginSvcGetHstOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public PreScrningCustInfo clone(){ try{ PreScrningCustInfo object= (PreScrningCustInfo)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(CustCore custCore) throws BizApplicationException { return _getCustSubInfoBiz().getMapSubInfo((CustImpl) custCore); }
public java.lang.String getStaffId(){ return staffId; }
public int delete(ArArrIssmdaRXtnInfoDIO arArrIssmdaRIO ) throws BizApplicationException { return _getArArrIssmdaRXtnInfoD().delete(arArrIssmdaRIO); }
public void terminate(InsrncStsChngIn in) throws BizApplicationException { super.terminate(in); }
public void saveXtnInfo(ArrGrpXtnInfoEnum arrGrpXtnInfoEnum, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr) throws BizApplicationException { super.saveXtnInfo(arrGrpXtnInfoEnum.getValue(), xtnAtrbtCntnt, txDt, txSeqNbr); }
public CustRprsnInqrySvcGetByCustOut clone(){ try{ CustRprsnInqrySvcGetByCustOut object= (CustRprsnInqrySvcGetByCustOut)super.clone(); if ( this.custRprsnCntctPntList== null ) object.custRprsnCntctPntList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCntctPntListIO> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCntctPntListIO>(custRprsnCntctPntList.size()); for( bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCntctPntListIO item : custRprsnCntctPntList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCntctPntListIO)item.clone()); } object.custRprsnCntctPntList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int delete(CaAsLeasePrtctnCrtrMIO asLeasePrtctnCrtrMIO){ return _getAsLeasePrtctnCrtrM().delete(asLeasePrtctnCrtrMIO); }
public boolean check(Map<String, String> atrbtCntnt) throws BizApplicationException { String startDate = null; String endDate = null; if(atrbtCntnt == null || atrbtCntnt.size() != 2) { throw new BizApplicationException("AAPATE0015", new Object[] { "@startDt" }, new Object[] { "@endDt" }); } for (Map.Entry<String, String> entry : atrbtCntnt.entrySet()) { String key = entry.getKey(); if(startDate == null) { startDate = atrbtCntnt.get(key); } else { endDate = atrbtCntnt.get(key); } } if (StringUtils.isEmpty(startDate)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@startDt" }); } else if (StringUtils.isEmpty(endDate)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@endDt" }); } if(startDate != null && startDate.compareTo(endDate) > 0 ) { throw new BizApplicationException("AAPCME0608", new Object[] { "@startDt", "@endDt" }); } return true; }
public List<PdCnd> getCndMultiple(PdCndMltplIn in) throws BizApplicationException { if (in == null) { throw new BizApplicationException("AABXME3000", null); } else if (CollectionCoreUtils.isEmpty(in.getCndCdList())) { throw new BizApplicationException("AAPPDE0005", new Object[] {}); // 조건을 찾을 수 없습니다. 입력값을 확인하십시오. } PdCndListIn pdCndIn = new PdCndListIn(); pdCndIn.setInstitutionId(getInstCd()); pdCndIn.setPdCd(getPdCd()); pdCndIn.setStartDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyStartDt(), _getAplyTmString(in.getAplyStartTm()))); pdCndIn.setEndDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyEndDt(), _getAplyTmString(in.getAplyEndTm()))); pdCndIn.setCndCdList(in.getCndCdList()); List<PdCndBaseOut> pdCndOut = _getPdCndCore().getListPdCnd(pdCndIn); if(CollectionUtils.isEmpty(pdCndOut)) return Collections.emptyList(); List<PdCnd> out = new ArrayList<PdCnd>(); for(PdCndBaseOut pdCnd : pdCndOut) { out.add(new PdCndImpl(this, PdUtil.parseDateToYYYYMMDD(pdCnd.getApplyStartDate()), PdUtil.parseDateToHHMMSS(pdCnd.getApplyStartDate()), _converPdCndBaseOutToPdPdCndMIO(pdCnd))); } // Return Output return out; }
public CaCrncyBillCtgryMgmtSvcCrncyBillCtgryIn clone(){ try{ CaCrncyBillCtgryMgmtSvcCrncyBillCtgryIn object= (CaCrncyBillCtgryMgmtSvcCrncyBillCtgryIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getInstCd(){ return instCd; }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if (!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){ if (getListCd().equals(CCM01.NO)) { //This product can be purchased by customer who did not open deposit arrangement in a month //본상품은 최근 한달간 예금상품 개설이 없는 고객에게 판매가능한 상품입니다 throw new BizApplicationException("AAPARE0272" , new Object[]{}); } else { //This product can be purchased by customer who has been open deposit arrangement in a month //본상품은 최근 한달간 예금상품 개설이 있는 고객에게 판매가능한 상품입니다 throw new BizApplicationException("AAPARE0273" , new Object[]{}); } } }
public String getSubInfo(String atrbtNm, StaffImpl staffImpl) throws BizApplicationException { // 1. 보조명세 캐시 조회 AtStaffSIO subInfo = getSubInfoCache(staffImpl); // 2. 보조명세 캐시가 null인 경우, null 리턴 if (subInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = subInfo.get(atrbtNm); // Casting 시 Null 방지 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public void saveMapSubInfo(Map<String, String> subInfoMap, AprslImpl aprslImpl) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 감정보조명세의 종류 조회 AprslSubInfoKndEnum subInfoKnd = aprslImpl.getAprslSubInfoKnd(); // 2. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 3. 보조원장 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(aprslImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("aprslId", aprslImpl.getAprslBasicCache().getAprslId()); // PK setting // 입력된 map을 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 3-1. insert _insertSubInfo(subInfoKnd, subInfoCache); // 4. 캐시 저장 aprslImpl.saveSubInfoCache(xtnTable, subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 입력된 map을 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 3-2. update _updateSubInfo(subInfoKnd, subInfoCache); } }
public String getSaleStartTime() { return PdUtil.parseDateToHHMMSS(bf.getSaleStartDt()); }
public Integer getTxSeqNbr() { return txSeqNbr; }
public AprslBsicInfoIO getBasicInfo() throws BizApplicationException { if(aprslBasicCache == null) { return null; } AprslBsicInfoIO aprslBsicInfoIO = new AprslBsicInfoIO(); DtoCoreUtils.setSubInfoIO(aprslBasicCache, aprslBsicInfoIO); return aprslBsicInfoIO; }
public Arr getTargetArr() throws BizApplicationException { return (Arr) super.getRelatedArrAsMain(ArrArrRelEnum.STANDING_ORDER_TARGET_ACCOUNT, null); }
public ClientInfoIO getClientInfo() throws BizApplicationException { ClientInfoIO clientInfoIO = new ClientInfoIO(); Enumeration<NetworkInterface> netInterfaces = null; try { // 네트워크 인터페이스를 받아 온다. netInterfaces = NetworkInterface.getNetworkInterfaces(); } catch (SocketException e) { if(logger.isDebugEnabled()) { logger.debug("SocketException : {}", e); } try { clientInfoIO.setIpAddr(_getLocalIp()); clientInfoIO.setHostNm(_getLocalHostName()); return clientInfoIO; } catch(Exception ex1) {throw ex1;} } while (netInterfaces.hasMoreElements()) { NetworkInterface ni = (NetworkInterface)netInterfaces.nextElement(); Enumeration<InetAddress> address = ni.getInetAddresses(); if (address == null) { clientInfoIO.setIpAddr(_getLocalIp()); clientInfoIO.setHostNm(_getLocalHostName()); return clientInfoIO; } while (address.hasMoreElements()) { InetAddress addr = (InetAddress)address.nextElement(); if (!addr.isLoopbackAddress() && !addr.isSiteLocalAddress() && !addr.isAnyLocalAddress() ) { String ip = addr.getHostAddress(); if( ip.indexOf(".") != -1 && ip.indexOf(":") == -1 ){ clientInfoIO.setIpAddr(ip); clientInfoIO.setHostNm(addr.getHostName()); return clientInfoIO; } } } } clientInfoIO.setIpAddr(_getLocalIp()); return clientInfoIO; }
