{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(ReportKndCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@AssetXtnAtrbtNm\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "delete(InsrncStsChngIn", "in)", "throws", "BizApplicationException", "{", "InsrncStsCoreEnum", "afStstCd", "=", "InsrncStsCoreEnum.CANCELED;", "//", "1.", "\uc785\ub825\uac12", "\uac80\uc99d", "_checkStsChnginput(in,", "afStstCd);", "//", "2.", "\ubcf4\uc99d\uae30\ubcf8", "\uc124\uc815\uc0c1\ud0dc", "\ubcc0\uacbd", "(\"\ucde8\uc18c\"\uc0c1\ud0dc\ub85c", "\ubcc0\uacbd)", "_getInsrncBsicBiz().changeInsrnStatus(this,", "in,", "afStstCd.getValue());", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm)){", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ArrSubInfoKndEnum", "subInfoKnd", "=", "arrRealImpl.getSubInfoKnd();", "//", "2.", "\uacc4\uc57d\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(arrRealImpl);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"arrId\",", "arrRealImpl.getArrId());", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "save", "cache", "arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(),", "subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "boolean", "isValidType(AtrbtTpEnum", "atrbtTp,", "String", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"atrbtTpCd={}\",", "atrbtTp);", "logger.debug(\"atrbtCntnt={}\",", "atrbtCntnt);", "}", "if", "(atrbtTp", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0037\",", "new", "Object[]", "{", "atrbtTp", "});", "}", "//", "Validate", "attribute", "type", "switch", "(atrbtTp)", "{", "case", "TEXT:", "//", "text", "return", "(StringCoreUtils.isEmpty(atrbtCntnt))", "?", "false", ":", "true;", "case", "TEXT_DATE:", "//", "date", "return", "DateCoreUtils.isValidDate(atrbtCntnt);", "case", "TEXT_NUMBER:", "//", "number", "return", "DataCheckCoreUtils.isNumeric(atrbtCntnt);", "case", "NUMBER:", "//", "number", "return", "DataCheckCoreUtils.isNumeric(atrbtCntnt);", "case", "TEXT_ALPHA_NUMERIC:", "//", "Alpha-Number", "return", "DataCheckCoreUtils.isAlphaNumeric(atrbtCntnt);", "case", "YES_OR_NO:", "//", "yes", "or", "no", "return", "(CCM01.YES.equals(atrbtCntnt)", "||", "CCM01.NO.equals(atrbtCntnt))", "?", "true", ":", "false;", "case", "PASSWORD:", "//", "Password", "return", "DataCheckCoreUtils.isValidPassword(atrbtCntnt);", "case", "TIMESTAMP:", "//", "timestamp", "return", "true;", "case", "JSON:", "//", "json", "return", "DataCheckCoreUtils.isJson(atrbtCntnt);", "case", "EMPTY:", "return", "true;", "default:", "throw", "new", "BizApplicationException(\"AAPCME0037\",", "new", "Object[]", "{", "atrbtTp", "});", "}", "}"], "docstring_tokens": ["Validate", "that", "the", "value", "of", "the", "input", "attribute", "matches", "the", "type", "of", "the", "attribute."]}
{"code_tokens": ["public", "ArrTx", "cancel()", "throws", "BizApplicationException", "{", "//", "\ucde8\uc18c\uac00\ub2a5\uac70\ub798\uc5ec\ubd80", "\ud655\uc778", "if(!_cancelableTxYn())", "{", "throw", "new", "BizApplicationException(\"AAPSTE0206\",", "new", "String[]", "{this.getSrvcNm()});", "}", "//", "\ucde8\uc18c\uac70\ub798", "\uc0dd\uc131", "ArrTx", "cnclArrTx", "=", "_createCnclTx(null,", "null,", "null,", "null);", "//", "\uc6d0\uac70\ub798\uc758", "\ucde8\uc18c\uc815\ubcf4", "update", "super.modifyCancelArrTxInfo(cnclArrTx.getTxStsCd(),", "cnclArrTx.getTxDt(),", "cnclArrTx.getTxSeqNbr());", "//", "\ucde8\uc18c\uc5d0", "\uc758\ud55c", "\uac70\ub798\ud6c4\uc794\uc561", "\uac31\uc2e0", "_modifyTxAfBalBasedOnCancel();", "//", "\uc5ec\uc2e0", "undo", "\uc218\ud589", "_loanUndo();", "//", "\uc138\uae08\ucde8\uc18c(\uc778\uc9c0\uc138", "+", "\uc138\uae08)", "_calcelTax(this.getArrId(),", "this.getTxDt(),", "this.getTxSeqNbr(),", "cnclArrTx.getTxDt(),", "cnclArrTx.getTxSeqNbr());", "//\uc77c\uc77c\uacb0\uc0b0", "\uad00\ub828", "\ucde8\uc18c", "\ub85c\uc9c1", "\ucd94\uac00", "_getDailyAcrlStlmntBiz().cancelSettlement(getArr().getArrId(),", "getTxDt(),", "getTxSeqNbr());", "_arrUndo(this.getArr());", "return", "cnclArrTx;", "}"], "docstring_tokens": ["This", "method", "cancels", "arrangement", "transactions.", "The", "main", "flow", "of", "normal", "transaction", "cancellation", "is", "as", "follows.", "1.", "Verify", "the", "service", "limit", "of", "the", "product.", "2.", "Verify", "the", "data", "to", "generate", "the", "cancellation", "transaction.", "3.", "Set", "the", "transaction", "status", "code", "of", "the", "cancellation", "transaction", "according", "to", "the", "transaction", "date.", "3.1", "If", "the", "transaction", "date", "is", "today,", "set", "it", "to", "cancel.", "3.2", "If", "the", "transaction", "date", "is", "not", "today,", "set", "it", "to", "correction.", "4.", "Set", "cancellation", "transaction", "information", "using", "original", "transaction.", "5.", "Establishes", "the", "extend", "information", "of", "the", "cancellation", "transaction.", "6.", "Set", "the", "Entry(deposit", "withdrawal", "history", "of", "transaction)", "in", "the", "cancellation", "transaction.", "7.", "Use", "the", "information", "set", "above", "to", "generate", "the", "cancellation", "transaction", "object({@link", "ArrTx}).", "8.", "Set", "the", "cancel", "counterpart", "information", "in", "the", "original", "transaction", "and", "change", "the", "transaction", "status", "to", "the", "cancelled", "transaction.", "9.", "Cancel", "the", "taxes", "and", "deposit", "interest.", "10.", "In", "case", "of", "cancellation", "of", "the", "normal", "transaction", "associated", "with", "the", "goddess,", "call", "'undo'", "API", "of", "{@link", "ArrCashFlowProvider}."]}
{"code_tokens": ["public", "List<PdTxSrvcIO>", "getListPdTmpltCd(PdTxSrvcIO", "in)", "throws", "BizApplicationException", "{", "return", "_convertPdTxSvcIOList2PdTxSrvcIOList(_convertToPdTxSvcIOList(_getListPdTmpltCdCmb(in)));", "}"], "docstring_tokens": ["Methods", "to", "query", "product", "template", "information"]}
{"code_tokens": ["public", "List<GlRptMgmtReportOut>", "getListTxDtGlRptBs(GlRptMgmtReportIn", "in,", "Integer", "pageNum,", "Integer", "pageCount)", "throws", "BizApplicationException{", "_checkInputData(in.getInqryKndDscd(),", "\"inqryKndDstnctnCd\");", "_checkDate(in.getBaseDt());", "_checkInputData(in.getDeptId(),", "\"deptId\");", "_checkInputData(in.getCrncyCd(),", "\"crncyCd\");", "//", "if(pageNum", "==", "null", "||", "pageNum", "==", "0)", "pageNum", "=", "1;", "//", "if(pageCount", "==", "null", "||", "pageCount", "==", "0)", "pageCount", "=", "PaginationUtils.PAGE_COUNT;", "List<GlRptMgmtReportOut>", "outList", "=", "new", "ArrayList<GlRptMgmtReportOut>();", "List<GlRptMgmtReportOut>", "debitList", "=", "new", "ArrayList<GlRptMgmtReportOut>();", "//", "\ucc28\ubcc0", "List<GlRptMgmtReportOut>", "creditList", "=", "new", "ArrayList<GlRptMgmtReportOut>();", "//", "\ub300\ubcc0", "String", "kndType", "=", "in.getInqryKndDscd();", "if(GlQryKndDscdEnum.BALANCE_SHEET.getValue().equals(kndType)){", "kndType", "=", "BsisDscdEnum.BS.getValue();", "//\ub300\ucc28\ub300\uc870\ud45c", "}else", "if(GlQryKndDscdEnum.INCOME_STATEMENT.getValue().equals(kndType)){", "kndType", "=", "BsisDscdEnum.IS.getValue();", "//\uc190\uc775\uacc4\uc0b0\uc11c", "}", "Map<String,", "AcGlMIO>", "acGlMap", "=", "new", "HashMap<String,", "AcGlMIO>();", "//", "\uc2e4\uacc4\uc815\uacfc\ubaa9\uc758", "\uc0c1\uc704\uacc4\uc815", "\ud569\uc0b0", "\uacb0\uacfc\ub97c", "\ub2f4\uc744", "\ub9f5", "/**", "*", "process", "net", "profit", "or", "loss", "*/", "_processProfitLossAccountingBal(in,", "acGlMap);", "/**", "*", "process", "general", "ledger's", "up", "accounting", "item", "code", "*/", "_processUpAcctgItmCd(in,", "acGlMap);", "/**", "*", "set", "debit", "&", "credit", "data", "*/", "for(Map.Entry<String,", "AcGlMIO>", "elem", ":", "acGlMap.entrySet()){", "if(DebitCrdtDscdEnum.DEBIT.getValue().equals(elem.getValue().getDebitCrdtDscd())", "&&", "kndType.equals(elem.getValue().getBsisDscd())){", "//", "BS", "&", "\ucc28\ubcc0", "Item", "set", "debitList.add(_getListGlRptBsIO1(elem.getValue().getDebitCrdtDscd(),", "elem.getValue().getAcctgItmCd(),", "elem.getValue().getAcctgItmNm(),", "elem.getValue().getAcctgBal(),", "elem.getValue().getBsisDscd(),", "elem.getValue().getAcctgItmOutpSeqNbr()));", "}else", "if(DebitCrdtDscdEnum.CREDIT.getValue().equals(elem.getValue().getDebitCrdtDscd())", "&&", "kndType.equals(elem.getValue().getBsisDscd())){", "//", "BS", "&", "\ub300\ubcc0", "Item", "set", "creditList.add(_getListGlRptBsIO1(elem.getValue().getDebitCrdtDscd(),", "elem.getValue().getAcctgItmCd(),", "elem.getValue().getAcctgItmNm(),", "elem.getValue().getAcctgBal(),", "elem.getValue().getBsisDscd(),", "elem.getValue().getAcctgItmOutpSeqNbr()));", "}", "}", "int", "dbtRowCnt", "=", "debitList.size();", "//", "\ucc28\ubcc0\ub9ac\uc2a4\ud2b8", "int", "cdtRowCnt", "=", "creditList.size();", "//", "\ub300\ubcc0\ub9ac\uc2a4\ud2b8", "int", "maxLen", "=", "Math.max(dbtRowCnt,", "cdtRowCnt);", "int", "minLen", "=", "Math.min(dbtRowCnt,", "cdtRowCnt);", "//", "\ucc28\ubcc0", "\uacc4\uc815\ucd9c\ub825\uc21c\uc11c\ubc88\ud638", "\ubcc4\ub85c", "\uc815\ub82c", "Collections.sort(debitList,", "new", "Comparator<GlRptMgmtReportOut>()", "{", "/*", "*", "\ub0b4\ub9bc\ucc28\uc21c", ":", "o1", "o2", "*", "\uc624\ub984\ucc28\uc21c", ":", "o2", "o1", "*/", "@Override", "public", "int", "compare(GlRptMgmtReportOut", "o1,", "GlRptMgmtReportOut", "o2)", "{", "int", "intReturn", "=", "0;", "intReturn", "=", "o1.getAcctgItmOutpSeqNbr().compareTo(", "o2.getAcctgItmOutpSeqNbr());", "return", "intReturn;", "}", "});", "//", "\ub300\ubcc0", "\uacc4\uc815\ucd9c\ub825\uc21c\uc11c\ubc88\ud638", "\ubcc4\ub85c", "\uc815\ub82c", "Collections.sort(creditList,", "new", "Comparator<GlRptMgmtReportOut>()", "{", "/*", "*", "\ub0b4\ub9bc\ucc28\uc21c", ":", "o1", "o2", "*", "\uc624\ub984\ucc28\uc21c", ":", "o2", "o1", "*/", "@Override", "public", "int", "compare(GlRptMgmtReportOut", "o1,", "GlRptMgmtReportOut", "o2)", "{", "int", "intReturn", "=", "0;", "intReturn", "=", "o1.getAcctgItmOutpSeqNbr().compareTo(", "o2.getAcctgItmOutpSeqNbr());", "return", "intReturn;", "}", "});", "//\ub300\ucc28\ub300\uc870\ud45c", "DataSet", "\ucc98\ub9ac", "||", "\uc190\uc775\uacc4\uc0b0\uc11c", "DataSet", "\ucc98\ub9ac", "if", "((BsisDscdEnum.BS.getValue().equals(kndType))", "||", "(BsisDscdEnum.IS.getValue().equals(kndType)))", "{", "for(int", "i", "=", "0", ";", "i", "<", "maxLen;", "i++)", "{", "GlRptMgmtReportOut", "glRptMgmtReportOut", "=", "new", "GlRptMgmtReportOut();", "if(debitList.size()", ">=", "creditList.size()){", "glRptMgmtReportOut", "=", "debitList.get(i);", "if(minLen", ">", "i)", "{", "glRptMgmtReportOut.setCdsdAcctgItmCd(creditList.get(i).getCdsdAcctgItmCd());", "glRptMgmtReportOut.setCdsdAcctgItmNm(creditList.get(i).getCdsdAcctgItmNm());", "glRptMgmtReportOut.setBalAmt2(creditList.get(i).getBalAmt2());", "glRptMgmtReportOut.setAcctgItmOutpSeqNbr(creditList.get(i).getAcctgItmOutpSeqNbr());", "}", "}else{", "glRptMgmtReportOut", "=", "creditList.get(i);", "if(minLen", ">", "i)", "{", "glRptMgmtReportOut.setDbsdAcctgItmCd(debitList.get(i).getDbsdAcctgItmCd());", "glRptMgmtReportOut.setDbsdAcctgItmNm(debitList.get(i).getDbsdAcctgItmNm());", "glRptMgmtReportOut.setBalAmt1(debitList.get(i).getBalAmt1());", "glRptMgmtReportOut.setAcctgItmOutpSeqNbr(debitList.get(i).getAcctgItmOutpSeqNbr());", "}", "}", "outList.add(glRptMgmtReportOut);", "}", "}", "return", "outList;", "}"], "docstring_tokens": ["It", "inquires", "general", "ledger", "balance", "sheet/income", "statement", "list", "in", "transaction", "date.", "It", "inquires", "balance", "sheet/income", "statement/business", "report", "in", "accordance", "with", "the", "inquiry", "kind", "distinction", "code,", "(inquiry", "kind", "distinction", "code", ":", "01-balance", "sheet", "/", "02-income", "statement)", "It", "makes", "the", "upper", "accounting", "item", "code", "of", "the", "real", "title", "accounting", "item", "code", "look", "like", "it", "is", "decided", "because", "transaction", "date", "is", "before", "the", "general", "ledger", "is", "decided.", "It", "returns", "general", "ledger", "as", "a", "form", "of", "report", "order", "by", "accounting", "output", "sequence", "number."]}
{"code_tokens": ["protected", "void", "modify(CustImpl", "custImpl,", "List<AtCustDocRIO>", "atCustDocRIOList)", "throws", "BizApplicationException", "{", "if", "(atCustDocRIOList.isEmpty())", "{", "return;", "}", "AtCustMIO", "atCustMIO", "=", "custImpl.getCustBsicCache();", "for", "(AtCustDocRIO", "atCustDocRIO", ":", "atCustDocRIOList)", "{", "atCustDocRIO.setInstCd(atCustMIO.getInstCd());", "atCustDocRIO.setCustId(atCustMIO.getCustId());", "atCustDocRIO.setRelEndDt(DateUtils.getDateDayBefore(1,", "_getCmnContext().getTxDate()));", "//", "Get", "registered", "data", "AtCustDocRIO", "lastCustDocRIO", "=", "_getAtCustDocRDso().selectListByDocIssueId(atCustMIO.getInstCd(),", "atCustMIO.getCustId(),", "atCustDocRIO.getDocIssueId());", "if", "(lastCustDocRIO", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPATE0016\",", "new", "Object[]{", "\"@custDocRel\",", "\"@docIssueId\",", "atCustDocRIO.getDocIssueId()});", "}", "_getAtCustDocRDso().update(atCustDocRIO);", "}", "}"], "docstring_tokens": ["Change", "arrangement", "information(Conditions,", "extended", "attributes,", "and", "other", "arrangement", "informations)", "immediately", "by", "service", "type", "of", "modification", "arrangement."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "String", "cd)", "throws", "BizApplicationException", "{", "return", "_checkCode(cdNbr,", "cd);", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "DeptImpl", "deptImpl)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtDeptSIO", "subInfoIO", "=", "getSubInfoCache(deptImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtDeptSIO();", "subInfoIO.setDeptId(deptImpl.getDeptId());", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_getAtDeptSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(deptImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_getAtDeptSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "deptImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "CndVal", "getCndVal(List<ProvideCnd>", "prvdCndList)", "throws", "BizApplicationException", "{", "if", "(isComplexCnd())", "{", "//", "Error", "if", "complex", "condition", "throw", "new", "BizApplicationException(\"AAPPDE0004\",", "null);", "}", "CndVal", "cndVal", "=", "null;", "//", "Set", "input", "PdPdCndSimpleSearchIn", "inDao", "=", "new", "PdPdCndSimpleSearchIn();", "inDao.setTntInstId(getInstCd());", "inDao.setAplyStartDt(_getAplyStartDt());", "inDao.setCndCd(getCndCd());", "inDao.setCndGrpCd(getCndGrpCd());", "inDao.setCndGrpTmpltCd(getCndGrpTmpltCd());", "if", "(isListCnd())", "{", "//", "\ubaa9\ub85d\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getListCndValue(inDao);", "}", "else", "if", "(isRngCnd())", "{", "//", "\ubc94\uc704\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getRangeCndValue(inDao);", "}", "/*", "*", "else", "if", "(isIntCnd())", "{", "//", "\uc6b0\ub300\uae08\ub9ac\uc77c", "\uacbd\uc6b0", "\uc81c\uacf5\uc870\uac74\uc5d0\ub530\ub978", "\uaddc\uce59\uc744", "\uacc4\uc0b0\ud558\uc5ec", "\uc544\ub798", "\ub85c\uc9c1\uc744", "\ud0dc\uc6b8\uc9c0\ub9d0\uc9c0", "\uacb0\uc815", "if", "*", "(isPreferentialInterestCnd()", "&&", "*", "!isPreferentialInterestProvideCndApplyRulePass(prvdCndList))", "{", "return", "null;", "}", "*", "*", "//", "\uae08\ub9ac\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getInterestCndValue(inDao);", "*", "*", "}", "else", "if", "(isFeeCnd())", "{", "//", "\uc218\uc218\ub8cc\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getFeeCndValue(inDao);", "}", "*/", "//", "Return", "CndVal", "return", "cndVal;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "value."]}
{"code_tokens": ["public", "ScrtyIntMngrSvcGetIn", "clone(){", "try{", "ScrtyIntMngrSvcGetIn", "object=", "(ScrtyIntMngrSvcGetIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrRealImpl", "getArrReal(ArArrMIO", "arArrMIO)", "throws", "BizApplicationException", "{", "return", "(ArrRealImpl)", "super.getArrRealCore(arArrMIO);", "}"], "docstring_tokens": ["This", "method", "inquire", "arrangement", "using", "account", "number", "and", "account", "number", "distinction", "code.", "If", "there", "are", "several", "arrangements", "by", "account", "number,", "inquire", "last", "nthNbr", "of", "arrangement.", "Detail", "function", "description", "refers", "to", "{@link", "#getArrReal(ArrRealGetIn)}."]}
{"code_tokens": ["public", "ArrExtrnlIdNbrInfo", "getArrExtrnlIdNbrInfo(String", "arrExtrnlIdNbrTpCd)", "throws", "BizApplicationException", "{", "return", "_getArrRealCoreFundamentalAgent().getArrExtrnlIdNbrInfo(arrExtrnlIdNbrTpCd,", "this);", "}"], "docstring_tokens": ["Inquire", "external", "id", "number", "information", "of", "specific", "type", "registerd", "to", "arrangement."]}
{"code_tokens": ["public", "void", "getSubInfo(List<StlmntDtlIO>", "stlmntDtlIOList)", "throws", "BizApplicationException", "{", "//", "1.\ubaa9\ub85d\ubcc4", "CTI", "\ud655\uc7a5\uc18d\uc131", "\uc870\ud68c", "if(stlmntDtlIOList", "!=", "null", "&&", "!stlmntDtlIOList.isEmpty())", "{", "for(StlmntDtlIO", "stlmnt", ":", "stlmntDtlIOList)", "{", "//", "2.\uc815\uc0b0\ubcf4\uc870\uba85\uc138", "DBIO", "VO\uc5d0", "\uac80\uc0c9Key\uac12", "set", "(\uac80\uc0c9key:", "\uacc4\uc57d\uc2dd\ubcc4\uc790,", "\uac70\ub798\uc77c,", "\uac70\ub798\uc77c\ub828\ubc88\ud638,", "\uae08\uc561\uc720\ud615,", "\ud658\uc785\ud658\ucd9c\uad6c\ubd84)", "StStlmntSIO", "stStlmntSIOIn", "=", "new", "StStlmntSIO();", "_setStlmntSKey(stStlmntSIOIn,", "stlmnt);", "//", "3.\uc815\uc0b0\ubcf4\uc870\uba85\uc138", "CTI", "\ud655\uc7a5\uc18d\uc131MAP", "\uc870\ud68c", "Map<String,", "String>", "stlmntSubInfoMap", "=", "_getStlmntSubInfoBiz().getMapSubInfo(stStlmntSIOIn);", "//", "4.\uc815\uc0b0\ubcf4\uc870\uba85\uc138Map\uc744", "\uae30\uc874", "\uc815\uc0b0\uae30\ubcf8", "\ud655\uc7a5\uc815\ubcf4(stlmntXtnInfoList)\uc5d0", "\uc870\ub9bd\ub428", "if(stlmntSubInfoMap", "!=", "null)", "{", "_assembleStlmntXtnInfoOut(stlmntSubInfoMap,", "stlmnt,", "stlmnt.getStlmntXtnInfoList());", "}", "for(StlmntCalcnDtlIO", "calcnDtl", ":", "stlmnt.getStlmntCalcnDList())", "{", "//", "5.\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30\ubcf4\uc870\uba85\uc138", "DBIO", "VO\uc5d0", "\uac80\uc0c9Key\uac12", "set", "(\uac80\uc0c9key:", "\uacc4\uc57d\uc2dd\ubcc4\uc790,", "\uac70\ub798\uc77c,", "\uac70\ub798\uc77c\ub828\ubc88\ud638,", "\uae08\uc561\uc720\ud615,", "\ud658\uc785\ud658\ucd9c\uad6c\ubd84,", "\uc0c1\uc138\uc77c\ub828\ubc88\ud638)", "StStlmntCalcnSIO", "stStlmntCalcnSIOIn", "=", "new", "StStlmntCalcnSIO();", "_setStlmntCalcnSKey(stStlmntCalcnSIOIn,", "calcnDtl);", "//", "6.\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30\ubcf4\uc870\uba85\uc138", "CTI\ud655\uc7a5\uc18d\uc131MAP", "Map<String,", "String>", "stlmntCalcnSubInfoMap", "=_getStlmntCalcnSubInfoBiz().getMapSubInfo(stStlmntCalcnSIOIn);", "//", "7.\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30", "\ud655\uc7a5\uc18d\uc131Map\uc744", "\uae30\uc874", "\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30", "\ud655\uc7a5\uc815\ubcf4(StlmntCalcnDtlIO.stlmntXtnInfoList)\uc5d0", "\uc870\ub9bd\ub428", "if(stlmntCalcnSubInfoMap", "!=", "null)", "{", "_assembleStlmntXtnInfoOut(stlmntCalcnSubInfoMap,", "stlmnt,", "calcnDtl.getStlmntXtnInfoList());", "}", "}", "}", "}", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "asset", "transaction."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "null,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt,", "false);", "}"], "docstring_tokens": ["Inquire", "specific", "customer", "own", "(as", "main", "contractor)", "arrangements", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "Current", "Status", "/", "Base", "Status", "/", "Inquiry", "Period(Start", "Date", "/", "End", "Date)", "Approved", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Get", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "approved", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Get", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Active", "/", "1/1", "~", "3/1", ":", "Get", "arrangement", "activated", "within", "1/1", "~", "3/1", "and", "still", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,", "ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "ArrSrvcEnum", "arrSrvcEnum", "=", "ArrSrvcEnum.getEnum(arrSrvcTpCd);", "if(", "arrSrvcEnum", "==", "null", ")", "{", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\",", "new", "Object[]{this.getCndCd(),", "this.getCndCdNm(),", "arrSrvcTpCd});", "}", "switch(arrSrvcEnum)", "{", "//", "\uc218\uc785\uc2e0\uc6a9\uc7a5\uac1c\uc124", "case", "OPEN_IMPORT_LC", ":", "case", "OPEN_NON_LC", ":", "_validateUsanceTypeByLcKind(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "//", "B/L\uc778\uc218", "case", "ACCEPT_BL", ":", "_validateBlAcceptanceTransaction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "condition", "related", "actions", "for", "input", "service", "according", "to", "product", "condition", "value", "or", "negotiated", "value.", "For", "example,", "the", "\"Required", "document\"", "condition", "has", "the", "product", "required", "document", "type", "for", "loan", "application", "service.", "The", "arrangement", "condition", "action", "validate", "the", "required", "document", "type", "is", "received", "(presented)", "or", "not.", "Another", "example", "is", "the", "deposit", "open", "service,", "\"Interest", "capitalization", "YN\"", "condition", "dose", "the", "action", "to", "make", "an", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date.", "This", "method", "performs", "the", "function", "of", "performing", "product", "condition", "management", "rule", "registered", "on", "system.", "Implementation", "of", "condition", "management", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "according", "to", "the", "arrangement", "condition", "class", "implementation", "method,", "and", "the", "implemented", "arrangement", "condition", "class", "should", "specify", "the", "process", "target", "class", "by", "condition.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", "Caution", ":", "-", "To", "define", "condition", "management", "rule", "by", "service", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", ">", "Select", "service"]}
{"code_tokens": ["public", "void", "isDefinedProduct(String", "arrArrRelCd,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "String", "pdCd)", "throws", "BizApplicationException", "{", "ArArrArrRelPdRuleMIO", "arArrArrRelPdRuleMIO", "=", "new", "ArArrArrRelPdRuleMIO();", "arArrArrRelPdRuleMIO.setInstCd(_getCmnContextCore().getInstCode());", "arArrArrRelPdRuleMIO.setArrArrRelCd(arrArrRelCd);", "//", "\ud574\ub2f9", "\uacc4\uc57d\uacc4\uc57d\uad00\uacc4\uc5d0", "\uc0c1\ud488\ubaa9\ub85d\uc774", "\uc815\uc758\ub418\uc5b4\uc788\ub294\uc9c0", "\ud655\uc778", "List<ArArrArrRelPdRuleMIO>", "arrArrRelPdRuleList", "=", "_getArArrArrRelPdRuleMDso().selectList(arArrArrRelPdRuleMIO);", "//", "\ud574\ub2f9", "\uacc4\uc57d\uacc4\uc57d\uad00\uacc4\uc5d0", "\uc815\uc758\ub418\uc5b4", "\uc788\ub294", "\uc0c1\ud488\ubaa9\ub85d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "validation", "check", "skip", "if", "(arrArrRelPdRuleList", "==", "null", "||", "arrArrRelPdRuleList.isEmpty())", "{", "return;", "}", "//", "\uad00\ub828\uacc4\uc57d\uc758", "\uc0c1\ud488\uc774", "\ud574\ub2f9", "\uacc4\uc57d\uacc4\uc57d\uad00\uacc4\uc720\ud615\uc5d0", "\uc815\uc758\ub418\uc5b4\uc788\ub294", "\uc0c1\ud488\uc778\uc9c0", "\ud655\uc778", "List<ArArrArrRelPdRuleMIO>", "arArrArrRelPdRule", "=", "_getArrArrRelPdRuleListByProductCd(arrArrRelCd,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "pdCd);", "if", "(arArrArrRelPdRule", "==", "null", "||", "arArrArrRelPdRule.isEmpty())", "{", "//\ud574\ub2f9", "\uad00\ub828\uacc4\uc57d\uc758", "\uc0c1\ud488({1})\uc774", "\uacc4\uc57d\uac04\uad00\uacc4\uc0c1\ud488\uaddc\uce59\ud14c\uc774\ube14\uc5d0", "\uc815\uc758\ub418\uc5b4", "\uc788\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4.", "throw", "new", "BizApplicationException(\"AAPARE0644\",", "new", "Object[]{\"@pdCd\"});", "}", "return", ";", "}"], "docstring_tokens": ["Check", "the", "product", "of", "related", "arrangement", "is", "defined", "in", "the", "rule", "between", "arrangement", "arrangement", "relation", "and", "product."]}
{"code_tokens": ["public", "List<AprvlListInqryOut>", "getListApprove(AprvlListInqryIn", "in)", "throws", "BizApplicationException", "{", "_checkStringValue(in.getInqryStartDt(),", "\"AAPCME0006\",", "new", "Object[]", "{\"@inqryStartDt\"});", "_checkStringValue(in.getInqryEndDt(),", "\"AAPCME0006\",", "new", "Object[]", "{\"@inqryEndDt\"});", "List<CmAprvlMIO>", "cmAprvlMIOList", "=", "_getCmApprvMDso().selectList(_setAprvlListInput(in));", "if", "(cmAprvlMIOList", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0004\",", "null);", "}", "return", "_setAprvlListOut(cmAprvlMIOList);", "}"], "docstring_tokens": ["Retrieves", "a", "list", "of", "approval", "information", "that", "occurred", "during", "the", "period."]}
{"code_tokens": ["public", "List<PdClassificationInformationRelation>", "getListPdClassificationInfoRelation(PdClassificationInformationRelation", "in)", "throws", "BizApplicationException", "{", "if", "(StringCoreUtils.isEmpty(in.getInstCd()))", "{", "in.setInstCd(getInstCd());", "}", "if", "(StringCoreUtils.isEmpty(in.getPdInfoDscd()))", "{", "in.setPdInfoDscd(pdPdM.getPdInfoDscd());", "}", "if", "(StringCoreUtils.isEmpty(in.getPdCd()))", "{", "in.setPdCd(getPdCd());", "}", "PdClRelationListIn", "relationIn", "=", "new", "PdClRelationListIn();", "relationIn.setInstitutionId(in.getInstCd());", "relationIn.setPdClCd(in.getPdClCd());", "relationIn.setPdClStructureDscd(in.getPdClStrcDscd());", "relationIn.setPdCd(in.getPdCd());", "relationIn.setClStructureUsageDscd(in.getClStrctrUseDscd());", "relationIn.setBaseDate(in.getAplyStartDt());", "List<PdClRelationOut>", "relationOut", "=", "_getPdCore().getListPdClRelation(relationIn);", "List<PdClassificationInformationRelation>", "out", "=", "new", "ArrayList<>();", "for(PdClRelationOut", "relation", ":", "relationOut)", "{", "PdClassificationInformationRelation", "temp", "=", "new", "PdClassificationInformationRelation();", "temp.setInstCd(relation.getInstitutionId());", "temp.setPdInfoDscd(relation.getPdInfoDscd());", "temp.setPdCd(relation.getPdCd());", "temp.setPdClStrcDscd(relation.getPdClStructureDscd());", "temp.setClStrcNm(relation.getClStructureName());", "temp.setPdClCd(relation.getPdClCd());", "temp.setActvYn(relation.isActive()", "?", "CPD01.YES", ":", "CPD01.NO);", "temp.setAplyStartDt(relation.getApplyStartDate());", "temp.setAplyEndDt(relation.getApplyEndDate());", "temp.setNavigation(relation.getFullPath());", "out.add(temp);", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "product", "classification", "information", "relation", "if", "classification", "structure", "use", "distinction", "code", "value", "is", "exists,", "product", "classification", "information", "relation", "filtering", "if", "classification", "structure", "use", "distinction", "code", "value", "is", "null,", "all", "product", "classification", "information", "relation."]}
{"code_tokens": ["public", "CaDocSrchSvcVerifyDocTmpltIn", "clone(){", "try{", "CaDocSrchSvcVerifyDocTmpltIn", "object=", "(CaDocSrchSvcVerifyDocTmpltIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CmpsCnd>", "getCmpsCnd()", "throws", "BizApplicationException", "{", "if", "(!isComplexCnd())", "{", "throw", "new", "BizApplicationException(\"AAPPDE0003\",", "null);", "//", "\ub2e8\uc21c\uc870\uac74", "simple", "condition", "}", "//", "Return", "output", "return", "getCmpsCnd(getCmpxStrctrId());", "}"], "docstring_tokens": ["This", "method", "inquire", "all", "composing", "condition", "list", "in", "input", "value", "complex", "structure", "identity.", "if", "simple", "condition,", "throws", "Exception.", "DataCache", "has", "been", "applied."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AtrlImpl", "atrlImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\uc561\ud130\uc5ed\ud560\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtAtrlSIO", "subInfoIO", "=", "getSubInfoCache(atrlImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtAtrlSIO();", "subInfoIO.setAtrlId(atrlImpl.getAtrlId());", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "insert", "_getAtAtrlSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(atrlImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "update", "_getAtAtrlSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "atrlImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(AuthStsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@authStsCd\"});", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "{", "for", "(PstnPrcsngDscdEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "StlmntCalcnSubInfoInqryIn", "stlmntCalcnSubInfoInqryIn)", "throws", "BizApplicationException", "{", "_getStlmntCalcnSubInfoBiz().saveMapSubInfo(subInfoMap,", "_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn));", "}"], "docstring_tokens": ["Save", "the", "appraisal", "preferential", "claim", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "List<ArrReal>", "getListVrtnArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "pdCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getVrtnArrListBasedOnArrStatusHistory(deptId,", "null,", "null,", "null,", "pdCd,", "arrDeptRel,", "curArrSts,", "arrSts,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "variation", "arrangements", "which", "was", "the", "specific", "status", "between", "the", "specified", "period", "and", "currently", "not", "changed"]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AssetCore", "asset)", "throws", "BizApplicationException", "{", "return", "_getAssetSubInfoBiz().getMapSubInfo((AssetImpl)asset);", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "Subsidiary", "Information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["public", "CaCoaMgmtSvcGetXtnTblAtrbtOut", "clone(){", "try{", "CaCoaMgmtSvcGetXtnTblAtrbtOut", "object=", "(CaCoaMgmtSvcGetXtnTblAtrbtOut)super.clone();", "if", "(", "this.atrbtList==", "null", ")", "object.atrbtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetXtnTblAtrbtIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetXtnTblAtrbtIO>(atrbtList.size());", "for(", "bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetXtnTblAtrbtIO", "item", ":", "atrbtList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetXtnTblAtrbtIO)item.clone());", "}", "object.atrbtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<TblXtnAtrbtDtlIO>", "getListAttributeExistData(String", "atrbtNm)", "{", "//", "TODO", "Auto-generated", "method", "stub", "List<TblXtnAtrbtDtlIO>", "out", "=", "new", "ArrayList<TblXtnAtrbtDtlIO>();", "TblXtnAtrbtDtlIO", "outTblAtrbt=", "null;", "List<CmTblAtrbtMIO>", "cmTblAtrbtMIOList", "=", "_getCmTblAtrbtMDso().selectListByName(atrbtNm);", "for", "(CmTblAtrbtMIO", "outDao", ":", "cmTblAtrbtMIOList){", "outTblAtrbt", "=", "new", "TblXtnAtrbtDtlIO();", "outTblAtrbt.setTblNm(outDao.getTblNm());", "out.add(outTblAtrbt);", "}", "List<CmTblXtnAtrDIO>", "cmTblXtnAtrDIOList", "=", "_getCmTblXtnAtrDDso().selectListByAtrbtNm(atrbtNm);", "for", "(CmTblXtnAtrDIO", "outDao", ":", "cmTblXtnAtrDIOList){", "outTblAtrbt", "=", "new", "TblXtnAtrbtDtlIO();", "outTblAtrbt.setTblNm(outDao.getTblNm());", "out.add(outTblAtrbt);", "}", "return", "out;", "}"], "docstring_tokens": ["Query", "existing", "data", "of", "attribute", "being", "used."]}
{"code_tokens": ["public", "List<CaKrRoadAddrOut>", "getAddrByAreaNbr(String", "cityPrvncAddr,String", "cityGunGuAddr,", "String", "emdongAddr,", "Integer", "nbrAddrNbr,Integer", "househldNbr)", "throws", "BizApplicationException", "{", "List<CaCmKrRoadAddrMIO>", "cmKrRoadAddrMList", "=", "_getCaCmKrRoadAddrMDso().selectByAreaNumber(CaAddrHrarcyEnum.KOREA_ROAD_NAME_ADDRESS_CODE.getValue(),", "cityPrvncAddr,", "cityGunGuAddr,", "emdongAddr,", "househldNbr,", "nbrAddrNbr);", "List<CaKrRoadAddrOut>", "out", "=", "new", "ArrayList<CaKrRoadAddrOut>();", "if(cmKrRoadAddrMList.isEmpty())", "{", "return", "out;", "}", "for(CaCmKrRoadAddrMIO", "cmKrRoadAddrMIO", ":", "cmKrRoadAddrMList)", "{", "CaKrRoadAddrOut", "krRoadAddrOut", "=", "new", "CaKrRoadAddrOut();", "krRoadAddrOut", "=", "_getKrRoadAddrOut(cmKrRoadAddrMIO);", "if(krRoadAddrOut", "!=", "null)", "{", "out.add(krRoadAddrOut);", "}", "}", "return", "out;", "}"], "docstring_tokens": ["It", "inquiries", "the", "parcel", "address", "with", "Korea", "road", "list."]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo", ",", "StStlmntSIO", "stStlmntSIOIn)", "{", "logger.debug(\"##<ST-StlmntSubInfoBiz>", "saveSubInfo\");", "//", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{this.getClass().getSimpleName()});", "}", "logger.debug(\"##<ST-StlmntSubInfoBiz>", "saveSubInfo", "null", "check", "ok\");", "//", "1.create", "a", "new", "instance", "of", "DB", "IO", "IValueObject", "subInfoDBIO", "=", "new", "StStlmntSIO();", "//", "2.set", "primary", "key", "_setKey(subInfoDBIO,", "stStlmntSIOIn);", "//", "3.convert", "IvalueObject", "to", "DBIO", "VO", "DtoUtils.setSubInfoIO(subInfo,", "subInfoDBIO);", "//", "4.save", "subsidiary", "detail(\ubcf4\uc870\uba85\uc138)", "_insertSubInfo(subInfoDBIO);", "/*", "*", "settlement\ub294", "\uc18d\uc131\uc744", "\ub300\ubd80\ubd84", "insert", "\ud558\ub294", "\uacbd\uc6b0\uc774\ubbc0\ub85c", "\uc544\ub798", "\ub85c\uc9c1\uc744", "\ub9c9\uc74c", "*/", "//", "IValueObject", "sqlOut", "=", "getSubInfo(stlmnt);", "//", "//", "//", "\ud574\ub2f9", "\uac70\ub798\uad00\ub828", "\ubcf4\uc870\uba85\uc138", "\ub370\uc774\ud130\uac00", "\uc5c6\uc744", "\ub54c", "//", "if(sqlOut", "==", "null)", "{", "//", "_insertSubInfo(subInfoDBIO);", "//", "//", "\ub9f4\ubc84\ubcc0\uc218", "VO", "\uac12", "\uc124\uc815", "//", "Stlmnt.setStlmntSubInfo(subInfo);", "//", "//", "}else", "{", "//", "//", "\uae30", "\uc870\ud68c", "\ub41c", "\uac12\uc5d0", "update\ub418\uc5b4\ud560", "\ud544\ub4dc", "\uc124\uc815", "//", "DtoUtils.setSubInfoIO(subInfo,", "sqlOut);", "//", "//", "DBIO", "IO\uc5d0", "\ub0b4\uc6a9\ud544\ub4dc", "\ubc18\uc601", "//", "DtoUtils.setSubInfoIO(sqlOut,", "subInfoDBIO);", "//", "//", "_updateSubInfo(subInfoDBIO);", "//", "//", "\ub9f4\ubc84\ubcc0\uc218", "VO", "\uac12", "\uc124\uc815(sqlOut\uc740", "\uae30\uc874", "+", "\uc0c8\ub85c", "update\ub418\uc5b4\uc57c", "\ud560", "\ud544\ub4dc", "\ubaa8\ub450", "\ubc18\uc601\ub41c", "\ucd5c\uc2e0", "\ubcf4\uc870\uba85\uc138IO)", "//", "stlmnt.setStlmntSubInfo(sqlOut);", "//", "}", "}", "//", "//", "/**", "//", "*", "set", "primary", "key", "of", "subsidiary", "table", "//", "*", "@param", "stlmntSIO", "//", "*", "@param", "Stlmnt", "//", "*/", "//", "private", "IValueObject", "_setKey(IValueObject", "stlmntSIO,", "String", "arrId,", "String", "txDt,", "int", "txSeqNbr,", "String", "amtTpCd,", "String", "prchsRtrnYn)", "{", "//", "stlmntSIO.set(\"instCd\",", "_getCmnContext().getInstCode());", "//", "stlmntSIO.set(\"arrId\",", "arrId);", "//", "stlmntSIO.set(\"txDt\",", "txDt);", "//", "stlmntSIO.set(\"txSeqNbr\",", "txSeqNbr);", "//", "stlmntSIO.set(\"amtTpCd\",", "amtTpCd);", "//", "stlmntSIO.set(\"prchsRtrnYn\",", "prchsRtrnYn);", "//", "//", "return", "stlmntSIO;", "//", "//", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "subsidiary", "information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "CaDocSrchSvcGetDocClTreeOut", "clone(){", "try{", "CaDocSrchSvcGetDocClTreeOut", "object=", "(CaDocSrchSvcGetDocClTreeOut)super.clone();", "if", "(", "this.children==", "null", ")", "object.children", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut>(children.size());", "for(", "bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut", "item", ":", "children", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut)item.clone());", "}", "object.children", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "LnCapitalizationSvcListOut", "clone(){", "try{", "LnCapitalizationSvcListOut", "object=", "(LnCapitalizationSvcListOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<Dept>", "getChildDept(String", "deptOrgnztnRelCd)", "throws", "BizApplicationException", "{", "List<Dept>", "deptList", "=", "new", "ArrayList<Dept>();", "List<DeptCore>", "deptCoreList", "=", "super.getChildDeptCore(deptOrgnztnRelCd);", "if(deptCoreList", "==", "null", "||", "deptCoreList.isEmpty()){", "return", "deptList;", "}", "for(DeptCore", "deptCore", ":", "deptCoreList){", "deptList.add((Dept)", "deptCore);", "}", "return", "deptList;", "}"], "docstring_tokens": ["Inquire", "the", "department's", "child", "department", "object", "list", "in", "the", "input", "organization", "relation", "hierarchy."]}
{"code_tokens": ["public", "LnExctnSvcPymntRsltOut", "clone(){", "try{", "LnExctnSvcPymntRsltOut", "object=", "(LnExctnSvcPymntRsltOut)super.clone();", "if", "(", "this.arrCshflwSchdl==", "null", ")", "object.arrCshflwSchdl", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut>(arrCshflwSchdl.size());", "for(", "bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut", "item", ":", "arrCshflwSchdl", "){", "clonedList.add(", "(bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut)item.clone());", "}", "object.arrCshflwSchdl", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "removeArrArrRelPdRule(CaArrArrRelPdRuleIO", "arrArrRelPdRuleIO)", "throws", "BizApplicationException", "{", "_checkInput(arrArrRelPdRuleIO);", "CaArArrArrRelPdRuleMIO", "arArrArrRelPdRuleMIO", "=", "_setArArrArrRelPdRuleMIO(arrArrRelPdRuleIO);", "_getArArrArrRelPdRuleMDso().delete(arArrArrRelPdRuleMIO);", "}"], "docstring_tokens": ["Remove", "the", "rule", "about", "arrangement", "arrangement", "relation", "and", "product."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(RtTrmDxtnctnCdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ArrTxCore", "arrTx){", "return", "_getArrTxSubInfoBiz().getMapSubInfo((ArrTxImpl)arrTx);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "transaction", "as", "a", "map."]}
{"code_tokens": ["public", "CaDstbCtvdMIO", "select(String", "dstbCtvdDt,", "int", "dstbCtvdSeqNbr)", "{", "return", "_getCaDstbCtvdM().select(dstbCtvdDt,", "dstbCtvdSeqNbr);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "String", "txDt,", "Integer", "txSeqNbr,", "AssetImpl", "assetImpl)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\uc790\uc0b0\ubcf4\uc870\uba85\uc138\uc758", "\uc885\ub958", "\uc870\ud68c", "AssetSubInfoKndEnum", "subInfoKnd", "=", "assetImpl.getAssetSubInfoKnd();", "//", "2.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(assetImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"assetId\",", "assetImpl.getAssetBasicCache().getAssetId());", "//PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(assetImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "map\uc744", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "3-1.", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(assetImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "map\uc744", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "3-2.", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "//", "4.", "\uce90\uc2dc", "\uc800\uc7a5", "assetImpl.saveSubInfoCache(xtnTable,", "subInfoCache);", "}"], "docstring_tokens": ["Save", "the", "asset", "thing", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "Integer", "getListDataCntForConsistency()", "throws", "BizApplicationException", "{", "return", "_getDstbCnstncySvScrnSrvcDDso().selectListCntForConsistency();", "}"], "docstring_tokens": ["Validate", "Query", "Row", "Count", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "String", "getPdNm()", "throws", "BizApplicationException", "{", "return", "pdPdM.getPdNm();", "}"], "docstring_tokens": ["This", "method", "inquire", "product", "name"]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "StaffCore", "staffCore)", "throws", "BizApplicationException", "{", "return", "_getStaffSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(StaffImpl)staffCore);", "}"], "docstring_tokens": ["This", "method", "inquires", "settlement", "subsidiary", "detail", "information", "list", "(inquire", "all", "subsidiary", "detail", "information", "of", "a", "given", "settlement", "master", "by", "using", "the", "key", "value", "other", "than", "the", "detail", "sequence", "number)."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "stringValue){", "for", "(CaAmOperandPrefix", "enumObject:", "values()){", "if(enumObject.getStringValue().equals(stringValue))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "List<ArrBal>", "getListArrBal(ArrReal", "arr,", "String", "amtTpCd,", "String", "balTpCd)", "throws", "BizApplicationException", "{", "List<ArrBal>", "out", "=", "new", "ArrayList<ArrBal>();", "List<ArrBalCore>", "balList", "=", "super.getListArrBalCore((ArrRealCore)arr,", "amtTpCd,", "balTpCd);", "for(ArrBalCore", "arrBal", ":", "balList)", "{", "out.add((ArrBal)arrBal);", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquires", "list", "of", "balances", "belonging", "to", "the", "arrangement", "by", "amount", "type."]}
{"code_tokens": ["public", "CustRgstSvcSimpleIndvIn", "clone(){", "try{", "CustRgstSvcSimpleIndvIn", "object=", "(CustRgstSvcSimpleIndvIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrStrctrSPlainForm", "getArrStructureForModification(ArrangementCoreImpl", "arrangement,String", "arrSrvcCd)", "throws", "BizApplicationException", "{", "if", "(arrSrvcCd", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]{\"@arrSrvcCd\"});", "}", "List<ArrCndCore>", "arrCndListToBeModified", "=", "_getArrCndListForModification(arrangement,arrSrvcCd);", "List<ArrCndCore>", "arrCndListToDoAction", "=", "_getArrCndListForModificationAction(arrangement,arrSrvcCd);", "ArrStrctrSPlainForm", "arrStrctr", "=", "new", "ArrStrctrSPlainForm();", "arrStrctr.setArrStrctrBsic(_getBasicStructure(arrangement));", "arrStrctr.setArrStrctrCndList(getCndStructure(arrCndListToBeModified,", "null));", "arrStrctr.setArrStrctrRelList(_getRelStructure(arrCndListToBeModified));", "arrStrctr.getArrStrctrRelList().addAll(_getRelStructure(arrCndListToDoAction));", "return", "arrStrctr;", "}"], "docstring_tokens": ["Inquire", "arrangement", "structure", "(condition,", "relation,", "document,", "extend", "attribute)", "to", "build", "user", "input", "for", "modification", "arrangement", "by", "service", "type", "code."]}
{"code_tokens": ["public", "void", "saveSubInfo(AtDeptSIO", "subInfoIO,", "DeptImpl", "deptImpl)", "throws", "BizApplicationException{", "//", "1.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtDeptSIO", "oldSubInfoIO", "=", "getSubInfoCache(deptImpl);", "if", "(oldSubInfoIO", "==", "null)", "{", "//", "PK", "setting", "subInfoIO.setDeptId(deptImpl.getDeptId());", "//", "insert", "_getAtDeptSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoIO,", "oldSubInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(deptImpl,", "oldSubInfoIO);", "//", "PK", "setting", "subInfoIO.setDeptId(deptImpl.getDeptId());", "//", "update", "_getAtDeptSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "deptImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "CaExtrnlErrorCdTrnsfrmSvcIn", "clone(){", "try{", "CaExtrnlErrorCdTrnsfrmSvcIn", "object=", "(CaExtrnlErrorCdTrnsfrmSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ActorSrchOut>", "getListCustInfoByUniqueIdNbr(String", "custUnqIdNbr,", "String", "custUnqIdNbrTpCd,", "String", "actorTpCd,", "String", "paymentInstYn,", "Integer", "pageNum,", "Integer", "pageCount,", "String", "custStsCd)", "throws", "BizApplicationException", "{", "//check", "required", "inputs", "if", "(StringUtils.isEmpty(custUnqIdNbrTpCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@actorUnqIdNbrTpCd\"});", "}", "else", "if", "(pageNum", "==", "null", "||", "CCM01.ZERO.equals(pageNum))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@pgNbr\"});", "}", "else", "if", "(pageCount", "==", "null", "||", "CCM01.ZERO.equals(pageCount))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@pgCnt\"});", "}", "return", "_getActorUnqIdNbrXtn().getListCustByUniqueIdNbr(_getCmnContext().getInstCode(),", "custUnqIdNbr,", "custUnqIdNbrTpCd,", "actorTpCd,", "paymentInstYn,", "pageNum,", "pageCount,", "custStsCd);", "}"], "docstring_tokens": ["Inquire", "the", "customers'", "information", "that", "matches", "the", "input", "unique", "identification", "number,", "type,", "actor", "type", "code,", "payment", "institution", "YN,", "customer", "status,", "page", "number", "and", "page", "count.", "It", "inquires", "customer", "that", "has", "a", "similar", "actor", "unique", "identification", "number", "with", "the", "input", "value."]}
{"code_tokens": ["public", "boolean", "isTableAttributeValid(String", "xtnTblNm,", "String", "xtnAtrbtNm,", "String", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if(!_checkAttributeBase(xtnTblNm,", "xtnAtrbtNm,", "atrbtCntnt))", "{", "return", "false;", "}", "CaCmTblXtnAtrVrtnCmpsDIO", "cmTblXtnAtrVrtnCmpsDIO", "=", "_getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getInstCode(),", "xtnTblNm,", "xtnAtrbtNm);", "if(cmTblXtnAtrVrtnCmpsDIO", "==", "null", "||", "\"\".equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd()))", "{", "//", "\uae30\uad00\uc5d0", "\ub370\uc774\ud130\uac00", "\uc5c6\uc744\uc2dc", "STDA", "\uae30\uad00\uc73c\ub85c", "\uc7ac\uc870\ud68c", "\ud558\uc5ec", "\uac80\uc99d", "\ud55c\ub2e4.", "cmTblXtnAtrVrtnCmpsDIO", "=", "new", "CaCmTblXtnAtrVrtnCmpsDIO();", "cmTblXtnAtrVrtnCmpsDIO", "=", "_getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getStandardInstCode(),", "xtnTblNm,", "xtnAtrbtNm);", "if(cmTblXtnAtrVrtnCmpsDIO", "!=", "null", "&&", "CaXtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd()))", "{", "return", "true;", "}", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())){", "return", "true;", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "extend", "attribute", "validation", "Not", "product."]}
{"code_tokens": ["public", "AmAsmXtnInfoDIO", "select(AmAsmXtnInfoDIO", "amAsmXtnInfoDIO){", "_getCmnContextCore().setHeaderColumn(amAsmXtnInfoDIO);", "return", "_getAmAsmXtnInfoD().select(amAsmXtnInfoDIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "CustCheckPwdOut", "login(CustRprsnImpl", "custRprsnImpl,", "AtCustRprsnLoinInfoDIO", "custRprsnLoinInfoIO,", "String", "pswd,", "String", "loinTpCd)", "throws", "BizApplicationException,", "ParseException", "{", "//", "\uae30\uad00\ud30c\ub77c\ubbf8\ud130\uc5d0", "\uc815\uc758\ub41c", "\ub85c\uadf8\uc778\ube44\ubc00\ubc88\ud638\uc624\ub958\ud5c8\uc6a9\ud69f\uc218", "\uc870\ud68c", "String", "pswdErrAllwnCntInstParm", "=", "_getInstParmProvider().getInstParm(InstParamEnum.INST_PARAM_LOIN_PSWD_ALLWNC_CNT.getValue());", "//", "password", "error", "allowance", "count", "if(StringUtils.isEmpty(pswdErrAllwnCntInstParm))", "{", "throw", "new", "BizApplicationException(\"AAPCME0184\",", "new", "Object[]", "{\"@loinPswdErrAllwncCnt\"});", "}", "int", "pswdErrorAllwncCnt", "=", "Integer.parseInt(pswdErrAllwnCntInstParm);", "CustCheckPwdOut", "custCheckPwdOut", "=", "new", "CustCheckPwdOut();", "AtCustRprsnLoinHIO", "atCustRprsnLoinHIO", "=", "new", "AtCustRprsnLoinHIO();", "//", "Customer", "login", "history", "IO", "//", "get", "password", "error", "count", "excess", "yes/no", "Integer", "pswdErrCnt", "=", "custRprsnLoinInfoIO.getPswdErrCnt();", "String", "pswdErrCntExcsYn", "=", "custRprsnLoinInfoIO.getPswdErrCntExcsYn();", "String", "pswdLockExprtnDtm", "=", "custRprsnLoinInfoIO.getPswdLockExprtnDtm();", "//", "\ube44\ubc00\ubc88\ud638", "\uc624\ub958", "\uad00\ub828", "\uc815\ubcf4", "\ubcc0\uacbd", "\uc5ec\ubd80", "\ud310\ub2e8", "boolean", "isChanged", "=", "false;", "//", "2020.07.09", "\ube44\ubc00\ubc88\ud638\uc77c\uce58\uc5ec\ubd80", "\ucd94\uac00", "//", "\ube44\ubc00\ubc88\ud638\uac00", "\uc7a0\uae08\uc0c1\ud0dc\uc778", "\uacbd\uc6b0", "\ub85c\uadf8\uc778\uc744", "\uc2dc\ub3c4\ud588\uc744", "\ub54c", "\ube44\ubc00\ubc88\ud638", "\uc77c\uce58\uc5ec\ubd80\uc5d0", "\ub530\ub77c", "\uc5d0\ub7ec\uba54\uc138\uc9c0\ub97c", "\uad6c\ubd84\ud558\uae30", "\uc704\ud568", "if", "(pswd.equals(custRprsnLoinInfoIO.getEncrptnPswd()))", "{", "custCheckPwdOut.setPswdMatchYn(CCM01.YES);", "}", "//", "If", "password", "error", "count", "is", "large", "then", "password", "error", "allowance", "count", "//", "0.", "\ud328\uc2a4\uc6cc\ub4dc\uac00", "\uc7a0\uae08\uc0c1\ud0dc\uc778", "\uacbd\uc6b0", "if", "(CCM01.YES.equals(pswdErrCntExcsYn))", "{", "long", "rsdlTm", "=", "TimeCalculator.calculateResidualLockTime(pswdLockExprtnDtm);", "if", "(rsdlTm", ">", "0)", "{", "custCheckPwdOut.setPswdErrCnt(pswdErrCnt);", "custCheckPwdOut.setPswdLockTmCd(TimeCalculator.setTimeFormat(rsdlTm));", "custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt);", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_SCRTY_LOCK.getValue());", "return", "custCheckPwdOut;", "}", "}", "//", "1.", "\ud328\uc2a4\uc6cc\ub4dc", "\uc815\ubcf4\uac00", "\uc5c6\ub294", "\uacbd\uc6b0", "if", "(custRprsnLoinInfoIO.getEncrptnPswd()", "==", "null)", "{", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue());", "//", "set", "custLoinHstIO", "atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO);", "atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue());", "//", "2.", "\ud328\uc2a4\uc6cc\ub4dc", "\uc815\ubcf4\uac00", "\uc874\uc7ac\ud558\ub294", "\uacbd\uc6b0", "}", "else", "{", "//", "2-1.", "\ud328\uc2a4\uc6cc\ub4dc\uac00", "\uc77c\uce58\ud558\uc5ec", "\ub85c\uadf8\uc778\uc5d0", "\uc131\uacf5\ud558\ub294", "\uacbd\uc6b0", "if", "(pswd.equals(custRprsnLoinInfoIO.getEncrptnPswd()))", "{", "custCheckPwdOut.setPswdMatchYn(CCM01.YES);", "//", "Set", "password", "error", "count", "allowance", "excess", "true", "or", "not", "=", "\"N\"", "if(!CCM01.NO.equals(pswdErrCntExcsYn))", "{", "isChanged", "=", "true;", "pswdErrCntExcsYn", "=", "CCM01.NO;", "}", "//", "clear", "password", "lock", "time", "if(!StringUtils.isEmpty(pswdLockExprtnDtm))", "{", "isChanged", "=", "true;", "pswdLockExprtnDtm", "=", "\"\";", "}", "//", "clear", "password", "error", "count", "if(pswdErrCnt", "!=", "CCM01.ZERO)", "{", "isChanged", "=", "true;", "pswdErrCnt", "=", "CCM01.ZERO;", "}", "//", "check", "update", "cycle", "-", "if", "update", "password", "is", "necessary", "if", "(_isOutOfDate(custRprsnLoinInfoIO))", "{", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.SUCCESS_OUT_OF_DATE.getValue());", "//", "set", "custLoinHstIO", "atCustRprsnLoinHIO.setLoinRsltYn(CCM01.YES);", "atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.SUCCESS_OUT_OF_DATE.getValue());", "}", "else", "{", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.SUCCESS.getValue());", "//", "set", "custLoinHstIO", "atCustRprsnLoinHIO.setLoinRsltYn(CCM01.YES);", "atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.SUCCESS.getValue());", "}", "//", "2-2.", "\ud328\uc2a4\uc6cc\ub4dc", "\uc624\ub958\ub85c", "\ub85c\uadf8\uc778\uc5d0", "\uc2e4\ud328\ud558\ub294", "\uacbd\uc6b0", "}", "else", "{", "isChanged", "=", "true;", "if", "(pswdErrCnt", "==", "null", "||", "pswdErrCnt", "==", "CCM01.ZERO)", "{", "pswdErrCnt", "=", "1;", "}", "else", "{", "pswdErrCnt++;", "}", "if", "(pswdErrCnt", ">", "pswdErrorAllwncCnt)", "{", "String", "pswdLockTmTrmCntInstParm", "=", "_getInstParmProvider().getInstParm(InstParamEnum.INST_PARAM_LOIN_PSWD_LOCK_TIME.getValue());", "if(StringUtils.isEmpty(pswdLockTmTrmCntInstParm))", "{", "throw", "new", "BizApplicationException(\"AAPCME0184\",", "new", "Object[]", "{\"@loinPswdLockTmCd\"});", "}", "//", "Set", "password", "error", "count", "allowance", "excess", "true", "or", "not", "=", "\"Y\"", "pswdErrCntExcsYn", "=", "CCM01.YES;", "//", "Set", "password", "lock", "expired", "time", "pswdLockExprtnDtm", "=", "TimeCalculator.calculateLockExpirationDateTime(pswdLockTmTrmCntInstParm);", "//", "set", "output", "parameter", "custCheckPwdOut.setPswdLockTmCd(TimeCalculator.setTimeFormat(pswdLockTmTrmCntInstParm));", "custCheckPwdOut.setPswdErrCnt(pswdErrCnt);", "custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt);", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue());", "//", "set", "custLoinHstIO", "atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO);", "atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue());", "}", "else", "{", "//", "set", "output", "parameter", "custCheckPwdOut.setPswdErrCnt(pswdErrCnt);", "custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt);", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue());", "//", "set", "custLoinHstIO", "atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO);", "atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue());", "}", "}", "}", "//", "if", "the", "information", "about", "password", "errors", "changes,", "update", "DB", "if(isChanged)", "{", "custRprsnLoinInfoIO.setPswdErrCnt(pswdErrCnt);", "custRprsnLoinInfoIO.setPswdErrCntExcsYn(pswdErrCntExcsYn);", "custRprsnLoinInfoIO.setPswdLockExprtnDtm(pswdLockExprtnDtm);", "_getAtCustRprsnLoinInfoDDso().update(custRprsnLoinInfoIO);", "}", "//", "Insert", "custRprsn", "Last", "Login", "history", "information", "atCustRprsnLoinHIO.setLoinIdNbr(custRprsnLoinInfoIO.getLoinIdNbr());", "atCustRprsnLoinHIO.setLoinTpCd(loinTpCd);", "atCustRprsnLoinHIO.setLoinSeqNbr(custRprsnLoinInfoIO.getLoinSeqNbr());", "atCustRprsnLoinHIO.setFnlLoinChnlDscd(_getCmnContext().getChannelDscd());", "_getCustRprsnLoinHstBiz().register(custRprsnImpl,", "atCustRprsnLoinHIO);", "return", "custCheckPwdOut;", "}"], "docstring_tokens": ["It", "executes", "login", "process", "of", "the", "customer", "by", "the", "main", "login", "identification", "number.", "It", "considers", "password", "error", "count,", "error", "allowance", "count", "exceeded", "YN,", "lock", "time", "and", "password", "update", "cycle.", "It", "leaves", "login", "attempt", "history.", "Exception", "must", "be", "handled", "separately", "at", "the", "service", "level", "according", "to", "the", "login", "result."]}
{"code_tokens": ["public", "int", "delete(StTxWhdrwlOrderBalHIO", "stTxWhdrwlOrderBalHIO)", "{", "return", "_getStTxWhdrwlOrderBalH().delete(stTxWhdrwlOrderBalHIO);", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if", "(!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(CCM01.YES))){", "//This", "Arrangement", "could", "not", "extend", "the", "contract", "term", "throw", "new", "BizApplicationException(\"AAPLNE0050\"", ",", "new", "Object[]{});", "}", "//TODO", "additional", "coding", "to", "check", "this", "loan", "can", "be", "extended", "base", "on", "the", "current", "arrangement", "status", "//", "\ud68c\uc218\uc21c\uc11c\ubcc0\uacbd\uacc4\uc88c\uac80\uc99d", "-", "\uacc4\uc88c\ubd80\uac00\uc815\ubcf4", "//", "\uace0\uc815\uc5f0\uccb4\ub4f1\ub85d\uc5ec\ubd80\uac80\uc99d", "-", "\uacc4\uc88c\ubd80\uac00\uc815\ubcf4", "//", "\uae30\ud55c\uc774\uc775\uc0c1\uc2e4\uc5ec\ubd80\uac80\uc99d", "-", "\uacc4\uc88c\ubd80\uac00\uc815\ubcf4", "//", "\ub300\uc190\uc0c1\uac01", "\uc2e0\uccad\uacc4\uc88c\uc5ec\ubd80", "\uac80\uc99d", "-", "\uc0c1\uac01\uc2e0\uccad\uc6d0\uc7a5", "//", "\uad00\ub9ac\uac70\ub798\ucc98-\uc801\uc0c9", "-", "\uc740\ud589\uc5f0\ud569\ud68c\uc790\ub8cc", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "void", "saveSubInfo(CustTxImpl", "custTxImpl,", "AtCustTxSIO", "subInfoIO)", "throws", "BizApplicationException", "{", "//", "null", "check", "if(subInfoIO", "==", "null){", "return;", "}", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"##", "<AT>", "CustTx", "saveSubInfo", "->", "subInfoIO", "=", "{}", "::", "\",", "subInfoIO.getFieldValues());", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustTxSIO", "oldSubInfoIO", "=", "getSubInfoCache(custTxImpl);", "if", "(oldSubInfoIO", "==", "null)", "{", "//", "PK", "setting", "subInfoIO.setCustId(custTxImpl.getCustId());", "subInfoIO.setTxDt(custTxImpl.getCustTxDt());", "subInfoIO.setTxSeqNbr(custTxImpl.getCustTxSeqNbr());", "//", "insert", "_getAtCustTxSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoIO,", "oldSubInfoIO))", "{", "return;", "}", "//", "PK", "setting", "subInfoIO.setCustId(custTxImpl.getCustId());", "subInfoIO.setTxDt(custTxImpl.getCustTxDt());", "subInfoIO.setTxSeqNbr(custTxImpl.getCustTxSeqNbr());", "//", "update", "_getAtCustTxSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custTxImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "GlQuerySvcAcctgDpstWhdrwlIn", "clone(){", "try{", "GlQuerySvcAcctgDpstWhdrwlIn", "object=", "(GlQuerySvcAcctgDpstWhdrwlIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<PdNameDetailIO>", "getListPdNameDetail(String", "pdNmTpCd,", "String", "lngDscd,", "String", "baseDt)", "throws", "BizApplicationException", "{", "//", "Set", "input", "PdNameDetailIO", "inIO", "=", "new", "PdNameDetailIO();", "inIO.setPdNameTypeCode(pdNmTpCd);", "inIO.setLanguageDscd(lngDscd);", "inIO.setAplyStartDt(baseDt);", "inIO.setAplyStartTm(aplyTm);", "//", "Return", "output", "return", "getListPdNameDetail(inIO);", "}"], "docstring_tokens": ["This", "Method", "inquire", "product", "name", "detail", "list"]}
{"code_tokens": ["protected", "void", "register(CustImpl", "custImpl)", "throws", "BizApplicationException", "{", "AtCustMIO", "atCustMIO", "=", "custImpl.getCustBsicCache();", "List<AtScrtyQstnrAnswerDIO>", "atScrtyQstnrAnswerDIOList", "=", "custImpl.getListQstnrAnswerCache();", "if", "(atScrtyQstnrAnswerDIOList.isEmpty())", "{", "return;", "}", "for", "(AtScrtyQstnrAnswerDIO", "item", ":", "atScrtyQstnrAnswerDIOList)", "{", "item.setInstCd(atCustMIO.getInstCd());", "item.setAnswerTrgtId(atCustMIO.getCustId());", "item.setAnswerTrgtTpCd(AnswerTrgtTpEnum.CUST.getValue());", "}", "_getSecurityQuestionnaireAnswer().register(atScrtyQstnrAnswerDIOList);", "}"], "docstring_tokens": ["It", "registers", "the", "notice", "message", "code", "information.", "Needs", "caution", "as", "the", "registered", "information", "performs", "the", "update", "transaction."]}
{"code_tokens": ["public", "CaArrSrvcTpMgmtSvcInqryListOut", "clone(){", "try{", "CaArrSrvcTpMgmtSvcInqryListOut", "object=", "(CaArrSrvcTpMgmtSvcInqryListOut)super.clone();", "if", "(", "this.srvcTpList==", "null", ")", "object.srvcTpList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrSrvcTpMgmtSvcInqryOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrSrvcTpMgmtSvcInqryOut>(srvcTpList.size());", "for(", "bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrSrvcTpMgmtSvcInqryOut", "item", ":", "srvcTpList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrSrvcTpMgmtSvcInqryOut)item.clone());", "}", "object.srvcTpList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArArrDpstSIO", "select(String", "arrId)", "throws", "BizApplicationException", "{", "return", "_getArArrDpstS().select(_getCmnContext().getInstCode(),", "arrId);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(PdTemplateCodeEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "AprslImpl", "aprslImpl,", "Integer", "prfClaimSeqNbr)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsAprslPrfClaimSIO", "subInfoCache", "=", "getSubInfoCache(aprslImpl,", "prfClaimSeqNbr);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsAprslPrfClaimSIO();", "subInfoCache.setAprslId(aprslImpl.getAprslBasicCache().getAprslId());", "//", "PK", "setting", "subInfoCache.setPrfClaimSeqNbr(prfClaimSeqNbr);", "//", "PK", "setting", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-1.", "insert", "_getAsAprslPrfClaimSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoCache,", "aprslImpl,", "prfClaimSeqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-2.", "update", "_getAsAprslPrfClaimSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "the", "asset", "thing", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "void", "saveAprslThingXtnInfo(Integer", "aprslThingSeqNbr,", "AprslThingXtnInfoEnum", "aprslThingXtnInfoEnum,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "//", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\uc815\ubcf4\uad00\ub9ac\ubc29\ubc95", "\ud310\ub2e8", "//", "1.", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AS_APRSL_THING_D.getValue(),", "aprslThingXtnInfoEnum.getValue()))", "{", "super.saveAprslThingXtnInfoByEav(aprslThingSeqNbr,", "aprslThingXtnInfoEnum.getValue(),", "xtnAtrbtCntnt);", "}", "//", "2.", "\ubcf4\uc870\uba85\uc138", "else", "{", "_getAprslThingSubInfoBiz().saveSubInfo(aprslThingXtnInfoEnum.getValue(),", "xtnAtrbtCntnt,", "this,", "aprslThingSeqNbr);", "}", "}"], "docstring_tokens": ["Save", "a", "specific", "extended", "information", "of", "the", "appraisal", "thing."]}
{"code_tokens": ["public", "List<ArrReal>", "getListChildArrByLastArrStsDt(String", "inqStartDt,", "String", "inqEndDt,", "ArrStsEnum", "arrStsEnum,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "String", "pdCd", ")", "throws", "BizApplicationException", "{", "return", "_getArrBasicQryXtnBiz().getListChildArrRealByLastArrStsDt(inqStartDt,", "inqEndDt,", "arrStsEnum.getValue(),", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "pdCd,", "this);", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "arrangement", "of", "specific", "product", "whose", "status", "has", "changed", "into", "specific", "status", "during", "inquire", "period", "which", "is", "child", "arrangement", "of", "membership", "arrangement."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "AsmImpl", "asm)", "{", "//", "\ud574\ub2f9", "\uc2ec\uc0ac", "\uad00\ub828", "\ubaa8\ub4e0", "\ubcf4\uc870\uba85\uc138\uc815\ubcf4", "\uc870\ud68c(\uce90\uc2dc\ub85c\ubd80\ud130)", "IValueObject", "subInfo", "=", "getSubInfoCache(asm);", "//", "\ubcf4\uc870\uba85\uc138\uc815\ubcf4\uac00", "\uc5c6\uc73c\uba74", "\ub9ac\ud134", "null", "if(subInfo", "==", "null)", "{", "return", "null;", "}", "//", "\ud2b9\uc815", "\ubcf4\uc870\uba85\uc138\uc815\ubcf4\uc758", "\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "subInfo.get(atrbtNm);", "if(atrbtVal", "==", "null)", "{", "return", "null;", "}", "//", "\uac12\uc5d0", "\ub300\ud574", "String", "\ud615\uc2dd\uc73c\ub85c", "\ub9ac\ud134", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["get", "a", "extended", "information", "of", "subsidiary", "information(CTI)"]}
{"code_tokens": ["public", "CaStaffRgstSvcGetLoinIdNbrIO", "clone(){", "try{", "CaStaffRgstSvcGetLoinIdNbrIO", "object=", "(CaStaffRgstSvcGetLoinIdNbrIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getInstCd()", "{", "String", "tntInstId", "=", "null;", "if", "(pdPdCndM", "==", "null)", "{", "tntInstId", "=", "this.instCd;", "if", "(StringCoreUtils.isEmpty(tntInstId))", "{", "return", "null;", "}", "}", "else", "{", "tntInstId", "=", "pdPdCndM.getInstCd();", "}", "//", "Return", "\uae30\uad00\ucf54\ub4dc", "return", "tntInstId;", "}"], "docstring_tokens": ["This", "method", "inquire", "institution", "code", "of", "product"]}
{"code_tokens": ["public", "Long", "getTimeoutScnd(){", "return", "timeoutScnd;", "}"], "docstring_tokens": ["Inquire", "Timeout", "Second."]}
{"code_tokens": ["public", "String", "getNumbering(String", "nbrgAtrbtNm,Map<String,", "Object>", "inpParmMap)", "throws", "BizApplicationException", "{", "return", "getNumbering(_getCmnContext().getInstCode(),", "nbrgAtrbtNm,", "inpParmMap,", "false);", "}"], "docstring_tokens": ["It", "calculates", "next", "number.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'isReUseSameTxNbrg'", "value", "is", "treated", "as", "false."]}
{"code_tokens": ["public", "CaStdSrvcIoMgmtSvcGetInstSrvcOut", "clone(){", "try{", "CaStdSrvcIoMgmtSvcGetInstSrvcOut", "object=", "(CaStdSrvcIoMgmtSvcGetInstSrvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrBsicQrySvcGetAcctListByPd", "clone(){", "try{", "ArrBsicQrySvcGetAcctListByPd", "object=", "(ArrBsicQrySvcGetAcctListByPd)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getAplyStartTm(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "String", "output", "=", "bfCnd.getAplyStartTm();", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "apply", "start", "time", "of", "product", "condition."]}
{"code_tokens": ["public", "int", "delete(CaCmStdAtrVrtnMIO", "cmStdAtrVrtnMIO)", "{", "return", "_getCmStdAtrVrtnM().delete(cmStdAtrVrtnMIO);", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["public", "CaDocInstIO", "getDocInst()", "throws", "BizApplicationException", "{", "return", "this.docInstIO;", "}"], "docstring_tokens": ["It", "inquiries", "document", "institution", "information."]}
{"code_tokens": ["public", "List<ActorElctrncAddrOut>", "getListElctrncAddrInfo()", "throws", "BizApplicationException", "{", "return", "getActor().getListElctrncAddrInfo();", "}"], "docstring_tokens": ["When", "the", "staffActorInfoUseYn", "is", "'Y',", "It", "gets", "the", "staff's", "electronic", "address", "information", "list", "from", "actor", "information.", "It", "inquires", "the", "effective", "information", "on", "transaction", "date."]}
{"code_tokens": ["public", "List<AtNoticeDIO>", "selectList(AtNoticeDIO", "AtNoticeDIO,", "Integer", "pageOffset,", "Integer", "pageCount,", "String", "delYn,", "String", "infoStsCd,", "String", "ignoreInfoStsCd)", "throws", "BizApplicationException", "{", "switch(", "DbmsVendorNmEnum.getByValue(_getSysNonstopUtil().getDbmsVendorName(getClass()))", ")", "{", "case", "ORACLE:", "return", "_getAtNoticeD().selectListOracle(AtNoticeDIO,", "pageOffset,", "pageCount,", "delYn,", "infoStsCd,", "ignoreInfoStsCd);", "case", "MYSQL:", "return", "_getAtNoticeD().selectListMySQL(AtNoticeDIO,", "pageOffset,", "pageCount,", "delYn,", "infoStsCd,", "ignoreInfoStsCd);", "default:", "throw", "new", "BizApplicationException(\"AAPCME0202\",", "null);", "}", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AssetCore", "assetImpl,", "Integer", "assetThingSeqNbr)", "throws", "BizApplicationException", "{", "return", "_getAssetThingSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AssetImpl)assetImpl,", "assetThingSeqNbr);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "detail", "information."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ArrRealCore", "arrReal)", "throws", "BizApplicationException", "{", "return", "_getArrSubInfoBiz().getMapSubInfo((ArrRealImpl)", "arrReal);", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "subsidiary", "information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["public", "AssetScrtyIntTrmntMgmtSvcScrtyIntInfoOut", "clone(){", "try{", "AssetScrtyIntTrmntMgmtSvcScrtyIntInfoOut", "object=", "(AssetScrtyIntTrmntMgmtSvcScrtyIntInfoOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaDstbTblMIO", "clone(){", "try{", "CaDstbTblMIO", "object=", "(CaDstbTblMIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "rebuild(ArrCndRebuildRequiredValue", "arrCndRebuildRequiredValue)", "throws", "BizApplicationException{", "//\ud544\uc694\uc5c6\uc74c", "}"], "docstring_tokens": ["Rebuild", "using", "additional", "input", "parameters."]}
{"code_tokens": ["public", "String", "getApplyDescription()", "{", "return", "aplyDesc;", "}"], "docstring_tokens": ["Query", "apply", "description"]}
{"code_tokens": ["public", "String", "getNextRebuildDate(String", "baseDt,", "String", "arrIntRtTpCd,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "if(StringCoreUtils.isEmpty(baseDt)){", "baseDt", "=", "ArrCmnCoreUtil.getRckngDt(_getCmnContextCore());", "}", "arrReal.setArrIntRtCalcnDt(baseDt);", "String", "nextDtMin", "=", "CCM01.MAX_DATE;", "PdInterestRateStructure", "arrIntRtFormula", "=", "this._getArrIntRtGeneratorSuperImpl().getLastAplyFormula(arrReal,", "arrIntRtTpCd);", "if(arrIntRtFormula", "==", "null){return", "nextDtMin;}", "List<CndTmpltOut>", "cndTmpltOut", "=", "arrIntRtFormula.getListOperandPdCnd();", "for(CndTmpltOut", "cndTmplt", ":", "cndTmpltOut){", "ArrCndCore", "arrCnd", "=", "arrReal.getArrCndCore(cndTmplt.getCndCd(),", "baseDt);", "if", "(!ArrCndActionRebuild.class.isInstance(arrCnd)){", "continue;", "}", "String", "nextDt", "=", "((ArrCndActionRebuild)arrCnd).getNextRebuildDate(arrIntRtTpCd,", "baseDt);", "//\uae30\uc900\uae08\ub9ac", "\uace0\uc815\uc2dc", "null", "\uc774", "\ub9ac\ud134\ub420\uc218", "\uc788\uc74c", "if(StringCoreUtils.isEmpty(nextDt)){", "continue;", "}", "if(nextDt.compareTo(nextDtMin)", "<", "0){", "nextDtMin", "=", "nextDt;", "}", "}", "//\ub2e4\uc74c\uc0b0\ucd9c\uc77c\uc790\uac00", "\ub9cc\uae30\uc77c\uacfc", "\uac19\uac70\ub098", "\ud06c\uba74", "maxDate", "/*", "*", "#23634", "-", "2022.09.09.", "\uc8fc\uc11d\ucc98\ub9ac", ":", "ok\uc694\uac74", "(\ub9cc\uae30\uac00", "\uc9c0\ub09c", "\uac74\uc5d0", "\ub300\ud574\uc11c\ub3c4", "\uc7ac\uc0b0\ucd9c", "\ub300\uc0c1\uc73c\ub85c", "\ucd94\ucd9c\ud574\uc57c", "\ud568", "*", "-", "\ub9cc\uae30", "\uc9c0\ub09c", "\uac74\uc5d0", "\uc5c5\ubb34\uc801\uc73c\ub85c", "\ucd94\uac00", "\ubc18\uc601", "\ud544\uc694", "\uc2dc", "\uc0ac\uc774\ud2b8", "\ubca0\uc774\uc2a4\uc5d0\uc11c", "\uc7ac\uc815\uc758", "\ud558\ub3c4\ub85d", "*/", "//", "if(!StringCoreUtils.isEmpty(arrReal.getArrMtrtyDt())){", "//", "if(arrReal.getArrMtrtyDt().compareTo(nextDtMin)", "<=", "0){", "//", "nextDtMin", "=", "CCM01.MAX_DATE;", "//", "}", "//", "}", "if(logger.isDebugEnabled()){", "logger.debug(\"getNextRebuild", "nextDtMin", "is", "=", "{}\",nextDtMin);", "}", "arrReal.setArrIntRtCalcnDt(null);", "return", "nextDtMin;", "}"], "docstring_tokens": ["Get", "the", "next", "scheduled", "date", "of", "interest", "rate", "rebuild", "related", "to", "this", "condition."]}
{"code_tokens": ["public", "ArArrIssmdaSIO", "select(String", "arrIssmdaTpCd,", "String", "arrIssmdaInhrncId)", "throws", "BizApplicationException", "{", "return", "_getArArrIssmdaS().select(_getCmnContext().getInstCode(),", "arrIssmdaTpCd,", "arrIssmdaInhrncId);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(CaCdNbrEnum", "item", ":", "CaCdNbrEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "PntCndMltplVdlnOut", "getCndMltplVdln(PntCndMltplVdlnIn", "in)", "throws", "BizApplicationException", "{", "ValidateInputCndValIn", "validationIn", "=", "new", "ValidateInputCndValIn();", "validationIn.setInstitutionId(getInstCd());", "validationIn.setCndList(_convertToPdCndMultipleValidationCndListInList(in.getCndList()));", "validationIn.setPdCd(getPntCd());", "validationIn.setBaseDate(PdUtil.parseStringToDate(in.getAplyDt()));", "ValidateInputCndValOut", "validateOut", "=", "_getPntCndCore().validateInputCndVal(validationIn);", "return", "_convertValidateInputCndValOutToPntCndMltplVdlnOut(validateOut);", "}"], "docstring_tokens": ["This", "Method", "verify", "point", "condition", "Error", "code", "description", "00:", "Normal", "02:", "No", "such", "condition", "defined", "under", "point", "03:", "Condition", "value", "is", "not", "correct", "04:", "Composing", "condition", "value", "is", "not", "correct", "05:", "k", "condition", "must", "be", "inputed(when", "the", "condition", "is", "a", "complex", "condition)", "99:", "It's", "composing", "condition(temporary", "code)"]}
{"code_tokens": ["public", "void", "register(NoticeBsicInfoIO", "noticeBsicInfoIO)", "throws", "BizApplicationException", "{", "List<NoticeAtchmntDocIssueIO>", "atcmnetIOList", "=", "noticeBsicInfoIO.getActhmntDocIssueList();", "if(atcmnetIOList", "!=", "null", "&&", "!atcmnetIOList.isEmpty())", "{", "AtNoticeAtchmntDocIssueDIO", "atNoticeAtchmntDocIssueDIO", "=", "new", "AtNoticeAtchmntDocIssueDIO();", "_getCmnContext().setHeaderColumn(atNoticeAtchmntDocIssueDIO);", "atNoticeAtchmntDocIssueDIO.setNoticeId(noticeBsicInfoIO.getNoticeId());", "for(NoticeAtchmntDocIssueIO", "aoticeAtchmntDocIssueIOItem", ":", "atcmnetIOList)", "{", "atNoticeAtchmntDocIssueDIO.setDocIssueId(aoticeAtchmntDocIssueIOItem.getDocIssueId());", "_getAtNoticeAtchmntDocIssueDDso().insert(atNoticeAtchmntDocIssueDIO);", "}", "}", "}"], "docstring_tokens": ["It", "registers", "customer", "agreement", "code", "information", "list.", "If", "registered", "information", "by", "the", "same", "institution", "code", "and", "agreement", "type", "code", "exists,", "throws", "exception."]}
{"code_tokens": ["public", "ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut", "clone(){", "try{", "ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut", "object=", "(ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustInfoUseAgrmtnSvcAgrmntTpOut", "clone(){", "try{", "CustInfoUseAgrmtnSvcAgrmntTpOut", "object=", "(CustInfoUseAgrmtnSvcAgrmntTpOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbChrncAcCoaXtnInfoDDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "assetTxSubInfoMap,", "AssetTxCore", "assetTx)", "throws", "BizApplicationException", "{", "_getAssetTxSubInfoBiz().saveMapSubInfo(assetTxSubInfoMap,", "(AssetTxImpl)", "assetTx);", "}"], "docstring_tokens": ["Save", "the", "asset", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "AsAprslRqstStsHIO", "select(AsAprslRqstStsHIO", "asAprslRqstStsHIO){", "return", "_getAsAprslRqstStsH().select(asAprslRqstStsHIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "ArArrArrRStsHIO", "select(ArArrArrRStsHIO", "arArrArrRStsHIO)", "{", "return", "_getArArrArrRStsH().select(arArrArrRStsHIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "delete(String", "instCd,", "CaDocBsicIO", "docBsicIO,", "CaDocClIO", "docClIO)", "throws", "BizApplicationException", "{", "CaDcDocClMIO", "dcDocClIO", "=", "new", "CaDcDocClMIO();", "_getCmnContext().setHeaderColumn(dcDocClIO);", "if(!StringUtils.isEmpty(instCd))", "dcDocClIO.setInstCd(instCd);", "dcDocClIO.setDocId(docBsicIO.getDocId());", "dcDocClIO.setClId(docClIO.getClId());", "dcDocClIO.setClHrarcyId(docClIO.getClHrarcyId());", "//", "get", "registered", "information", "List<CaDcDocClMIO>", "dcDocClIOList", "=", "_getInformationList(dcDocClIO.getInstCd(),", "null,", "null,", "dcDocClIO.getDocId(),", "null);", "boolean", "isRegistered", "=", "false;", "if(dcDocClIOList", "!=", "null", "&&", "!dcDocClIOList.isEmpty())", "{", "for(CaDcDocClMIO", "dcDocClIOItem", ":", "dcDocClIOList)", "{", "if(dcDocClIOItem.getClId().equals(docClIO.getClId())", "&&", "dcDocClIOItem.getClHrarcyId().equals(docClIO.getClHrarcyId()))", "{", "isRegistered", "=", "true;", "break;", "}", "}", "}", "if(isRegistered)", "{", "//", "insert", "data", "_getDcDocClDso().delete(dcDocClIO);", "}", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["public", "List<ArrCnd>", "getArrCnd(ArrangementCoreImpl", "arrangement,Class<?>", "clazz)", "throws", "BizApplicationException", "{", "List<ArrCnd>", "arrCndList", "=", "new", "ArrayList<ArrCnd>();", "for", "(ArrCndCore", "arrCnd", ":", "arrangement.getListArrCndCoreAll())", "{", "if", "(clazz.isInstance(arrCnd))", "arrCndList.add((ArrCnd)", "arrCnd);", "}", "return", "arrCndList;", "}"], "docstring_tokens": ["Inquire", "effective", "arrangement", "condition", "on", "specific", "base", "date", "by", "product", "condition", "code.", "Detail", "function", "description", "refers", "to", "{@link", "#getArrCnd(String)}"]}
{"code_tokens": ["public", "CaDstbTblMVO", "updateDstbTableInfo(CaDstbTblMVO", "in)", "throws", "BizApplicationException{", "_getSvDstbTblMDso().update(_getDstbTblMIO(in));", "return", "in;", "}"], "docstring_tokens": ["Update", "distribution", "target", "table."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(InstParamTypeEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "StaffCashMgmtSvcCashCountDtlOut", "clone(){", "try{", "StaffCashMgmtSvcCashCountDtlOut", "object=", "(StaffCashMgmtSvcCashCountDtlOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["private", "BfMngrTestSvcOut", "getBfName(BfMngrTestSvcIn", "in)", "throws", "BizApplicationException", "{", "String", "output", "=", "_getBfMngr().getBfName(in.getInstCd(),", "in.getPdCd());", "BfMngrTestSvcOut", "out", "=", "new", "BfMngrTestSvcOut();", "if", "(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "}", "return", "out;", "}"], "docstring_tokens": ["Methods", "for", "inquiry", "benefit", "names"]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "custId,", "ArrCustRelEnum", "arrCustRelEnum,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId,", "arrCustRelEnum,", "null,", "null,", "null,", "null,", "curArrSts,", "arrSts,", "inqryStartDt,", "inqryEndDt);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "of", "specific", "product", "hierarchy", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status."]}
{"code_tokens": ["protected", "AprslRqstCoreImpl", "getUniqueBusinessBean(String", "instCd,", "String", "aprslRqstId)", "throws", "BizApplicationException", "{", "return", "(AprslRqstCoreImpl)", "ApplicationContextCoreUtils.getUniqueBusinessBean(instCd", "+", "aprslRqstId,", "getAprslRqstImplClass());", "}"], "docstring_tokens": ["get", "unique", "business", "bean", "in", "one", "transaction"]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,", "ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "ArrSrvcEnum", "arrSrvcEnum", "=", "ArrSrvcEnum.getEnum(arrSrvcTpCd);", "if(", "arrSrvcEnum", "==", "null", ")", "{", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\",", "new", "Object[]{this.getCndCd(),", "this.getCndCdNm(),", "arrSrvcTpCd});", "}", "switch(arrSrvcEnum)", "{", "//", "B/L\uc778\uc218", "case", "ACCEPT_BL", ":", "_doServiceAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "BalTpDtlIO", "getBalType(String", "balTpCd)", "throws", "BizApplicationException", "{", "_checkBalTypeCode(balTpCd);", "StBalTpMIO", "stBalTpCdIO", "=", "_getStDataCacheManager().getCacheData(DataCacheCoreConfig.BALANCE_TYPE_CACHE,", "balTpCd);", "if(stBalTpCdIO", "==", "null){", "stBalTpCdIO", "=", "_getStBalTpCdDso().select(balTpCd);", "if(stBalTpCdIO", "==", "null){", "//Balance", "type", "code", "is", "not", "exist", "throw", "new", "BizApplicationException(\"AAPSTE0005\",", "new", "Object[]", "{balTpCd});", "}", "_getStDataCacheManager().saveCache(DataCacheCoreConfig.BALANCE_TYPE_CACHE,balTpCd,stBalTpCdIO);", "}else{", "if", "(logger.isDebugEnabled()){", "logger.debug(\"getBalanceType", "from", "memory", ":", "{}\",stBalTpCdIO);", "}", "}", "return", "_setBalTpDtlIO(stBalTpCdIO);", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "information", "of", "balance", "type."]}
{"code_tokens": ["public", "AprvlRgstSvcAprvlLineRgstOut", "clone(){", "try{", "AprvlRgstSvcAprvlLineRgstOut", "object=", "(AprvlRgstSvcAprvlLineRgstOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaStaffSrchSvcGetStaffListIn", "clone(){", "try{", "CaStaffSrchSvcGetStaffListIn", "object=", "(CaStaffSrchSvcGetStaffListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "java.lang.String", "getPdTpCd(){", "return", "pdTpCd;", "}"], "docstring_tokens": ["Inquire", "product", "type", "code", "of", "arrangement", "product.", "Product", "classification", "hierarchy", ":", "business", "distinction", "code", ">", "product", "type", "code", ">", "product", "template", "code", ">", "product", "code"]}
{"code_tokens": ["public", "StdCustMemoChngSvcRvctIn", "clone(){", "try{", "StdCustMemoChngSvcRvctIn", "object=", "(StdCustMemoChngSvcRvctIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrReal>", "getListCustOwnArrRealActiveOnBaseDt", "(String", "custId,", "String", "baseDt,", "String", "tdyLastStsYn)", "throws", "BizApplicationException", "{", "//return", "_getArrCustRelQryBizImpl().getArrRealListActiveByStsOnBaseDt(custId,", "ArrCustRelEnum.MAIN_CONTRACTOR.getValue(),", "null,", "null,", "null,", "null,", "baseDt,", "0,", "0,", "tdyLastStsYn);", "return", "_getArrCustRelQryBizImpl().getListArrRealActiveOnBaseDt(custId,", "ArrCustRelEnum.MAIN_CONTRACTOR.getValue(),", "null,", "null,", "null,", "null,", "baseDt,", "0,", "0,", "tdyLastStsYn);", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "customer", "own", "(as", "main", "contractor)", "arrangements", "which", "was", "in", "\"Active\"", "status", "on", "specific", "date."]}
{"code_tokens": ["public", "String", "getEnglishAttributeName()", "throws", "BizApplicationException", "{", "return", "stdAtrbt.getAtrbtEngNm();", "}"], "docstring_tokens": ["Query", "English", "attribute", "name"]}
{"code_tokens": ["public", "DcDocMIO", "select(String", "docStsCd,", "String", "docId,", "String", "docTypeCd)", "{", "return", "_getDcDocM().select(docStsCd,", "docId,", "docTypeCd);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "List<InterestCalculationSection>", "apply(ApplyInterestCalculationSectionExceptionIn", "in,", "List<InterestCalculationSection>", "intCalIntervals)", "throws", "BizApplicationException", "{", "String", "calBaseDt", "=", "in.getCalBaseDt();", "//", "\uacc4\uc0b0\uae30\uc900\uc77c(\uac70\ub798\uc77c)", "//", "\ub9c8\uc9c0\ub9c9", "\uad6c\uac04", "InterestCalculationSection", "lastInterval", "=", "intCalIntervals.get(intCalIntervals.size()", "-", "1);", "List<CalculationType>", "calTps", "=", "lastInterval.getCalTps();", "CalculationType", "lastType", "=", "calTps.get(calTps.size()", "-", "1);", "//", "\ub9cc\uae30\uc77c\uc775\uc77c\uc0c1\ud658\uc5f0\uccb4", "CalculationType", "t1", "=", "lastType.clone();", "t1.setIntCalTpCd(\"311\");", "//", "\ub9cc\uae30\uc77c\uc775\uc77c\uc0c1\ud658\uc5f0\uccb4", "t1.setCalStartDt(calBaseDt);", "//", "\uae30\uc0b0\uc77c", "1\uc77c", "t1.setCalEndDt(calBaseDt);", "t1.setIntCalTgt(true);", "calTps.add(t1);", "//", "\ub9cc\uae30\uc77c\uc775\uc77c\uc0c1\ud658\uc57d\uc815", "CalculationType", "t2", "=", "lastType.clone();", "t2.setIntCalTpCd(\"183\");", "//", "\ub9cc\uae30\uc77c\uc775\uc77c\uc0c1\ud658\uc57d\uc815\ud658\ucd9c", "t2.setCalStartDt(calBaseDt);", "//", "\uae30\uc0b0\uc77c", "1\uc77c", "t2.setCalEndDt(calBaseDt);", "t2.setIntCalTgt(true);", "calTps.add(t2);", "return", "intCalIntervals;", "}"], "docstring_tokens": ["Change", "the", "status", "of", "arrangement", "into", "\"Applied\"."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "AprslImpl", "aprslImpl,", "Integer", "aprslThingSeqNbr)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "aprslThingSubInfo", "=", "getSubInfoCache(aprslImpl,", "aprslThingSeqNbr);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(aprslThingSubInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "aprslThingSubInfo.get(atrbtNm);", "//", "\uc18d\uc131\uac12\uc774", "null\uc778\uacbd\uc6b0", "null\ub9ac\ud134", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["This", "method", "provides", "to", "inquire", "the", "specific", "subsidiary", "information", "named", "'xtnAtrbtNm'."]}
{"code_tokens": ["public", "DocBsicIO", "getDocBasic()", "throws", "BizApplicationException", "{", "return", "docBsicIO;", "}"], "docstring_tokens": ["It", "inquiries", "a", "basic", "information", "of", "document."]}
{"code_tokens": ["public", "IValueObject", "getSubInfo(StlmntCalcnSubInfoInqryIn", "stlmntCalcnSubInfoInqryIn)", "throws", "BizApplicationException", "{", "return", "_getStlmntCalcnSubInfoBiz().getSubInfo(_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn));", "}"], "docstring_tokens": ["This", "method", "inquires", "settlement", "subsidiary", "detail", "information", "list", "(inquire", "all", "subsidiary", "detail", "information", "of", "a", "given", "settlement", "master", "by", "using", "the", "key", "value", "other", "than", "the", "detail", "sequence", "number)."]}
{"code_tokens": ["public", "void", "modifyPassword(StaffMdfctnIn", "staffMdfctnIn)", "throws", "BizApplicationException", "{", "super.modifyPassword(staffMdfctnIn);", "/**", "*", "clear", "password", "error", "count", "and", "excess", "YN", "*/", "StaffSubInfo", "staffSubInfo", "=", "new", "StaffSubInfo();", "staffSubInfo", "=", "this.getStaffSubInfo();", "staffSubInfo.setPswdErrCnt(CCM01.ZERO);", "staffSubInfo.setPswdErrCntExcsYn(CCM01.NO);", "staffSubInfo.setPswdLockExprtnDtm(null);", "this.saveStaffSubInfo(staffSubInfo);", "}"], "docstring_tokens": ["It", "modifies", "customer", "related", "person's", "login", "password."]}
{"code_tokens": ["public", "AsInsrncCustRStsHIO", "select(AsInsrncCustRStsHIO", "asInsrncCustRStsHIO){", "return", "_getAsInsrncCustRStsH().select(asInsrncCustRStsHIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "ArrRealCore", "arrRealCore)", "throws", "BizApplicationException", "{", "return", "_getArrSrvcBlckngSubInfoBiz().getSubInfo(xtnAtrbtNm,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "(ArrRealImpl)arrRealCore);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal."]}
{"code_tokens": ["public", "LnAplctnDtlInqrySvcIn", "clone(){", "try{", "LnAplctnDtlInqrySvcIn", "object=", "(LnAplctnDtlInqrySvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "modifyBal(ArrBalCore", "arrBal,", "String", "baseDt,", "EntryIn", "entry,", "ArrTxCore", "arrTx,", "BalUpdtIn", "balUpdtIn)", "throws", "BizApplicationException", "{", "//", "unused", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "updating", "balance", "when", "creating", "the", "financial", "transaction.", "This", "method", "is", "used", "when", "the", "way", "of", "updating", "balance", "is", "not", "'individual(INDI)'."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException{", "for", "(CaAtrbtVldtnWayEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "String", "getInstParm(String", "parmAtrbtNm", ")", "throws", "BizApplicationException", "{", "String", "instCd", "=", "_getCmnContextCore().getInstCode();", "String", "instParm", "=", "getInstitutionParameterValue(instCd,", "parmAtrbtNm);", "//", "2020.11.02", "//", "\uae30\uad00\ud30c\ub77c\ubbf8\ud130\uac12", "\uc870\ud68c", "\uc2dc", "\ud574\ub2f9", "\uae30\uad00\uc758", "\uac12\ub9cc\uc744", "\uc870\ud68c\ud558\ub3c4\ub85d", "\uc218\uc815", "//", "\uae30\uc874\uc5d0\ub294", "\ud574\ub2f9", "\uae30\uad00\uc5d0", "\uac12\uc774", "\uc815\uc758\ub418\uc9c0", "\uc54a\uc740", "\uacbd\uc6b0", "STDA\uc758", "\uac12\uc744", "\ucc38\uc870\ud588\uc74c", "return", "instParm;", "}"], "docstring_tokens": ["It", "query", "institution", "parameter", "attribute", "value", "simply.", "if", "want", "to", "get", "the", "value", "of", "attribute", "for", "each", "institution,", "use", "the", "method."]}
{"code_tokens": ["public", "PreScrnngRgstSvcOpenIn", "clone(){", "try{", "PreScrnngRgstSvcOpenIn", "object=", "(PreScrnngRgstSvcOpenIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "delete(CaAsLeasePrtctnCrtrMIO", "asLeasePrtctnCrtrMIO){", "return", "_getAsLeasePrtctnCrtrM().delete(asLeasePrtctnCrtrMIO);", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["public", "java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut>", "getChildren(){", "return", "children;", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "child", "arrangement."]}
{"code_tokens": ["public", "AtSelfAuthXtnInfoDIO", "select(String", "selfAuthId,", "String", "xtnAtrbtNm)", "{", "return", "_getAtSelfAuthXtnInfoD().select(_getCmnContext().getInstCode(),", "selfAuthId,", "xtnAtrbtNm);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "CoaDtlIO", "getCoa(String", "instCd,String", "acctgDscd,String", "acctgItmCd)", "throws", "BizApplicationException{", "//", "_checkInstId(instCd);", "_checkAcctgDscd(acctgDscd);", "_checkAcctgItmCd(acctgItmCd);", "String", "key", "=", "_getKeyString(instCd,", "acctgDscd,", "acctgItmCd);", "//", "read", "from", "instance", "memory", "//AcCoaMIO", "out", "=", "_getAcDataCacheManager().getCacheData(DataCacheCoreConfig.CHART_OF_ACCOUNTS,", "key);", "AcCoaCacheIO", "out", "=", "_getAcDataCacheManager().getCacheData(DataCacheCoreConfig.CHART_OF_ACCOUNTS,", "key);", "if(out", "!=", "null)", "{", "return", "_getCoaDtlIO(out);", "}", "AcCoaMIO", "inqryIn", "=", "_getAcCoaMIO(instCd,acctgDscd,acctgItmCd);", "//", "Inquiry", "CoA", "List", "from", "DB", "(coa", "\uae30\ubcf8\uc815\ubcf4", "\uc870\ud68c)", "AcCoaMIO", "acCoaMIO", "=", "_getAcCoaMDso().select(inqryIn);", "if", "(acCoaMIO", "==", "null){", "throw", "new", "BizApplicationException(\"AAPACE0010\",", "new", "Object[]", "{", "acctgItmCd", "});", "}", "//", "Inquiry", "coa", "extended", "information", "(coa\ud655\uc7a5\uc815\ubcf4", "\uc870\ud68c)", "List<AcCoaXtnInfoDIO>", "xtnInfoList", "=", "_getAcCoaXtnInfoDDso().selectList(inqryIn);", "//set", "basic", "information", "and", "extended", "information", "of", "coa", "to", "AcCoaCacheIO", "AcCoaCacheIO", "coaCache", "=", "_getAcCoaCacheIO(acCoaMIO,", "xtnInfoList);", "//", "save", "to", "instance", "memory", "_getAcDataCacheManager().saveCache(DataCacheCoreConfig.CHART_OF_ACCOUNTS,", "key,", "coaCache);", "return", "_getCoaDtlIO(coaCache);", "}"], "docstring_tokens": ["This", "method", "is", "for", "getting", "Coa", "information."]}
{"code_tokens": ["public", "String", "getCndValDefault()", "throws", "BizApplicationException", "{", "return", "null;", "}"], "docstring_tokens": ["This", "method", "get", "the", "arrangement", "condition", "value", "as", "string.", "for", "list", "type", "condition,", "return", "list", "code.", "If", "level", "of", "negotiation", "is", "arrangement", "return", "arrangement", "list", "code", "or", "range", "value.", "If", "level", "of", "negotiation", "is", "product", "and", "size", "of", "list", "code", "is", "one,", "return", "product", "list", "code", "or", "default", "value", "Others", "return", "null"]}
{"code_tokens": ["public", "StlmntCrctnMgmtSvcItemOut", "clone(){", "try{", "StlmntCrctnMgmtSvcItemOut", "object=", "(StlmntCrctnMgmtSvcItemOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DummyIO", "modifyArrCndClass(CaArrCndCntrlClassSaveIn", "in)", "throws", "BizApplicationException", "{", "CaArrCndClassIn", "input", "=", "new", "CaArrCndClassIn();", "input.setInstCd(in.getInstCd());", "input.setCndCd(in.getCndCd());", "input.setCndClassNm(in.getCndClassNm());", "input.setBizDscd(in.getBizDscd());", "input.setPdTpCd(in.getPdTpCd());", "input.setPdTmpltCd(in.getPdTmpltCd());", "input.setPdCd(in.getPdCd());", "_getArrCndCntrlMgmt().modifyArrCndClass(input);", "return", "new", "DummyIO();", "}"], "docstring_tokens": ["Update", "arrangement", "condition", "mapped", "class", "(condition", "variation", "class", "name)"]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "StStlmntSIO", "stStlmntSIOIn)", "{", "logger.debug(\"##<ST-StlmntSubInfoBiz>", "saveMapSubInfo\");", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.create", "a", "new", "instance", "of", "I/F", "VO", "//", "IValueObject", "subInfoIfVo", "=", "new", "StlmntSubInfo();", "//", "2.create", "a", "new", "instance", "of", "DBIO", "VO", "StStlmntSIO", "stStlmntSIO", "=", "new", "StStlmntSIO();", "//", "3.set", "key", "to", "DBIO", "VO", "_setKey(stStlmntSIO,", "stStlmntSIOIn);", "//", "3.convert", "map", "to", "DBIO", "VO", "DtoUtils.setSubInfoIO(subInfoMap,", "stStlmntSIO);", "//", "4.insert", "subsidiary", "detail", "_insertSubInfo(stStlmntSIO);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "thing", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "boolean", "check(Map<String,", "String>", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"ArthmtcOprtnCmpxVldtnImpl", ":", "{}\",", "atrbtCntnt);", "}", "int", "cnt", "=", "0;", "BigDecimal", "lVal", "=", "BigDecimal.ZERO;", "BigDecimal", "sum", "=", "BigDecimal.ZERO;", "for(Map.Entry<String,", "String>", "atrbt:", "atrbtCntnt.entrySet())", "{", "if(atrbt.getValue()", "==", "null", "||", "!DataCheckUtils.isNumeric(atrbt.getValue()))", "{", "//", "It", "is", "{0}", "error.", "Please", "check", "{0}.", "throw", "new", "BizApplicationException(\"AAPCME0002\",", "new", "Object[]", "{\"@inpCntnt\"},", "new", "Object[]", "{\"ArthmtcOprtnCmpxVldtnImpl", ":", "\"", "+", "atrbtCntnt.toString()});", "}", "if(cnt", "==", "0)", "{", "lVal", "=", "new", "BigDecimal(atrbt.getValue());", "cnt++;", "continue;", "}", "sum", "=", "sum.add(new", "BigDecimal(atrbt.getValue()));", "cnt++;", "}", "if(lVal.compareTo(sum)", "!=", "0)", "{", "//", "There", "is", "mismatch", "between", "first", "item", "and", "sum", "of", "other", "items.", "{0}", "throw", "new", "BizApplicationException(\"AAPCME0171\",", "new", "Object[]", "{atrbtCntnt.toString()});", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Simple", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "MenuMgmtSvcGetListMenuOut", "clone(){", "try{", "MenuMgmtSvcGetListMenuOut", "object=", "(MenuMgmtSvcGetListMenuOut)super.clone();", "if", "(", "this.menuItmList==", "null", ")", "object.menuItmList", "=", "null;", "else{", "java.util.List<bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetListMenuSubOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetListMenuSubOut>(menuItmList.size());", "for(", "bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetListMenuSubOut", "item", ":", "menuItmList", "){", "clonedList.add(", "(bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetListMenuSubOut)item.clone());", "}", "object.menuItmList", "=", "clonedList;", "}", "if", "(", "this.prtltDfltScrnIdList==", "null", ")", "object.prtltDfltScrnIdList", "=", "null;", "else{", "java.util.List<bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetprtltDfltScrnIdOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetprtltDfltScrnIdOut>(prtltDfltScrnIdList.size());", "for(", "bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetprtltDfltScrnIdOut", "item", ":", "prtltDfltScrnIdList", "){", "clonedList.add(", "(bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetprtltDfltScrnIdOut)item.clone());", "}", "object.prtltDfltScrnIdList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveTelNbrInfo(List<ActorTelNbrRgstIn>", "actorTelNbrInList)", "throws", "BizApplicationException", "{", "if(", "actorTelNbrInList", "==", "null", "||", "actorTelNbrInList.isEmpty())", "{", "return;", "}", "/**", "*", "1.", "\uae30\uc874", "\uc561\ud130\uc5f0\ub77d\ucc98\ubaa9\ub85d", "\uc870\ud68c", "*/", "List<AtActorTelNbrDXtnIO>", "rgstrnTelNbrIOList", "=", "_getActorCtcptXtn().getListRgstrnTelNbrAddrInfo(this);", "/**", "*", "2.", "\uc5f0\ub77d\ucc98", "\uc815\ubcf4", "\uc800\uc7a5", "*/", "for", "(ActorTelNbrRgstIn", "actorTelNbrIn", ":", "actorTelNbrInList)", "{", "/**", "*", "2.1.", "\ub300\ud45c\uc5f0\ub77d\ucc98\uc5ec\ubd80", "Y", "\uc911\ubcf5", "\ud310\ub2e8", "-", "\uc911\ubcf5", "\uc2dc", "\uc5d0\ub7ec", "*/", "if", "(CCM01.YES.equals(actorTelNbrIn.getCtcptRprsntvYn()))", "{", "_checkRepresentativeYnDuplication(actorTelNbrIn.getActorCtcptId(),", "actorTelNbrIn.getCntctMthdTpCd());", "}", "/**", "*", "2.2.", "\uc5f0\ub77d\ucc98", "\uc911\ubcf5", "\ud310\ub2e8", "-", "\uc911\ubcf5", "\uc2dc", "\uc2a4\ud0b5", "*/", "boolean", "isDuplicated", "=", "_getActorCtcptXtn().checkTelNbrDplctn(this,", "actorTelNbrIn,", "rgstrnTelNbrIOList);", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"##", "<AT>", "saveTelNbrInfo", "->", "isDuplicated", "=", "{}", "::", "\",", "isDuplicated);", "}", "if", "(isDuplicated)", "{", "continue;", "}", "/**", "*", "2.3.", "\ud655\uc7a5\uc18d\uc131", "EAV", "\uc694\uc18c", "\ubd84\ub9ac", "-", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138/\ubcf4\uc870\uba85\uc138", "\ubd84\ub958", "*/", "Map<String,", "String>", "subInfoCrtnMap", "=", "new", "HashMap<String,", "String>();", "subInfoCrtnMap.putAll(_getActorCtcptSubInfoBiz().getMapSubInfoCrtn(actorTelNbrIn.getCtcptXtnInfoList()));", "/**", "*", "2.4.", "\uc561\ud130\uc5f0\ub77d\ucc98\uc2dd\ubcc4\uc790", "\uc874\uc7ac\uc720\ubb34\uc5d0", "\ub530\ub77c", "\ub4f1\ub85d/\ubcc0\uacbd", "-", "\uc5f0\ub77d\ucc98", "\uc815\ubcf4", "\ubc0f", "EAV", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "\uc800\uc7a5", "*/", "if", "(StringUtils.isEmpty(actorTelNbrIn.getActorCtcptId()))", "{", "_registerCtcptAddrInfo(actorTelNbrIn);", "}", "else", "{", "_modifyCtcptAddrInfo(actorTelNbrIn,", "actorTelNbrIn.getActorCtcptId());", "}", "/**", "*", "2.5.", "CTI", "\ubcf4\uc870\uba85\uc138", "\uc800\uc7a5", "*/", "_getActorCtcptSubInfoBiz().saveMapSubInfo(this,", "actorTelNbrIn.getActorCtcptId(),", "actorTelNbrIn.getActorCtcptChngSeqNbr(),", "subInfoCrtnMap);", "}", "}"], "docstring_tokens": ["It", "registers/modifies", "actor", "telephone", "number", "information", "list.", "Telephone", "number", "information", "includes", "international", "telephone", "number,", "ID", "telephone", "number,", "representing", "contact", "point", "YN,", "contact", "prohibition", "type", "code", "and", "authenticated", "YN.", "If", "the", "input", "representing", "contact", "method", "is", "duplicated", "with", "the", "already", "registered", "information,", "it", "throws", "exception."]}
{"code_tokens": ["public", "CmTodayMBatIO", "clone(){", "try{", "CmTodayMBatIO", "object=", "(CmTodayMBatIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isValidRoleServiceRelation(String", "instCd,", "List<String>", "roleIdList,", "String", "srvcCd)", "throws", "BizApplicationException", "{", "_checkStringValue(instCd,", "CCM03.INST_CD);", "if(roleIdList.isEmpty())", "_checkStringValue(\"\",", "CCM03.ROLE_ID);", "_checkStringValue(srvcCd,", "CCM03.SRVC_CD);", "CaCmRoleSrvcRByRoleIdListIO", "in", "=", "new", "CaCmRoleSrvcRByRoleIdListIO();", "in.setInstCd(instCd);", "in.setSrvcCd(srvcCd);", "in.setRoleIdList(roleIdList);", "List<CaCmRoleSrvcRIO>", "cmRoleSrvcRIOList", "=", "_getCmRoleSrvcRDso().selectListByRoleList(in);", "if(cmRoleSrvcRIOList.isEmpty())", "{", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["It", "verifies", "that", "there", "is", "a", "list", "of", "roles", "entered", "in", "the", "service", "code", "entered."]}
{"code_tokens": ["public", "ScrtyIntMngrSvcDelIn", "clone(){", "try{", "ScrtyIntMngrSvcDelIn", "object=", "(ScrtyIntMngrSvcDelIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "delete(StAmtTpRpymntSeqDIO", "stAmtTpRpymntSeqDIO)", "{", "return", "_getStAmtTpRpymntSeqD().delete(stAmtTpRpymntSeqDIO);", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "CaDocSrchSvcGetDocClTreeOut", "clone(){", "try{", "CaDocSrchSvcGetDocClTreeOut", "object=", "(CaDocSrchSvcGetDocClTreeOut)super.clone();", "if", "(", "this.children==", "null", ")", "object.children", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut>(children.size());", "for(", "bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut", "item", ":", "children", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut)item.clone());", "}", "object.children", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<TblXtnAtrbtOut>", "getTableExtendAttribute(String", "instCd,", "String", "tblNm)", "throws", "BizApplicationException", "{", "return", "this.getTableExtendAttribute(instCd,", "tblNm,", "XtnAtrbtVrtnCmpsEnum.NA,", "null);", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "no", "condition", "basic", "method", "reference", ":", "{@link", "TblXtnAtrbtCore", "getTableExtendAttribute(String,", "String,", "XtnAtrbtVrtnCmpsEnum,", "Map<String,", "String>)}"]}
{"code_tokens": ["public", "NoticeBsicInfoIO", "request(NoticeBsicInfoIO", "noticeBsicInfoIO,", "Map<String,Object>", "refObjectMap)", "throws", "BizApplicationException", "{", "return", "request(noticeBsicInfoIO,", "refObjectMap,", "null);", "}"], "docstring_tokens": ["It", "requests", "notice.", "It", "can", "be", "used", "after", "connecting", "with", "actual", "SMS", "text", "and", "EMAIL", "sending", "server.", "For", "SMS,", "the", "caller", "ID", "is", ":", "0101112222", "For", "E-Mail,", "the", "caller", "ID", "is", ":", "admin@bankwareglobal.com"]}
{"code_tokens": ["public", "PdCndImpl", "getCnd(PdCndIn", "in)", "throws", "BizApplicationException", "{", "//", "\uc870\uac74", "\uc624\ube0c\uc81d\ud2b8", "\uc0dd\uc131", "\ubc0f", "\ucd08\uae30\ud654", "//", "Get", "Condition", "Bean", "and", "initialize", "PdCndImpl", "cnd", "=", "new", "PdCndImpl(this,", "in);", "cnd.initialize();", "//", "Return", "condition", "return", "cnd;", "}"], "docstring_tokens": ["This", "Method", "create", "a", "condition", "object.", "condition", "information", "initialization.", "condition", "object", "has", "condition", "defined", "in", "point", "or", "common", "condition", "information."]}
{"code_tokens": ["public", "void", "terminate(InsrncStsChngIn", "in)", "throws", "BizApplicationException", "{", "InsrncStsCoreEnum", "afStstCd", "=", "InsrncStsCoreEnum.TERMINATED;", "//", "1.", "\uc785\ub825\uac12", "\uac80\uc99d", "_checkStsChnginput(in,", "afStstCd);", "//", "2.", "\ubcf4\uc99d\uae30\ubcf8", "\uc124\uc815\uc0c1\ud0dc", "\ubcc0\uacbd", "(\"\ud574\uc9c0\"\uc0c1\ud0dc\ub85c", "\ubcc0\uacbd)", "_getInsrncBsicBiz().changeInsrnStatus(this,", "in,", "afStstCd.getValue());", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "t", "change", "the", "status", "of", "insurance", "to", "cancel", "status", "*", "</pre>", "*", "@seealso", "*", "@note", "{@link", "InsrncStsChngIn}", ":", "required", "fields", "-", "all", "of", "them", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\ubcf4\ud5d8\uc758", "\uc0c1\ud0dc\ub97c", "\ucde8\uc18c\uc0c1\ud0dc\ub85c", "\ubcc0\uacbd\ud55c\ub2e4.", "*", "</pre>", "*", "@seealso", "*", "@note", "{@link", "InsrncStsChngIn}"], "docstring_tokens": ["Change", "status", "of", "arrangement", "group", "into", "\"Terminated\".", "Available", "next", "status", "is", "managed", "by", "ArrGrpMapStsChngDflt", "and", "it", "throws", "error", "if", "new", "status", "is", "not", "available."]}
{"code_tokens": ["public", "ArrStndngOrder", "getArrStndngOrder(String", "arrId)", "throws", "BizApplicationException", "{", "ArrRealImpl", "arrReal", "=", "(ArrRealImpl)", "super.getArrRealCore(arrId);", "return", "(ArrStndngOrder)", "_checkArrObjectByKind(", "arrReal,", "ArrKndEnum.STANDING_ORDER", ");", "}"], "docstring_tokens": ["This", "method", "inquire", "standing", "order", "arrangement", "using", "arrangement", "ID.", "Detail", "function", "description", "refers", "to", "{@link", "#getArr(ArrRealGetIn)}."]}
{"code_tokens": ["public", "boolean", "isPackagePd()", "{", "return", "CCM01.YES.equals(pdPdM.getPckgPdYn());", "}"], "docstring_tokens": ["This", "Method", "inquire", "whether", "a", "package", "is", "a", "product"]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "ScrtyIntImpl", "scrtyIntImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\uc124\uc815", "\uac1d\uccb4\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AsScrtyIntSIO", "scrtyIntSubInfo", "=", "getSubInfoCache(scrtyIntImpl);", "//", "2.", "\uc124\uc815\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(scrtyIntSubInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\uc124\uc815\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "scrtyIntSubInfo.get(atrbtNm);", "//", "\uc18d\uc131\uac12\uc774", "null\uc778\uacbd\uc6b0", "null\ub9ac\ud134", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "asset", "transaction."]}
{"code_tokens": ["public", "DpstIntCalculatorOut", "calculateInterestProvisionalSettlement(Arr", "arr,", "int", "txSeqNbr,String", "baseDt,", "Map<String,", "String>", "xtdInfo,", "boolean", "smltn)", "throws", "BizApplicationException", "{", "return", "_calculateInt(arr,", "txSeqNbr,", "null,", "baseDt,", "smltn,", "xtdInfo,", "InterestTransactionTypeEnum.PROVISIONAL_SETTLEMENT);", "}"], "docstring_tokens": ["This", "method", "calculates", "the", "provisional", "interest", "settlement.", "The", "way", "of", "interest", "calculation", "by", "product", "is", "as", "follows.", "1.Demand", "deposit", "product", ":", "calculate", "interest", "on", "the", "same", "plan", "as", "settlement", "case", "2.Installment", "product", ":", "calculate", "maturity", "interest", "for", "each", "deposit", "3.Term", "deposit", "product", ":", "calculate", "maturity", "interest", "on", "the", "deposit"]}
{"code_tokens": ["public", "CaSrvcMgmtSvcChngListIn", "clone(){", "try{", "CaSrvcMgmtSvcChngListIn", "object=", "(CaSrvcMgmtSvcChngListIn)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>(tblNm.size());", "for(", "bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "if", "(", "this.saveList==", "null", ")", "object.saveList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>(saveList.size());", "for(", "bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn", "item", ":", "saveList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn)item.clone());", "}", "object.saveList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(DebitCrdtDscdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "CaDstbCtvdSrchDetailOut", "clone(){", "try{", "CaDstbCtvdSrchDetailOut", "object=", "(CaDstbCtvdSrchDetailOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveXtnInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getArrActvtyBasic().saveXtnAtrbt(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "this);", "}"], "docstring_tokens": ["Save", "(create", "or", "change", ")", "extend", "attribute."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(CustRprsnImpl", "custRprsnImpl)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtCustRprsnSIO", "subInfo", "=", "getSubInfoCache(custRprsnImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "as", "a", "map."]}
{"code_tokens": ["public", "List<ArrIntRt>", "getCurrentArrIntRt()", "throws", "BizApplicationException", "{", "PdIntRtStrctrClCdEnum", "arrIntRtTp", "=", "_getNormalIntRtTpCdByPd();", "return", "_getArrIntRtProvider().getListArrIntRt(this,", "arrIntRtTp,", "ArrCmnUtil.getRckngDt(", "_getCmnContext()));", "}"], "docstring_tokens": ["Inquire", "current", "interest", "rate", "of", "arrangement.", "Inquire", "deposit", "normal", "interest", "rate", "for", "deposit", "arrangement,", "loan", "normal", "interest", "rate", "for", "loan", "arrangement.", "Inquire", "registered", "interest", "rate", "for", "decided", "interest", "rate,", "calculate", "new", "one", "on", "transaction", "date", "for", "undecided."]}
{"code_tokens": ["protected", "ArrGrpCoreImpl", "getUniqueBusinessBean(String", "arrGrpId", ")", "throws", "BizApplicationException", "{", "return", "(ArrGrpCoreImpl)", "ApplicationContextCoreUtils.getUniqueBusinessBean(_getCmnContextCore().getInstCode()", "+", "arrGrpId,", "getArrGrpImplClass());", "}"], "docstring_tokens": ["get", "unique", "business", "bean", "in", "one", "transaction"]}
{"code_tokens": ["public", "String", "getArrStsHms(){", "return", "arrStsHms;", "}"], "docstring_tokens": ["Inquire", "the", "arrangement", "status", "change", "time"]}
{"code_tokens": ["public", "String", "saveRelationXtnInfo(ArrRelInfoIn", "arrRelInfoIn,String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,String", "txDt,Integer", "txSeqNbr,ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "if", "(ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())){", "return", "null;", "}", "_checkInput(arrRelInfoIn,xtnAtrbtNm,txDt,txSeqNbr);", "//", "Check", "Transaction", "Exist", "//", "\uac70\ub798\uc0dd\uc131\uc5ec\ubd80", "\uac80\uc99d", "_getArrCmnUtil().validateArrTxExist(arrReal,", "txDt,", "txSeqNbr);", "return", "_saveArrRelExtendAttribute(arrRelInfoIn,xtnAtrbtNm,", "xtnAtrbtCntnt,txDt,txSeqNbr,", "arrReal);", "}"], "docstring_tokens": ["Save", "arrangement", "relation", "extended", "attribute", "to", "the", "arrangement."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AssetImpl", "asset,", "Integer", "assetThingSeqNbr){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "subInfo", "=", "getSubInfoCache(asset,", "assetThingSeqNbr);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(!_isSubInfoContainsField(asset.getAssetThingSubInfoKnd(assetThingSeqNbr),", "entry.getKey()))", "{", "continue;", "}", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null", ")", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "thing", "as", "a", "map."]}
{"code_tokens": ["public", "void", "saveSubInfo", "(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "StlmntSubInfoInqryIn", "subInfoInqryIn)", "throws", "BizApplicationException", "{", "//", "validate", "input", "value", "StlmntXtnInfoEnum", "stlmntXtnInfo", "=", "StlmntXtnInfoEnum.getEnum(xtnAtrbtNm);", "if(stlmntXtnInfo", "==", "null){", "//xtnAtrbtNm\uc740", "\uc720\ud6a8\ud55c", "\uc815\uc0b0\ud655\uc7a5\uc18d\uc131\uc774", "\uc544\ub2d9\ub2c8\ub2e4.", "throw", "new", "BizApplicationException(\"AAPSTE0201\",", "new", "String[]", "{xtnAtrbtNm});", "}", "_getStlmntSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "_setStSTlmntSIO(subInfoInqryIn));", "}"], "docstring_tokens": ["Save", "an", "insurance", "subsidiary", "information."]}
{"code_tokens": ["public", "CaMenuMgmtSvcGetUserMenuListOut", "clone(){", "try{", "CaMenuMgmtSvcGetUserMenuListOut", "object=", "(CaMenuMgmtSvcGetUserMenuListOut)super.clone();", "if", "(", "this.prtltDfltScrnIdList==", "null", ")", "object.prtltDfltScrnIdList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetprtltDfltScrnIdOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetprtltDfltScrnIdOut>(prtltDfltScrnIdList.size());", "for(", "bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetprtltDfltScrnIdOut", "item", ":", "prtltDfltScrnIdList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetprtltDfltScrnIdOut)item.clone());", "}", "object.prtltDfltScrnIdList", "=", "clonedList;", "}", "if", "(", "this.menuItmList==", "null", ")", "object.menuItmList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetUserMenuOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetUserMenuOut>(menuItmList.size());", "for(", "bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetUserMenuOut", "item", ":", "menuItmList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetUserMenuOut)item.clone());", "}", "object.menuItmList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "StlmntManualEntryMgmtSvcRegisterIn", "clone(){", "try{", "StlmntManualEntryMgmtSvcRegisterIn", "object=", "(StlmntManualEntryMgmtSvcRegisterIn)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcRegisterItemIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcRegisterItemIn>(tblNm.size());", "for(", "bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcRegisterItemIn", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcRegisterItemIn)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "check(String", "nbr)", "throws", "BizApplicationException", "{", "if(!DataCheckUtils.checkSocialSecurityNbr(nbr))", "{", "throw", "new", "BizApplicationException(\"AAPCME0160\",", "null);", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Simple", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "CaDocRgstSvcRgstTmpltIn", "clone(){", "try{", "CaDocRgstSvcRgstTmpltIn", "object=", "(CaDocRgstSvcRgstTmpltIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustRprsnInqrySvcGetLoinIdNbrIn", "clone(){", "try{", "CustRprsnInqrySvcGetLoinIdNbrIn", "object=", "(CustRprsnInqrySvcGetLoinIdNbrIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "check(String", "vldnTrgt)", "throws", "BizApplicationException", "{", "if", "(_getArrMngr().getArrReal(vldnTrgt)", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPARE0696\",", "new", "String[]", "{vldnTrgt});", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Complex", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "aprslThingSubInfoMap,", "AprslCore", "aprslCore,", "Integer", "aprslThingSeqNbr)", "throws", "BizApplicationException", "{", "_getAprslThingSubInfoBiz().saveMapSubInfo(aprslThingSubInfoMap,", "(AprslImpl)", "aprslCore,", "aprslThingSeqNbr);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "subInfoMap."]}
{"code_tokens": ["public", "java.lang.String", "getDstbTrgtScrnYn(){", "return", "dstbTrgtScrnYn;", "}"], "docstring_tokens": ["Inquire", "distribution", "target", "screen", "yn."]}
{"code_tokens": ["public", "int", "delete(AcBillCtgryCashDIO", "acBillCtgryCashDIO)", "throws", "BizApplicationException", "{", "return", "_getAcBillCtgryCashD().delete(acBillCtgryCashDIO);", "}"], "docstring_tokens": ["It", "removes", "document", "information."]}
{"code_tokens": ["public", "List<ArrCashFlowIO>", "getListArrDueDateAdvent(String", "instCd,", "String", "deptId,", "String", "inqryStartDt,", "String", "inqryEndDt)", "throws", "BizApplicationException", "{", "List<ArrCashFlowIO>", "arrIdList", "=", "new", "ArrayList<ArrCashFlowIO>();", "ArrCashFlowIO", "arrIdIO", "=", "null;", "/**", "Check", "Input", "Argument", "*/", "_checkInputValue(instCd,", "\"instCd\");", "_checkInputValue(deptId,", "\"deptId\");", "_checkInputValue(inqryStartDt,", "\"inqryStartDt\");", "_checkInputValue(inqryEndDt,", "\"inqryEndDt\");", "if(", "DateUtils.isValidDate(inqryStartDt)", "==", "false", ")", "{", "//", "[{0}]", "[{1}]", "\uc785\ub825\ud55c", "\ub0a0\uc9dc\ud615\uc2dd\uc774", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4.", "\ub514\ud3f4\ud2b8", "\ub0a0\uc9dc", "\ud3ec\ub9f7\uc740", "\"YYYYMMDD\"", "\uc785\ub2c8\ub2e4.", "throw", "new", "BizApplicationException(\"AAPCME0001\",", "new", "Object[]{\"@inqryStartDt\",inqryStartDt});", "}", "if(", "DateUtils.isValidDate(inqryEndDt)", "==", "false", ")", "{", "//", "[{0}]", "[{1}]", "\uc785\ub825\ud55c", "\ub0a0\uc9dc\ud615\uc2dd\uc774", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4.", "\ub514\ud3f4\ud2b8", "\ub0a0\uc9dc", "\ud3ec\ub9f7\uc740", "\"YYYYMMDD\"", "\uc785\ub2c8\ub2e4.", "throw", "new", "BizApplicationException(\"AAPCME0001\",", "new", "Object[]{\"@inqryEndDt\",inqryEndDt});", "}", "if(", "inqryEndDt.compareTo(inqryStartDt)", "<", "0", ")", "{", "//", "{0}\ub294", "{1}", "\ubcf4\ub2e4", "\ucee4\uc57c", "\ud569\ub2c8\ub2e4.", "\uc785\ub825", "\uac12\uc744", "\ud655\uc778\ud558\uc2ed\uc2dc\uc694.", "throw", "new", "BizApplicationException(\"AAPCME0007\",", "new", "Object[]{\"@inqryEndDt\",\"@inqryStartDt\"});", "}", "List<StArrCashFlowDIO>", "arrCashFlowDIOList", "=", "_getStArrCashFlowDDso().selectListDueDateAdvent(instCd,", "deptId,", "inqryStartDt,", "inqryEndDt);", "if(!arrCashFlowDIOList.isEmpty())", "{", "for(StArrCashFlowDIO", "stArrCashFlowDIO", ":", "arrCashFlowDIOList)", "{", "arrIdIO", "=", "new", "ArrCashFlowIO();", "arrIdIO.setArrId(", "stArrCashFlowDIO.getArrId()", ");", "arrIdList.add(arrIdIO);", "}", "}", "return", "arrIdList;", "}"], "docstring_tokens": ["Inquire", "the", "list", "of", "repayment", "schedules", "due", "for", "each", "department."]}
{"code_tokens": ["public", "WatchListFilterSvcOut", "executeWatchListFiltering(WatchListFilterSvcIn", "in)", "throws", "BizApplicationException", "{", "/**", "*", "1.", "get", "customer", "object", "*/", "Cust", "cust", "=", "_getCustMngr().getCust(in.getCustId());", "/**", "*", "2.", "Open", "CustTx", "*/", "CustTxCrtnIn", "custTxCrtnIn", "=", "new", "CustTxCrtnIn();", "custTxCrtnIn.setCustTxBsicInfo(_setCustTxBsicInfo(in.getCustId()));", "CustTx", "custTx", "=", "_getCustTxMngr().createCustTx(custTxCrtnIn);", "/**", "*", "3.", "execute", "watch", "list", "filtering", "*/", "String", "dueDlgncDscd", "=", "cust.executeWatchListFiltering(custTx.getCustTxSeqNbr());", "/**", "*", "4.", "assemble", "output", "*/", "WatchListFilterSvcOut", "out", "=", "new", "WatchListFilterSvcOut();", "out.setDueDlgncDscd(dueDlgncDscd);", "return", "out;", "}"], "docstring_tokens": ["It", "executes", "watch", "list", "filtering.", "If", "the", "actor", "is", "decided", "as", "a", "EDD", "target", "customer,", "due", "diligence", "information", "will", "be", "registered/modified."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(DpstPdTemplateCdEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "TxQrySvcGetStlmntListIn", "clone(){", "try{", "TxQrySvcGetStlmntListIn", "object=", "(TxQrySvcGetStlmntListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "null,", "null,", "null,", "null,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt,", "false);", "}"], "docstring_tokens": ["Inquire", "specific", "customer", "own", "(as", "main", "contractor)", "arrangements", "of", "specific", "product", "hierarchy", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status."]}
{"code_tokens": ["public", "ToDoMgmtSvcGetToDoMgmtListTreeListNonActivitiOut", "clone(){", "ToDoMgmtSvcGetToDoMgmtListTreeListNonActivitiOut", "object=", "(ToDoMgmtSvcGetToDoMgmtListTreeListNonActivitiOut)super.clone();", "if", "(", "this.children==", "null", ")", "object.children", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.todo.service.dto.ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.todo.service.dto.ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut>(children.size());", "for(", "bankware.corebanking.configurationadmin.todo.service.dto.ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut", "item", ":", "children", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.todo.service.dto.ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut)item.clone());", "}", "object.children", "=", "clonedList;", "}", "return", "object;", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(PsbkMsgIdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(MostUsedAcctTpEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(AprslRelStsCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@aprslRelStsCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "DeptClsgPrsntStsinqrySvcListOut", "clone(){", "try{", "DeptClsgPrsntStsinqrySvcListOut", "object=", "(DeptClsgPrsntStsinqrySvcListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.DeptClsgPrsntStsinqrySvcOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.DeptClsgPrsntStsinqrySvcOut>(tblNm.size());", "for(", "bankware.corebanking.accounting.cashaccounting.service.dto.DeptClsgPrsntStsinqrySvcOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.cashaccounting.service.dto.DeptClsgPrsntStsinqrySvcOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrRealCore>", "getChildren(ArrRealCoreImpl", "arrReal,String", "bizDscd,", "String", "pdTpCd,String", "pdTmpltCd,String", "pdCd,List<String>", "curArrStsList)", "throws", "BizApplicationException", "{", "ArArrMSelectChildByPdInfoAndStatusIO", "arArrMSelectChildByPdInfoAndStatusIO", "=", "new", "ArArrMSelectChildByPdInfoAndStatusIO();", "arArrMSelectChildByPdInfoAndStatusIO.setInstCd(arrReal.getInstCd());", "arArrMSelectChildByPdInfoAndStatusIO.setMthrArrId(arrReal.getArrId());", "arArrMSelectChildByPdInfoAndStatusIO.setCurArrStsList(curArrStsList);", "arArrMSelectChildByPdInfoAndStatusIO.setBizDscd(bizDscd);", "arArrMSelectChildByPdInfoAndStatusIO.setPdTpCd(pdTpCd);", "arArrMSelectChildByPdInfoAndStatusIO.setPdTmpltCd(pdTmpltCd);", "arArrMSelectChildByPdInfoAndStatusIO.setPdCd(pdCd);", "List<ArrRealCore>", "arrList", "=", "new", "ArrayList<ArrRealCore>();", "List<ArArrMIO>", "arArrMList", "=", "_getArArrMDso().selectChildrenByPdInfoAndStatus(arArrMSelectChildByPdInfoAndStatusIO);", "if(arArrMList", "==", "null", "||", "arArrMList.isEmpty()){", "return", "arrList;", "}", "for", "(ArArrMIO", "arArrM", ":", "arArrMList)", "{", "ArrRealCore", "arrRealLocal", "=", "_getArrMngrAgent().getArrRealCore(arArrM);", "arrList.add(arrRealLocal);", "}", "return", "arrList;", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "child", "arrangement."]}
{"code_tokens": ["public", "FrgnCrncyChkPrchsSvcOut", "clone(){", "try{", "FrgnCrncyChkPrchsSvcOut", "object=", "(FrgnCrncyChkPrchsSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<StaffRoleInqryOut>", "getListStaffRoleInfo(String", "instCd,", "String", "deptId,", "String", "staffId)", "throws", "BizApplicationException", "{", "//check", "required", "inputs", "if", "(StringCoreUtils.isEmpty(instCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@instCd\"});", "}else", "if", "(StringCoreUtils.isEmpty(deptId))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@deptId\"});", "}", "return", "this.getListStaffRoleInfo(instCd,", "deptId,", "staffId,", "CCM01.NO);", "}"], "docstring_tokens": ["It", "inquires", "the", "staff's", "name,", "department,", "role", "and", "supervisor", "information", "that", "matches", "the", "input", "institution,", "department", "identification,", "staff", "identification.", "It", "can", "inquire", "including", "retired", "staff."]}
{"code_tokens": ["public", "void", "saveSubInfo(AtCustRprsnSIO", "subInfoIO,", "CustRprsnImpl", "custRprsnImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustRprsnSIO", "oldSubInfoIO", "=", "getSubInfoCache(custRprsnImpl);", "if", "(oldSubInfoIO", "==", "null)", "{", "//", "PK", "setting", "subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId());", "//", "insert", "_getAtCustRprsnSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoIO,", "oldSubInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(custRprsnImpl,", "oldSubInfoIO);", "//", "PK", "setting", "subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId());", "//", "update", "_getAtCustRprsnSDso().update(oldSubInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custRprsnImpl.setSubInfoCache(oldSubInfoIO);", "}"], "docstring_tokens": ["Save", "an", "appraisal", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "AssetInsrncMgmtSvcInqryIn", "clone(){", "try{", "AssetInsrncMgmtSvcInqryIn", "object=", "(AssetInsrncMgmtSvcInqryIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DummyIO", "deleteTableExtendAttribute(CaTblMgmtSvcTblXtnAtrbtListIn", "in)", "throws", "BizApplicationException", "{", "for", "(CaTblMgmtSvcSaveTblXtnAtrbtIn", "caTblMgmtSvcSaveTblXtnAtrbtIn", ":", "in.getTblNm())", "{", "CaTblXtnAtrbtIO", "inBo", "=", "new", "CaTblXtnAtrbtIO();", "inBo.setInstCd(caTblMgmtSvcSaveTblXtnAtrbtIn.getInstCd());", "inBo.setTblNm(caTblMgmtSvcSaveTblXtnAtrbtIn.getTblNm());", "inBo.setXtnAtrbtNm(caTblMgmtSvcSaveTblXtnAtrbtIn.getXtnAtrbtNm());", "_getTblXtnAtrbt().deleteTableExtendAttribute(inBo);", "}", "return", "new", "DummyIO();", "}"], "docstring_tokens": ["Delete", "table", "extend", "attribute"]}
{"code_tokens": ["public", "CaDocRgstSvcRgstClIn", "clone(){", "try{", "CaDocRgstSvcRgstClIn", "object=", "(CaDocRgstSvcRgstClIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaScrnIO", "getScreen", "(String", "scrnId)", "throws", "BizApplicationException", "{", "if", "(StringUtils.isEmpty(scrnId))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]{\"@srvcCd\"});", "}", "CaScrnIO", "scrn", "=", "_getScreen(scrnId);", "return", "scrn;", "}"], "docstring_tokens": ["Receives", "scrnId", "and", "returns", "Scrn", "object."]}
{"code_tokens": ["public", "List<BfPdRelOut>", "getRelBtwnBfAndPd(BfPdRelIn", "in)", "{", "List<BfPdRelOut>", "outList", "=", "new", "ArrayList<>();", "BfPdRelationListIn", "apiIn", "=", "new", "BfPdRelationListIn();", "apiIn.setInstitutionId(bf.getInstCd());", "apiIn.setBfCd(bf.getPdCd());", "apiIn.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(),", "in.getAplyTm()));", "apiIn.setPdBetweenRelationCd(in.getPdBtwnRelCd());", "apiIn.setRelationPdInfoDscd(in.getRelPdInfoDscd());", "List<BfPdRelationOut>", "relations", "=", "_bfApi().getListBfPdRelation(apiIn);", "for", "(BfPdRelationOut", "relation", ":", "relations)", "{", "BfPdRelOut", "out", "=", "new", "BfPdRelOut();", "out.setIndsDscd(relation.getIndustryDscd());", "out.setBizDscd(relation.getBizDscd());", "out.setPdTpCd(relation.getPdTypeCd());", "out.setPdInfoDscd(relation.getPdInfoDscd());", "out.setPdTmpltCd(relation.getPdTemplateCd());", "out.setPdCd(relation.getPdCd());", "out.setPdNm(relation.getPdName());", "out.setPdBtwnRelCd(relation.getPdBetweenRelationCd());", "out.setAplyStartDt(PdUtil.parseDateToHHMMSS(relation.getApplyStartDate()));", "out.setAplyStartTm(PdUtil.parseDateToYYYYMMDD(relation.getApplyStartDate()));", "out.setAplyEndDt(PdUtil.parseDateToHHMMSS(relation.getApplyEndDate()));", "out.setAplyEndTm(PdUtil.parseDateToYYYYMMDD(relation.getApplyEndDate()));", "outList.add(out);", "}", "return", "outList;", "}"], "docstring_tokens": ["This", "Method", "inquire", "all", "products", "related", "to", "benefit.", "if", "there", "is", "no", "product", "between", "relation", "code,", "all", "products", "inquire", "if", "there", "is", "no", "relation", "product", "information", "distinction", "code,", "all", "products", "inquire"]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(ArrExtrnlIdNbrTpEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "CustCustRelSvcGetOut", "clone(){", "try{", "CustCustRelSvcGetOut", "object=", "(CustCustRelSvcGetOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "validate(String", "arrSrvcCd,ArrRealCore", "arrReal,", "CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "if", "(_getCmnContext().isSelfChannel()", "&&", "!cust.getCustId().equals(_getCmnContext().getCustId())){", "//Customer", "to", "be", "accessed", "is", "not", "same", "with", "self-service", "channel's", "user.", "This", "service", "({0})", "could", "not", "performs", "properly", "//\uc811\uadfc\ub300\uc0c1", "\uace0\uac1d\uc815\ubcf4\uc758", "\uace0\uac1d\uacfc", "\ubcf8", "\uc140\ud504\uc11c\ube44\uc2a4", "\ucc44\ub110\uc758", "\uc0ac\uc6a9\uc790\uac00", "\ub3d9\uc77c\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4.", "\ubcf8\uc11c\ube44\uc2a4({0})", "\uc2e4\ud589\uc774", "\ubd88\uac00", "\ud569\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0336\",", "new", "Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)});", "}", "}"], "docstring_tokens": ["Processing", "rules", "should", "be", "commonly", "performed", "according", "to", "the", "rules", "defined", "in", "the", "service", "processing", "rule,", "based", "on", "the", "service", "type", "input."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(DeptImpl", "dept){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtDeptSIO", "subInfo", "=", "getSubInfoCache(dept);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "request", "as", "a", "map."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(ScrtyIntMAtrbtCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@ScrtyIntMAtrbt\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "List<XtnCdIO>", "getListCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "List<XtnCdIO>", "xtnCdList", "=", "new", "ArrayList<XtnCdIO>();", "//", "query", "data", "DcDocMIO", "dcDocMIO", "=", "new", "DcDocMIO();", "_getCmnContext().setHeaderColumn(dcDocMIO);", "List<DcDocMIO>", "dcDocIdList", "=", "_getDcDocMDso().selectIdList(null,", "null,", "null);", "if(dcDocIdList", "!=", "null", "&&", "!dcDocIdList.isEmpty())", "{", "String", "lngCd", "=", "null;", "if(supplInfoVal.containsKey(InstParamEnum.LANGUAGE_CODE.getValue()))", "{", "lngCd", "=", "(String)", "supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue());", "}", "else", "{", "lngCd", "=", "_getCmnContext().getLanguageCode();", "}", "for(DcDocMIO", "dcDocMIOItem", ":", "dcDocIdList)", "{", "XtnCdIO", "xtnCdIO", "=", "new", "XtnCdIO();", "xtnCdIO.setCd(dcDocMIOItem.getDocId());", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_DOC,", "dcDocMIOItem.getDocId(),", "lngCd));", "xtnCdIO.setLngCd(lngCd);", "xtnCdList.add(xtnCdIO);", "}", "}", "return", "xtnCdList;", "}"], "docstring_tokens": ["It", "make", "the", "combo-box", "of", "Code", "that", "meet", "the", "search", "condition.", "Combo-box", "is", "consisted", "of", "CmnCdCheckOut.", "(cdNbr,", "cd,", "cdNm,", "delYn,", "cdAbrvtnNm)"]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "null,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt,", "false);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "of", "specific", "product", "hierarchy", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "(Paging)", "Inquire", "modification", "arrangement", "of", "inquired", "arrangement", "if", "hasVrtnArr", "is", "true."]}
{"code_tokens": ["public", "CustSrchSvcGetCustListIn", "clone(){", "try{", "CustSrchSvcGetCustListIn", "object=", "(CustSrchSvcGetCustListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(FeeTypeDscdCoreEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(InterestOverdueDscdEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CashTransitSvcIn", "clone(){", "try{", "CashTransitSvcIn", "object=", "(CashTransitSvcIn)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn>(tblNm.size());", "for(", "bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(ActorCore", "actorCore,", "String", "dueDlgncDscd,", "int", "dueDlgncSeqNbr,", "Map<String,", "String>", "xtnInfoMap)", "throws", "BizApplicationException", "{", "_getActorDueDlgncSubInfoBiz().saveMapSubInfo((ActorImpl)", "actorCore,", "dueDlgncDscd,", "dueDlgncSeqNbr,", "xtnInfoMap);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "subInfoMap."]}
{"code_tokens": ["public", "void", "modifyStatus(DocBsicIO", "docBsicIO)", "throws", "BizApplicationException", "{", "//", "Get", "document", "by", "same", "document", "id", "DcDocMIO", "rgstrnDcDocMIO", "=", "_getDcDocMDso().select(null,", "docBsicIO.getDocId(),", "null);", "if(rgstrnDcDocMIO", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPATE0016\",", "new", "String[]", "{\"@doc\",", "\"@docId\",", "docBsicIO.getDocId()});", "}", "else", "{", "_getCmnContext().setHeaderColumn(rgstrnDcDocMIO);", "rgstrnDcDocMIO.setDocStsCd(docBsicIO.getDocStsCd());", "_getDcDocMDso().update(rgstrnDcDocMIO);", "_getDcDataCacheManager().clearInstanceCache(DataCacheCoreConfig.DOC_BSIC_CACHE,", "docBsicIO.getDocId());", "}", "}"], "docstring_tokens": ["It", "updates", "notice", "message", "code", "status", "information.", "If", "delYn", "=", "'Y'", "then", "deleted", "data", "can", "not", "be", "recovered."]}
{"code_tokens": ["public", "List<CaKrRoadAddrOut>", "getAddrByBuildingName(String", "cityPrvncAddr,String", "cityGunGuAddr,", "String", "bldgNm)", "throws", "BizApplicationException", "{", "List<CaCmKrRoadAddrMIO>", "cmKrRoadAddrMList", "=", "_getCaCmKrRoadAddrMDso().selectByBuildingName(CaAddrHrarcyEnum.KOREA_ROAD_NAME_ADDRESS_CODE.getValue(),", "cityPrvncAddr,", "cityGunGuAddr,", "bldgNm);", "List<CaKrRoadAddrOut>", "out", "=", "new", "ArrayList<CaKrRoadAddrOut>();", "if(cmKrRoadAddrMList.isEmpty())", "{", "return", "out;", "}", "for(CaCmKrRoadAddrMIO", "cmKrRoadAddrMIO", ":", "cmKrRoadAddrMList)", "{", "CaKrRoadAddrOut", "krRoadAddrOut", "=", "new", "CaKrRoadAddrOut();", "krRoadAddrOut", "=", "_getKrRoadAddrOut(cmKrRoadAddrMIO);", "if(krRoadAddrOut", "!=", "null)", "{", "out.add(krRoadAddrOut);", "}", "}", "return", "out;", "}"], "docstring_tokens": ["It", "inquiries", "the", "Korea", "road", "address", "with", "building", "name", "list."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(IntCalcXtnInfoCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "DeptCore", "deptCore)", "throws", "BizApplicationException", "{", "return", "_getDeptSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(DeptImpl)deptCore);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "detail", "information."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"AcquireCltrl\":", "_doServiceAction(arrSrvcTpCd,arrCndActionRequiredValue);", "return;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "void", "saveControlCenterService(String", "instCd,", "String", "cntrlCntrId,", "List<CaCntrlCntrMngrSvcGetSvcIO>", "inList)", "throws", "BizApplicationException", "{", "StringUtils.checkStringParm(instCd,", "CCM03.INST_CD);", "StringUtils.checkStringParm(cntrlCntrId,", "CCM03.CNTRL_CNTR_ID);", "//", "\uc81c\uc5b4\uc13c\ud130\uc720\ud615", "\uc870\ud68c", "_checkControlCenterBasic(instCd,", "cntrlCntrId);", "CaSvCntrlCntrSrvcDIO", "param", "=", "new", "CaSvCntrlCntrSrvcDIO();", "param.setInstCd(instCd);", "param.setCntrlCntrId(cntrlCntrId);", "List<CaSvCntrlCntrSrvcDIO>", "rtnList", "=", "_getSvCntrlCntrSrvcDDso().selectList(param);", "//", "\ud604\uc7ac", "\ud14c\uc774\ube14", "\uc870\ud68c", "\uacb0\uacfc\ub85c", "\uc785\ub825\ub41c", "\ub9ac\uc2a4\ud2b8\ub97c", "\ucc98\ub9ac\ud568", "for(CaSvCntrlCntrSrvcDIO", "item", ":", "rtnList)", "{", "CaCntrlCntrMngrSvcGetSvcIO", "extData", "=", "null;", "for(CaCntrlCntrMngrSvcGetSvcIO", "in", ":", "inList)", "{", "if(item.getInstCd().equals(in.getInstCd())", "&&", "item.getCntrlCntrId().equals(in.getCntrlCntrId())", "&&", "item.getSrvcCd().equals(in.getSrvcCd())", "&&", "item.getAplyStartDt().equals(in.getAplyStartDt())", "){", "extData", "=", "in;", "break;", "}", "}", "if(extData", "==", "null){", "_getSvCntrlCntrSrvcDDso().delete(item);", "}", "else", "{", "CaSvCntrlCntrSrvcDIO", "svCntrlCntrSrvcDIO", "=", "_setControlCenterServiceDto(extData);", "_getSvCntrlCntrSrvcDDso().update(svCntrlCntrSrvcDIO);", "}", "}", "//", "\uc785\ub825\ub41c", "\ub9ac\uc2a4\ud2b8\ub97c", "\uae30\uc900\uc73c\ub85c", "\uc870\ud68c\ub41c", "\ud14c\uc774\ube14\uc5d0", "\uc874\uc7ac\ud558\uc9c0", "\uc54a\ub294", "\uc11c\ube44\uc2a4", "\uc0dd\uc131\ucc98\ub9ac", "for(CaCntrlCntrMngrSvcGetSvcIO", "in", ":", "inList)", "{", "boolean", "isData", "=", "false;", "for(CaSvCntrlCntrSrvcDIO", "item", ":", "rtnList)", "{", "if(item.getInstCd().equals(in.getInstCd())", "&&", "item.getCntrlCntrId().equals(in.getCntrlCntrId())", "&&", "item.getSrvcCd().equals(in.getSrvcCd())", "&&", "item.getAplyStartDt().equals(in.getAplyStartDt())", "){", "isData", "=", "true;", "break;", "}", "}", "if(!isData){", "CaSvCntrlCntrSrvcDIO", "svCntrlCntrSrvcDIO", "=", "_setControlCenterServiceDto(in);", "_getSvCntrlCntrSrvcDDso().insert(svCntrlCntrSrvcDIO);", "}", "}", "}"], "docstring_tokens": ["Save", "a", "control", "center", "service", "information."]}
{"code_tokens": ["public", "String", "getSubInfo(CustTxImpl", "custTxImpl,", "String", "txDt,", "Integer", "txSeqNbr,", "String", "atrbtNm)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtCustTxSIO", "subInfo", "=", "getSubInfoCache(custTxImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "subInfo.get(atrbtNm);", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal", "thing."]}
{"code_tokens": ["public", "int", "delete(CaCmClassMIO", "cmClassMIO)", "{", "super.clearCache(DataCacheCoreConfig.CLASS_MASTER_CACHE);", "super.clearCache(DataCacheCoreConfig.CLASS_TYPE_CACHE);", "super.clearCache(DataCacheCoreConfig.COMMON_CLASS_SELECT_CACHE);", "return", "_getCmClassM().delete(cmClassMIO);", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "List<ArArrArrRXtnInfoDIO>", "selectListArrArrRXtnInfo(ArArrArrRXtnInfoDIO", "arArrArrRXtnInfoDIO)", "throws", "BizApplicationException", "{", "return", "super.selectListArrArrRXtnInfo(arArrArrRXtnInfoDIO);", "}"], "docstring_tokens": ["Inquire", "all", "of", "active", "arrangement/arrangement", "relation", "extended", "attribute", "of", "subsidiary", "information(CTI)"]}
{"code_tokens": ["public", "CustRgstSvcCorpOut", "clone(){", "try{", "CustRgstSvcCorpOut", "object=", "(CustRgstSvcCorpOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(ThingKndCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@assetStsCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "String", "getAprvlNbr()", "throws", "BizApplicationException", "{", "return", "_getArrRealCoreFundamentalAgent().getAprvlNbr(this);", "}"], "docstring_tokens": ["Inquire", "approval", "number", "registered", "to", "arrangement", "as", "external", "id", "number."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "AprslImpl", "aprslImpl,", "Integer", "prfClaimSeqNbr)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsAprslPrfClaimSIO", "subInfoCache", "=", "getSubInfoCache(aprslImpl,", "prfClaimSeqNbr);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsAprslPrfClaimSIO();", "subInfoCache.setAprslId(aprslImpl.getAprslBasicCache().getAprslId());", "//", "PK", "setting", "subInfoCache.setPrfClaimSeqNbr(prfClaimSeqNbr);", "//", "PK", "setting", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-1.", "insert", "_getAsAprslPrfClaimSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoCache,", "aprslImpl,", "prfClaimSeqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-2.", "update", "_getAsAprslPrfClaimSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "boolean", "isValid(String", "type)", "{", "return", "(", "\"D\".equalsIgnoreCase(type)", "||", "\"M\".equalsIgnoreCase(type)", "||", "\"T\".equalsIgnoreCase(type)", ")", ";", "//added", "by", "Roh(change", "to", "simplify)", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "int", "delete(String", "clHrarcyId)", "{", "return", "_getCmClHrarcyM().delete(clHrarcyId);", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "String", "cd", "=", "\"\";", "if(supplInfoVal.get(CCM03.CD)", "!=", "null)", "{", "cd", "=", "supplInfoVal.get(CCM03.CD).toString();", "}", "CmKrStutDongCdMIO", "cmKrStutDongCdMIO", "=", "_getCmKrStutDongCdMDso().selectCheckCode(AddrHrarcyEnum.KOREA_STATUTORY_DONG_CODE.getValue(),", "cd);", "if(cmKrStutDongCdMIO", "==", "null)", "{", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["public", "void", "saveAssetCustRelXtnInfo(AssetCustRelXtnInfoSaveIn", "xtnInfoSaveIn)", "throws", "BizApplicationException{", "_getAssetCustRelBiz().saveRelXtnInfo(this,", "xtnInfoSaveIn);", "}"], "docstring_tokens": ["Save", "the", "extended", "information", "for", "relation", "between", "asset", "and", "customer."]}
{"code_tokens": ["public", "void", "terminateArrRprsnRelation(ArrRprsnRelTrmntnIn", "in,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "//", "\uacc4\uc57d", "\uad00\uacc4", "\uc8fc\uc81c\uc601\uc5ed", "\ubbf8\uc0ac\uc6a9", "\uc2dc", "skip", "if", "(!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.RELATED_PERSON_RELATION)", "||", "ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())", ")", "{", "return;", "}", "//", "\uc785\ub825\uac80\uc99d", "_checkInput(in,arrReal);", "//", "\uac70\ub798\uc0dd\uc131\uc5ec\ubd80", "\uac80\uc99d", "_getArrCmnUtil().validateArrTxExist(arrReal,", "in.getTxDt(),", "in.getTxSeqNbr());", "//", "\ud65c\ub3d9\uc911\uc778", "\uacc4\uc57d\uad00\ub828\uc778\uad00\uacc4", "\uc870\ud68c", "//", "\uc885\ub8cc\ud560", "\uacc4\uc57d\uad00\ub828\uc778\uad00\uacc4\uac00", "\uc5c6\ub294", "\uacbd\uc6b0", "\uc5d0\ub7ec\ucc98\ub9ac", "ArArrRprsnRIO", "arArrRprsnRIO", "=", "_getArArrRprsnRDso().selectEffective(arrReal.getInstCd(),", "arrReal.getArrId(),", "in.getRprsnId(),", "in.getArrRprsnRelCd(),", "_getInqBaseDt(null));", "if", "(arArrRprsnRIO", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPARE0056\",", "null);", "}", "//", "\uacc4\uc57d\uad00\ub828\uc778\uad00\uacc4", "\uc0c1\ud0dc", "\uac31\uc2e0", "//", "1)", "'\uad00\uacc4\uc2dc\uc791\uc77c", "<", "\uad00\uacc4\uc885\ub8cc\uc77c'\uc778", "\uacbd\uc6b0,", "'\ud574\uc9c0'", "\uc0c1\ud0dc\ub85c", "\ubcc0\uacbd", "//", "2)", "'\uad00\uacc4\uc2dc\uc791\uc77c", "=", "\uad00\uacc4\uc885\ub8cc\uc77c'\uc778", "\uacbd\uc6b0,", "'\ubb34\uc2dc'", "\uc0c1\ud0dc\ub85c", "\ubcc0\uacbd", "//", "3)", "'\uad00\uacc4\uc2dc\uc791\uc77c", ">", "\uad00\uacc4\uc885\ub8cc\uc77c'\uc778", "\uacbd\uc6b0", "\uc5d0\ub7ec\ucc98\ub9ac", "if", "(arArrRprsnRIO.getRelStartDt().compareTo(in.getRelEndDt())", "<", "0)", "{", "arArrRprsnRIO.setArrRprsnRelStsCd(ArrRelStsEnum.TERMINATED.getValue());", "}", "else", "if", "(arArrRprsnRIO.getRelStartDt().compareTo(in.getRelEndDt())", "==", "0)", "{", "arArrRprsnRIO.setArrRprsnRelStsCd(ArrRelStsEnum.IGNORED.getValue());", "}", "else", "{", "throw", "new", "BizApplicationException(\"AAPARE0046\",", "null);", "}", "//", "\uacc4\uc57d\uad00\ub828\uc778\uad00\uacc4", "\uc885\ub8cc\uc77c", "\uac31\uc2e0", "String", "bfChngRelEndDt", "=", "arArrRprsnRIO.getRelEndDt();", "arArrRprsnRIO.setRelEndDt(in.getRelEndDt());", "_getCmnContextCore().setHeaderColumn(arArrRprsnRIO);", "_getArArrRprsnRDso().updateStatus(arArrRprsnRIO);", "//", "\uacc4\uc57d\uad00\ub828\uc778\uad00\uacc4", "\uc0c1\ud0dc\uc774\ub825", "\uc800\uc7a5", "_insertArrRprsnRelStsHistory(arArrRprsnRIO,", "in.getRelEndDt(),", "bfChngRelEndDt,", "in.getArrRprsnRelStsChngRsnCd(),", "in.getTxDt(),", "in.getTxSeqNbr());", "}"], "docstring_tokens": ["Terminate", "arrangement", "customer", "related", "person", "relationship."]}
{"code_tokens": ["public", "CaSysIntrfcInfoInsertResultOut", "clone(){", "try{", "CaSysIntrfcInfoInsertResultOut", "object=", "(CaSysIntrfcInfoInsertResultOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "LnRpymntSvcRpymntInfoIn", "clone(){", "try{", "LnRpymntSvcRpymntInfoIn", "object=", "(LnRpymntSvcRpymntInfoIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Staff", "getStaffMngrInfo()", "throws", "BizApplicationException", "{", "Staff", "tempStaff", "=", "_getStaffMngr().getStaff(_getCmnContext().getStaffId());", "return", "tempStaff;", "}"], "docstring_tokens": ["Methods", "to", "query", "Staff", "Manager", "Information"]}
{"code_tokens": ["public", "AssetBsicInfoIO", "getBasicInfo()", "throws", "BizApplicationException", "{", "if(assetBasicCache", "==", "null)", "{", "return", "null;", "}", "AssetBsicInfoIO", "assetBsicInfoIO", "=", "new", "AssetBsicInfoIO();", "DtoCoreUtils.setSubInfoIO(assetBasicCache,", "assetBsicInfoIO);", "return", "assetBsicInfoIO;", "}"], "docstring_tokens": ["It", "inquires", "basic", "information", "of", "security", "interest."]}
{"code_tokens": ["public", "CaDataVldtnMgmtSvcGetDataVldtnInfoOut", "clone(){", "try{", "CaDataVldtnMgmtSvcGetDataVldtnInfoOut", "object=", "(CaDataVldtnMgmtSvcGetDataVldtnInfoOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustRprsnInqrySvcCtcptXtnOut", "clone(){", "try{", "CustRprsnInqrySvcCtcptXtnOut", "object=", "(CustRprsnInqrySvcCtcptXtnOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaRoleStaffOut", "clone(){", "try{", "CaRoleStaffOut", "object=", "(CaRoleStaffOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "saveExtendsAttribute(CaTblExtendAtrbtIO", "in)", "throws", "BizApplicationException", "{", "//", "\uae30\uad00\ucf54\ub4dc,", "\ud14c\uc774\ube14\uba85,", "\uc18d\uc131\uba85\uc740", "\ud544\uc218\ub85c", "\uc785\ub825", "\ubc1b\uc544\uc57c", "\ud55c\ub2e4.", "_checkInputValue(in.getInstCd(),", "CCM03.INST_CD);", "_checkInputValue(in.getTblNm(),", "CCM03.TBL_NM);", "_checkInputValue(in.getAtrbtNm(),", "CCM03.ATRBT_NM);", "_checkInputValue(in.getXtnAtrbtVrtnCmpsCd(),", "CCM03.XTN_ATRBT_VRTN_CMPS_CD);", "_checkInputValue(in.getRmkCntnt(),", "CCM03.RMK_CNTNT);", "if(!StringUtils.isEmpty(in.getAtrbtVldtnXtnRuleCntnt()))", "{", "_checkSimpleExtendValidationRule(in.getAtrbtVldtnXtnRuleCntnt());", "}", "//", "\uac80\uc99d\ubc29\ubc95\ucf54\ub4dc\uc640", "\uaddc\uce59", "\uac80\uc99d", "_getAtrbtChk().isValidByValidationWayCodeAndRule(in.getAtrbtVldtnWayCd(),", "in.getAtrbtVldtnRuleCntnt());", "//", "\ud655\uc7a5\uaddc\uce59", "\uac80\uc99d", "_getAtrbtChk().isValidValidationExtendRule(in.getAtrbtVldtnXtnRuleCntnt());", "//", "\uae30\uc874", "\ud14c\uc774\ube14\ud655\uc7a5\uc18d\uc131\uba85\uc138", "\uc870\ud68c", "CaCmTblXtnAtrDIO", "inquiryResult", "=", "_getCmTblXtnAtrDDso().select(in.getInstCd(),", "in.getTblNm(),", "in.getAtrbtNm());", "if(inquiryResult", "==", "null){", "//", "\uc5c6\uc73c\uba74", "\uc5d0\ub7ec\ucc98\ub9ac", ">>", "\ud45c\uc900\uc18d\uc131\uac80\uc99d\uc774", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\ud45c\uc900\uc18d\uc131\uac80\uc99d\uc744", "\ub4f1\ub85d", "\ud558\uc2ed\uc2dc\uc624.", "throw", "new", "BizApplicationException(\"AAPCME0218\",", "new", "Object[]", "{});", "}", "String", "tempXtnAtrbtVrtnCmpsCd", "=", "\"\";", "//", "\ud655\uc7a5\uc18d\uc131\ubcc0\ud615\uad6c\uc131\ucf54\ub4dc", "tempXtnAtrbtVrtnCmpsCd", "=", "inquiryResult.getXtnAtrbtVrtnCmpsCd();", "_getCaCmnContext().setHeaderColumn(inquiryResult);", "//", "\uc870\ud68c\ub41c\uac12\uc5d0", "\ud14c\uc774\ube14\ud655\uc7a5\uc18d\uc131", "\uac80\uc99d", "\uc815\ubcf4", "\uc124\uc815", "inquiryResult.setAtrbtVldtnWayCd(in.getAtrbtVldtnWayCd());", "//", "\uc18d\uc131\uac80\uc99d\ubc29\ubc95\ucf54\ub4dc", "inquiryResult.setAtrbtVldtnRuleCntnt(in.getAtrbtVldtnRuleCntnt());", "//", "\uc18d\uc131\uac80\uc99d\uaddc\uce59", "inquiryResult.setAtrbtVldtnXtnRuleCntnt(in.getAtrbtVldtnXtnRuleCntnt());", "//", "\uc18d\uc131\uac80\uc99d\ud655\uc7a5\uaddc\uce59", "inquiryResult.setXtnAtrbtVrtnCmpsCd(in.getXtnAtrbtVrtnCmpsCd());", "//", "\ud655\uc7a5\uc18d\uc131\ubcc0\ud615\uad6c\uc131\ucf54\ub4dc", "inquiryResult.setRmkCntnt(in.getRmkCntnt());", "//", "\ube44\uace0\ub0b4\uc6a9", "inquiryResult.setSiteLbrtryDscd(_getInstParmProvider().getInstParm(CaInstParamEnum.SITE_LABORATORY_DISTINCTION_CODE.getValue()));", "inquiryResult.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue());", "int", "result", "=", "_getCmTblXtnAtrDDso().update(inquiryResult);", "//", "\uae30\uc874", "\ud655\uc7a5\uc18d\uc131\uac80\uc99d\uc720\ud615", "\ucf54\ub4dc", "\uc640", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uac80\uc99d\uc720\ud615\ucf54\ub4dc\uac00", "\ub2e4\ub974\uba74", "\uc0c1\uc138", "\uac12\uc744", "\uc9c0\uc6b4\ub2e4.", "if(!in.getXtnAtrbtVrtnCmpsCd().equals(tempXtnAtrbtVrtnCmpsCd))", "{", "//", "CM_TBL_XTN_ATR_VRTN_CMPS_D", "_deleteExtendAttributeVariationComposition(in.getInstCd(),", "in.getTblNm(),", "in.getAtrbtNm());", "//", "CM_TBL_XTN_ATR_XTN_ATR_VAL_D", "_deleteExtendedAttributeExtendedAttributeValue(in.getInstCd(),", "in.getTblNm(),", "in.getAtrbtNm());", "}", "return", "result;", "}"], "docstring_tokens": ["Save", "table", "extend", "attribute", "validation", "Target", "table", ":", "CM_TBL_XTN_ATR_D"]}
{"code_tokens": ["public", "void", "saveSubInfo(ActorImpl", "actorImpl,", "String", "ctcptId,", "Integer", "ctcptChngSeqNbr,", "AtActorCtcptSIO", "subInfoIO)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "//", "**", "\uc5f0\ub77d\ucc98", "\ubcf4\uc870\uba85\uc138\ub294", "\ubcc0\uacbd\uc774\ub825\uc744", "\uad00\ub9ac\ud558\uc9c0", "\uc54a\ub294\ub2e4.", "AtActorCtcptSIO", "oldSubInfoIO", "=", "getSubInfoCache(actorImpl,", "ctcptId,", "ctcptChngSeqNbr);", "if", "(oldSubInfoIO", "==", "null)", "{", "//", "PK", "setting", "subInfoIO.setActorId(actorImpl.getActorId());", "subInfoIO.setActorCtcptId(ctcptId);", "subInfoIO.setActorCtcptChngSeqNbr(ctcptChngSeqNbr);", "//", "insert", "_getAtActorCtcptSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoIO,", "oldSubInfoIO))", "{", "return;", "}", "//", "PK", "setting", "subInfoIO.setActorId(actorImpl.getActorId());", "subInfoIO.setActorCtcptId(ctcptId);", "subInfoIO.setActorCtcptChngSeqNbr(ctcptChngSeqNbr);", "//", "update", "_getAtActorCtcptSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoIO,", "actorImpl,", "ctcptId,", "ctcptChngSeqNbr);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(StStlmntCalcnSIO", "stStlmntCalcnSIOIn){", "logger.debug(\"##<ST-StlmntCalcnSubInfoBiz>", "getMapSubInfo\");", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.I/F", "VO", "\uc0dd\uc131", "StlmntCalcnSubInfo", "subInfoIntrfcIO", "=", "new", "StlmntCalcnSubInfo", "();", "//", "2.DBIO", "VO", "\uc2e0\uaddc", "StStlmntCalcnSIO", "stlmntCalcnSIO", "=", "new", "StStlmntCalcnSIO();", "//", "3.DB", "\uc870\ud68c", "//selectList", "DSO\uc758", "Key:", "\uacc4\uc0b0\uadfc\uae30\uc758", "\uc0c1\uc138\uc77c\ub828\ubc88\ud638\uae4c\uc9c0\uc758", "\ud0a4\uac12\uc744", "\uc774\uc6a9\ud558\uc5ec", "\uacc4\uc0b0\uadfc\uae30", "\ubcf4\uc870\uba85\uc138\ub97c", "\uac80\uc0c9\uc2dc", "\uc0ac\uc6a9", "StStlmntCalcnSIO", "stStlmntCalcnS", "=", "_getStlmntCalcnSDso().select(stStlmntCalcnSIOIn);", "if(stStlmntCalcnS", "==", "null)", "{", "return", "null;", "}", "//", "4.DBIO", "VO", "\ub97c", "I/F", "VO\ub85c", "\ubcc0\ud658", "DtoUtils.setSubInfoIO(stStlmntCalcnS,", "subInfoIntrfcIO);", "//", "5.I/F", "VO\ub97c", "MAP\uc73c\ub85c", "\ubcc0\ud658", "for(Entry<String,Object>", "entry", ":", "subInfoIntrfcIO.getFieldValues().entrySet())", "{", "if(entry.getValue()!=null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "request", "as", "a", "map."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AprslImpl", "aprslImpl,", "Integer", "prfClaimSeqNbr)", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm)){", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttribute(xtnAtrbtNm,", "xtnAtrbtCntnt);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsAprslPrfClaimSIO", "subInfoCache", "=", "getSubInfoCache(aprslImpl,", "prfClaimSeqNbr);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsAprslPrfClaimSIO();", "subInfoCache.setAprslId(aprslImpl.getAprslBasicCache().getAprslId());", "//", "PK", "setting", "subInfoCache.setPrfClaimSeqNbr(prfClaimSeqNbr);", "//", "PK", "setting", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "2-1.", "insert", "_getAsAprslPrfClaimSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoCache,", "aprslImpl,", "prfClaimSeqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "2-2.", "update", "_getAsAprslPrfClaimSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbCnstncySvCntrlCntrTrmnlDDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "ArrRealCoreImpl", "getArrRealCore(ArrRealGetIn", "arrRealGetIn)", "throws", "BizApplicationException", "{", "return", "_getArrRealCore(arrRealGetIn,", "null);", "}"], "docstring_tokens": ["Inquire", "real", "arrangement", "using", "arrangement", "id", "(internal", "use)", "or", "business", "key", "like", "account", "number,", "application", "number", ",", "mobile", "number", "and", "so", "on.", "If", "'arrExtrnlIdNbrTp'(arrangement", "external", "identification", "number", "type)", "is", "null,", "then", "arrIdNbr", "is", "arrangement", "identification.", "If", "you", "want", "to", "get", "the", "child", "arrangements", "directly,", "passes", "account", "number", "and", "the", "nthNbr", "for", "child", "sequence", "number."]}
{"code_tokens": ["public", "boolean", "checkCode(CaCdNbrInfoIO", "in,", "String", "cd)", "throws", "BizApplicationException", "{", "String", "instCd", "=", "in.getInstCd();", "if(StringUtils.isEmpty(instCd))", "{", "instCd", "=", "_getCaCmnContext().getInstCode();", "}", "CaCmInstSbstCdDIO", "daoIn", "=", "new", "CaCmInstSbstCdDIO();", "daoIn.setInstCd(instCd);", "daoIn.setCdNbr(in.getCdNbr());", "daoIn.setCd(cd);", "daoIn.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue());", "List<CaCmInstSbstCdDIO>", "daoOutList", "=", "_getCmInstSbstCdDDso().selectListByCondition(daoIn);", "if(daoOutList", "==", "null", "||", "daoOutList.isEmpty())", "{", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value", "by", "cdDtlIO", "DTO.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(PdIntRtStrctrClCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "String", "getDeptId()", "throws", "BizApplicationException", "{", "String", "deptId", "=", "(String)CbbApplicationContext.getCbbDataContainerItem(CbbDataContainerType.APP_CM,", "CmDataContainerDefinition.CM_DETP_ID);", "if(StringCoreUtils.isEmpty(deptId))", "{", "deptId", "=", "_getContextHeader().getDeptId();", "//2018.04.30", "\ubd80\uc11cID\ub97c", "Application", "Container\uc5d0", "\ub2f4\uc544", "\ub454\ub2e4.", "CbbApplicationContext.setCbbDataContainerItem(CbbDataContainerType.APP_CM,", "CmDataContainerDefinition.CM_DETP_ID,", "deptId);", "}", "return", "deptId;", "}"], "docstring_tokens": ["Inquire", "department", "identification", "from", "basic", "information."]}
{"code_tokens": ["public", "PreScrningInsrncSts", "clone(){", "try{", "PreScrningInsrncSts", "object=", "(PreScrningInsrncSts)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<XtnCdIO>", "getListCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "List<XtnCdIO>", "xtnCdIOs", "=", "new", "ArrayList<XtnCdIO>();", "StBalTpMIO", "stBalTpMIO", "=", "new", "StBalTpMIO();", "String", "lngCd", "=", "supplInfoVal", "==", "null", "?", "null", ":", "String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue()));", "List<StBalTpMIO>", "balTpList", "=", "_getStBalTpCdDso().selectListStBalTpCd(stBalTpMIO);", "if(balTpList", "==", "null", "||", "balTpList.isEmpty())", "{", "return", "xtnCdIOs;", "}", "for(StBalTpMIO", "out", ":", "balTpList)", "{", "XtnCdIO", "xtnCdIO", "=", "new", "XtnCdIO();", "xtnCdIO.setCd(out.getBalTpCd());", "if(StringUtils.isEmpty(lngCd))", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CdNbrEnum.BALANCE_TYPE_CD.getValue()+out.getBalTpCd()));", "}", "else", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CdNbrEnum.BALANCE_TYPE_CD.getValue()+out.getBalTpCd(),", "lngCd));", "}", "xtnCdIOs.add(xtnCdIO);", "}", "return", "xtnCdIOs;", "}"], "docstring_tokens": ["Make", "the", "combo-box", "of", "Code", "that", "meet", "the", "search", "condition.", "Combo-box", "is", "consisted", "of", "CaCmnCdCheckOut.", "(cdNbr,", "cd,", "cdNm,", "delYn,", "cdAbrvtnNm)"]}
{"code_tokens": ["public", "CaExtrnlIntrfcMsgInfoMgmtListOut", "getListExtrnlInstMsgMapInfo(String", "instCd,", "String", "extrnlInstCd,", "String", "extrnlInstTxDscd,", "int", "pgNbr,", "int", "pgCnt)", "{", "logger.debug(\"", "============", "getListExtrnlInstMsgMapInfo", "START", "==============\");", "CaExtrnlIntrfcMsgInfoMgmtOut", "extrnlIntrfcMsgInfoMgmtOut", "=", "null;", "List<CaExtrnlIntrfcMsgInfoMgmtOut>", "extrnlIntrfcMsgInfoOutList", "=", "new", "ArrayList<CaExtrnlIntrfcMsgInfoMgmtOut>();", "CaExtrnlIntrfcMsgInfoMgmtListOut", "out", "=", "new", "CaExtrnlIntrfcMsgInfoMgmtListOut();", "/**", "*", "pgCnt,", "pgNbr", "\ucc98\ub9ac", "*/", "Integer", "pageOffset", "=", "PaginationUtils.getPgOffset(pgNbr,", "pgCnt);", "/**", "*", "\uc804\ubb38\uc815\ubcf4\uc870\ud68c", "*/", "List<CaXpExtrnlIntrfcMsgInfoDIO>", "xpExtrnlIntrfcMsgInfoDIOList", "=", "_getXpExtrnlMsgInfoDDso().selectListMsgInfo(instCd,", "extrnlInstCd,", "extrnlInstTxDscd,", "pageOffset,", "pgCnt);", "/**", "*", "\ucd9c\ub825", "\uc870\ub9bd", "*/", "for(CaXpExtrnlIntrfcMsgInfoDIO", "xpExtrnlIntrfcMsgInfoDIOOut", ":", "xpExtrnlIntrfcMsgInfoDIOList)", "{", "extrnlIntrfcMsgInfoMgmtOut", "=", "new", "CaExtrnlIntrfcMsgInfoMgmtOut();", "//", "Generated", "by", "code", "generator", "[[", "extrnlIntrfcMsgInfoMgmtOut.setInstCd(xpExtrnlIntrfcMsgInfoDIOOut.getInstCd());//", "set", "[\uae30\uad00\ucf54\ub4dc]", "extrnlIntrfcMsgInfoMgmtOut.setExtrnlInstCd(xpExtrnlIntrfcMsgInfoDIOOut.getExtrnlInstCd());//", "set", "[\ub300\uc678\uae30\uad00\ucf54\ub4dc]", "extrnlIntrfcMsgInfoMgmtOut.setExtrnlInstTxDscd(xpExtrnlIntrfcMsgInfoDIOOut.getExtrnlInstTxDscd());//", "set", "[\ub300\uc678\uae30\uad00\uac70\ub798\uad6c\ubd84\ucf54\ub4dc]", "extrnlIntrfcMsgInfoMgmtOut.setMsgInpOutpDscd(xpExtrnlIntrfcMsgInfoDIOOut.getMsgInpOutpDscd());//", "set", "[\uc804\ubb38\uc785\ub825\ucd9c\ub825\uad6c\ubd84\ucf54\ub4dc]", "extrnlIntrfcMsgInfoMgmtOut.setMsgFldLvlVal(xpExtrnlIntrfcMsgInfoDIOOut.getMsgFldLvlVal());//", "set", "[\uc804\ubb38\ud544\ub4dc\ub808\ubca8\uac12]", "extrnlIntrfcMsgInfoMgmtOut.setSrcFldKeyVal(xpExtrnlIntrfcMsgInfoDIOOut.getSrcFldKeyVal());//", "set", "[\uc18c\uc2a4\ud544\ub4dc\ud0a4\uac12]", "extrnlIntrfcMsgInfoMgmtOut.setTrgtFldKeyVal(xpExtrnlIntrfcMsgInfoDIOOut.getTrgtFldKeyVal());//", "set", "[\ub300\uc0c1\ud544\ub4dc\ud0a4\uac12]", "extrnlIntrfcMsgInfoMgmtOut.setFldCnstntVal(xpExtrnlIntrfcMsgInfoDIOOut.getFldCnstntVal());//", "set", "[\ud544\ub4dc\uc0c1\uc218\uac12]", "extrnlIntrfcMsgInfoMgmtOut.setFldValSettingDscd(xpExtrnlIntrfcMsgInfoDIOOut.getFldValSettingDscd());//", "set", "[\ud544\ub4dc\uac12\uc124\uc815\uad6c\ubd84\ucf54\ub4dc]", "extrnlIntrfcMsgInfoMgmtOut.setFldTpDscd(xpExtrnlIntrfcMsgInfoDIOOut.getFldTpDscd());//", "set", "[\ud544\ub4dc\uc720\ud615\uad6c\ubd84\ucf54\ub4dc]", "extrnlIntrfcMsgInfoMgmtOut.setCdMappingDscd(xpExtrnlIntrfcMsgInfoDIOOut.getCdMappingDscd());//", "set", "[\ucf54\ub4dc\ub9e4\ud551\uad6c\ubd84\ucf54\ub4dc]", "extrnlIntrfcMsgInfoMgmtOut.setCnvrsnMthdDscd(xpExtrnlIntrfcMsgInfoDIOOut.getCnvrsnMthdDscd());//", "set", "[\ubcc0\ud658\ubc29\uc2dd\uad6c\ubd84\ucf54\ub4dc]", "extrnlIntrfcMsgInfoMgmtOut.setCnvrsnDlmtrVal(xpExtrnlIntrfcMsgInfoDIOOut.getCnvrsnDlmtrVal());//", "set", "[\ubcc0\ud658\uad6c\ubd84\uc790\uac12]", "extrnlIntrfcMsgInfoMgmtOut.setCnvrsnStartVal(xpExtrnlIntrfcMsgInfoDIOOut.getCnvrsnStartVal());//", "set", "[\ubcc0\ud658\uc2dc\uc791\uac12]", "extrnlIntrfcMsgInfoMgmtOut.setCnvrsnEndVal(xpExtrnlIntrfcMsgInfoDIOOut.getCnvrsnEndVal());//", "set", "[\ubcc0\ud658\uc885\ub8cc\uac12]", "extrnlIntrfcMsgInfoMgmtOut.setHigherFldKeyVal(xpExtrnlIntrfcMsgInfoDIOOut.getHigherFldKeyVal());//", "set", "[\uc0c1\uc704\ud544\ub4dc\ud0a4\uac12]", "extrnlIntrfcMsgInfoMgmtOut.setMndtryYn(xpExtrnlIntrfcMsgInfoDIOOut.getMndtryYn());//", "set", "[\ud544\uc218\uc5ec\ubd80]", "extrnlIntrfcMsgInfoMgmtOut.setUseYn(xpExtrnlIntrfcMsgInfoDIOOut.getUseYn());//", "set", "[\uc0ac\uc6a9\uc5ec\ubd80]", "extrnlIntrfcMsgInfoMgmtOut.setMsgItmSeq(xpExtrnlIntrfcMsgInfoDIOOut.getMsgItmSeq());//", "set", "[\uc804\ubb38\ud56d\ubaa9\uc21c\uc11c]", "extrnlIntrfcMsgInfoMgmtOut.setMsgItmDtlsSeq(xpExtrnlIntrfcMsgInfoDIOOut.getMsgItmDtlsSeq());//", "set", "[\uc804\ubb38\ud56d\ubaa9\uc138\ubd80\uc21c\uc11c]", "extrnlIntrfcMsgInfoMgmtOut.setLastChngTmstmp(xpExtrnlIntrfcMsgInfoDIOOut.getLastChngTmstmp());//", "set", "[\ucd5c\uc885\ubcc0\uacbd\ud0c0\uc784\uc2a4\ud0ec\ud504]", "extrnlIntrfcMsgInfoMgmtOut.setLastChngGuid(xpExtrnlIntrfcMsgInfoDIOOut.getLastChngGuid());//", "set", "[\ucd5c\uc885\ubcc0\uacbdGUID]", "//", "Generated", "by", "code", "generator", "]]", "extrnlIntrfcMsgInfoOutList.add(extrnlIntrfcMsgInfoMgmtOut);", "}", "out.setExtrnlIntrfcMsgInfoMgmtOut(extrnlIntrfcMsgInfoOutList);", "return", "out;", "}"], "docstring_tokens": ["It", "gets", "mapping", "information", "of", "message", "about", "one", "specific", "message."]}
{"code_tokens": ["public", "DeptRoleChngSvcIn", "clone(){", "try{", "DeptRoleChngSvcIn", "object=", "(DeptRoleChngSvcIn)super.clone();", "if", "(", "this.deptRoleList==", "null", ")", "object.deptRoleList", "=", "null;", "else{", "java.util.List<bankware.corebanking.department.rolemanagement.service.dto.DeptRoleChngSvcInSub>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.department.rolemanagement.service.dto.DeptRoleChngSvcInSub>(deptRoleList.size());", "for(", "bankware.corebanking.department.rolemanagement.service.dto.DeptRoleChngSvcInSub", "item", ":", "deptRoleList", "){", "clonedList.add(", "(bankware.corebanking.department.rolemanagement.service.dto.DeptRoleChngSvcInSub)item.clone());", "}", "object.deptRoleList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "LnArrCndChngInqryOut", "clone(){", "try{", "LnArrCndChngInqryOut", "object=", "(LnArrCndChngInqryOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<PdTxSrvcIO>", "getListPdTpCd(PdTxSrvcIO", "in)", "throws", "BizApplicationException", "{", "return", "_convertPdTxSvcIOList2PdTxSrvcIOList(_convertPdTypeOutListToPdTxSvcIOList(_getListPdTpCdCmb(in)));", "}"], "docstring_tokens": ["Methods", "to", "query", "product", "type", "information"]}
{"code_tokens": ["public", "DeptRoleChngSvcInSub", "clone(){", "try{", "DeptRoleChngSvcInSub", "object=", "(DeptRoleChngSvcInSub)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "registerAprslThing(AprslThingCrtnIn", "in)", "throws", "BizApplicationException", "{", "//", "1.", "\ud655\uc7a5\uc815\ubcf4\uc640", "\ubcf4\uc870\uba85\uc138", "\ubd84\ub9ac", "Map<String,", "String>", "subInfoMap", "=", "_getAprslThingSubInfoBiz().getMapSubInfoCrtn(in.getAprslThingXtnList());", "//", "2.", "\uac10\uc815\ubb3c\uac74", "\ub4f1\ub85d", "int", "thingSeqNbr", "=", "super.registerAprslThing(in);", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uc800\uc7a5", "_getAprslThingSubInfoBiz().saveMapSubInfo(subInfoMap,", "this,", "thingSeqNbr);", "return", "thingSeqNbr;", "}"], "docstring_tokens": ["Register", "the", "thing", "information", "for", "the", "appraisal."]}
{"code_tokens": ["public", "List<ArrReal>", "getChildren()", "throws", "BizApplicationException", "{", "return", "_getArrXtnUtil().convertArrRealList(super.getChildrenCore());", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "child", "arrangement."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "{", "for", "(ExRtKndCdEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(CustLmtChngDsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"APATE0028\",", "new", "Object[]", "{value,", "\"@custLmtChngDscd\"});", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"TerminateDeposit\":", "case", "\"TerminationLoan\":", "case", "\"PartialWithdrawal\":", "_doTerminationAction(", ");", "return;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["This", "function", "execute", "the", "extended", "attribute", "business", "rules", "that", "registered", "in", "the", "Contract", "Services", "Processing", "Rules."]}
{"code_tokens": ["public", "CaDeptRoleTmpltSvcRgstIn", "clone(){", "try{", "CaDeptRoleTmpltSvcRgstIn", "object=", "(CaDeptRoleTmpltSvcRgstIn)super.clone();", "if", "(", "this.deptRoleTmpltList==", "null", ")", "object.deptRoleTmpltList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaDeptRoleTmpltSvcRgstDtlIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaDeptRoleTmpltSvcRgstDtlIn>(deptRoleTmpltList.size());", "for(", "bankware.corebanking.configurationadmin.actor.service.dto.CaDeptRoleTmpltSvcRgstDtlIn", "item", ":", "deptRoleTmpltList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.actor.service.dto.CaDeptRoleTmpltSvcRgstDtlIn)item.clone());", "}", "object.deptRoleTmpltList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "getPdCnddBnftAplyInfoCount(PdCnddBnftAplyMIn", "in)", "throws", "BizApplicationException", "{", "int", "result", "=", "0;", "PdCnddBnftAplyMIO", "pdCnddBnftAplyMIO", "=", "new", "PdCnddBnftAplyMIO();", "pdCnddBnftAplyMIO.setTntInstId(_getCmnContext().getInstCode());", "pdCnddBnftAplyMIO.setCustId(in.getCustId());", "pdCnddBnftAplyMIO.setBnftCd(in.getBnftCd());", "pdCnddBnftAplyMIO.setMrchntNbr(in.getMrchntNbr());", "pdCnddBnftAplyMIO.setMrchntNbrList(in.getMrchntNbrList());", "pdCnddBnftAplyMIO.setMrchntNbrListCount(in.getMrchntNbrList().size());", "pdCnddBnftAplyMIO.setBaseDt(", "PdUtil.parseYyyyMMddHHmmssToDate(_getCmnContext().getTxDate(),", "_getCmnContext().getTxTime()));", "pdCnddBnftAplyMIO.setAplyStartDt(PdUtil.parseStringToDate(in.getAplyStartDt()));", "pdCnddBnftAplyMIO.setAplyEndDt(PdUtil.parseStringToDate(in.getAplyEndDt()));", "pdCnddBnftAplyMIO.setPdTmpltCdList(in.getPdTmpltCdList());", "pdCnddBnftAplyMIO.setPdTmpltCdListCount(in.getPdTmpltCdList().size());", "//\ubcf8\uc810\uc5d0\uc11c", "\ubc1c\uae09\ud55c\uac83", "\ubb34\uc870\uac74", "\ud3ec\ud568\ud55c\ub2e4.", "pdCnddBnftAplyMIO.setMrchntTpCd(PdMerchantTypeDscdCoreEnum.ALL_MERCHANT.getValue());", "pdCnddBnftAplyMIO.setBrnchCd(in.getBrnchCd());", "if", "(BaBnftIssmdaStsCdCoreEnum.UNUSED.getValue().equals(in.getCouponStsCd()))", "{", "List<PdCnddBnftAplyMIO>", "pdCnddBnftAplyMIOOutList", "=", "_getPdServiceDso()", ".selectBaCnddBnftAplyInfoUnused(pdCnddBnftAplyMIO);", "int", "listSize", "=", "pdCnddBnftAplyMIOOutList.size();", "for", "(int", "i", "=", "0;", "i", "<", "listSize;", "i++)", "{", "//\ud61c\ud0dd\uc801\uc6a9\uc77c\ub828\ubc88\ud638", "=", "0", "->", "\uc804\uac00\ub9f9\uc810", "\ucfe0\ud3f0", "if", "(pdCnddBnftAplyMIOOutList.get(i).getBnftAplySeqNbr()", "==", "0)", "{", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(pdCnddBnftAplyMIOOutList.get(i).getBnftCd());", "bfIn.setAplyDt(PdUtil.parseDateToYYYYMMDD(pdCnddBnftAplyMIOOutList.get(i).getAplyStartDt()));", "bfIn.setAplyTm(PdUtil.parseDateToHHMMSS(pdCnddBnftAplyMIOOutList.get(i).getAplyStartDt()));", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//\ucfe0\ud3f0\ucd1d\uc218\ub7c9(N0090)", "-", "\ud574\ub2f9", "\ucfe0\ud3f0\uc758", "\ucd1d", "\ubc1c\uae09\uc218\ub7c9(\uc801\uc6a9\uc6d0\uc7a5\uc5d0", "\ub4e4\uc5b4\uac00\uc788\ub294\uc218)", ">", "0", "BfCnd", "bfCndN0090", "=", "bf.getCnd(PdCndCoreEnum.COUPON_TOTAL_CNT.getValue());", "if", "(bfCndN0090.isAvailable())", "{", "SmplRngCndVal", "totCouponCnt", "=", "(SmplRngCndVal)", "bfCndN0090.getCndVal();", "PdBnftAplyMIO", "pdBnftAplyMIO", "=", "new", "PdBnftAplyMIO();", "pdBnftAplyMIO.setTntInstId(_getCmnContext().getInstCode());", "//pdBnftAplyMIO.setCustId(in.getCustId());", "pdBnftAplyMIO.setBnftCd(pdCnddBnftAplyMIOOutList.get(i).getBnftCd());", "int", "usedCount", "=", "_getPdServiceDso().selectBnftAplyInfoCount(pdBnftAplyMIO);", "BigDecimal", "leftTotCnt", "=", "totCouponCnt.getMaxVal().subtract(new", "BigDecimal(usedCount));", "if", "(leftTotCnt.compareTo(BigDecimal.ZERO)", "<=", "0)", "{", "pdCnddBnftAplyMIOOutList.remove(i);", "listSize--;", "i--;", "continue;", "}", "}", "//\uc778\ub2f9\ubc1c\uae09\uac00\ub2a5\ucfe0\ud3f0\uc218(N0091)", "-", "\ud574\ub2f9\uace0\uac1d\uc774", "\ud574\ub2f9\ucfe0\ud3f0\uc744", "\ubc1c\uae09\ubc1b\uc740", "\uc218\ub7c9(\uc801\uc6a9\uc6d0\uc7a5\uc5d0", "\ub4e4\uc5b4\uac00\uc788\ub294", "\ud574\ub2f9", "\uace0\uac1d\uc758", "\ud574\ub2f9\ucfe0\ud3f0\uc758", "\uc218)", ">0", "BfCnd", "bfCndN0091", "=", "bf.getCnd(PdCndCoreEnum.ISSUABLE_COUPON_CNT_PER_PERSON.getValue());", "if", "(bfCndN0091.isAvailable())", "{", "SmplRngCndVal", "couponCntRerPerson", "=", "(SmplRngCndVal)", "bfCndN0091.getCndVal();", "PdBnftAplyMIO", "pdBnftAplyMIO", "=", "new", "PdBnftAplyMIO();", "pdBnftAplyMIO.setTntInstId(_getCmnContext().getInstCode());", "pdBnftAplyMIO.setCustId(in.getCustId());", "pdBnftAplyMIO.setBnftCd(pdCnddBnftAplyMIOOutList.get(i).getBnftCd());", "int", "usedCount", "=", "_getPdServiceDso().selectBnftAplyInfoCount(pdBnftAplyMIO);", "BigDecimal", "leftTotCndPerPerson", "=", "couponCntRerPerson.getMaxVal()", ".subtract(new", "BigDecimal(usedCount));", "if", "(leftTotCndPerPerson.compareTo(BigDecimal.ZERO)", "<=", "0)", "{", "pdCnddBnftAplyMIOOutList.remove(i);", "listSize--;", "i--;", "continue;", "}", "}", "else", "{", "//\uc870\uac74\uc774", "\uc815\uc758\ub418\uc9c0", "\uc54a\uc558\ub2e4\uba74", "1\ubc88\ub9cc", "\uc0ac\uc6a9\uac00\ub2a5", "PdBnftAplyMIO", "pdBnftAplyMIO", "=", "new", "PdBnftAplyMIO();", "pdBnftAplyMIO.setTntInstId(_getCmnContext().getInstCode());", "pdBnftAplyMIO.setCustId(in.getCustId());", "pdBnftAplyMIO.setBnftCd(pdCnddBnftAplyMIOOutList.get(i).getBnftCd());", "int", "usedCount", "=", "_getPdServiceDso().selectBnftAplyInfoCount(pdBnftAplyMIO);", "if", "(usedCount", ">", "0)", "{", "pdCnddBnftAplyMIOOutList.remove(i);", "listSize--;", "i--;", "continue;", "}", "}", "}", "}", "result", "=", "pdCnddBnftAplyMIOOutList.size();", "}", "else", "if", "(BaBnftIssmdaStsCdCoreEnum.USED.getValue().equals(in.getCouponStsCd()))", "{", "result", "=", "_getPdServiceDso().selectBaCnddBnftAplyInfoUsedCount(pdCnddBnftAplyMIO);", "}", "else", "{", "result", "=", "_getPdServiceDso().selectBaCnddBnftAplyInfoCount(pdCnddBnftAplyMIO);", "}", "return", "result;", "}"], "docstring_tokens": ["Methods", "to", "query", "the", "number", "of", "coupons"]}
{"code_tokens": ["public", "TermDpstPsblIntPymntCntSvcOut", "clone(){", "try{", "TermDpstPsblIntPymntCntSvcOut", "object=", "(TermDpstPsblIntPymntCntSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "registerArrTxXtnInfo(StTxXtnInfoDIO", "sqlIn,", "ArrRealCore", "arr)", "throws", "BizApplicationException{", "switch(ArrTxKndCoreEnum.getEnum(getArrTxKnd(arr)))", "{", "case", "ARR_TX_INTERNAL:", "_getStTxIntrnlXtnInfoDDso().insert(sqlIn);", "break;", "case", "ARR_TX_TEMPRARY:", "_getStTxTmpryXtnInfoDDso().insert(sqlIn);", "break;", "case", "ARR_TX_NORMAL:", "_getStTxXtnInfoDDso().insert(sqlIn);", "break;", "default", ":", "throw", "new", "BizApplicationException(\"AAPSTE0212\");", "}", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "registration", "extended", "information(EAV)", "of", "transaction."]}
{"code_tokens": ["public", "void", "validate(String", "arrSrvcCd,", "ArrRealCore", "arrReal,", "CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "if", "(_getLnOvrduInfoProvider().isOverdue((ArrReal)arrReal,", "ArrCmnUtil.getRckngDt(_getCmnContext()))){", "//Arrangement", "is", "in", "overdue.", "This", "service", "({0})", "could", "not", "be", "finished", "properly", "//\uacc4\uc57d\uc774", "\uc5f0\uccb4\uc0c1\ud0dc\uc785\ub2c8\ub2e4.", "\ubcf8\uc11c\ube44\uc2a4({0})", "\uc2e4\ud589\uc774", "\ubd88\uac00", "\ud569\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0295\",", "new", "Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)});", "}", "}"], "docstring_tokens": ["Inquire", "whether", "if", "arrangement", "issued", "media", "is", "effective.", "Not", "available", "status", "for", "transaction", ":", "Arrangement", "issued", "media", "status", "is", "Suspended,", "Terminated,", "Canceled", "or", "active", "service", "blocking", "is", "regisetered", "on", "the", "media"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm)){", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ArrSubInfoKndEnum", "subInfoKnd", "=", "arrRealImpl.getSubInfoKnd();", "//", "2.", "\uacc4\uc57d\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(arrRealImpl);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"arrId\",", "arrRealImpl.getArrId());", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "save", "cache", "arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(),", "subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "appraisal", "subsidiary", "information."]}
{"code_tokens": ["public", "CnsltnSrchSvcGetSts", "clone(){", "try{", "CnsltnSrchSvcGetSts", "object=", "(CnsltnSrchSvcGetSts)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapAsmXtnInfo(AsmCoreImpl", "asm)throws", "BizApplicationException", "{", "return", "_getMapXtnInfoCache(asm);", "}", "/**", "*", "\uc2ec\uc0ac\ud655\uc7a5\uc815\ubcf4", "\ub4f1\ub85d", "*", "<pre>", "*", "</pre>", "*", "@param", "asmId", ":", "(required)", "\uc2ec\uc0ac\uc2dd\ubcc4\uc790", "*", "@param", "asmXtnInfoEnumCd", ":", "(required)", "\uc2ec\uc0ac\ud655\uc7a5\uc815\ubcf4Enum", "*", "@param", "xtnAtrbtCntnt", ":", "\uc2ec\uc0ac\ud655\uc7a5\uc18d\uc131\uac12", "*", "@return", "*", "@throws", "BizApplicationException", "*/", "//", "public", "void", "registerAsmXtnInfo(AsmCoreImpl", "asm,", "String", "asmXtnInfoEnumCd,", "String", "xtnAtrbtCntnt,", "boolean", "isEavOnly)throws", "BizApplicationException", "{", "//", "//1.\uc785\ub825", "\ud544\uc218\uc785\ub825", "\uccb4\ud06c", "-", "\uc2ec\uc0ac\uc2dd\ubcc4\uc790,\ud655\uc7a5\uc18d\uc131\uba85", "//", "if", "(", "asm.getBasicInfo().getAsmId()", "==", "null", "||", "StringCoreUtils.isEmpty(asm.getBasicInfo().getAsmId()))", "//", "{", "//", "//", "{0}\uc740/\ub294", "\ud544\uc218", "\uc785\ub825", "\ud56d\ubaa9\uc785\ub2c8\ub2e4.", "//", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]{\"\uc2ec\uc0ac\uc2dd\ubcc4\uc790\"});", "//", "}", "//", "//", "if", "(asmXtnInfoEnumCd", "==", "null", "||", "asmXtnInfoEnumCd.isEmpty())", "//", "{", "//", "//", "{0}\uc740/\ub294", "\ud544\uc218", "\uc785\ub825", "\ud56d\ubaa9\uc785\ub2c8\ub2e4.", "//", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]{\"\uc2ec\uc0ac\ud655\uc7a5\uc18d\uc131\uba85\"});", "//", "}", "//", "//", "if(isEavOnly)", "{", "//", "//", "//2.\uc785\ub825\uac12", "\uc14b\ud305", "//", "AmAsmXtnInfoDIO", "amAsmXtnInfoDIO", "=", "new", "AmAsmXtnInfoDIO();", "//", "//", "amAsmXtnInfoDIO.setInstCd(_getCmnContextCore().getInstCode());", "//", "amAsmXtnInfoDIO.setAsmId(asm.getBasicInfo().getAsmId());", "//", "modify", "by", "mh", "2020.02.25(method\ud30c\ub77c\ubbf8\ud130", "\uc218\uc815", ")->\uc2ec\uc0ac\uac1d\uccb4", "\ubc1b\uc74c\uc73c\ub85c", "\uac1d\uccb4\uc5d0\uc11c", "ID\uc870\ud68c\ud568", "//", "amAsmXtnInfoDIO.setXtnAtrbtNm(", "asmXtnInfoEnumCd", ");", "//", "amAsmXtnInfoDIO.setXtnAtrbtCntnt(", "xtnAtrbtCntnt", ");", "//", "//", "_getCmnContextCore().setHeaderColumn(amAsmXtnInfoDIO);", "//", "Institution", "Code,", "National", "Code,", "GUID,", "Last", "Change", "Timestamp", "//", "//", "//3-0.\ucd94\uac00", "\uc785\ub825\uac12", "\uc0ad\uc81c", "(Due\ubc29\uc9c0)", "//", "_getAmAsmXtnInfoDDso().delete(amAsmXtnInfoDIO);", "//", "//", "//3.\uc785\ub825\uac12", "\ub4f1\ub85d\uc2e4\ud589", "//", "_getAmAsmXtnInfoDDso().insert(amAsmXtnInfoDIO);", "//", "//", "}else", "{", "//", "_getAsmXtnInfoCustom().saveSubInfo(asmXtnInfoEnumCd,", "xtnAtrbtCntnt,", "asm);", "//", "}", "//", "}"], "docstring_tokens": ["This", "method", "gets", "map", "of", "extended", "information."]}
{"code_tokens": ["public", "IntrnlArrOpnSvcArrCndOut", "clone(){", "try{", "IntrnlArrOpnSvcArrCndOut", "object=", "(IntrnlArrOpnSvcArrCndOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrTx", "getCancelableLastTx(ArrReal", "arr)", "throws", "BizApplicationException", "{", "return", "(ArrTx)", "super.getCancelableLastTxCore((ArrRealCore)arr);", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "inquiring", "the", "last", "cancelable", "transaction."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(ScrtyIntStsCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@scrtyIntStsCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "ArrBsicQrySvcGetArrRelInfoOut", "clone(){", "try{", "ArrBsicQrySvcGetArrRelInfoOut", "object=", "(ArrBsicQrySvcGetArrRelInfoOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "SimpleDpstAcctInqrySvcIn", "clone(){", "try{", "SimpleDpstAcctInqrySvcIn", "object=", "(SimpleDpstAcctInqrySvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaSrvcBlckngInfoMgmtSvcSaveBizDscdInfoIn", "clone(){", "try{", "CaSrvcBlckngInfoMgmtSvcSaveBizDscdInfoIn", "object=", "(CaSrvcBlckngInfoMgmtSvcSaveBizDscdInfoIn)super.clone();", "if", "(", "this.bizDscdInfoList==", "null", ")", "object.bizDscdInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaSrvcBlckngInfoMgmtSvcBizDscd>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaSrvcBlckngInfoMgmtSvcBizDscd>(bizDscdInfoList.size());", "for(", "bankware.corebanking.configurationadmin.arrangement.service.dto.CaSrvcBlckngInfoMgmtSvcBizDscd", "item", ":", "bizDscdInfoList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaSrvcBlckngInfoMgmtSvcBizDscd)item.clone());", "}", "object.bizDscdInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrIntRtHst>", "getListConfirmedIntRtHistory(ArrIntRtCoreIn", "in)", "throws", "BizApplicationException", "{", "List<ArrIntRtHst>", "arrRtList", "=", "_getArrIntRtGenerator().getListConfirmedIntRtHistory(in);", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"##", "<ZZ>", "ArrIntRtProviderImpl", ">", "getListArrIntRtForIntCalculationHst", "{}\",", "arrRtList);", "}", "return", "arrRtList;", "}"], "docstring_tokens": ["Inquiry", "(or/and", "calculate)", "interest", "rate", "using", "formula", "which", "is", "predefined", "for", "request", "arrangement's", "product"]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "CustRprsnImpl", "custRprsnImpl)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(subInfoMap", "==", "null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustRprsnSIO", "subInfoIO", "=", "getSubInfoCache(custRprsnImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtCustRprsnSIO();", "subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId());", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_getAtCustRprsnSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(custRprsnImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_getAtCustRprsnSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custRprsnImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "PrtnrStaffRgstSvcXtnIn", "clone(){", "try{", "PrtnrStaffRgstSvcXtnIn", "object=", "(PrtnrStaffRgstSvcXtnIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CmStdAtrVrtnMIO>", "selectList(String", "instCd)", "{", "return", "_getCmStdAtrVrtnM().selectList(instCd);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "AsmBsicInfoIO", "getBasicInfo()", "throws", "BizApplicationException", "{", "return", "asmBsicInfoIO;", "}"], "docstring_tokens": ["It", "inquiries", "assessment", "basic", "information."]}
{"code_tokens": ["public", "void", "saveListXtnInfo(List<ActorXtnAtrbtRgstIn>", "actorXtnAtrbtIOList)", "throws", "BizApplicationException", "{", "//", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138/\ubcf4\uc870\uba85\uc138", "\ubd84\ub958", "Map<String,", "String>", "subInfoCrtnMap", "=", "_getActorSubInfoBiz().getMapSubInfoCrtn(actorXtnAtrbtIOList);", "//", "2022.04.01", "CTI", "/", "EAV", "\ud310\ub2e8\uc774", "\ub05d\ub098", "EAV\uc6a9\uc73c\ub85c\ub9cc", "\ud638\ucd9c\ud568", "//", "super.saveListXtnInfo(actorXtnAtrbtIOList);", "super.saveListXtnInfoByEav(actorXtnAtrbtIOList);", "//", "\ubcf4\uc870\uba85\uc138", "\uc0dd\uc131", "_getActorSubInfoBiz().saveMapSubInfo(subInfoCrtnMap,", "this);", "}"], "docstring_tokens": ["It", "modifies", "the", "actor's", "extended", "information", "list.", "If", "the", "extended", "attribute", "information", "is", "registered,", "it", "will", "be", "modified.", "Otherwise,", "it", "will", "be", "registered.", "The", "registered", "information", "only", "includes", "normal", "status", "information."]}
{"code_tokens": ["public", "DepoBnkArrMgmtSvcInqryIn", "clone(){", "try{", "DepoBnkArrMgmtSvcInqryIn", "object=", "(DepoBnkArrMgmtSvcInqryIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isArrServiceBlocked(String", "arrSrvcCd)", "throws", "BizApplicationException", "{", "//\uc678\ubd80\uc2dd\ubcc4\uc790\uc5d0", "\uc758\ud55c", "\uc11c\ube44\uc2a4", "blocking", "_getArrRealCoreFundamentalAgent().isArrExternalIdServiceBlocked(this.getArrExtrnlIdNbrTpCd(),", "arrSrvcCd);", "return", "_getArrSrvcBlckngBiz().isArrServiceBlocked(arrSrvcCd,", "this);", "}"], "docstring_tokens": ["Verify", "that", "Service", "Blocking", "is", "registered", "in", "this", "arrangement", "for", "the", "arrangement", "service", "type", "entered.", "In", "the", "case", "of", "that", "Service", "Blocking('Proof", "of", "balance')", "is", "registered", "for", "service", "type('Interest", "payment'),", "if", "you", "check", "isArrServiceBlocked(ArrSrvcEnum.InterestPayment),", "it", "returns", "'TRUE'.", "If", "you", "get", "the", "arrangement", "using", "external", "id", "number,", "it", "confirms", "whether", "the", "Service", "Blocking", "is", "registered", "for", "the", "service", "type", "in", "the", "external", "id", "number.", "If", "it", "is,", "it", "shows", "error", "message", "('the", "external", "ID", "is", "service", "blocked').", "When", "you", "want", "to", "check", "with", "service", "type", "code", "not", "with", "service", "type", "enum,", "you", "can", "use", "{@link", "#isArrServiceBlocked(String)}."]}
{"code_tokens": ["public", "List<ClTreeIO>", "getListClassification(ClTreeIO", "in)", "throws", "BizApplicationException", "{", "List<ClTreeIO>", "out", "=", "new", "ArrayList<ClTreeIO>();", "CmClTreeDIO", "inDao", "=", "_getInputClassification(in);", "inDao.setActvStsCd(ActiveStatusEnum.ACTIVE.getValue());", "List<CmClTreeDIO>", "daoOtList", "=", "_getCmClTreeDDso().selectList(inDao);", "for", "(CmClTreeDIO", "daoOut", ":", "daoOtList)", "{", "ClTreeIO", "sub", "=", "_getOutputClassificationTree(daoOut);", "out.add(sub);", "}", "return", "out;", "}"], "docstring_tokens": ["It", "inquiries", "classification", "tree."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "assetThingSubInfoMap,", "AssetCore", "assetImpl,", "Integer", "assetThingSeqNbr,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getAssetThingSubInfoBiz().saveMapSubInfo(assetThingSubInfoMap,", "txDt,", "txSeqNbr,", "(AssetImpl)", "assetImpl,", "assetThingSeqNbr);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "subInfoMap."]}
{"code_tokens": ["public", "InterOfficeClearSvcIn", "clone(){", "try{", "InterOfficeClearSvcIn", "object=", "(InterOfficeClearSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getDocIssueId()", "throws", "BizApplicationException", "{", "if(docIssueIO", "!=", "null)", "return", "docIssueIO.getDocIssueId();", "return", "null;", "}"], "docstring_tokens": ["It", "provides", "document", "id."]}
{"code_tokens": ["public", "CustLoginSvcGetHstIn", "clone(){", "try{", "CustLoginSvcGetHstIn", "object=", "(CustLoginSvcGetHstIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "Cust", "mainCust", "=", "_getCustMngr().getCust(super.getArr().getMainArrCustId());", "if", "(mainCust", "==", "null){", "return;", "}", "//", "2017.11.16", "\uae30\uc5c5\uace0\uac1d\uc778", "\uacbd\uc6b0", "\uac00\uc785\uac00\ub2a5\uc5f0\ub839", "\uac80\uc99d\uc744", "\uc218\ud589\ud558\uc9c0", "\uc54a\ub294\ub2e4.", "//", "\uac1c\uc778\uace0\uac1d", "\ub610\ub294", "\uac1c\uc778\uc0ac\uc5c5\uc790\ub9cc", "\uac80\uc99d\ucc98\ub9ac", "//", "v5.9.2", "#22580", "2021.11.25", "\uac1c\uc778", "\uace0\uac1d\ub9cc", "\uac80\uc99d\ud558\ub3c4\ub85d", "\uc218\uc815\ud568", "ActorTpEnum", "actorType", "=", "ActorTpEnum.getByValue(mainCust.getActorTypeCode());", "if(!ActorTpEnum.INDIVIDUAL.equals(actorType)", "){", "return", ";", "}", "if", "(StringUtils.isEmpty(getListCd()))", "{", "//Customer", "gender", "type", "is", "not", "exist", "To", "make", "decision", "whether", "This", "product", "({0},{1})", "purchase", "is", "allowed", "or", "Not", "//\ubcf8", "\uc0c1\ud488({0},{1})\uc758", "\ud310\ub9e4\uac00\ub2a5", "\uc5ec\ubd80", "\ud655\uc778\uc744", "\uc704\ud55c", "\uace0\uac1d\uc758", "\uc131\ubcc4\uc774", "\uc874\uc7ac", "\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0405\"", ",", "new", "Object[]{getArrangementCore().getPd().getPdCd(),getArrangementCore().getPd().getPdNm()});", "}", "if", "(!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){", "//This", "product", "purchase", "is", "not", "allowed", "to", "customer", "gender", "type", "({0},{1})", "//\ubcf8", "\uc0c1\ud488\uc758", "\ud310\ub9e4\ub294", "\uace0\uac1d\uc131\ubcc4\uc720\ud615", "({0},{1})\uc5d0\uac8c", "\ud5c8\uc6a9\ub418\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0389\"", ",", "new", "Object[]{getListCd(),_getCd().getCode(\"40009\",getListCd())});", "}", "}"], "docstring_tokens": ["Perform", "the", "condition", "action", "related", "to", "the", "specific", "service", "type.", "For", "example", "1", ",", "In", "case", "of", "loan", "installment", "disbursement", "possible", "condition", ",the", "loan", "disbursement", "possible", "condition", "class'", "\"doServiceAction\"", "method", "dose", "the", "validation", "step", "like", "1.investigates", "disbursed", "amount,", "2.get", "product", "condition", "value", "whether", "installment", "disbursement", "is", "allowed,", "3.", "make", "decision", "whether", "the", "service", "is", "permitted", "or", "not.", "The", "other", "example,", "the", "interest", "capitalization", "YN", "condition", "class", "do", "the", "action", "to", "make", "a", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date", "when", "arrangement", "open", "service", "is", "executed."]}
{"code_tokens": ["public", "void", "removeTailoredDtoClassAttribute(CaTailoredDtoClassDtlIn", "in)", "throws", "BizApplicationException{", "_checkInputForRemove(in);", "CaCmDtoClassAtrVldVrtnDIO", "deleteItem", "=", "_selectDtoClassAtrbtVldtnVrtn(in.getInstCd(),in.getInpDtoNm(),in.getAtrbtNm());", "if(deleteItem", "==", "null){", "//", "2018.04.02", "keewoong.hong", "error", "\uac80\ucd9c\uc744", "\uc704\ud574", "\uba54\uc2dc\uc9c0\ub97c", "\ub2e4\uc591\ud654", "\ud568", "String", "errMsg", "=", "in.getInpDtoNm().concat(\".\").concat(in.getAtrbtNm());", "throw", "new", "BizApplicationException(\"AAPCME0115\",", "new", "Object[]", "{", "errMsg", "});", "}", "_getCmDtoClassAtrVldVrtnDDso().delete(deleteItem);", "}"], "docstring_tokens": ["Remove", "the", "tailored", "DTO", "class", "attribute"]}
{"code_tokens": ["public", "PrtnrStaffChngSvcIn", "clone(){", "try{", "PrtnrStaffChngSvcIn", "object=", "(PrtnrStaffChngSvcIn)super.clone();", "if", "(", "this.staffXtnInfoList==", "null", ")", "object.staffXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.partner.change.service.dto.PrtnrStaffChngSvcXtnIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.partner.change.service.dto.PrtnrStaffChngSvcXtnIO>(staffXtnInfoList.size());", "for(", "bankware.corebanking.partner.change.service.dto.PrtnrStaffChngSvcXtnIO", "item", ":", "staffXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.partner.change.service.dto.PrtnrStaffChngSvcXtnIO)item.clone());", "}", "object.staffXtnInfoList", "=", "clonedList;", "}", "if", "(", "this.staffCtcptIO==null", ")", "object.staffCtcptIO", "=", "null;", "else", "object.staffCtcptIO", "=", "(bankware.corebanking.partner.change.service.dto.PrtnrStaffChngSvcCtcptIO)this.staffCtcptIO.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "modifyArrExternalIdNbr(String", "arrExtrnlIdNbrTpCd,", "String", "arrExtrnlIdNbr,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getArrExtrnlIdNbrBiz().modifyArrExternalIdNbr(arrExtrnlIdNbrTpCd,", "arrExtrnlIdNbr,", "txDt,", "txSeqNbr,", "this);", "}"], "docstring_tokens": ["Change", "arrangement", "external", "ID", "number", "registered", "on", "arrangement."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(value))", "{", "for", "(IpctTxStsCdEnum", "item", ":", "IpctTxStsCdEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "BigDecimal", "getRngVal()", "throws", "BizApplicationException", "{", "if", "(", "super.getRngVal()", "==", "null", "){", "super.setRngVal(_getAgreementPeriod());", "}", "if(logger.isDebugEnabled()){", "logger.debug(\"<z.g>", "ArrCndAgreementPeriod", "getRngVal={}\",super.getRngVal());", "}", "return", "super.getRngVal();", "}"], "docstring_tokens": ["A", "method", "that", "compares", "the", "value", "of", "a", "condition", "class", "to", "the", "value", "of", "a", "range", "condition."]}
{"code_tokens": ["public", "List<ArrReal>", "getListCustOwnArrRealInitOrAppliedOnPeriod", "(String", "custId,String", "pdCd,String", "inqryStartDt,String", "inqryEndDt)", "throws", "BizApplicationException", "{", "//return", "_getArrCustRelQryBizImpl().getListCustOwnArrRealInitOrAppliedOnPeriod(custId,pdCd,inqryStartDt,inqryEndDt);", "return", "_getArrCustRelQryBizImpl().getListArrRealByArrStsWithInitOrAppliedOnPeroid(custId,ArrCustRelEnum.MAIN_CONTRACTOR.getValue(),", "null,", "null,", "null,pdCd,inqryStartDt,", "inqryEndDt);", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "customer", "own", "(as", "main", "contractor)", "arrangements", "of", "specific", "product", "whose", "status", "was", "in", "\"Initiated\"", "or", "\"Applied\"", "during", "inquiry", "period."]}
{"code_tokens": ["public", "CustCtcptChngSvcGetTelNbrOut", "clone(){", "try{", "CustCtcptChngSvcGetTelNbrOut", "object=", "(CustCtcptChngSvcGetTelNbrOut)super.clone();", "if", "(", "this.ctcptXtnInfoList==", "null", ")", "object.ctcptXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustCtcptChngSvcGetXtnAtrbtOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustCtcptChngSvcGetXtnAtrbtOut>(ctcptXtnInfoList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustCtcptChngSvcGetXtnAtrbtOut", "item", ":", "ctcptXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustCtcptChngSvcGetXtnAtrbtOut)item.clone());", "}", "object.ctcptXtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrRealCore>", "getCustOwnLoanArrCoreListActive", "(String", "custId)", "throws", "BizApplicationException", "{", "//", "\ud574\ub2f9", "\uba54\uc18c\ub4dc\ub294", "({0})", "\ud074\ub798\uc2a4\uc758", "\uc778\uc2a4\ud134\uc2a4\ub85c", "\uc0ac\uc6a9\ud560", "\uc218", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\uacc4\uc57d\ub2f4\ub2f9\uc790\uc5d0\uac8c", "\ubb38\uc758\ubc14\ub78d\ub2c8\ub2e4.", "//", "This", "method", "cannot", "be", "used", "by", "instance", "of", "({0})", "class.", "throw", "new", "BizApplicationException(\"AAPARE0678\",new", "Object[]{this.getClass().getName()});", "}"], "docstring_tokens": ["Get", "loan", "arrangements", "with", "active", "status", "that", "a", "customer", "owns", "as", "main", "contractor."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AprslRqstCore", "aprslRqstCore)", "throws", "BizApplicationException", "{", "return", "_getAprslRqstSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AprslRqstImpl)aprslRqstCore);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "asset", "transaction."]}
{"code_tokens": ["public", "boolean", "isDiscarded()", "throws", "BizApplicationException", "{", "return", "DocIssueStsEnum.CLOSED.getValue().equals(getDocIssueCore().getDocIssueStsCd());", "}"], "docstring_tokens": ["It", "inquires", "whether", "or", "not", "the", "issued", "document", "is", "discarded."]}
{"code_tokens": ["public", "CaRoleMgmtSvcGetRoleScreenRelationOut", "clone(){", "try{", "CaRoleMgmtSvcGetRoleScreenRelationOut", "object=", "(CaRoleMgmtSvcGetRoleScreenRelationOut)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleOut", "clone(){", "try{", "CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleOut", "object=", "(CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"AcquireCltrl\":", "_doServiceAction(arrSrvcTpCd,arrCndActionRequiredValue);", "return;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Perform", "the", "condition", "action", "related", "to", "the", "specific", "service", "type.", "For", "example", "1", ",", "In", "case", "of", "loan", "installment", "disbursement", "possible", "condition", ",the", "loan", "disbursement", "possible", "condition", "class'", "\"doServiceAction\"", "method", "dose", "the", "validation", "step", "like", "1.investigates", "disbursed", "amount,", "2.get", "product", "condition", "value", "whether", "installment", "disbursement", "is", "allowed,", "3.", "make", "decision", "whether", "the", "service", "is", "permitted", "or", "not.", "The", "other", "example,", "the", "interest", "capitalization", "YN", "condition", "class", "do", "the", "action", "to", "make", "a", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date", "when", "arrangement", "open", "service", "is", "executed."]}
{"code_tokens": ["public", "String", "getApplyEndDateTime()", "{", "return", "PdUtil.parseDateToYYYYMMDDHHMMSS(_getAplyEndDt());", "}"], "docstring_tokens": ["This", "method", "inquire", "apply", "end", "date", "and", "time", "of", "product", "condition."]}
{"code_tokens": ["public", "Integer", "getListDataCntForConsistency()", "throws", "BizApplicationException", "{", "return", "_getDstbCnstncyCmInstPMDso().selectListCntForConsistency();", "}"], "docstring_tokens": ["Validate", "Query", "Row", "Count", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "String", "getAcctgDscd(){", "return", "acctgDscd;", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "accounting", "distinction", "code."]}
{"code_tokens": ["public", "void", "isValid()", "throws", "BizApplicationException", "{", "//", "\uc11c\ube44\uc2a4", "\uc874\uc7ac\uc5ec\ubd80", "\uac80\uc99d", "SvInstSrvcRstrctnDIO", "daoIn", "=", "new", "SvInstSrvcRstrctnDIO();", "_getCmnContext().setColumn(daoIn);", "daoIn.setInstCd(_getCmnContext().getInstCode());", "daoIn.setSrvcCd(_getCmnContext().getServiceCode());", "daoIn.setSrvcRstrctnTrgtCntnt(_getCmnContext().getChannelDscd());", "List<SvInstSrvcRstrctnDIO>", "daoOut", "=", "_getSvInstSrvcRstrctnDDso().selectListBySrvcCd(", "daoIn", ");", "if(!daoOut.isEmpty())", "{", "boolean", "isRstrct", "=", "false;", "String", "txDateTime", "=", "_getCmnContext().getTxDate().concat(_getCmnContext().getTxTime());", "for(SvInstSrvcRstrctnDIO", "entry", ":", "daoOut){", "if(txDateTime.compareTo(entry.getSrvcRstrctnStartDtm())", ">=", "0", "&&", "txDateTime.compareTo(entry.getSrvcRstrctnEndDtm()", ")", "<=", "0", ")", "{", "isRstrct", "=", "true;", "}", "}", "if", "(isRstrct)", "{", "throw", "new", "BizApplicationException(", "\"AAPSVE0009\",", "new", "String[]", "{", "_getCmnContext().getServiceCode()", "}", ");", "}", "}", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "Check", "whether", "the", "service", "is", "restricted", "by", "the", "product", "code.", "*", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0014).", "*", "</pre>", "*", "@seealso", "{@link", "#isValid()}", ":", "Check", "by", "the", "service", "code", "*", "@seealso", "{@link", "#isValidByChnlCode()}", ":", "Check", "by", "the", "channel", "code", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\uc0c1\ud488", "\ucf54\ub4dc\ub97c", "\ud1b5\ud574", "\ud574\ub2f9", "\uc11c\ube44\uc2a4\uc758", "\uc81c\ud55c", "\uc5ec\ubd80\ub97c", "\ud655\uc778", "\ud55c\ub2e4.", "*", "\uc81c\ud55c\ub41c", "\uc11c\ube44\uc2a4\uc758", "\uacbd\uc6b0", "\uc5d0\ub7ec\uba54\uc2dc\uc9c0(AAPSVE0014)\ub97c", "\ud638\ucd9c\ud55c\ub2e4.", "*", "</pre>", "*", "@seealso", "{@link", "#isValid()}", ":", "Check", "by", "the", "service", "code", "*", "@seealso", "{@link", "#isValidByChnlCode()}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "ArrTxCore", "arrTx)", "throws", "BizApplicationException{", "_getArrTxSubInfoBiz().saveSubInfo(subInfoMap,", "(ArrTxImpl)arrTx);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "CaArrRelRuleMgmtSvcGetArrRelRuleDtl", "clone(){", "try{", "CaArrRelRuleMgmtSvcGetArrRelRuleDtl", "object=", "(CaArrRelRuleMgmtSvcGetArrRelRuleDtl)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(InsrncSubInfo", "subInfo,", "String", "txDt,", "Integer", "txSeqNbr,", "InsrncImpl", "insrncImpl)", "throws", "BizApplicationException{", "//", "0.", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{InsrncSubInfo.class.getSimpleName()});", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "for(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(entry.getValue()", "!=", "null)", "{", "_getAtrbtChk().checkStandardAttribute(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsInsrncSIO", "subInfoCache", "=", "getSubInfoCache(insrncImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsInsrncSIO();", "subInfoCache.setInsrncId(insrncImpl.getInsrncBasicCache().getInsrncId());", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(insrncImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "2-1.", "insert", "_getAsInsrncSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "insrncImpl.setInsrncSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(insrncImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "2-2.", "update", "_getAsInsrncSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "asset", "subsidiary", "information."]}
{"code_tokens": ["public", "String", "getSaleStartDateTime()", "{", "return", "PdUtil.parseDateToYYYYMMDDHHMMSS(bf.getSaleStartDt());", "}"], "docstring_tokens": ["This", "Method", "inquire", "sale", "start", "date", "time", "of", "point"]}
{"code_tokens": ["public", "List<ArrPsbkBkgMsg>", "buildMsgFormat(ArrIssmdaCore", "arrIssmda,", "String", "arrId,", "String", "psbkSrvcTpCd,", "String", "psbkMsgId,", "Map<String,", "Object>", "psbkMsgParmMap)", "throws", "BizApplicationException", "{", "/**", "*", "get", "arrangement", "*/", "Arr", "arr", "=", "_getArrMngr().getArr(arrId);", "/**", "*", "get", "configuration", "*/", "int", "sideCnt", "=", "2;", "int", "row", "=", "5;", "int", "col", "=", "1;", "int", "length", "=", "84;", "String", "align", "=", "\"\";", "String", "custName", "=", "String.format(\"%\"+col+\"s%\"+align+length+\"s\",\"", "\"", ",", "_getCustMngr().getCust(arr.getMainArrCustId()).getName());", "ArrPsbkBkgMsg", "psbkLine", "=", "new", "ArrPsbkBkgMsg();", "psbkLine.setPsbkBkgSideCnt(sideCnt);", "psbkLine.setPsbkBkgRowCnt(row);", "psbkLine.setPsbkBkgCntnt(custName);", "List<ArrPsbkBkgMsg>", "psbkLineList", "=", "new", "ArrayList<>();", "psbkLineList.add(psbkLine);", "return", "psbkLineList;", "}"], "docstring_tokens": ["Build", "passbook", "by", "booking", "message's", "form."]}
{"code_tokens": ["public", "String", "getServiceClassName()", "{", "return", "srvcClassNm;", "}"], "docstring_tokens": ["Inquire", "service", "class", "name."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(AmountKindEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getCndVal(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "CndVal", "output", "=", "bfCnd.getCndVal(_convertProvideCndSvcListToProvideCndList(in.getProvideCnd()));", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(output", "==", "null)", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "value."]}
{"code_tokens": ["public", "String", "calculateDate(String", "baseDt,", "int", "dtNum,", "CaDtDscdEnum", "dtType)", "throws", "BizApplicationException", "{", "if", "(StringUtils.isEmpty(baseDt))", "{", "throw", "new", "BizApplicationException(\"AAPCME0001\",", "new", "Object[]", "{baseDt,", "\"\"});", "}", "//", "Validate", "input", "date", "type", "_checkDate(baseDt);", "//", "Date", "Computation", "return", "_calculateDate(baseDt,", "dtNum,", "dtType,", "DateUtils.EMPTY_DATE_TYPE);", "}"], "docstring_tokens": ["It", "calculates", "the", "date", "of", "the", "day.", "(\u00b11~2", "days)"]}
{"code_tokens": ["public", "boolean", "isValidType(AtrbtTpEnum", "atrbtTp,", "Integer", "dcmlPntLen,", "String", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"atrbtTpCd={}\",", "atrbtTp);", "logger.debug(\"atrbtCntnt={}\",", "atrbtCntnt);", "}", "if", "(atrbtTp", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0037\",", "new", "Object[]", "{", "atrbtTp", "});", "}", "//", "Validate", "attribute", "type", "switch", "(atrbtTp)", "{", "case", "TEXT:", "//", "text", "return", "(StringCoreUtils.isEmpty(atrbtCntnt))", "?", "false", ":", "true;", "case", "TEXT_DATE:", "//", "date", "return", "DateCoreUtils.isValidDate(atrbtCntnt);", "case", "TEXT_NUMBER:", "//", "number", "return", "DataCheckCoreUtils.isNumeric(atrbtCntnt);", "case", "NUMBER:", "//", "number", "boolean", "chkNbr", "=", "DataCheckCoreUtils.isNumeric(atrbtCntnt);", "if(logger.isDebugEnabled())", "{", "logger.debug(\"", "###########", "isValidType", "NUMBER", "chkNbr", ":", "{}\",", "chkNbr);", "}", "if(chkNbr)", "{", "//", "\uc18c\uc218\uc810\uc790\ub9ac\uc218", "\uac80\uc99d", "return", "_isValidDecimalPoint(dcmlPntLen,", "atrbtCntnt);", "}", "else", "{", "return", "chkNbr;", "}", "case", "TEXT_ALPHA_NUMERIC:", "//", "Alpha-Number", "return", "DataCheckCoreUtils.isAlphaNumeric(atrbtCntnt);", "case", "YES_OR_NO:", "//", "yes", "or", "no", "return", "(CCM01.YES.equals(atrbtCntnt)", "||", "CCM01.NO.equals(atrbtCntnt))", "?", "true", ":", "false;", "case", "PASSWORD:", "//", "Password", "return", "DataCheckCoreUtils.isValidPassword(atrbtCntnt);", "case", "TIMESTAMP:", "//", "timestamp", "return", "true;", "case", "JSON:", "//", "json", "return", "DataCheckCoreUtils.isJson(atrbtCntnt);", "case", "EMPTY:", "return", "true;", "default:", "throw", "new", "BizApplicationException(\"AAPCME0037\",", "new", "Object[]", "{", "atrbtTp", "});", "}", "}"], "docstring_tokens": ["Validate", "that", "the", "value", "of", "the", "input", "attribute", "matches", "the", "type", "of", "the", "attribute."]}
{"code_tokens": ["public", "void", "register(List<CaNoticeMsgDocRMgmtIO>", "docNoticeMsgRIOList)", "throws", "BizApplicationException", "{", "if(docNoticeMsgRIOList", "==", "null", "||", "docNoticeMsgRIOList.isEmpty()){", "return;", "}", "for(CaNoticeMsgDocRMgmtIO", "docNoticeMsgRIOItem", ":", "docNoticeMsgRIOList){", "//check", "required", "inputs", "if(StringUtils.isEmpty(docNoticeMsgRIOItem.getInstCd())){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@instCd\"});", "}else", "if(StringUtils.isEmpty(docNoticeMsgRIOItem.getNoticeMsgCd())){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@noticeMsgCd\"});", "}", "CaAtDocNoticeMsgRIO", "rgstrnDocNoticeMsgRMgmtIO", "=", "_getAtDocNoticeMsgRDso().select(docNoticeMsgRIOItem.getInstCd(),", "docNoticeMsgRIOItem.getNoticeMsgCd());", "if(rgstrnDocNoticeMsgRMgmtIO", "==", "null){", "if(!_isEmptyDocId(docNoticeMsgRIOItem.getDocId())){", "CaAtDocNoticeMsgRIO", "atDocNoticeMsgRIO", "=", "new", "CaAtDocNoticeMsgRIO();", "_getCaCmnContext().setHeaderColumn(atDocNoticeMsgRIO);", "atDocNoticeMsgRIO.setInstCd(docNoticeMsgRIOItem.getInstCd());", "atDocNoticeMsgRIO.setNoticeMsgCd(docNoticeMsgRIOItem.getNoticeMsgCd());", "atDocNoticeMsgRIO.setDocId(docNoticeMsgRIOItem.getDocId());", "_getAtDocNoticeMsgRDso().insert(atDocNoticeMsgRIO);", "}", "}else{", "//delete", "registered", "doc-notice", "message", "relation", "_getCaCmnContext().setHeaderColumn(rgstrnDocNoticeMsgRMgmtIO);", "rgstrnDocNoticeMsgRMgmtIO.setInstCd(docNoticeMsgRIOItem.getInstCd());", "_getAtDocNoticeMsgRDso().delete(rgstrnDocNoticeMsgRMgmtIO);", "//insert", "new", "doc-notice", "message", "relation", "rgstrnDocNoticeMsgRMgmtIO.setDocId(StringUtils.isEmpty(docNoticeMsgRIOItem.getDocId())", "?", "CCM02.NO_OPINION", ":", "docNoticeMsgRIOItem.getDocId());", "_getAtDocNoticeMsgRDso().insert(rgstrnDocNoticeMsgRMgmtIO);", "//", "clear", "cache", "_getCaDataCacheManager().clearInstanceCache(DataCacheCoreConfig.DOC_NOTICE_MSG_REL_CACHE,", "docNoticeMsgRIOItem.getInstCd().concat(docNoticeMsgRIOItem.getNoticeMsgCd()));", "}", "}", "}"], "docstring_tokens": ["It", "registers", "or", "modifies", "the", "customer", "grade", "code."]}
{"code_tokens": ["public", "ArrPlanIO", "getArrPlan(Integer", "plnSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "if", "(plnSeqNbr", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]{\"@plnSeqNbr\"});", "}", "ArArrPlnMIO", "arArrPlnMIO;", "if(arrRealImpl.isArrKindTxal()){", "arArrPlnMIO", "=", "_getArArrTmpryPlnMDso().select(", "_getCmnContext().getInstCode(),", "arrRealImpl.getArrId(),", "plnSeqNbr);", "}else{", "arArrPlnMIO", "=", "_getArArrPlnMDso().select(", "_getCmnContext().getInstCode(),", "arrRealImpl.getArrId(),", "plnSeqNbr);", "}", "if", "(arArrPlnMIO", "==", "null)", "{", "throw", "new", "BizApplicationException(\"XXXXX\",", "new", "Object[]{\"@plnSeqNbr\"});", "}", "return", "_buildArrPlanIO(arArrPlnMIO);", "}"], "docstring_tokens": ["Inquire", "arrangement", "plan", "with", "plan", "sequence", "number"]}
{"code_tokens": ["public", "void", "registerArrPlan(ArrPlanIO", "arrPlan,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealCoreImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "\uacc4\uc57d", "\uacc4\ud68d", "\uc8fc\uc81c\uc601\uc5ed", "\ubbf8\uc0ac\uc6a9", "\uc2dc", "skip", "if", "(!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.PLAN))", "{", "return;", "}", "_checkInput(arrPlan,txDt,txSeqNbr,", "arrRealImpl);", "//", "Check", "Transaction", "Exist", "//", "\uac70\ub798\uc0dd\uc131\uc5ec\ubd80", "\uac80\uc99d", "_getArrCmnUtil().validateArrTxExist(arrRealImpl,", "txDt,", "txSeqNbr);", "List<ArArrPlnMIO>", "arArrPlnMIOList", "=", "_selectActivePlan(arrPlan.getArrSrvcCd(),arrRealImpl);", "if", "(arArrPlnMIOList", "!=", "null", "&&", "!arArrPlnMIOList.isEmpty())", "{", "//The", "({0})service", "is", "already", "registered", "on", "arrangement", "//\ub3d9\uc77c\ud55c", "\uc11c\ube44\uc2a4({0})\uc758", "\uacc4\uc57d\uacc4\ud68d\uc774", "\uc774\ubbf8", "\ub4f1\ub85d", "\ub418\uc5b4", "\uc788\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0289\",", "new", "Object[]{_getCdCore().getCode(ArrSrvcCoreEnum.cdNbr,", "arrPlan.getArrSrvcCd())});", "}", "//Register", "Arrangement", "Plan", "ArArrPlnMIO", "arArrPlnMIO", "=", "new", "ArArrPlnMIO();", "arArrPlnMIO.setInstCd(arrRealImpl.getInstCd());", "arArrPlnMIO.setArrId(arrRealImpl.getArrId());", "//\uac70\ub798\uacc4\uc57d\ubd84\ub9ac\ucc98\ub9ac", "Integer", "seqNbr;", "if(ArrKndCoreEnum.TEMPORARY.getValue().equals(arrRealImpl.getArrKindCd())){", "seqNbr", "=", "_getArArrTmpryPlnMDso().selectMax(arArrPlnMIO);", "}else{", "seqNbr", "=", "_getArArrPlnMDso().selectMax(arArrPlnMIO);", "}", "seqNbr", "=", "seqNbr+CCM01.ONE;", "arArrPlnMIO.setPlnSeqNbr(seqNbr);", "arArrPlnMIO.setRltdCndCd(arrPlan.getRltdCndCd());", "arArrPlnMIO.setEfctvEndDt(arrPlan.getEfctvEndDt());", "arArrPlnMIO.setEfctvStartDt(arrPlan.getEfctvStartDt());", "arArrPlnMIO.setNxtExctnPlnDayTpCd(arrPlan.getNxtExctnPlnDayTpCd());", "arArrPlnMIO.setNxtExctnPlnDay(arrPlan.getNxtExctnPlnDay());", "arArrPlnMIO.setNxtExctnPlnDt(arrPlan.getNxtExctnPlnDt());", "arArrPlnMIO.setNxtExctnPlnHm(arrPlan.getNxtExctnPlnHm());", "arArrPlnMIO.setArrSrvcTpCd(arrPlan.getArrSrvcCd());", "arArrPlnMIO.setArrPlnStsCd(ArrPlnStsCoreEnum.ACTIVE.getValue());", "_getCmnContextCore().setHeaderColumn(arArrPlnMIO);", "//", "Institution", "Code,", "National", "Code,", "GUID,", "Last", "Change", "Timestamp", "if(ArrKndCoreEnum.TEMPORARY.getValue().equals(arrRealImpl.getArrKindCd())){", "_getArArrTmpryPlnMDso().insert(arArrPlnMIO);", "}else{", "_getArArrPlnMDso().insert(arArrPlnMIO);", "}", "_makePlanStatusHistory(arArrPlnMIO,", "txDt,", "txSeqNbr,", "ArrPlnStsChngRsnCoreEnum.REGISTRATION.getValue());", "}"], "docstring_tokens": ["-", "register", "arrangement", "plan", "-", "Functionalities", "It", "create", "new", "arrangement", "plan"]}
{"code_tokens": ["public", "List<TaxRtIO>", "getListTaxRate(String", "isoNatCd,", "String", "taxRtCd,", "String", "aplyStartDt)", "throws", "BizApplicationException", "{", "return", "_getListTaxRate(isoNatCd,", "taxRtCd,", "\"\",", "aplyStartDt,", "\"\");", "}"], "docstring_tokens": ["This", "method", "provides", "a", "list", "of", "tax", "rate", "information", "by", "ISO", "country", "code", "and", "start", "date."]}
{"code_tokens": ["public", "void", "register(DstbCtvdMIO", "dstbCtvdMIO,", "DstbCtvdRsltErrRgstIn", "dstbCtvdRsltErrRgstIn)", "throws", "BizApplicationException{", "//", "1.", "convert", "insert", "data", "CaDstbCtvdRsltErrHIO", "caDstbCtvdRsltErrHIO", "=", "_setCaDstbCtvdRsltErrH(dstbCtvdMIO,", "dstbCtvdRsltErrRgstIn);", "//", "2.", "check", "pk", "validation", "_PKValidateCaDstbCtvdRsltErrH(caDstbCtvdRsltErrHIO);", "//", "3.", "data", "insert", "_getCaDstbCtvdRsltErrHDso().insert(caDstbCtvdRsltErrHIO);", "}"], "docstring_tokens": ["It", "registers", "the", "notice", "message", "code", "information.", "Needs", "caution", "as", "the", "registered", "information", "performs", "the", "update", "transaction."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,", "ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled()){", "logger.debug(\"doServiceAction", "start\");", "}", "ArrReal", "arrReal", "=", "(ArrReal)", "this.getArrangementCore();", "if(!arrReal.isReal())", "return;", "_doOpenAction(arrSrvcTpCd,", "arrCndActionRequiredValue,", "arrReal);", "//", "switch(arrSrvcTpCd)", "{", "//", "case", "\"ArrangementConditionTest\":", "//", "case", "\"OpenDeposit\":", "//", "break;", "//", "default:", "//", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "//", "throw", "new", "BizApplicationException(\"AAPARE0288\",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "//", "}", "}"], "docstring_tokens": ["Process", "the", "special", "condition", "related", "actions", "for", "input", "service", "according", "to", "product", "condition", "value", "or", "negotiated", "value.", "For", "example,", "the", "\"Required", "document\"", "condition", "has", "the", "product", "required", "document", "type", "for", "loan", "application", "service.", "The", "arrangement", "condition", "action", "validate", "the", "required", "document", "type", "is", "received", "(presented)", "or", "not.", "Another", "example", "is", "the", "deposit", "open", "service,", "\"Interest", "capitalization", "YN\"", "condition", "dose", "the", "action", "to", "make", "an", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date.", "This", "method", "performs", "the", "function", "of", "performing", "product", "condition", "management", "rule", "registered", "on", "system.", "Implementation", "of", "condition", "management", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "according", "to", "the", "arrangement", "condition", "class", "implementation", "method,", "and", "the", "implemented", "arrangement", "condition", "class", "should", "specify", "the", "process", "target", "class", "by", "condition.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", "Caution", ":", "-", "To", "define", "condition", "management", "rule", "by", "service", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", ">", "Select", "service"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(CaExternalTableStatusCodeCoreEnum", "item", ":", "CaExternalTableStatusCodeCoreEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CaPdInfoInqrySvcTblOut", "clone(){", "try{", "CaPdInfoInqrySvcTblOut", "object=", "(CaPdInfoInqrySvcTblOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "delete(CaAmCrdtrtgGradeMIO", "AmCrdtrtgGradeMIO){", "return", "_getAmCrdtrtgGradeM().delete(AmCrdtrtgGradeMIO);", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["public", "DocCore", "getDocCore()", "throws", "BizApplicationException", "{", "return", "this.docCore;", "}"], "docstring_tokens": ["It", "obtains", "the", "document", "object", "of", "the", "issued", "document."]}
{"code_tokens": ["public", "AcctCltrlMgmtSvcSaveIn", "clone(){", "try{", "AcctCltrlMgmtSvcSaveIn", "object=", "(AcctCltrlMgmtSvcSaveIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getArrStsChngRsnCd(){", "return", "arrStsChngRsnCd;", "}"], "docstring_tokens": ["Inquire", "status", "changed", "reason", "code", "of", "current", "arrangement", "status."]}
{"code_tokens": ["public", "void", "saveSubInfo(Map<String,", "String>", "subInfoMap,", "ArrTxImpl", "arrTx)", "{", "//", "1.", "\uc785\ub825\uc73c\ub85c", "\ubc1b\uc740", "Map\uc774", "\ube44\uc5ec", "\uc788\uac70\ub098", "null\uc77c", "\ub54c", ",", "null", "\uccb4\ud06c\ud558\ub294", "\uc774\uc720\ub294", "CTI,", "EAV\ubd84\ub9ac\ud558\ub294", "\uba54\uc18c\ub4dc\uc5d0\uc11c", "\uc5c6\uc73c\uba74", "null", "return\ud558\uace0", "\uc788\uc74c.", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "\uc18d\uc131\uac12", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\uac70\ub798\uad00\ub828", "\ubcf4\uc870\uba85\uc138", "\uc870\ud68c(\uce90\uc2dc\ub85c\ubd80\ud130)", "IValueObject", "oldCache", "=", "getSubInfoCache(arrTx);", "//", "4.", "DB", "\ubc18\uc601", "if(oldCache", "==", "null)", "{", "//", "4.1.1", "DBIO", "VO", "\uc778\uc2a4\ud134\uc2a4", "\uc0dd\uc131", "oldCache", "=", "_newSubInfoDBIO(arrTx);", "//", "4.1.2", "primary", "key", "\uc870\ub9bd", "_setKey(oldCache,arrTx);", "//", "4.1.3", "\ubcf4\uc870\uc815\ubcf4Map->", "DBIO", "VO\uac12", "\ucc44\uc6b0\uae30", "DtoUtils.setSubInfoIO(subInfoMap,", "oldCache);", "//", "4.1.4", "\uce90\uc2f1\ub41c", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc5c6\uc73c\uba74", "\ucd5c\ucd08", "\uc800\uc7a5,", "\uc989", "insert", "_insertSubInfo(arrTx,", "oldCache);", "//", "4.1.5", "arrTx.setArrTxSubInfoCache(oldCache);", "}else", "{", "//", "4.2.1.", "\uce90\uc2f1\ub41c", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc788\uc73c\uba74", "\ubcc0\uacbd", "\uc800\uc7a5,", "\uc989", "update,", "update\uc804", "\uae30\uc874\uc815\ubcf4\ub791", "\ub3d9\uc77c", "\uc2dc", "\ub9ac\ud134", "if", "(!DtoUtils.isValChanged(subInfoMap,", "oldCache))", "{", "return;", "}", "//", "4.2.4", "update", "-", "\uc0c8\ub85c\ubcc0\uacbd\ub418\uc5b4\uc57c", "\ud560", "\uc18d\uc131\uc744", "DBIO", "VO", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "oldCache);", "//", "4.2.5", "update", "-", "update", "\uc218\ud589", "_updateSubInfo(arrTx,", "oldCache);", "}", "//", "//", "5.", "\uce90\uc2dc", "\ucc98\ub9ac", "(DBIO", "VO->Interface", "VO)", "&", "\uce90\uc2f1", "//", "_saveSubInfoCache(subInfoDBIO,arrTx);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "xtnAtrbtNm", "and", "xtnAtrbtCntnt."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "null,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt,", "false);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "of", "specific", "product", "hierarchy", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status."]}
{"code_tokens": ["public", "CustDocRelChngSvcSrchIn", "clone(){", "try{", "CustDocRelChngSvcSrchIn", "object=", "(CustDocRelChngSvcSrchIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CndVal", "getComplexCndValue(List<CmpsCnd>", "cmpsCndList)", "throws", "BizApplicationException", "{", "if", "(!isComplexCnd())", "{", "throw", "new", "BizApplicationException(\"AAPPDE0003\",", "null);", "}", "CndVal", "cndVal", "=", "null;", "//", "Set", "the", "composing", "condition", "value", "to", "input", "DTO", "//", "\uc785\ub825\ub41c", "\uad6c\uc131\uc870\uac74\uac12\uc744", "\uc785\ub825DTO\uc5d0", "set\ud568", "PdPdCndUnitComplexSearchIn", "inDaoS010", "=", "_setPdPdCndUnitComplexSearchIn();", "inDaoS010.setTierNbr(getComplexCndStructureInfo(cmpsCndList).getTierNbr());", "if", "(isListCnd())", "{", "//", "\ubcf5\ud569\ubaa9\ub85d\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getComplexListCndValue(inDaoS010);", "}", "else", "if", "(isRngCnd())", "{", "//", "\ubcf5\ud569\ubc94\uc704\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getComplexRangeCndValue(inDaoS010);", "}", "/*", "*", "else", "if", "(isIntCnd())", "{", "//", "\ubcf5\ud569\uae08\ub9ac\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "*", "_getComplexInterestCndValue(inDaoS010);", "*", "*", "}", "else", "if", "(isFeeCnd())", "{", "//", "\ubcf5\ud569\uc218\uc218\ub8cc\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "*", "_getComplexFeeCndValue(inDaoS010);", "}", "*/", "//", "Return", "output", "return", "cndVal;", "}"], "docstring_tokens": ["This", "method", "inquire", "preferential", "interest", "rate", "complex", "condition", "value", "by", "the", "value", "of", "the", "composing", "condition", "and", "the", "value", "of", "the", "provide", "condition."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(AprvlRsltEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "boolean", "isValid(String", "type)", "{", "return", "(", "\"O\".equalsIgnoreCase(type)", "||", "\"B\".equalsIgnoreCase(type)", ")", ";", "//added", "by", "Roh(change", "to", "simplify)", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "List<ArrReal>", "getListCustOwnArrRealActiveOnBaseDt(String", "custId,String", "baseDt)", "throws", "BizApplicationException", "{", "return", "_getArrXtnUtil().convertArrRealList(super.getCustOwnArrRealCoreListActiveOnBaseDt(custId,", "baseDt));", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "customer", "own", "(as", "main", "contractor)", "arrangements", "which", "was", "in", "\"Active\"", "status", "on", "specific", "date.", "(Paging)"]}
{"code_tokens": ["public", "List<XtnCdIO>", "getListCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "List<CaCaDstbSrvrMIO>", "svDstbSrvrMList", "=", "_getSvDstbSrvrMDso().selectSrvrCdList();", "List<XtnCdIO>", "xtnCdIOs", "=", "new", "ArrayList<XtnCdIO>();", "if(", "svDstbSrvrMList", "==", "null", "||", "svDstbSrvrMList.isEmpty()", ")", "return", "xtnCdIOs;", "for(CaCaDstbSrvrMIO", "out", ":", "svDstbSrvrMList)", "{", "XtnCdIO", "xtnCdIO", "=", "new", "XtnCdIO();", "xtnCdIO.setCd(out.getDstbSrvrId());", "xtnCdIO.setCdNm(out.getDstbSrvrId()", "+", "\"", "\"", "+", "out.getDstbSrvrNm());", "xtnCdIOs.add(xtnCdIO);", "}", "return", "xtnCdIOs;", "}"], "docstring_tokens": ["This", "method", "returns", "the", "list", "of", "code", "corresponding", "to", "the", "search", "condition"]}
{"code_tokens": ["public", "ArrXtnSvcGetChngListOut", "clone(){", "try{", "ArrXtnSvcGetChngListOut", "object=", "(ArrXtnSvcGetChngListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcGetChngOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcGetChngOut>(tblNm.size());", "for(", "bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcGetChngOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcGetChngOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaTaxRtCdMgmtSvcGetTaxRateCodeListOut", "clone(){", "try{", "CaTaxRtCdMgmtSvcGetTaxRateCodeListOut", "object=", "(CaTaxRtCdMgmtSvcGetTaxRateCodeListOut)super.clone();", "if", "(", "this.taxRtList==", "null", ")", "object.taxRtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.code.service.dto.CaTaxRtCdMgmtSvcGetTaxRateCodeListSubOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.code.service.dto.CaTaxRtCdMgmtSvcGetTaxRateCodeListSubOut>(taxRtList.size());", "for(", "bankware.corebanking.configurationadmin.code.service.dto.CaTaxRtCdMgmtSvcGetTaxRateCodeListSubOut", "item", ":", "taxRtList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.code.service.dto.CaTaxRtCdMgmtSvcGetTaxRateCodeListSubOut)item.clone());", "}", "object.taxRtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "deleteTransferLanguage(String", "trnsfrKnd,", "String", "lngCd,", "String", "trnsfrOriginKeyVal)", "throws", "BizApplicationException", "{", "if", "(_getCmMltLngTrnsltnDDso().getLanguageTable(trnsfrKnd,", "lngCd,", "trnsfrOriginKeyVal)", "==", "null)", "{", "return", "false;", "}", "CaCmMltLngTrnsltnDIO", "cmMltLngTrnsltnDIO", "=", "new", "CaCmMltLngTrnsltnDIO();", "_getCmnContextCore().setHeaderColumn(cmMltLngTrnsltnDIO);", "cmMltLngTrnsltnDIO.setTrnsfrKndCd(trnsfrKnd);", "cmMltLngTrnsltnDIO.setTrnsfrOriginKeyVal(trnsfrOriginKeyVal);", "cmMltLngTrnsltnDIO.setLngCd(lngCd);", "cmMltLngTrnsltnDIO.setLastChngId(_getCmnContextCore().getStaffId());", "cmMltLngTrnsltnDIO.setActvStsCd(CaActiveStatusEnum.INACTIVITY.getValue());", "cmMltLngTrnsltnDIO.setSiteLbrtryDscd(_getInstParmProvider().getInstParm(CaInstParamEnum.SITE_LABORATORY_DISTINCTION_CODE.getValue()", "));", "_getCmMltLngTrnsltnDDso().updateActvStsCd(cmMltLngTrnsltnDIO);", "return", "true;", "}"], "docstring_tokens": ["Delete", "language", "transfer", "retrieved", "from", "the", "Translate", "origin", "key", "value."]}
{"code_tokens": ["public", "String", "getSubInfo(PrtnrCore", "prtnrCore,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getPrtnrSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(PrtnrImpl)", "prtnrCore);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "asset", "transaction."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(ArrRelKndCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,", "ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "ArrSrvcEnum", "arrSrvcType", "=", "ArrSrvcEnum.getEnum(arrSrvcTpCd);", "if", "(arrSrvcType", "==", "null)", "{", "//", "It", "is", "an", "error", "of", "Arrangement", "Service", "Type", "Code", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4\uc720\ud615\ucf54\ub4dc", "\uc624\ub958\uc785\ub2c8\ub2e4.", "throw", "new", "BizApplicationException(\"AAPARE0579\");", "}", "switch", "(arrSrvcType)", "{", "case", "GAIN_MISCELLANEOUS_REVENUE:", "_doServiceAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "condition", "related", "actions", "for", "input", "service", "according", "to", "product", "condition", "value", "or", "negotiated", "value.", "For", "example,", "the", "\"Required", "document\"", "condition", "has", "the", "product", "required", "document", "type", "for", "loan", "application", "service.", "The", "arrangement", "condition", "action", "validate", "the", "required", "document", "type", "is", "received", "(presented)", "or", "not.", "Another", "example", "is", "the", "deposit", "open", "service,", "\"Interest", "capitalization", "YN\"", "condition", "dose", "the", "action", "to", "make", "an", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date.", "This", "method", "performs", "the", "function", "of", "performing", "product", "condition", "management", "rule", "registered", "on", "system.", "Implementation", "of", "condition", "management", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "according", "to", "the", "arrangement", "condition", "class", "implementation", "method,", "and", "the", "implemented", "arrangement", "condition", "class", "should", "specify", "the", "process", "target", "class", "by", "condition.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", "Caution", ":", "-", "To", "define", "condition", "management", "rule", "by", "service", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", ">", "Select", "service"]}
{"code_tokens": ["static", "Object", "getBean(String", "arg0)", "throws", "NestedRuntimeException", "{", "return", "LApplicationContext.getCurrentApplicationContext().getBean(arg0);", "}"], "docstring_tokens": ["get", "bean"]}
{"code_tokens": ["public", "CaArrArrRelPdRuleMgmtSvcGetArrArrRelPdRuleListOut", "getListArrArrRelPdRule(CaArrArrRelPdRuleMgmtSvcArrArrRelPdRuleIn", "in)", "throws", "BizApplicationException", "{", "CaArrArrRelPdRuleMgmtSvcGetArrArrRelPdRuleListOut", "out", "=", "new", "CaArrArrRelPdRuleMgmtSvcGetArrArrRelPdRuleListOut();", "List<CaArrArrRelPdRuleMgmtSvcGetArrArrRelPdRuleDtl>", "arrArrRelPdRuleDtl", "=", "new", "ArrayList<CaArrArrRelPdRuleMgmtSvcGetArrArrRelPdRuleDtl>();", "CaArrArrRelPdRuleIO", "arrArrRelPdRuleListSrchKeyIn", "=", "_setArrArrRelPdRuleListSearchKeyIn(in);", "List<CaArrArrRelPdRuleIO>", "ruleList", "=", "_getArrArrRelPdRuleMgmt().getListArrArrRelPdRule(arrArrRelPdRuleListSrchKeyIn);", "for", "(CaArrArrRelPdRuleIO", "rule", ":", "ruleList)", "{", "arrArrRelPdRuleDtl.add(_setArrArrRelPdRuleMgmtSvcArrArrRelPdRuleDtl(rule));", "}", "out.setTblList(arrArrRelPdRuleDtl);", "return", "out;", "}"], "docstring_tokens": ["Get", "the", "list", "of", "rules", "about", "arrangement", "arrangement", "relation", "and", "product."]}
{"code_tokens": ["public", "void", "terminate(InsrncStsChngIn", "in)", "throws", "BizApplicationException", "{", "super.terminate(in);", "}"], "docstring_tokens": ["terminate", "assessment", "status"]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "{", "for", "(BaseIntRtAplyTmCoreEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "void", "saveSubInfo(Map<String,", "String>", "subInfoMap,", "ArrTxImpl", "arrTx)", "{", "//", "1.", "\uc785\ub825\uc73c\ub85c", "\ubc1b\uc740", "Map\uc774", "\ube44\uc5ec", "\uc788\uac70\ub098", "null\uc77c", "\ub54c", ",", "null", "\uccb4\ud06c\ud558\ub294", "\uc774\uc720\ub294", "CTI,", "EAV\ubd84\ub9ac\ud558\ub294", "\uba54\uc18c\ub4dc\uc5d0\uc11c", "\uc5c6\uc73c\uba74", "null", "return\ud558\uace0", "\uc788\uc74c.", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "\uc18d\uc131\uac12", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\uac70\ub798\uad00\ub828", "\ubcf4\uc870\uba85\uc138", "\uc870\ud68c(\uce90\uc2dc\ub85c\ubd80\ud130)", "IValueObject", "oldCache", "=", "getSubInfoCache(arrTx);", "//", "4.", "DB", "\ubc18\uc601", "if(oldCache", "==", "null)", "{", "//", "4.1.1", "DBIO", "VO", "\uc778\uc2a4\ud134\uc2a4", "\uc0dd\uc131", "oldCache", "=", "_newSubInfoDBIO(arrTx);", "//", "4.1.2", "primary", "key", "\uc870\ub9bd", "_setKey(oldCache,arrTx);", "//", "4.1.3", "\ubcf4\uc870\uc815\ubcf4Map->", "DBIO", "VO\uac12", "\ucc44\uc6b0\uae30", "DtoUtils.setSubInfoIO(subInfoMap,", "oldCache);", "//", "4.1.4", "\uce90\uc2f1\ub41c", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc5c6\uc73c\uba74", "\ucd5c\ucd08", "\uc800\uc7a5,", "\uc989", "insert", "_insertSubInfo(arrTx,", "oldCache);", "//", "4.1.5", "arrTx.setArrTxSubInfoCache(oldCache);", "}else", "{", "//", "4.2.1.", "\uce90\uc2f1\ub41c", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc788\uc73c\uba74", "\ubcc0\uacbd", "\uc800\uc7a5,", "\uc989", "update,", "update\uc804", "\uae30\uc874\uc815\ubcf4\ub791", "\ub3d9\uc77c", "\uc2dc", "\ub9ac\ud134", "if", "(!DtoUtils.isValChanged(subInfoMap,", "oldCache))", "{", "return;", "}", "//", "4.2.4", "update", "-", "\uc0c8\ub85c\ubcc0\uacbd\ub418\uc5b4\uc57c", "\ud560", "\uc18d\uc131\uc744", "DBIO", "VO", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "oldCache);", "//", "4.2.5", "update", "-", "update", "\uc218\ud589", "_updateSubInfo(arrTx,", "oldCache);", "}", "//", "//", "5.", "\uce90\uc2dc", "\ucc98\ub9ac", "(DBIO", "VO->Interface", "VO)", "&", "\uce90\uc2f1", "//", "_saveSubInfoCache(subInfoDBIO,arrTx);", "}"], "docstring_tokens": ["Save", "an", "appraisal", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "StStlmntCalcnSIO", "stStlmntCalcnSIOIn)", "{", "logger.debug(\"##<ST-StlmntCalcnSubInfoBiz>", "saveMapSubInfo\");", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.create", "a", "new", "instance", "of", "I/F", "VO", "//IValueObject", "subInfoIfVo", "=", "new", "StlmntCalcnSubInfo();", "//", "2.create", "a", "new", "instance", "of", "DBIO", "VO", "StStlmntCalcnSIO", "stStlmntCalcnSIO", "=", "new", "StStlmntCalcnSIO();", "//", "3.set", "primary", "key", "_setKey(stStlmntCalcnSIO,", "stStlmntCalcnSIOIn);", "//", "4.convert", "map", "to", "DBIO", "VO", "DtoUtils.setSubInfoIO(subInfoMap,", "stStlmntCalcnSIO);", "//", "5.insert", "subsidiary", "detail", "_insertSubInfo(stStlmntCalcnSIO);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "int", "delete(String", "instCd,", "String", "tblNm,", "String", "xtnAtrbtNm)", "{", "super.clearCache(DataCacheCoreConfig.COMMON_TABLE_XTN_ATTRIBUTE_SELECT_CACHE);", "return", "_getCmTblXtnAtrD().delete(instCd,", "tblNm,", "xtnAtrbtNm);", "}"], "docstring_tokens": ["It", "removes", "document", "information."]}
{"code_tokens": ["public", "String", "getSubInfo(PrtnrCore", "prtnrCore,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getPrtnrSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(PrtnrImpl)", "prtnrCore);", "}"], "docstring_tokens": ["This", "method", "provides", "to", "inquire", "the", "specific", "subsidiary", "information", "named", "'xtnAtrbtNm'."]}
{"code_tokens": ["public", "List<XtnCdIO>", "getListCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "List<XtnCdIO>", "xtnCdIOs", "=", "new", "ArrayList<XtnCdIO>();", "String", "lngCd", "=", "supplInfoVal", "==", "null", "?", "null", ":", "String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue()));", "String", "instCd", "=", "supplInfoVal", "==", "null", "?", "null", ":", "String.valueOf(supplInfoVal.get(InstParamEnum.INSTITUTION_CODE.getValue()));", "if", "(StringCoreUtils.isEmpty(cdNbr))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@cdNbr\"", "});", "}", "if", "(StringCoreUtils.isEmpty(lngCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@lngCd\"", "});", "}", "/*", "*", "\uae30\uad00\ubcc4\ub85c", "\ud1b5\ud654\ucf54\ub4dc\ub97c", "\uc870\ud68c", "\ud55c\ub2e4.", "*", "(AS-IS)\ud1b5\ud654\ucf54\ub4dc", "\uc870\ud68c\uc2dc", "\uae30\uad00\ubcc4\ud1b5\ud654\ucf54\ub4dc\uac00", "\uc874\uc7ac", "\ud558\uba74", "\ud574\ub2f9", "list", "return", "*", "(AS-IS)\uc874\uc7ac", "\ud558\uc9c0", "\uc54a\uc73c\uba74", "STDA", "return", "*", "(TO-BE)#20254", "\ud1b5\ud654\ucf54\ub4dc\ub294", "\uae30\uad00\ub370\uc774\ud130\ub9cc", "\ucc38\uc870(\ud45c\uc900\uae30\uad00\uc758", "\ud1b5\ud654\ucf54\ub4dc", "\ucc38\uc870\ud558\uc9c0", "\uc54a\ub294\ub2e4.)", "2020.11.16", "*/", "List<CmCrncyCdMIO>", "cmCrncyCdIOs", "=", "_getCmCrncyCdDso().selectList(instCd);", "//", "//(TO-BE)#20254", "\ud1b5\ud654\ucf54\ub4dc\ub294", "\uae30\uad00\ub370\uc774\ud130\ub9cc", "\ucc38\uc870(\ud45c\uc900\uae30\uad00\uc758", "\ud1b5\ud654\ucf54\ub4dc", "\ucc38\uc870\ud558\uc9c0", "\uc54a\ub294\ub2e4.)", "2020.11.16", "//", "if(cmCrncyCdIOs", "==", "null", "||", "cmCrncyCdIOs.isEmpty())", "{", "//", "cmCrncyCdIOs", "=", "_getCmCrncyCdDso().selectList(_getCmnContext().getStandardInstCode());", "//", "}", "for", "(int", "i", "=", "0;", "i", "<", "cmCrncyCdIOs.size();", "i++)", "{", "XtnCdIO", "xtnCdIO", "=", "new", "XtnCdIO();", "xtnCdIO.setCd(cmCrncyCdIOs.get(i).getCrncyCd());", "xtnCdIO.setLngCd(lngCd);", "if(StringCoreUtils.isEmpty(lngCd))", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CdNbrCoreEnum.CURRENCY_CD.getValue().concat(cmCrncyCdIOs.get(i).getCrncyCd())));", "}", "else", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CdNbrCoreEnum.CURRENCY_CD.getValue().concat(cmCrncyCdIOs.get(i).getCrncyCd()),", "lngCd));", "}", "xtnCdIOs.add(xtnCdIO);", "}", "return", "xtnCdIOs;", "}"], "docstring_tokens": ["This", "method", "returns", "the", "list", "of", "code", "corresponding", "to", "the", "search", "condition"]}
{"code_tokens": ["public", "ScrtyIntMngrSvcSaveOut", "openScrtyInt(ScrtyIntMngrSvcSaveIn", "in)throws", "BizApplicationException", "{", "/**", "*", "service", "validation", "*/", "_serviceValidate(in);", "if(_isScrtyIntOpnTx(in.getScrtyIntId())){", "return", "_openScrtyInt(in);", "}", "else{", "return", "_modifyScrtyInt(in);", "}", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "This", "service", "supplies", "to", "inquire", "information", "of", "security", "interest.", "*", "</pre>", "*", "@flow", "*", "<pre>", "*", "1.", "get", "security", "interest", "by", "security", "interest", "identification", "*", "2.", "get", "basic", "information", "of", "security", "interest", "*", "3.", "assemble", "output", "*", "3.1", "assemble", "basic", "information", "of", "security", "interest.", "*", "3.2", "assemble", "extended", "attributes", "of", "security", "interest.", "*", "3.3", "assemble", "information", "of", "relation", "between", "collateral", "and", "security", "interest.", "*", "</pre>", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\uc774", "\uc11c\ube44\uc2a4\ub294", "\ub2f4\ubcf4\ubb3c\uad8c\uc758", "\uc815\ubcf4\ub97c", "\uc870\ud68c\ud558\ub294", "\uae30\ub2a5\uc744", "\uc81c\uacf5\ud55c\ub2e4.", "*", "</pre>", "*", "@flow", "*", "<pre>", "*", "1.", "\uc124\uc815\uc2dd\ubcc4\uc790\uc5d0", "\uc758\ud55c", "\uc124\uc815\uc815\ubcf4", "\uc870\ud68c", "*", "2.", "\uc124\uc815\uc758", "\uae30\ubcf8\uc815\ubcf4", "\uc870\ud68c", "*", "3.", "\ucd9c\ub825\uac12", "\uc870\ub9bd", "*", "3.1.", "\uc124\uc815\uae30\ubcf8\uc815\ubcf4", "\uc870\ub9bd", "*", "3.2.", "\uc124\uc815\uc758", "\ud655\uc7a5\uc18d\uc131", "\uc870\ub9bd", "*", "3.3.", "\uc124\uc815,\ub2f4\ubcf4", "\uad00\uacc4\uc815\ubcf4", "\uc870\ub9bd", "*", "</pre>", "*", "</div>", "*", "@param", "scrtyIntMngrSvcGetIn", "(required)", ":", "inquire", "security", "interest", "service", "input", "*", "@return", "ScrtyIntMngrSvcGetOut", ":", "inquire", "security", "interest", "service", "output", "*", "@since", "3.0.0", "*", "@example", "*", "<pre>", "*", "-Input", "JSON", "*", "ScrtyIntMngrSvcGetIn:{scrtyIntId:", "\"000000000002193\"}", "*", "-Output", "JSON", "*", "\"ScrtyIntMngrSvcGetOut\"", ":", "{\"scrtyIntId\"", ":", "\"000000000002193\",\"assetScrtyIntRelStsCd\"", ":", "null,\"assetKndCd\"", ":", "null,", "*", "\"assetId\"", ":", "\"400000000002716\",\"scrtyIntTpCd\"", ":", "\"02\",\"crdtrDscd\"", ":", "\"1\",\"crdtrNm\"", ":", "\"\ubc45\ud06c\uc6e8\uc5b4\",\"scrtyIntDt\"", ":", "\"20171110\",", "*", "\"scrtyIntPrity\"", ":", "1,\"scrtyIntRt\"", ":", "100.00,\"crncyCd\"", ":", "\"KRW\",\"scrtyIntAmt\"", ":", "10000.00,\"scrtyIntStsCd\"", ":", "\"2\",\\", "*", "\"debtorCustId\"", ":", "\"00000017537C\",\"debtorNm\"", ":", "\"\uc870\uace0\uac1d\",\"thirdPartyCltrlYn\"", ":", "\"N\",\"debtorOwnrRelCd\"", ":", "\"01\",", "*", "\"cltrlOprtngDscd\"", ":", "null,\"securedDebtCnfrmtnDscd\"", ":", "null,\"stlmntBaseDt\"", ":", "null,\"txDeptId\"", ":", "\"10000\",", "*", "\"txDeptNm\"", ":", "\"\uc911\uc559\uc9c0\uc810\",\"rgstrnAplctnNbr\"", ":", "null,\"arrId\"", ":", "null}"], "docstring_tokens": ["It", "register", "security", "interest", "for", "the", "asset", "and", "create", "and", "return", "a", "object", "to", "access", "it."]}
{"code_tokens": ["public", "WorkflowRuleMgmtSvcIO", "clone(){", "try{", "WorkflowRuleMgmtSvcIO", "object=", "(WorkflowRuleMgmtSvcIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getArrExtrnlIdNbr(){", "return", "arrExtrnlIdNbr;", "}"], "docstring_tokens": ["Inquire", "the", "external", "ID", "number", "which", "identified", "the", "current", "arrangement."]}
{"code_tokens": ["protected", "void", "saveUniqueBusinessBean(String", "arrIssmdaTpCd,", "String", "arrIssmdaInhrncId,", "ArrIssmdaCoreImpl", "arrIssmdaCoreImpl)", "throws", "BizApplicationException", "{", "ApplicationContextCoreUtils.saveUniqueBusinessBean(_getCmnContextCore().getInstCode().concat(arrIssmdaTpCd).concat(arrIssmdaInhrncId),", "arrIssmdaCoreImpl);", "}"], "docstring_tokens": ["save", "unique", "business", "bean", "in", "one", "transaction"]}
{"code_tokens": ["public", "java.lang.String", "getTxStaffId(){", "return", "txStaffId;", "}"], "docstring_tokens": ["This", "method", "inquires", "a", "staff", "identification", "of", "the", "transaction."]}
{"code_tokens": ["public", "CustRprsnChngSvcDeleteLoinInfoIn", "clone(){", "try{", "CustRprsnChngSvcDeleteLoinInfoIn", "object=", "(CustRprsnChngSvcDeleteLoinInfoIn)super.clone();", "if", "(", "this.loinIdNbrList==", "null", ")", "object.loinIdNbrList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.security.service.dto.CustRprsnChngSvcDeleteLoinInfoInSub>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.security.service.dto.CustRprsnChngSvcDeleteLoinInfoInSub>(loinIdNbrList.size());", "for(", "bankware.corebanking.customer.security.service.dto.CustRprsnChngSvcDeleteLoinInfoInSub", "item", ":", "loinIdNbrList", "){", "clonedList.add(", "(bankware.corebanking.customer.security.service.dto.CustRprsnChngSvcDeleteLoinInfoInSub)item.clone());", "}", "object.loinIdNbrList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "getBalanceVerificationTotalCount(BalVrfctnSrchIn", "in)", "throws", "BizApplicationException", "{", "if", "(BalVrfctnRsltQryDscdEnum.ALL.getValue().equals(in.getBalVrfctnInqryDscd())){", "//return", "_getAcBalVrfctnSmtnDDso().selectBalVrfctnAllTotalCount(_setAcBalVrfctnSmtnDIO(in));", "return", "_getAcBalVrfctnSmtnDDso().selectListBalVrfctnRsltTotalCnt(_setAcBalVrfctnSmtnDIO(in));", "}", "else{", "return", "_getAcBalVrfctnSmtnDDso().selectBalVrfctnWithDifferenceTotalCount(_setAcBalVrfctnSmtnDIO(in));", "}", "}"], "docstring_tokens": ["It", "is", "for", "getting", "the", "count", "of", "balance", "cross-check", "data", "to", "compare", "the", "balances", "from", "the", "settlement", "component", "with", "the", "balances", "from", "the", "general", "ledger", "for", "each", "account", "title.", "If", "balance", "verification", "inquiry", "distinction", "code", "is", "1,", "then", "all", "count", "of", "balance", "verification", "result", "will", "be", "queried,", "or", "the", "balance", "verification", "inquiry", "distinction", "code", "is", "2,", "then", "difference", "count", "will", "be", "queried."]}
{"code_tokens": ["public", "CaArrIssmdaTmpltMgmtSvcGetTmpltInfoOut", "clone(){", "try{", "CaArrIssmdaTmpltMgmtSvcGetTmpltInfoOut", "object=", "(CaArrIssmdaTmpltMgmtSvcGetTmpltInfoOut)super.clone();", "if", "(", "this.prflAtrbtList==", "null", ")", "object.prflAtrbtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaPrflAtrbtInfo>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaPrflAtrbtInfo>(prflAtrbtList.size());", "for(", "bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaPrflAtrbtInfo", "item", ":", "prflAtrbtList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaPrflAtrbtInfo)item.clone());", "}", "object.prflAtrbtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(CustTxImpl", "custTxImpl)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtCustTxSIO", "subInfo", "=", "getSubInfoCache(custTxImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "Subsidiary", "Information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["public", "List<CaTblXtnAtrbtOut>", "getTableExtendAttribute(String", "instCd,", "String", "tblNm)", "throws", "BizApplicationException", "{", "return", "this.getTableExtendAttribute(instCd,", "tblNm,", "CaXtnAtrbtVrtnCmpsEnum.NA,", "null);", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "input", "condition(cmnContext", "institution)", "basic", "method", "reference", ":", "{@link", "TblXtnAtrbtCore", "getTableExtendAttribute(String,", "String,", "XtnAtrbtVrtnCmpsEnum,", "Map<String,", "String>)}"]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(ArrInternalKndEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "Long", "selectIncompletionNumberingCnt(String", "instCd,", "String", "acctgPrcsDt)", "{", "return", "_getAcAcctgLDfrdDso().selectIncompletionNumberingCnt(instCd,", "acctgPrcsDt);", "}"], "docstring_tokens": ["This", "class", "returns", "the", "number", "of", "unprocessed", "data", "(janz_prcs_yn", "=", "'N')", "currently", "not", "numbered."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "assetTxSubInfoMap,", "AssetTxCore", "assetTx)", "throws", "BizApplicationException", "{", "_getAssetTxSubInfoBiz().saveMapSubInfo(assetTxSubInfoMap,", "(AssetTxImpl)", "assetTx);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "subInfoMap"]}
{"code_tokens": ["public", "List<TblXtnAtrbtOut>", "getTableExtendAttribute(String", "instCd,", "String", "tblNm,", "XtnAtrbtVrtnCmpsEnum", "xtnAtrbtVrtnCmpsCd,", "Map<String,", "String>", "mapCnd)", "throws", "BizApplicationException", "{", "//", "Check", "input", "if", "(StringCoreUtils.isEmpty(instCd))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@instCd\"", "});", "}", "if", "(StringCoreUtils.isEmpty(tblNm))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@tblNm\"", "});", "}", "if", "(xtnAtrbtVrtnCmpsCd", "==", "null", "||", "StringCoreUtils.isEmpty(xtnAtrbtVrtnCmpsCd.getValue()))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "if", "(!XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)", "&&", "!XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)", "&&", "(mapCnd", "==", "null", "||", "mapCnd.isEmpty()))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "List<TblXtnAtrbtOut>", "out", "=", "new", "ArrayList<TblXtnAtrbtOut>();", "List<String>", "itmList", "=", "new", "ArrayList<String>();", "//", "Set", "condition", "if", "(XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd))", "{", "//", "skip;", "}", "else", "if", "(XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd))", "{", "itmList.add(\"", "\");", "}", "else", "if", "(XtnAtrbtVrtnCmpsEnum.PD_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb1", "=", "new", "StringBuilder();", "sb1.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdTmpltCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTmpltCd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdCd\")).append(\"\\\"}\");", "itmList.add(sb1.toString());", "StringBuilder", "sb2", "=", "new", "StringBuilder();", "sb2.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdTmpltCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTmpltCd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb2.toString());", "StringBuilder", "sb3", "=", "new", "StringBuilder();", "sb3.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb3.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb3.append(\"\\\"pdTmpltCd\\\":\\\"\\\",\").append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb3.toString());", "StringBuilder", "sb4", "=", "new", "StringBuilder();", "sb4.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb4.append(\"\\\"pdTpCd\\\":\\\"\\\",\").append(\"\\\"pdTmpltCd\\\":\\\"\\\",\").append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb4.toString());", "}", "else", "if", "(XtnAtrbtVrtnCmpsEnum.ACTOR_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"actorTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"actorTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_ARR_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrArrRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrArrRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_CUST_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrCustRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrCustRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "/*", "2016.03.29", "hongun.song", "\ucd94\uac00*/", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_ACTVTY_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrActvtyTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrActvtyTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_SRVC_BLCKNG_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrSrvcBlckngCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrSrvcBlckngCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_ISSMDA_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrIssmdaTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrIssmdaTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.DUE_DLGNC_DSCD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"dueDlgncDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"dueDlgncDscd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "if(mapCnd.get(\"actorTpCd\")", "!=", "null){", "StringBuilder", "sbAct", "=", "new", "StringBuilder();", "sbAct.append(\"{\").append(\"\\\"actorTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"actorTpCd\")).append(\"\\\"}\");", "itmList.add(sbAct.toString());", "}", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_DOC_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrDocRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrDocRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.PRTNR_DTL_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"prtnrDtlTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"prtnrDtlTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}else", "{", "//", "Input", "field", "is", "incorrect.", "Information", "for", "Checking", ":", "{0}", "throw", "new", "BizApplicationException(\"AAPSVE0001\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn", "inDao", "=", "new", "CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn();", "inDao.setStdInstCd(_getCmnContextCore().getStandardInstCode());", "inDao.setInstCd(instCd);", "inDao.setTblNm(tblNm);", "inDao.setJsonKeyValCntnt(itmList);", "if", "(XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd))", "{", "inDao.setXtnAtrbtVrtnCmpsCd(\"\");", "}", "else", "if", "(XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd))", "{", "inDao.setXtnAtrbtVrtnCmpsCd(XtnAtrbtVrtnCmpsEnum.NA.getValue());", "}", "else", "{", "inDao.setXtnAtrbtVrtnCmpsCd(xtnAtrbtVrtnCmpsCd.getValue());", "}", "/*", "//", "[AS-IS]", "1.", "\uac1c\ubcc4+\ud45c\uc900", "\uae30\uad00", "\ub370\uc774\ud130", "\uc870\ud68c", "//", "2.", "\uc870\ud68c\uacb0\uacfc", "\uac80\uc99d\ucc98\ub9ac(\ud45c\uc900\uae30\uad00\uc778", "\uacbd\uc6b0", "\ud45c\uc900\uae30\uad00\uc758", "\ud655\uc7a5\uc18d\uc774", "\uc815\uc758", "\uc5ec\ubd80", "\ud655\uc778", "//", "3.", "(\uac1c\ubcc4+\ud45c\uc900", "\uae30\uad00", "\ub370\uc774\ud130", "\ubbf8", "\uc874\uc7ac\uc2dc", ")\ud45c\uc900\uae30\uad00\uc758", "\ub370\uc774\ud130", "\uc870\ud68c", "//", "execute", "query", "List<CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut>", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "for(CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut", "xtnAtrbtOut", ":", "xtnAtrbtList)", "{", "if(_getCmnContextCore().getStandardInstCode().equals(xtnAtrbtOut.getInstCd()))", "{", "CmTblXtnAtrDIO", "cmTblXtnAtrDIO", "=", "_getCmTblXtnAtrDDso().select(_getCmnContextCore().getStandardInstCode(),", "tblNm,", "xtnAtrbtOut.getXtnAtrbtNm());", "if(cmTblXtnAtrDIO", "!=", "null", "&&", "StringCoreUtils.isEmpty(cmTblXtnAtrDIO.getInstIndvDfntnMndtryYn())", "&&", "CCM01.YES.equals(_getCmTblXtnAtrDDso().select(_getCmnContextCore().getStandardInstCode(),", "tblNm,", "xtnAtrbtOut.getXtnAtrbtNm()).getInstIndvDfntnMndtryYn()))", "{", "throw", "new", "BizApplicationException(\"AAPCME0182\",", "new", "Object[]", "{", "xtnAtrbtOut.getXtnAtrbtNm()", "});", "}", "}", "}", "//", "one", "more", "try", "with", "standard", "institution", "if(xtnAtrbtList.isEmpty())", "{", "inDao.setInstCd(_getCmnContextCore().getStandardInstCode());", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "}", "*/", "//", "[TO-BE]", "1.", "\uac1c\ubcc4+\ud45c\uc900", "\uae30\uad00", "\ub370\uc774\ud130", "\uc870\ud68c", "//", "2.", "\uc870\ud68c\uacb0\uacfc", "\uac80\uc99d\ucc98\ub9ac(\ud45c\uc900\uae30\uad00\uc778", "\uacbd\uc6b0", "\ud45c\uc900\uae30\uad00\uc758", "\ud655\uc7a5\uc18d\uc774", "\uc815\uc758", "\uc5ec\ubd80", "\ud655\uc778", "//", "3.", "(\uac1c\ubcc4+\ud45c\uc900", "\uae30\uad00", "\ub370\uc774\ud130", "\ubbf8", "\uc874\uc7ac\uc2dc", ")\ud45c\uc900\uae30\uad00\uc758", "\ub370\uc774\ud130", "\uc870\ud68c", "//", "execute", "query", "List<CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut>", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "//", "//\uccb4\ud06c\ub85c\uc9c1", "\uc81c\uc678\ud568", "(cm_tbl_xtn_atr_d.INST_INDV_DFNTN_MNDTRY_YN", "\uae30\uad00\uac1c\ubcc4\uc815\uc758\ud544\uc218\uc5ec\ubd80)", "//", "for(CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut", "xtnAtrbtOut", ":", "xtnAtrbtList)", "{", "//", "}", "//\uac1c\ubcc4", "\uc870\ud68c\uc2dc", "\ud45c\uc900\uae30\uad00", "\ub370\uc774\ud130\ub3c4", "\uc870\ud68c\ud574", "\uc624\ubbc0\ub85c", "\uc758\ubbf8\uc5c6\ub294", "\ucffc\ub9ac\ub77c\uc11c", "\uc0ad\uc81c\ud568", "//", "//", "one", "more", "try", "with", "standard", "institution", "//", "if(xtnAtrbtList.isEmpty())", "{", "//", "inDao.setInstCd(_getCmnContextCore().getStandardInstCode());", "//", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "//", "}", "//", "set", "output", "for", "(CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut", "xtnAtrbt", ":", "xtnAtrbtList)", "{", "TblXtnAtrbtOut", "outParm", "=", "new", "TblXtnAtrbtOut();", "outParm.setTblNm(xtnAtrbt.getTblNm());", "outParm.setXtnAtrbtNm(xtnAtrbt.getXtnAtrbtNm());", "outParm.setMndtryYn(xtnAtrbt.getMndtryYn());", "outParm.setScrnInpYn(xtnAtrbt.getScrnInpYn());", "outParm.setScrnChngAblYn(xtnAtrbt.getScrnChngAblYn());", "outParm.setCustInqryTrgtYn(xtnAtrbt.getCustInqryTrgtYn());", "outParm.setIntrnlInqryTrgtYn(xtnAtrbt.getIntrnlInqryTrgtYn());", "outParm.setAtrbtTpCd(xtnAtrbt.getAtrbtTpCd());", "outParm.setCdNbr(xtnAtrbt.getCdNbr());", "outParm.setClHrarcyId(xtnAtrbt.getClHrarcyId());", "if(StringCoreUtils.isEmpty(xtnAtrbt.getAtrbtTpCd()))", "{", "StdAtrbtIO", "stdAtrbt", "=", "_getStdAtrbtProvider().getStandardAttribute(xtnAtrbt.getXtnAtrbtNm());", "if(stdAtrbt", "!=", "null", "&&", "stdAtrbt.getAtrbtTpCd()", "!=", "null)", "{", "outParm.setAtrbtTpCd(stdAtrbt.getAtrbtTpCd());", "}", "}", "out.add(outParm);", "}", "return", "out;", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "input", "condition"]}
{"code_tokens": ["public", "Integer", "getCustCountOverview(String", "actorTpCd,", "String", "actorNm,", "String", "loinIdNbr,", "String", "actorUnqIdNbr,", "String", "actorNmTpCd,", "String", "actorUnqIdNbrTpCd)", "throws", "BizApplicationException", "{", "//check", "required", "inputs", "if", "(StringUtils.isEmpty(actorNmTpCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@actorNmTpCd\"});", "}", "else", "if", "(StringUtils.isEmpty(actorUnqIdNbrTpCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@actorUnqIdNbrTpCd\"});", "}", "return", "_getCustBsicXtnBiz().getCustOverviewCount(_getCmnContext().getInstCode(),", "actorTpCd,", "actorNm,", "loinIdNbr,", "actorUnqIdNbr,", "actorNmTpCd,", "actorUnqIdNbrTpCd);", "}"], "docstring_tokens": ["Inquire", "customer", "count", "that", "matches", "the", "input", "actor", "type,", "actor", "name,", "actor", "unique", "identification", "number,", "login", "information,", "page", "number", "and", "count.", "It", "inquires", "the", "effective", "actor", "name,", "unique", "identification", "number", "and", "login", "information", "on", "transaction", "date."]}
{"code_tokens": ["public", "void", "close()", "throws", "ItemStreamException", "{", "if", "(logger.isDebugEnabled())", "logger.debug(\"ArrExtendAttributeReMakeTargetReader", "close\");", "DasUtils.disconnectDasExecutor(iterator);", "}"], "docstring_tokens": ["It", "closes", "the", "customer", "related", "person", "by", "updating", "delYn", "of", "basic", "information", "to", "'Y'."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(InsrncCore", "insrncCore)", "throws", "BizApplicationException", "{", "return", "_getInsrncSubInfoBiz().getMapSubInfo((InsrncImpl)insrncCore);", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "inquiring", "all", "of", "subsidiary", "information", "about", "transaction", "as", "MAP", "type."]}
{"code_tokens": ["public", "SvcEntryIn", "clone(){", "try{", "SvcEntryIn", "object=", "(SvcEntryIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CaInstSrvcIO>", "getListInstService(String", "instCd,", "String", "cmpntCd)", "throws", "BizApplicationException", "{", "return", "getListInstService(instCd,", "cmpntCd,", "null);", "}"], "docstring_tokens": ["inquiry", "institution", "service", "list"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(ProductPassbookTypeEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "//", "Return", "Output", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "InsrncCore", "insrncCore,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getInsrncSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "(InsrncImpl)", "insrncCore);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "BfInfoCntntSvcIn", "clone(){", "try{", "BfInfoCntntSvcIn", "object=", "(BfInfoCntntSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "StaffTxMgmtSvcItemOut", "clone(){", "try{", "StaffTxMgmtSvcItemOut", "object=", "(StaffTxMgmtSvcItemOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ActorCore", "actorCore,", "String", "ctcptId,", "int", "ctcptChngSeqNbr)", "throws", "BizApplicationException", "{", "return", "_getActorCtcptSubInfoBiz().getMapSubInfo((ActorImpl)", "actorCore,", "ctcptId,", "ctcptChngSeqNbr);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "insurance", "as", "a", "map."]}
{"code_tokens": ["public", "boolean", "isActive()", "throws", "BizApplicationException", "{", "if", "(ArrStsEnum.ACTIVE_TERMINATED.getValue().equals(getArrStsCd())", "&&", "!StringUtils.isEmpty(getArrMtrtyDt()))", "{", "return", "getArrMtrtyDt().compareTo(_getCmnContext().getTxDate())", ">", "0;", "}", "return", "this.getArrStsCd().equals(ArrStsEnum.ACTIVE.getValue());", "}"], "docstring_tokens": ["It", "checks", "if", "the", "staff's", "status", "is", "'active'."]}
{"code_tokens": ["public", "String", "getScrtyIntXtnInfo(ScrtyIntXtnInfoEnum", "scrtyIntXtnInfoEnum)", "throws", "BizApplicationException", "{", "//", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\uc815\ubcf4\uad00\ub9ac\ubc29\ubc95", "\ud310\ub2e8", "//", "1.", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AS_SCRTYINT_M.getValue(),", "scrtyIntXtnInfoEnum.getValue()))", "{", "return", "super.getScrtyIntXtnInfoByEav(scrtyIntXtnInfoEnum.getValue());", "}", "//", "2.", "\ubcf4\uc870\uba85\uc138", "else", "{", "return", "_getScrtyIntSubInfoBiz().getSubInfo(scrtyIntXtnInfoEnum.getValue(),", "this);", "}", "}"], "docstring_tokens": ["Inquire", "a", "specific", "extended", "information", "of", "the", "security", "interest."]}
{"code_tokens": ["public", "void", "saveAssetTxXtnInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "_getAssetTxXtnInfoBiz().saveAssetTxXtnInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "this,", "false);", "}"], "docstring_tokens": ["Save", "a", "specific", "extended", "information", "of", "the", "asset", "transaction."]}
{"code_tokens": ["public", "CaStaffInqrySvcGetStaffTreeListOut", "clone(){", "try{", "CaStaffInqrySvcGetStaffTreeListOut", "object=", "(CaStaffInqrySvcGetStaffTreeListOut)super.clone();", "if", "(", "this.staffTree==", "null", ")", "object.staffTree", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffTreeOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffTreeOut>(staffTree.size());", "for(", "bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffTreeOut", "item", ":", "staffTree", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffTreeOut)item.clone());", "}", "object.staffTree", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaSrvcMgmtSvcChngListIn", "clone(){", "try{", "CaSrvcMgmtSvcChngListIn", "object=", "(CaSrvcMgmtSvcChngListIn)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>(tblNm.size());", "for(", "bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "if", "(", "this.saveList==", "null", ")", "object.saveList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>(saveList.size());", "for(", "bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn", "item", ":", "saveList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn)item.clone());", "}", "object.saveList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrPlanIO>", "getArrPlans(String", "arrSrvcCd,", "String", "exctnPlnDt)", "throws", "BizApplicationException", "{", "return", "_getArrRealCoreFundamentalAgent().getArrPlans(arrSrvcCd,", "exctnPlnDt,", "this);", "}"], "docstring_tokens": ["Inquire", "the", "full", "list", "of", "active", "plans", "registered", "in", "the", "contract"]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(StStlmntCalcnSIO", "stStlmntCalcnSIOIn){", "logger.debug(\"##<ST-StlmntCalcnSubInfoBiz>", "getMapSubInfo\");", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.I/F", "VO", "\uc0dd\uc131", "StlmntCalcnSubInfo", "subInfoIntrfcIO", "=", "new", "StlmntCalcnSubInfo", "();", "//", "2.DBIO", "VO", "\uc2e0\uaddc", "StStlmntCalcnSIO", "stlmntCalcnSIO", "=", "new", "StStlmntCalcnSIO();", "//", "3.DB", "\uc870\ud68c", "//selectList", "DSO\uc758", "Key:", "\uacc4\uc0b0\uadfc\uae30\uc758", "\uc0c1\uc138\uc77c\ub828\ubc88\ud638\uae4c\uc9c0\uc758", "\ud0a4\uac12\uc744", "\uc774\uc6a9\ud558\uc5ec", "\uacc4\uc0b0\uadfc\uae30", "\ubcf4\uc870\uba85\uc138\ub97c", "\uac80\uc0c9\uc2dc", "\uc0ac\uc6a9", "StStlmntCalcnSIO", "stStlmntCalcnS", "=", "_getStlmntCalcnSDso().select(stStlmntCalcnSIOIn);", "if(stStlmntCalcnS", "==", "null)", "{", "return", "null;", "}", "//", "4.DBIO", "VO", "\ub97c", "I/F", "VO\ub85c", "\ubcc0\ud658", "DtoUtils.setSubInfoIO(stStlmntCalcnS,", "subInfoIntrfcIO);", "//", "5.I/F", "VO\ub97c", "MAP\uc73c\ub85c", "\ubcc0\ud658", "for(Entry<String,Object>", "entry", ":", "subInfoIntrfcIO.getFieldValues().entrySet())", "{", "if(entry.getValue()!=null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "thing", "as", "a", "map."]}
{"code_tokens": ["public", "List<ArrPlanIO>", "getArrPlans(String", "arrSrvcCd,String", "nxtExctnPlnDt,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "return", "_getArrPlanImpl().getArrPlans(arrSrvcCd,nxtExctnPlnDt,ArrPlnStsCoreEnum.ACTIVE.getValue(),arrReal);", "}"], "docstring_tokens": ["Inquire", "arrangement", "active", "plans", "on", "specified", "date", "with", "arrangement", "service", "type", "code", "It", "inquire", "that", "only", "the", "status", "is", "'Active'."]}
{"code_tokens": ["public", "LnAplctnInfoQrySvcDocInfoOut", "clone(){", "try{", "LnAplctnInfoQrySvcDocInfoOut", "object=", "(LnAplctnInfoQrySvcDocInfoOut)super.clone();", "if", "(", "this.xtnAtrbtList==", "null", ")", "object.xtnAtrbtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.underexamination.consultationapplication.service.dto.LnAplctnDocInfoQrySvcDocXtnAtrbtIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.underexamination.consultationapplication.service.dto.LnAplctnDocInfoQrySvcDocXtnAtrbtIO>(xtnAtrbtList.size());", "for(", "bankware.corebanking.underexamination.consultationapplication.service.dto.LnAplctnDocInfoQrySvcDocXtnAtrbtIO", "item", ":", "xtnAtrbtList", "){", "clonedList.add(", "(bankware.corebanking.underexamination.consultationapplication.service.dto.LnAplctnDocInfoQrySvcDocXtnAtrbtIO)item.clone());", "}", "object.xtnAtrbtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "checkCode(CdNbrInfoIO", "in,", "String", "cd)", "throws", "BizApplicationException", "{", "CdD", "cdDImpl", "=", "_getCdDImpl(in);", "return", "cdDImpl.checkCode(in,", "cd);", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["public", "List<StStlmntXtnInfoDIO>", "getListStlmntXtnInfo(StStlmntXtnInfoDIO", "stStlmntXtnInfoDIO)", "throws", "BizApplicationException", "{", "logger.debug(\"StlmntCoreImpl==>getListStlmntXtnInfo", ":", "stStlmntXtnInfoDIO:", "{}\",", "stStlmntXtnInfoDIO);", "return", "_getStlmntXtnInfoBiz().getListStlmntXtnInfo(stStlmntXtnInfoDIO);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "extended", "information", "list", "(using", "Key", "to", "detail", "sequence", "number)."]}
{"code_tokens": ["public", "List<StaffSrchOut>", "getListPrtnrStaffInfoByName(String", "instCd,", "String", "actorName,", "String", "actorNmTpCd,", "String", "prtnrActorId,", "String", "prtnrDtlTpCd)", "throws", "BizApplicationException", "{", "//check", "required", "inputs", "if", "(StringUtils.isEmpty(instCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@instCd\"});", "}", "if", "(StringUtils.isEmpty(actorNmTpCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@actorNmTpCd\"});", "}", "if", "(CCM01.NO.equals(_getInstParmProvider().getInstParm(instCd,", "InstParamEnum.STAFF_PARAM_ACTOR_INFORM_USE_YN.getValue())))", "{", "return", "_getStaffBsicXtnBiz().getListPartnerStaffByName(instCd,", "actorName,", "prtnrActorId,", "prtnrDtlTpCd);", "}", "return", "_setStaffSrchOutList(_getActorNmXtn().getListPartnerStaffByName(instCd,", "actorName,", "actorNmTpCd,", "prtnrActorId,", "prtnrDtlTpCd));", "}"], "docstring_tokens": ["Inquire", "partner's", "staff", "information", "list", "by", "actor", "name."]}
{"code_tokens": ["public", "boolean", "isTableAttributeValid(String", "xtnTblNm,", "String", "xtnAtrbtNm,", "String", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if(!_checkAttributeBase(xtnTblNm,", "xtnAtrbtNm,", "atrbtCntnt))", "{", "return", "false;", "}", "CaCmTblXtnAtrVrtnCmpsDIO", "cmTblXtnAtrVrtnCmpsDIO", "=", "_getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getInstCode(),", "xtnTblNm,", "xtnAtrbtNm);", "if(cmTblXtnAtrVrtnCmpsDIO", "==", "null", "||", "\"\".equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd()))", "{", "//", "\uae30\uad00\uc5d0", "\ub370\uc774\ud130\uac00", "\uc5c6\uc744\uc2dc", "STDA", "\uae30\uad00\uc73c\ub85c", "\uc7ac\uc870\ud68c", "\ud558\uc5ec", "\uac80\uc99d", "\ud55c\ub2e4.", "cmTblXtnAtrVrtnCmpsDIO", "=", "new", "CaCmTblXtnAtrVrtnCmpsDIO();", "cmTblXtnAtrVrtnCmpsDIO", "=", "_getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getStandardInstCode(),", "xtnTblNm,", "xtnAtrbtNm);", "if(cmTblXtnAtrVrtnCmpsDIO", "!=", "null", "&&", "CaXtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd()))", "{", "return", "true;", "}", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())){", "return", "true;", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "Table", "Extension", "Attribute", "Effectiveness"]}
{"code_tokens": ["public", "List<ArrInternal>", "getListArrInternal(String", "pdCd)", "throws", "BizApplicationException", "{", "return", "_getArrPdRelImpl().getInternalArr(pdCd);", "}"], "docstring_tokens": ["This", "method", "inquire", "the", "internal", "arrangement", "list", "in", "which", "the", "state", "of", "the", "arrangement", "reaches", "a", "certain", "state", "by", "the", "product", "template."]}
{"code_tokens": ["public", "List<CaTblXtnAtrbtOut>", "getTableExtendAttribute(String", "instCd,", "String", "tblNm)", "throws", "BizApplicationException", "{", "return", "this.getTableExtendAttribute(instCd,", "tblNm,", "CaXtnAtrbtVrtnCmpsEnum.NA,", "null);", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "no", "condition(cmnContext", "institution)", "basic", "method", "reference", ":", "{@link", "TblXtnAtrbtCore", "getTableExtendAttribute(String,", "String,", "XtnAtrbtVrtnCmpsEnum,", "Map<String,", "String>)}"]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getInstCd(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "String", "output", "=", "bfCnd.getInstCd();", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "institution", "code", "of", "product"]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AssetCore", "asset)", "throws", "BizApplicationException", "{", "return", "_getAssetSubInfoBiz().getMapSubInfo((AssetImpl)asset);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "as", "a", "map."]}
{"code_tokens": ["public", "CndVal", "getComplexCndValue(List<CmpsCnd>", "cmpsCndList)", "throws", "BizApplicationException", "{", "if", "(!isComplexCnd())", "{", "throw", "new", "BizApplicationException(\"AAPPDE0003\",", "null);", "}", "CndVal", "cndVal", "=", "null;", "//", "Set", "the", "composing", "condition", "value", "to", "input", "DTO", "//", "\uc785\ub825\ub41c", "\uad6c\uc131\uc870\uac74\uac12\uc744", "\uc785\ub825DTO\uc5d0", "set\ud568", "PdPdCndUnitComplexSearchIn", "inDaoS010", "=", "_setPdPdCndUnitComplexSearchIn();", "inDaoS010.setTierNbr(getComplexCndStructureInfo(cmpsCndList).getTierNbr());", "if", "(isListCnd())", "{", "//", "\ubcf5\ud569\ubaa9\ub85d\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getComplexListCndValue(inDaoS010);", "}", "else", "if", "(isRngCnd())", "{", "//", "\ubcf5\ud569\ubc94\uc704\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getComplexRangeCndValue(inDaoS010);", "}", "else", "if", "(isIntCnd())", "{", "//", "\ubcf5\ud569\uae08\ub9ac\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getComplexInterestCndValue(inDaoS010);", "}", "else", "if", "(isFeeCnd())", "{", "//", "\ubcf5\ud569\uc218\uc218\ub8cc\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getComplexFeeCndValue(inDaoS010);", "}", "//", "Return", "output", "return", "cndVal;", "}"], "docstring_tokens": ["This", "method", "inquire", "complex", "condition", "value", "of", "the", "composing", "value", "input", "value."]}
{"code_tokens": ["public", "List<CaAssetRegionClIO>", "getListAssetRegionClassification(String", "instCd)", "throws", "BizApplicationException{", "List<CaAssetRegionClIO>", "outList", "=", "new", "ArrayList<CaAssetRegionClIO>();", "List<CaAsAssetRegionClMIO>", "asAssetRegionClList", "=", "new", "ArrayList<>();", "Integer", "total", "=", "_AsAssetRegionClMDso().selectListCount(instCd);//82000", "Integer", "startNbr=0;", "Integer", "pgCnt=5000;", "while(startNbr<total){", "asAssetRegionClList.addAll(_AsAssetRegionClMDso().selectList(instCd,startNbr,pgCnt));", "startNbr+=pgCnt;", "}", "for(CaAsAssetRegionClMIO", "item", ":asAssetRegionClList)", "{", "CaAssetRegionClIO", "assetRegionClIO", "=", "new", "CaAssetRegionClIO();", "//", "Generated", "by", "code", "generator", "[[", "assetRegionClIO.setAddrHrarcyCd(item.getAddrHrarcyCd());", "assetRegionClIO.setAddrId(item.getAddrId());", "assetRegionClIO.setAssetAddrRegionClCrtrCd(item.getAssetAddrRegionClCrtrCd());", "assetRegionClIO.setAplyStartDt(item.getAplyStartDt());", "assetRegionClIO.setAplyEndDt(item.getAplyEndDt());", "assetRegionClIO.setAssetAddrRegionClCd(item.getAssetAddrRegionClCd());", "//", "Generated", "by", "code", "generator", "]]", "outList.add(assetRegionClIO);", "}", "return", "outList;", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "It", "registers", "asset", "region", "classification", "for", "new", "institution.", "*", "</pre>", "*", "@seealso", "*", "@note", "{@link", "CaAssetRegionClIO}", ":", "required", "fields", "-", "all", "of", "them", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\uc2e0\uaddc\uae30\uad00\uc744", "\uc704\ud574", "\uc790\uc0b0", "\uc9c0\uc5ed\ubd84\ub958\ub97c", "\uc0dd\uc131\ud55c\ub2e4.", "*", "</pre>", "*", "@seealso", "*", "@note", "{@link", "CaAssetRegionClIO}"], "docstring_tokens": ["It", "inquiries", "asset", "region", "classification", "information", "list."]}
{"code_tokens": ["public", "String", "getNbrgArrExternalId(String", "arrExtrnlIdNbrTpCd,", "Map<String,String>", "hashMap)", "throws", "BizApplicationException", "{", "return", "super.getNbrgArrExternalId(arrExtrnlIdNbrTpCd,", "hashMap);", "}"], "docstring_tokens": ["Number", "and", "inquire", "external", "id", "number", "in", "advance", "to", "register."]}
{"code_tokens": ["public", "CaStyleSvcTextStyleTree", "clone(){", "try{", "CaStyleSvcTextStyleTree", "object=", "(CaStyleSvcTextStyleTree)super.clone();", "if", "(", "this.children==", "null", ")", "object.children", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcTextStyleTree>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcTextStyleTree>(children.size());", "for(", "bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcTextStyleTree", "item", ":", "children", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcTextStyleTree)item.clone());", "}", "object.children", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isValidType(CaAtrbtTpEnum", "atrbtTp,", "String", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"atrbtTpCd={}\",", "atrbtTp);", "logger.debug(\"atrbtCntnt={}\",", "atrbtCntnt);", "}", "if", "(atrbtTp", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0037\",", "new", "Object[]", "{", "atrbtTp", "});", "}", "//", "Validate", "attribute", "type", "switch", "(atrbtTp)", "{", "case", "TEXT:", "//", "text", "return", "(StringUtils.isEmpty(atrbtCntnt))", "?", "false", ":", "true;", "case", "TEXT_DATE:", "//", "date", "return", "DateUtils.isValidDate(atrbtCntnt);", "case", "TEXT_NUMBER:", "//", "number", "return", "DataCheckUtils.isNumeric(atrbtCntnt);", "case", "NUMBER:", "//", "number", "return", "DataCheckUtils.isNumeric(atrbtCntnt);", "case", "TEXT_ALPHA_NUMERIC:", "//", "Alpha-Number", "return", "DataCheckUtils.isAlphaNumeric(atrbtCntnt);", "case", "YES_OR_NO:", "//", "yes", "or", "no", "return", "(CCM01.YES.equals(atrbtCntnt)", "||", "CCM01.NO.equals(atrbtCntnt))", "?", "true", ":", "false;", "case", "PASSWORD:", "//", "Password", "return", "DataCheckUtils.isValidPassword(atrbtCntnt);", "case", "TIMESTAMP:", "//", "timestamp", "return", "true;", "case", "JSON:", "//", "json", "return", "DataCheckUtils.isJson(atrbtCntnt);", "default:", "throw", "new", "BizApplicationException(\"AAPCME0037\",", "new", "Object[]", "{", "atrbtTp", "});", "}", "}"], "docstring_tokens": ["Validate", "that", "the", "value", "of", "the", "input", "attribute", "matches", "the", "type", "of", "the", "attribute."]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getListAllCmpsCndValue(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "List<CmpsCndOut>", "output", "=", "bfCnd.getListAllCmpsCndValue();", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(CollectionUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "the", "composing", "condition", "value", "of", "all", "tiers", "of", "the", "complex", "condition.", "DataCache", "has", "been", "applied."]}
{"code_tokens": ["public", "CashSndRcvMgmtSvcCashSndRcvListIn", "clone(){", "try{", "CashSndRcvMgmtSvcCashSndRcvListIn", "object=", "(CashSndRcvMgmtSvcCashSndRcvListIn)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.CashSndRcvMgmtSvcCashSndRcvIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.CashSndRcvMgmtSvcCashSndRcvIn>(tblNm.size());", "for(", "bankware.corebanking.accounting.cashaccounting.service.dto.CashSndRcvMgmtSvcCashSndRcvIn", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.cashaccounting.service.dto.CashSndRcvMgmtSvcCashSndRcvIn)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustRprsnChngSvcListTerminateListIn", "clone(){", "try{", "CustRprsnChngSvcListTerminateListIn", "object=", "(CustRprsnChngSvcListTerminateListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AsmCore", "asm)", "{", "_getAsmSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AsmImpl)asm);", "}"], "docstring_tokens": ["Save", "an", "asset", "transaction", "subsidiary", "information."]}
{"code_tokens": ["public", "PdTxSrvcMgmtSvcPdInfoByCndVal", "clone(){", "try{", "PdTxSrvcMgmtSvcPdInfoByCndVal", "object=", "(PdTxSrvcMgmtSvcPdInfoByCndVal)super.clone();", "if", "(", "this.cndList==", "null", ")", "object.cndList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdTxSrcMgmtSvcPdInfoByCndValSub>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdTxSrcMgmtSvcPdInfoByCndValSub>(cndList.size());", "for(", "bankware.corebanking.product.service.dto.PdTxSrcMgmtSvcPdInfoByCndValSub", "item", ":", "cndList", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdTxSrcMgmtSvcPdInfoByCndValSub)item.clone());", "}", "object.cndList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getXtnInfo(ArrGrpXtnInfoEnum", "arrGrpXtnInfoEnum)", "throws", "BizApplicationException", "{", "return", "super.getXtnInfo(arrGrpXtnInfoEnum.getValue());", "}"], "docstring_tokens": ["Inquire", "Arrangement", "group", "extend", "attribute."]}
{"code_tokens": ["public", "List<PdCnd>", "getCndMultiple(List<String>", "cndCdList)", "throws", "BizApplicationException", "{", "//", "\uc870\uac74\ucf54\ub4dc\ub9cc", "\uc785\ub825\ub41c", "\uacbd\uc6b0,", "\uc0c1\ud488\uc870\ud68c\uae30\uc900\uc77c\uc790\ub97c", "\uc785\ub825\ud558\uc5ec", "\uc720\ud6a8\uc870\uac74\uc870\ud68c", "//", "if", "the", "apply", "date", "was", "not", "inputed,", "use", "the", "product", "input", "date", "to", "//", "inquiry", "condition", "PdCndMltplIn", "in", "=", "new", "PdCndMltplIn();", "in.setAplyStartDt(aplyDt);", "in.setAplyStartTm(aplyTm);", "in.setAplyEndDt(aplyDt);", "in.setAplyEndTm(aplyTm);", "in.setCndCdList(cndCdList);", "return", "getCndMultiple(in);", "}"], "docstring_tokens": ["This", "Method", "create", "a", "list", "of", "condition", "objects", "for", "the", "list", "of", "input", "condition", "codes.", "condition", "information", "initialization.", "condition", "object", "has", "condition", "defined", "in", "benefit", "or", "common", "condition", "information."]}
{"code_tokens": ["public", "String", "getArrTxKnd(ArrRealCore", "arr)", "{", "logger.debug(\"===================", "ArrTxCustomImpl", "getArrTxKnd", "Start==========\");", "if(((ArrReal)arr).isArrKindInternal())", "{", "return", "ArrTxKndEnum.ARR_TX_INTERNAL.getValue();", "}else", "if(((ArrReal)arr).isArrKindTemporary())", "{", "return", "ArrTxKndEnum.ARR_TX_TEMPRARY.getValue();", "}else", "if(arr.getPdTmpltCd().equals(PdTemplateCodeEnum.ON_DEMAND_DPST.getValue()))", "{", "return", "ArrTxKndEnum.ARR_TX_DEMAND.getValue();", "}else", "{", "return", "ArrTxKndEnum.ARR_TX_NORMAL.getValue();", "}", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "getting", "the", "kind", "of", "transaction."]}
{"code_tokens": ["public", "String", "getArrXtnInfo(ArrXtnInfoEnum", "arrXtnInfoEnum)", "throws", "BizApplicationException", "{", "//", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\uc815\ubcf4\uad00\ub9ac\ubc29\ubc95", "\ud310\ub2e8", "//", "1.", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if", "(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AR_ARR_M.getValue(),", "arrXtnInfoEnum.getValue()))", "{", "return", "super.getArrXtnInfoByEav(arrXtnInfoEnum.getValue());", "}", "//", "2.", "\ubcf4\uc870\uba85\uc138", "else", "{", "return", "_getArrSubInfoBiz().getSubInfo(arrXtnInfoEnum.getValue(),", "this);", "}", "}"], "docstring_tokens": ["Inquire", "arrangement", "extend", "information", "by", "extend", "attribute", "ENUM."]}
{"code_tokens": ["public", "List<ArrIntRt>", "getArrDepositInterestRate(Arrangement", "arr,String", "procsDt)", "throws", "BizApplicationException{", "return", "getArrDepositInterestRate(arr,", "null,", "procsDt);", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "deposit", "normal", "interest", "rate", "applied", "to", "the", "arrangement", "from", "the", "open", "date", "to", "the", "maturity", "date."]}
{"code_tokens": ["public", "List<ArrPsbkBkgMsg>", "buildMsgFormat(ArrIssmdaCore", "arrIssmda,", "String", "arrId,", "String", "psbkSrvcTpCd,", "String", "psbkMsgId,", "Map<String,", "Object>", "psbkMsgParmMap)", "throws", "BizApplicationException", "{", "/**", "*", "get", "arrangement", "*/", "Arr", "arr", "=", "_getArrMngr().getArr(arrId);", "/**", "*", "get", "configuration", "*/", "int", "sideCnt", "=", "2;", "int", "row", "=", "15;", "int", "col", "=", "10;", "int", "length", "=", "75;", "String", "align", "=", "\"-\";", "Dept", "mgmtDept", "=", "_getDeptMngr().getDept(arr.getMgmtDeptId());", "String", "bkgText", "=", "String.format(\"%-20s%-15s%-15s\",", "mgmtDept.getDeptName(),", "arr.getArrOpnDt(),", "mgmtDept.getTelNbr());", "String", "custName", "=", "String.format(\"%\"+col+\"s%\"+align+length+\"s\",", "\"", "\",", "bkgText);", "ArrPsbkBkgMsg", "psbkLine", "=", "new", "ArrPsbkBkgMsg();", "psbkLine.setPsbkBkgSideCnt(sideCnt);", "psbkLine.setPsbkBkgRowCnt(row);", "psbkLine.setPsbkBkgCntnt(custName);", "List<ArrPsbkBkgMsg>", "psbkLineList", "=", "new", "ArrayList<>();", "psbkLineList.add(psbkLine);", "return", "psbkLineList;", "}"], "docstring_tokens": ["Build", "passbook", "message", "by", "passbook", "message", "template", "and", "input", "values."]}
{"code_tokens": ["public", "CaClTreeMgmtSvcDtlRoleIO", "clone(){", "try{", "CaClTreeMgmtSvcDtlRoleIO", "object=", "(CaClTreeMgmtSvcDtlRoleIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "if", "(", "this.children==", "null", ")", "object.children", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaClTreeMgmtSvcDtlRoleIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaClTreeMgmtSvcDtlRoleIO>(children.size());", "for(", "bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaClTreeMgmtSvcDtlRoleIO", "item", ":", "children", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaClTreeMgmtSvcDtlRoleIO)item.clone());", "}", "object.children", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut", "clone(){", "try{", "PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut", "object=", "(PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "InstMgmtSvcGetInstListOut", "clone(){", "try{", "InstMgmtSvcGetInstListOut", "object=", "(InstMgmtSvcGetInstListOut)super.clone();", "if", "(", "this.instList==", "null", ")", "object.instList", "=", "null;", "else{", "java.util.List<bankware.corebanking.common.institution.service.dto.InstMgmtSvcGetInstOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.common.institution.service.dto.InstMgmtSvcGetInstOut>(instList.size());", "for(", "bankware.corebanking.common.institution.service.dto.InstMgmtSvcGetInstOut", "item", ":", "instList", "){", "clonedList.add(", "(bankware.corebanking.common.institution.service.dto.InstMgmtSvcGetInstOut)item.clone());", "}", "object.instList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "MkngMsgRprtngO", "clone(){", "try{", "MkngMsgRprtngO", "object=", "(MkngMsgRprtngO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ActorSrchOut>", "getListCustInfoOverview(String", "actorTpCd,", "String", "actorNm,", "String", "loinIdNbr,", "String", "actorUnqIdNbr,", "String", "actorNmTpCd,", "String", "actorUnqIdNbrTpCd,", "Integer", "pageNum,", "Integer", "pageCount)", "throws", "BizApplicationException", "{", "//check", "required", "inputs", "if", "(StringUtils.isEmpty(actorNmTpCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@actorNmTpCd\"});", "}", "else", "if", "(StringUtils.isEmpty(actorUnqIdNbrTpCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@actorUnqIdNbrTpCd\"});", "}", "else", "if", "(pageNum", "==", "null", "||", "CCM01.ZERO.equals(pageNum))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@pgNbr\"});", "}", "else", "if", "(pageCount", "==", "null", "||", "CCM01.ZERO.equals(pageCount))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@pgCnt\"});", "}", "return", "_getCustBsicXtnBiz().getListCustOverview(_getCmnContext().getInstCode(),", "actorTpCd,", "actorNm,", "loinIdNbr,", "actorUnqIdNbr,", "actorNmTpCd,", "actorUnqIdNbrTpCd,", "pageNum,", "pageCount);", "}"], "docstring_tokens": ["Inquire", "customers'", "information", "that", "matches", "the", "input", "actor", "type,", "actor", "name,", "actor", "unique", "identification", "number,", "login", "information,", "page", "number", "and", "count.", "It", "inquires", "the", "effective", "actor", "name,", "unique", "identification", "number", "and", "login", "information", "on", "transaction", "date."]}
{"code_tokens": ["public", "ArrBalAcmltAmtOut", "getAccumulatedAmount(String", "startDt,", "String", "endDt,", "List<BigDecimal>", "amtList,", "boolean", "isMinusSkip,", "boolean", "isPlusSkip)", "throws", "BizApplicationException", "{", "boolean", "parttnYn", "=", "false;", "/*", "*", "Checking", "partition", "*/", "if(amtList", "!=", "null", "&&", "!amtList.isEmpty()", ")", "parttnYn", "=", "true;", "/*", "*", "Basic", "Input", "Data", "Validation", "*/", "if", "(StringCoreUtils.isEmpty(startDt))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@startDt\"});", "}", "if", "(StringCoreUtils.isEmpty(endDt))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@endDt\"});", "}", "if", "(startDt.compareTo(endDt)", ">", "0)", "{", "throw", "new", "BizApplicationException(\"AAPSTE0180\",", "null);", "//", "error", "(start", "date", ">", "end", "date)", "}", "/*", "*", "Check", "for", "avoid", "that", "(+)", "value", "and", "(-)", "value,", "both", "are", "exist.", "*/", "int", "plusCnt", "=", "0;", "int", "mnsCnt", "=", "0;", "if(parttnYn", "==", "true)", "{", "for(int", "i", "=", "0;", "i", "<", "amtList.size()", "-1;", "i++)", "{", "if(amtList.get(i).compareTo(amtList.get(i+1))", ">=", "0)", "throw", "new", "BizApplicationException(\"AAPSTE0181\",", "null);", "//", "disorder", "or", "duplication", "if(amtList.get(i).compareTo(BigDecimal.ZERO)", ">", "0)", "{", "plusCnt++;", "}else", "if(amtList.get(i).compareTo(BigDecimal.ZERO)", "<", "0)", "{", "mnsCnt++;", "}", "}", "if(amtList.get(amtList.size()", "-1).compareTo(BigDecimal.ZERO)", ">", "0)", "{", "plusCnt++;", "}else", "if(amtList.get(amtList.size()", "-1).compareTo(BigDecimal.ZERO)", "<", "0)", "{", "mnsCnt++;", "}", "}", "if(plusCnt", ">", "0", "&&", "mnsCnt", ">", "0)", "throw", "new", "BizApplicationException(\"AAPSTE0182\",", "null);", "ArrBalAcmltAmtOut", "out", "=", "new", "ArrBalAcmltAmtOut();", "//", "Initialization", "out.setAcmltdAmt(BigDecimal.ZERO);", "out.setLowLmtAcmltdAmt(BigDecimal.ZERO);", "out.setOverUpLmtAcmltdAmt(BigDecimal.ZERO);", "if(parttnYn", "==", "true)", "{", "for(int", "i", "=", "0;", "i", "<", "amtList.size()", "-1;", "i++)", "{", "out.getAmtList().add(BigDecimal.ZERO);", "}", "}", "/*", "*", "Calculate", "accumulated", "amount", "*/", "if(balDt.compareTo(startDt)", "<=", "0)", "{", "//", "just", "use", "MAX", "Data", "(balance", "wasn't", "changed", "in", "term)", "if(sctnStartDt.compareTo(startDt)", "<=", "0", "&&", "endDt.compareTo(sctnEndDt)", "<", "0)", "{", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "startDt,", "endDt,", "balDtBal,", "amtList,", "out);", "}", "}else", "{", "//", "balance", "was", "changed", "in", "term", "(daily", "balance's", "history", "is", "exist)", "StArrDailyBalHIO", "inParam", "=", "new", "StArrDailyBalHIO();", "inParam.setInstCd(arr.getInstCd());", "inParam.setArrId(arr.getArrId());", "inParam.setAmtTpCd(this.amtTpDtlIO.getAmtTpCd());", "inParam.setBalTpCd(this.balTpDtlIO.getBalTpCd());", "inParam.setCrncyCd(crncyCd);", "//", "data", "in", "term", "List<StArrDailyBalHIO>", "outParams", "=", "_getStArrDailyBalHDso().selectList(inParam,", "startDt,", "endDt);", "if(startDt.compareTo((outParams", "!=", "null", "&&", "!outParams.isEmpty())", "?", "outParams.get(0).getBalDt()", ":", "balDt)", "==", "0)", "{", "//", "do", "nothing", "}else", "{", "inParam.setBalDt(startDt);", "//", "Condition", "for", "finding", "data", "before", "this", "term", "//", "data", "before", "this", "term", "StArrDailyBalHIO", "bfParam", "=", "_getStArrDailyBalHDso().selectPreviousBalDt(inParam);", "if(bfParam", "!=", "null)", "{", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "startDt,", "(outParams", "!=", "null", "&&", "!outParams.isEmpty())", "?", "outParams.get(0).getBalDt()", ":", "(endDt.compareTo(balDt)", "<", "0", "?", "endDt", ":", "balDt),", "bfParam.getDayClsgBal(),", "amtList,", "out);", "}", "}", "if(outParams", "!=", "null", "&&", "!outParams.isEmpty())", "{", "while(outParams.size()", ">", "1)", "{", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "outParams.get(0).getBalDt(),", "outParams.get(1).getBalDt(),", "outParams.get(0).getDayClsgBal(),", "amtList,", "out);", "outParams.remove(0);", "}", "try", "{", "//", "must", "be", ":", "Daily", "Balance's", "Last", "Data", "<", "Last", "Balance", "Data", "//", "daily", "balance's", "last", "date", "+", "1", "=", "end", "date", "of", "inquiry", "term", ">>", "don't", "need", "last", "balance", "master", "DB", "//", "End", "date", "of", "inquiry", "period", "<=", "date", "in", "last", "balance", "table,", "then", "don't", "need", "master", "Information", "if", "(!outParams.get(0).getBalDt().equals(endDt))", "{", "if(endDt.compareTo(balDt)", "<=", "0)", "{", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "outParams.get(0).getBalDt(),", "endDt,", "outParams.get(0).getDayClsgBal(),", "amtList,", "out);", "//", "Daily", "Balance", "Last", "Date", "<", "Last", "Balance", "Date", "<=", "end", "date", "of", "inquiry", "term", "}else", "{", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "outParams.get(0).getBalDt(),", "balDt,", "outParams.get(0).getDayClsgBal(),", "amtList,", "out);", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "balDt,", "endDt,", "balDtBal,", "amtList,", "out);", "}", "}", "}catch(Exception", "e)", "{", "logger.info(\"ERROR", ":", "{}\",", "e);", "throw", "e;", "}", "}", "else", "{", "if", "(balDt.compareTo(endDt)", "<", "0)", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "balDt,", "endDt,", "balDtBal,", "amtList,", "out);", "}", "}", "if", "(logger.isDebugEnabled()){", "logger.debug(\"getAccumulatedAmount", "is", "called.", "start", "date", ":", "{},", "end", "date", ":", "{}\",startDt,endDt", ");", "logger.debug(\"getAccumulatedAmount", "is", "called.", "arrBal", ":", "{}", "\",", "this.toString());", "logger.debug(\"getAccumulatedAmount", "is", "called.", "out", ":", "{}", "\",", "out.getFieldValues());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "accumulated", "amount", "within", "the", "period", "you", "entered."]}
{"code_tokens": ["public", "CaCoaMgmtSvcGetCoaListIn", "clone(){", "try{", "CaCoaMgmtSvcGetCoaListIn", "object=", "(CaCoaMgmtSvcGetCoaListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "calculateDateWeek(String", "baseDt)", "throws", "BizApplicationException", "{", "//", "Validate", "date", "_checkDate(baseDt);", "//", "Inquiry", "calendar", "CmClndrMIO", "inCmClndrM", "=", "new", "CmClndrMIO();", "inCmClndrM.setBaseDt(baseDt);", "_getCmnContext().setHeaderColumn(inCmClndrM);", "CmClndrMIO", "outCmClndrM", "=", "_getCmClndrMDso().select(inCmClndrM);", "if", "(outCmClndrM", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0004\",", "null);", "}", "//", "Set", "result", "value", "return", "outCmClndrM.getDtWeekDscd();", "}"], "docstring_tokens": ["It", "inquiries", "the", "week", "name", "of", "the", "date."]}
{"code_tokens": ["public", "Integer", "getTxSeqNbr(){", "return", "txSeqNbr;", "}"], "docstring_tokens": ["Inquire", "the", "transaction", "sequence", "number", "of", "this", "asset", "transaction."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(AmtKndDscdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CaArrCndCntrlSrvcSaveItmIn", "clone(){", "try{", "CaArrCndCntrlSrvcSaveItmIn", "object=", "(CaArrCndCntrlSrvcSaveItmIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "UeCupldRgstSvcRgstCmpltnIn", "clone(){", "try{", "UeCupldRgstSvcRgstCmpltnIn", "object=", "(UeCupldRgstSvcRgstCmpltnIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "BfSvcIn", "clone(){", "try{", "BfSvcIn", "object=", "(BfSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrTx", "getCancelableLastTx(ArrReal", "arrReal,", "String", "baseDt)", "throws", "BizApplicationException", "{", "return", "(ArrTx)", "super.getCancelableLastTxCore((ArrRealCore)arrReal,", "baseDt);", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "last", "transaction", "that", "can", "be", "canceled", "during", "the", "transaction", "of", "the", "contract.", "A", "cancelable", "transaction", "is", "what", "cancelable", "service", "Yn", "is", "Y", "in", "the", "service", "profile", "of", "the", "service", "pointed", "to", "by", "the", "transaction", "code."]}
{"code_tokens": ["protected", "void", "register(CustImpl", "custImpl,", "AtCustLoinInfoDIO", "atCustLoinInfoDIO)", "throws", "BizApplicationException", "{", "AtCustMIO", "atCustMIO", "=", "custImpl.getCustBsicCache();", "if", "(atCustLoinInfoDIO", "==", "null)", "{", "return;", "}", "AtCustLoinInfoDIO", "bfCustLoinInfoDIO", "=", "_getAtCustLoinInfoDDso().select(", "_getCmnContext().getInstCode(),", "atCustLoinInfoDIO.getLoinIdNbr(),", "InfoStsEnum.NORMAL.getValue(),", "null,", "_getCmnContext().getTxDate());", "if", "(bfCustLoinInfoDIO", "!=", "null)", "{", "throw", "new", "BizApplicationException(\"AAPATE0075\",", "new", "Object[]", "{", "\"@loinIdNbr\"", "});", "}", "int", "seqNbr", "=", "_getAtCustLoinInfoDDso().selectNextSeqNbr(atCustMIO.getInstCd(),", "atCustMIO.getCustId());", "_register(atCustMIO,", "atCustLoinInfoDIO,", "seqNbr);", "}"], "docstring_tokens": ["It", "registers", "the", "actor", "role", "parameter", "information", "list.", "If", "there", "is", "registered", "actor", "role", "parameter", "information", "by", "the", "same", "institution,", "throws", "exception."]}
{"code_tokens": ["public", "DpstIntCalculatorOut", "calculateInterestDailyAccrual(Arr", "arr,", "String", "baseDt,", "Map<String,String>", "xtdInfo)", "throws", "BizApplicationException", "{", "return", "_calculateInt(arr,0,", "null,", "baseDt,", "true,", "xtdInfo,", "InterestTransactionTypeEnum.DAILY_ACCRUAL);", "}"], "docstring_tokens": ["This", "method", "calculates", "the", "daily", "accrual", "interest.", "The", "way", "of", "interest", "calculation", "by", "product", "is", "as", "follows.", "1.Demand", "deposit", "product", ":", "calculate", "interest", "on", "the", "same", "plan", "as", "settlement", "case", "2.Installment", "product", ":", "calculate", "maturity", "interest", "for", "each", "deposit", "3.Term", "deposit", "product", ":", "calculate", "maturity", "interest", "on", "the", "deposit"]}
{"code_tokens": ["public", "void", "validate(String", "arrSrvcCd,", "ArrRealCore", "arrReal,", "CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "if", "(_getLnOvrduInfoProvider().isOverdue((ArrReal)arrReal,", "ArrCmnUtil.getRckngDt(_getCmnContext()))){", "//Arrangement", "is", "in", "overdue.", "This", "service", "({0})", "could", "not", "be", "finished", "properly", "//\uacc4\uc57d\uc774", "\uc5f0\uccb4\uc0c1\ud0dc\uc785\ub2c8\ub2e4.", "\ubcf8\uc11c\ube44\uc2a4({0})", "\uc2e4\ud589\uc774", "\ubd88\uac00", "\ud569\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0295\",", "new", "Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)});", "}", "}"], "docstring_tokens": ["Processing", "rules", "should", "be", "commonly", "performed", "according", "to", "the", "rules", "defined", "in", "the", "service", "processing", "rule,", "based", "on", "the", "service", "type", "input."]}
{"code_tokens": ["public", "List<ArrStsChngHst>", "getArrStatusChangeHistory(ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "return", "_getArrBasicBiz().getArrStatusChangeHistory(arrReal);", "}"], "docstring_tokens": ["Inquire", "arrangement", "status", "change", "history"]}
{"code_tokens": ["public", "java.lang.String", "getCndValDcsnLvlCd(){", "return", "cndValDcsnLvlCd;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "value", "decision", "level", "code."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(ArrIssmdaRelStsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "AprslRqstAddrOut", "getAddress(String", "aprslRqstId,", "int", "aprslRqstSeqNbr)throws", "BizApplicationException", "{", "AsAprslRqstAddrDIO", "input", "=", "new", "AsAprslRqstAddrDIO();", "input.setInstCd(_getCmnContextCore().getInstCode());", "input.setAprslRqstId(aprslRqstId);", "input.setAprslRqstSeqNbr(aprslRqstSeqNbr);", "List<AsAprslRqstAddrDIO>", "result", "=", "_getAsAprslRqstAddrDDso().selectByAprslRqstSeqNbr(_getCmnContextCore().getInstCode(),", "aprslRqstId,", "aprslRqstSeqNbr);", "//\ucd9c\ub825\ubd80\uc870\ub9bd", "AprslRqstAddrOut", "out", "=", "new", "AprslRqstAddrOut();", "if(!result.isEmpty())", "{", "out.setInstCd(result.get(0).getInstCd());", "out.setAprslRqstId(result.get(0).getAprslRqstId());", "out.setAprslRqstSeqNbr(result.get(0).getAprslRqstSeqNbr());", "out.setAssetAddrTpCd(result.get(0).getAssetAddrTpCd());", "out.setAddrSeqNbr(result.get(0).getAddrSeqNbr());", "out.setAddrHrarcyCd(result.get(0).getAddrHrarcyCd());", "out.setAddrId(result.get(0).getAddrId());", "out.setBsicAddrCntnt(result.get(0).getBsicAddrCntnt());", "out.setDtlAddrCntnt(result.get(0).getDtlAddrCntnt());", "}", "return", "out;", "}"], "docstring_tokens": ["Inquire", "the", "address", "information", "of", "the", "appraisal", "request."]}
{"code_tokens": ["public", "List<TblXtnAtrbtOut>", "getTableExtendAttribute(String", "tblNm)", "throws", "BizApplicationException", "{", "return", "this.getTableExtendAttribute(_getCmnContextCore().getInstCode(),", "tblNm,", "XtnAtrbtVrtnCmpsEnum.NA,", "null);", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "no", "condition(cmnContext", "institution)", "basic", "method", "reference", ":", "{@link", "TblXtnAtrbtCore", "getTableExtendAttribute(String,", "String,", "XtnAtrbtVrtnCmpsEnum,", "Map<String,", "String>)}"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(VarIntRtCyclCalcnBaseCoreEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "List<XtnCdIO>", "getListCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "List<XtnCdIO>", "xtnCdIOs", "=", "new", "ArrayList<XtnCdIO>();", "ClTreeIO", "clIn", "=", "new", "ClTreeIO();", "String", "lngCd", "=", "supplInfoVal", "==", "null", "?", "null", ":", "String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue()));", "if", "(StringUtils.isEmpty(cdNbr))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@cdNbr\"", "});", "}", "clIn.setClHrarcyId(CCM01.IPCT);", "clIn.setMostLowrLvlYn(CCM01.YES);", "List<ClTreeIO>", "clList", "=", "_getCltree().getListClassification(clIn);", "for(ClTreeIO", "clTree", ":", "clList", "){", "XtnCdIO", "xtnCdIO", "=", "new", "XtnCdIO();", "xtnCdIO.setCd(clTree.getClId());", "xtnCdIO.setLngCd(lngCd);", "if(StringUtils.isEmpty(lngCd))", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CL,", "CCM01.IPCT.concat(clTree.getClId())));", "}", "else", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CL,", "CCM01.IPCT.concat(clTree.getClId()),", "lngCd));", "}", "xtnCdIOs.add(xtnCdIO);", "}", "return", "xtnCdIOs;", "}"], "docstring_tokens": ["This", "method", "returns", "the", "list", "of", "code", "corresponding", "to", "the", "search", "condition"]}
{"code_tokens": ["public", "BigDecimal", "getBlockedPrincipal(String", "crncyCd,", "String", "baseDt,", "ArrRealCoreImpl", "arrRealCoreImpl)", "throws", "BizApplicationException", "{", "_checkInput(crncyCd,", "baseDt);", "ArArrSrvcBlckngDSelectSumEffectiveAmtOnDateIO", "sqlOut", "=", "_getArArrSrvcBlckngDDso().selectSumEffectiveBlckgAmtOnDate(arrRealCoreImpl.getInstCd(),", "arrRealCoreImpl.getArrId(),", "baseDt,", "crncyCd);", "if(sqlOut", "==", "null)", "{", "return", "BigDecimal.ZERO;", "}", "if(sqlOut.getArrSrvcBlckngAmt()", "==", "null)", "{", "sqlOut.setArrSrvcBlckngAmt(BigDecimal.ZERO);", "}", "if(CCM01.YES.equals(sqlOut.getWhdrwlAblBalInitzYn())){", "sqlOut.setArrSrvcBlckngAmt(new", "BigDecimal(\"999999999999999\"));", "}", "return", "sqlOut.getArrSrvcBlckngAmt();", "}"], "docstring_tokens": ["Inquire", "total", "amount", "of", "principal", "which", "is", "currently", "blocked", "by", "service", "blocking", "registered", "on", "arrangement", "(Used", "to", "calculate", "currently", "available", "balance)."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(CustImpl", "custImpl)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtCustSIO", "subInfo", "=", "getSubInfoCache(custImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "calculation", "detail", "information."]}
{"code_tokens": ["public", "TxQrySvcGetXtnOut", "clone(){", "try{", "TxQrySvcGetXtnOut", "object=", "(TxQrySvcGetXtnOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(PrtnrCore", "prtnrCore,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getPrtnrSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(PrtnrImpl)", "prtnrCore);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal", "request."]}
{"code_tokens": ["public", "boolean", "isActive()", "{", "return", "this.arrGrpStsCd.equals(ArrGrpStsCoreEnum.ACTIVE.getValue());", "}"], "docstring_tokens": ["It", "checks", "if", "the", "actor", "role's", "actor", "role", "status", "is", "active.", "It", "returns", "true", "if", "active,", "return", "false", "if", "actor", "role", "status", "doesn't", "exist", "or", "it", "is", "not", "active."]}
{"code_tokens": ["public", "CustRgstSvcAnswerListIn", "clone(){", "try{", "CustRgstSvcAnswerListIn", "object=", "(CustRgstSvcAnswerListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CdMgmtSvcGetCdListByCdNbrIn", "clone(){", "try{", "CdMgmtSvcGetCdListByCdNbrIn", "object=", "(CdMgmtSvcGetCdListByCdNbrIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AssetCore", "assetImpl,", "Integer", "assetThingSeqNbr,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getAssetThingSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "(AssetImpl)", "assetImpl,", "assetThingSeqNbr);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "interface", "VO"]}
{"code_tokens": ["public", "boolean", "check(Map<String,", "String>", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"YnMndtryCmpxVldtnImpl", ":", "{}\",", "atrbtCntnt);", "}", "int", "cnt", "=", "0;", "String", "ynAtrbt", "=", "null;", "String", "ynVal", "=", "null;", "for(Map.Entry<String,", "String>", "atrbt:", "atrbtCntnt.entrySet())", "{", "if(cnt", "==", "0)", "{", "String", "[]", "pair", "=", "atrbt.getValue().split(\"=\");", "if(pair.length", "!=", "2)", "{", "//", "It", "is", "{0}", "error.", "Please", "check", "{0}.", "throw", "new", "BizApplicationException(\"AAPCME0002\",", "new", "Object[]", "{\"@inpCntnt\"},", "new", "Object[]", "{\"YnMndtryCmpxVldtnImpl", ":", "\"", "+", "atrbtCntnt.toString()});", "}", "ynAtrbt", "=", "pair[0];", "ynVal", "=", "pair[1];", "cnt++;", "if(logger.isDebugEnabled())", "{", "logger.debug(\"ynAtrbt,", "ynVal", ":", "{},", "{}\",", "ynAtrbt,", "ynVal);", "}", "if(ynAtrbt", "==", "null", "||", "ynVal", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0002\",", "new", "Object[]", "{\"@inpCntnt\"},", "new", "Object[]", "{\"YnMndtryCmpxVldtnImpl", ":", "\"", "+", "atrbtCntnt.toString()});", "}", "continue;", "}", "if(CCM01.YES.equals(ynVal)", "&&", "ynVal.equals(atrbtCntnt.get(ynAtrbt))", "&&", "!ynAtrbt.equals(atrbt.getKey())", "&&", "StringUtils.isEmpty(atrbt.getValue()))", "{", "//", "{1}", "is", "mandatory", "input", "item", "when", "inputting", "{0}.", "throw", "new", "BizApplicationException(\"AAPCME0076\",", "new", "Object[]", "{ynAtrbt", "+", "\"=\"", "+", "ynVal,", "\"@\"", "+", "atrbt.getKey()});", "}", "if(CCM01.NO.equals(ynVal)", "&&", "ynVal.equals(atrbtCntnt.get(ynAtrbt))", "&&", "!ynAtrbt.equals(atrbt.getKey())", "&&", "!StringUtils.isEmpty(atrbt.getValue()))", "{", "//", "If", "{0},", "it", "cannot", "be", "{1}.", "throw", "new", "BizApplicationException(\"AAPCME0012\",", "new", "Object[]", "{ynAtrbt", "+", "\"=\"", "+", "ynVal,", "atrbt.getKey()", "+", "\"=\"", "+", "atrbt.getValue()});", "}", "cnt++;", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Simple", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "CaCustAgrmntCdSvcDeleteListIn", "clone(){", "try{", "CaCustAgrmntCdSvcDeleteListIn", "object=", "(CaCustAgrmntCdSvcDeleteListIn)super.clone();", "if", "(", "this.deleteList==", "null", ")", "object.deleteList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaCustAgrmntCdSvcDeleteIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaCustAgrmntCdSvcDeleteIn>(deleteList.size());", "for(", "bankware.corebanking.configurationadmin.actor.service.dto.CaCustAgrmntCdSvcDeleteIn", "item", ":", "deleteList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.actor.service.dto.CaCustAgrmntCdSvcDeleteIn)item.clone());", "}", "object.deleteList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "LnArr360IntRt", "clone(){", "try{", "LnArr360IntRt", "object=", "(LnArr360IntRt)super.clone();", "if", "(", "this.tierElmntList==", "null", ")", "object.tierElmntList", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.query.service.dto.LnArrIntRtTierElmnt>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.query.service.dto.LnArrIntRtTierElmnt>(tierElmntList.size());", "for(", "bankware.corebanking.loan.query.service.dto.LnArrIntRtTierElmnt", "item", ":", "tierElmntList", "){", "clonedList.add(", "(bankware.corebanking.loan.query.service.dto.LnArrIntRtTierElmnt)item.clone());", "}", "object.tierElmntList", "=", "clonedList;", "}", "if", "(", "this.rtElmntList==", "null", ")", "object.rtElmntList", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.query.service.dto.LnArrIntRtCmpsElmnt>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.query.service.dto.LnArrIntRtCmpsElmnt>(rtElmntList.size());", "for(", "bankware.corebanking.loan.query.service.dto.LnArrIntRtCmpsElmnt", "item", ":", "rtElmntList", "){", "clonedList.add(", "(bankware.corebanking.loan.query.service.dto.LnArrIntRtCmpsElmnt)item.clone());", "}", "object.rtElmntList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaDstbChrncDataRqstIn", "clone(){", "try{", "CaDstbChrncDataRqstIn", "object=", "(CaDstbChrncDataRqstIn)super.clone();", "if", "(", "this.tblList==null", ")", "object.tblList", "=", "null;", "else", "object.tblList", "=", "(bankware.corebanking.configurationadmin.distribution.service.dto.CaDstbChrncDataRqstTblInfoIn)this.tblList.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getNumbering(String", "instCd,", "String", "nbrgAtrbtNm,", "Map<String,", "Object>", "inpParmMap,", "Boolean", "isReUseSameTxNbrg)", "throws", "BizApplicationException", "{", "//", "\uae30\uad00\ucf54\ub4dc\uc640", "\ucc44\ubc88\uc18d\uc131\uba85\uc774", "\uc788\ub294\uc9c0", "\uac80\uc99d", "\ud55c\ub2e4.", "_checkNumberingInput(instCd,", "nbrgAtrbtNm);", "//", "Query", "numbering", "rule", "NumberingGetIn", "inParm", "=", "new", "NumberingGetIn();", "inParm.setInstCd(instCd);", "inParm.setNbrgAtrbtNm(nbrgAtrbtNm);", "//", "\ucc44\ubc88\uaddc\uce59", "\uc870\ud68c", "NumberingGetListOut", "numbering02Out", "=", "this._getNumberingRule(inParm);", "if(logger.isDebugEnabled())", "{", "logger.debug(\"numbering02Out", ":::", "{}\",", "numbering02Out.getFieldValues());", "}", "CmNbrgRuleMIO", "cmNbrgRuleMIO", "=", "_setCommonNumberingRuleMasterParameter(numbering02Out);", "List<CmNbrgRuleCmpsDIO>", "listCmNbrgRuleCmpsDIO", "=", "new", "ArrayList<CmNbrgRuleCmpsDIO>();", "for", "(NumberingGetOut", "numbering02OutSub1", ":", "numbering02Out.getTblNm())", "{", "listCmNbrgRuleCmpsDIO.add(_setNumberingRuleCompositionDetailParameter(numbering02OutSub1));", "}", "//", "Assemble", "numbering", "layer", "value", "String", "jsonCntnt", "=", "\"\";", "Map<String,", "Object>", "tierValMap", "=", "new", "LinkedHashMap<String,", "Object>();", "for", "(CmNbrgRuleCmpsDIO", "cmNbrgRuleCmpsDIO", ":", "listCmNbrgRuleCmpsDIO)", "{", "//", "\ucc44\ubc88\uacc4\uce35\uc5ec\ubd80\uac00", "Y", "\uc774\uba74", "\ucc44\ubc88\uacc4\uce35\uac12\uc744", "\uac00\uc838", "\uc628\ub2e4.", "if", "(CCM01.YES.equals(cmNbrgRuleCmpsDIO.getNbrgTierYn()))", "{", "Entry<String,", "String>", "entry", "=", "_getNbrgTierVal(instCd,", "cmNbrgRuleMIO,", "cmNbrgRuleCmpsDIO,", "jsonCntnt,", "inpParmMap,", "isReUseSameTxNbrg,", "\"\");", "tierValMap.put(entry.getKey().toString(),", "entry.getValue().toString());", "}", "}", "if", "(tierValMap.isEmpty())", "{", "//", "Fail", "to", "query", "Assemble", "numbering", "layer", "value", "throw", "new", "BizApplicationException(\"AAPCME0084\",", "new", "Object[]", "{\"@nbrgTierYn\",", "\"@nbrgAtrbtNm\",", "nbrgAtrbtNm});", "}", "jsonCntnt", "=", "_getJsonString(tierValMap);", "//", "Numbering", "and", "assemble", "number", "String", "nbrgVal", "=", "\"\";", "for", "(CmNbrgRuleCmpsDIO", "cmNbrgRuleCmpsDIO", ":", "listCmNbrgRuleCmpsDIO)", "{", "if", "(cmNbrgRuleCmpsDIO.getCmpsStartPstnCnt()", ">", "0", "&&", "cmNbrgRuleCmpsDIO.getCmpsFgrsCnt()", ">", "0)", "{", "nbrgVal", "=", "nbrgVal", "+", "_getNumberingCompositionValue(instCd,", "cmNbrgRuleMIO,", "cmNbrgRuleCmpsDIO,", "jsonCntnt,", "inpParmMap,", "isReUseSameTxNbrg,", "nbrgVal);", "}", "}", "String", "orgNbrgVal", "=", "nbrgVal;", "if(!StringUtils.isEmpty(cmNbrgRuleMIO.getEncrptnDscd())){", "try", "{", "if(EncryptDstnctnEnum.ONE_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){", "nbrgVal", "=", "CryptUtils.encryptSHA1(orgNbrgVal);", "}", "else", "if(EncryptDstnctnEnum.TWO_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){", "nbrgVal", "=", "CryptUtils.encryptAES(orgNbrgVal);", "}", "}", "catch", "(Exception", "e)", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"Exception", ":", "{}\",", "e);", "}", "//logger.debug(\"####", "NbrgImpl.getNumbering", "modify", "source:{0}", ",", "Error:{1}\",", "new", "Object[]{orgNbrgVal,e});", "throw", "new", "BizApplicationException(\"AAPCME0000\",", "new", "String[]", "{\"getNumbering\",", "\"Encrypt", "getNumber\"", "});", "}", "}", "return", "nbrgVal;", "}"], "docstring_tokens": ["It", "calculates", "next", "number.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'isReUseSameTxNbrg'", "value", "is", "replaced", "by", "false.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'inpParmMap'", "value", "is", "replaced", "by", "null."]}
{"code_tokens": ["public", "boolean", "isBatchMode()", "throws", "BizApplicationException", "{", "SystemOnlineModeEnum", "vender", "=", "SystemOnlineModeEnum.getByValue(getSystemOnlineMode());", "if", "(vender", "==", "SystemOnlineModeEnum.BF_DAY_SNAPSHOT)", "return", "true;", "else", "return", "false;", "}"], "docstring_tokens": ["It", "checks", "whether", "system", "mode", "is", "batch."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(CaDstbProcStatusCdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(TxCnclRsnEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ActorCore", "actorCore,", "String", "dueDlgncDscd,", "int", "dueDlgncSeqNbr)", "throws", "BizApplicationException", "{", "return", "_getActorDueDlgncSubInfoBiz().getMapSubInfo((ActorImpl)", "actorCore,", "dueDlgncDscd,", "dueDlgncSeqNbr);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "detail", "information."]}
{"code_tokens": ["public", "LnRpymntSvcRpymntInfoListIn", "clone(){", "try{", "LnRpymntSvcRpymntInfoListIn", "object=", "(LnRpymntSvcRpymntInfoListIn)super.clone();", "if", "(", "this.rpymntInfoList==", "null", ")", "object.rpymntInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.financialtransaction.service.dto.LnRpymntSvcRpymntInfoIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.financialtransaction.service.dto.LnRpymntSvcRpymntInfoIn>(rpymntInfoList.size());", "for(", "bankware.corebanking.loan.financialtransaction.service.dto.LnRpymntSvcRpymntInfoIn", "item", ":", "rpymntInfoList", "){", "clonedList.add(", "(bankware.corebanking.loan.financialtransaction.service.dto.LnRpymntSvcRpymntInfoIn)item.clone());", "}", "object.rpymntInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(LmtChkRsltCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CaArrPdRuleCntntCdNbrListOut", "clone(){", "try{", "CaArrPdRuleCntntCdNbrListOut", "object=", "(CaArrPdRuleCntntCdNbrListOut)super.clone();", "if", "(", "this.list==", "null", ")", "object.list", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList>(list.size());", "for(", "bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList", "item", ":", "list", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList)item.clone());", "}", "object.list", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "arrXtnInfoMap,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealCore", "arrRealCore)", "throws", "BizApplicationException", "{", "_getArrSrvcBlckngSubInfoBiz().saveMapSubInfo(arrXtnInfoMap,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "txDt,", "txSeqNbr,", "(ArrRealImpl)arrRealCore);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "CaScrnMgmtSvcRemoveScrnInfoIn", "clone(){", "try{", "CaScrnMgmtSvcRemoveScrnInfoIn", "object=", "(CaScrnMgmtSvcRemoveScrnInfoIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ActorAddrOut", "getAddrInfo(String", "cntctPntLctnTpCd,", "String", "cntctMthdTpCd)", "throws", "BizApplicationException", "{", "List<ActorAddrOut>", "addrInfoList", "=", "getListAddrInfo();", "for", "(ActorAddrOut", "addrInfo", ":", "addrInfoList)", "{", "if", "(cntctPntLctnTpCd.equals(addrInfo.getCtcptTpCd())", "&&", "cntctMthdTpCd.equals(addrInfo.getCntctMthdTpCd()))", "{", "return", "addrInfo;", "}", "}", "return", "null;", "}"], "docstring_tokens": ["Inquire", "the", "address", "information", "that", "matches", "the", "input", "contact", "point", "location", "type", "code,", "contact", "method", "type", "code."]}
{"code_tokens": ["public", "ArrPlnSvcGetExctnHstIn", "clone(){", "try{", "ArrPlnSvcGetExctnHstIn", "object=", "(ArrPlnSvcGetExctnHstIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "BigDecimal", "getPdCmpxCndTierNbr(){", "return", "pdCmpxCndTierNbr;", "}"], "docstring_tokens": ["This", "method", "get", "complex", "condition's", "tier", "number", "which", "is", "applied", "to", "this", "arrangement", "condition,", "return", "null", "when", "condition", "is", "simple", "condition", "or", "the", "tier", "number", "was", "not", "decided."]}
{"code_tokens": ["public", "void", "saveSubInfo(ActorCore", "actorCore,", "String", "ctcptId,", "int", "ctcptChngSeqNbr,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "_getActorCtcptSubInfoBiz().saveSubInfo((ActorImpl)", "actorCore,", "ctcptId,", "ctcptChngSeqNbr,", "xtnAtrbtNm,", "xtnAtrbtCntnt);", "}"], "docstring_tokens": ["Save", "an", "asset", "subsidiary", "information."]}
{"code_tokens": ["public", "MkngMsgBsicO", "clone(){", "try{", "MkngMsgBsicO", "object=", "(MkngMsgBsicO)super.clone();", "if", "(", "this.mkngMsgRprtngLst==", "null", ")", "object.mkngMsgRprtngLst", "=", "null;", "else{", "java.util.List<bankware.corebanking.foreignexchange.importservice.service.dto.MkngMsgRprtngO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.foreignexchange.importservice.service.dto.MkngMsgRprtngO>(mkngMsgRprtngLst.size());", "for(", "bankware.corebanking.foreignexchange.importservice.service.dto.MkngMsgRprtngO", "item", ":", "mkngMsgRprtngLst", "){", "clonedList.add(", "(bankware.corebanking.foreignexchange.importservice.service.dto.MkngMsgRprtngO)item.clone());", "}", "object.mkngMsgRprtngLst", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "IpctMgmtSvcGetIpctTxEntryFullOut", "clone(){", "try{", "IpctMgmtSvcGetIpctTxEntryFullOut", "object=", "(IpctMgmtSvcGetIpctTxEntryFullOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "delete(CaArArrSrvcClassRIO", "arArrSrvcClassRIO)", "{", "int", "cnt", "=", "_getArArrSrvcClassR().delete(arArrSrvcClassRIO);", "_getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_SRVC_VLDTN_RULE_CACHE,", "null);", "return", "cnt;", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(LevyCrncyDscdEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CustRgstSvcAgrmntTpListIn", "clone(){", "try{", "CustRgstSvcAgrmntTpListIn", "object=", "(CustRgstSvcAgrmntTpListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "StStlmntXtnInfoDIO", "getStlmntXtnInfo(StStlmntXtnInfoDIO", "stStlmntXtnInfoDIO)", "throws", "BizApplicationException", "{", "logger.debug(\"StlmntCoreImpl==>getStlmntXtnInfo", ":", "stStlmntXtnInfoDIO:", "{}\",", "stStlmntXtnInfoDIO);", "return", "_getStlmntXtnInfoBiz().getStlmntXtnInfo(stStlmntXtnInfoDIO);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "extended", "information."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AssetImpl", "asset,", "Integer", "assetThingSeqNbr){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "subInfo", "=", "getSubInfoCache(asset,", "assetThingSeqNbr);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(!_isSubInfoContainsField(asset.getAssetThingSubInfoKnd(assetThingSeqNbr),", "entry.getKey()))", "{", "continue;", "}", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null", ")", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "calculation", "detail", "information."]}
{"code_tokens": ["public", "CaCdMgmtSvcReoveCodeListIn", "clone(){", "try{", "CaCdMgmtSvcReoveCodeListIn", "object=", "(CaCdMgmtSvcReoveCodeListIn)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcCdInfoListIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcCdInfoListIn>(tblNm.size());", "for(", "bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcCdInfoListIn", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcCdInfoListIn)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DummyIO", "saveArrXtnAtrbtClass(CaArrXtnAtrbtCntrlClassSaveIn", "in)", "throws", "BizApplicationException", "{", "CaArrXtnAtrbtClassIn", "input", "=", "new", "CaArrXtnAtrbtClassIn();", "input.setInstCd(in.getInstCd());", "input.setXtnAtrbtNm(in.getXtnAtrbtNm());", "input.setXtnAtrbtClassNm(in.getXtnAtrbtClassNm());", "input.setBizDscd(in.getBizDscd());", "input.setPdTpCd(in.getPdTpCd());", "input.setPdTmpltCd(in.getPdTmpltCd());", "input.setPdCd(in.getPdCd());", "_getArrXtnAtrbtCntrlMgmt().saveArrXtnAtrbtClass(input);", "return", "new", "DummyIO();", "}"], "docstring_tokens": ["Save", "the", "information", "about", "the", "extended", "attribute", "class", "mapped", "with", "arrangement", "condition.", "(condition", "variation", "class", "name)"]}
{"code_tokens": ["public", "void", "saveSubInfo(AtCustRprsnSIO", "subInfoIO,", "CustRprsnImpl", "custRprsnImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustRprsnSIO", "oldSubInfoIO", "=", "getSubInfoCache(custRprsnImpl);", "if", "(oldSubInfoIO", "==", "null)", "{", "//", "PK", "setting", "subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId());", "//", "insert", "_getAtCustRprsnSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoIO,", "oldSubInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(custRprsnImpl,", "oldSubInfoIO);", "//", "PK", "setting", "subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId());", "//", "update", "_getAtCustRprsnSDso().update(oldSubInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custRprsnImpl.setSubInfoCache(oldSubInfoIO);", "}"], "docstring_tokens": ["Save", "an", "asset", "subsidiary", "information."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(", "value))", "{", "for", "(AssetTpEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@AssetXtnAtrbtNm\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(PdServiceTypeEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "int", "delete(CaAmAsmItmMIO", "amAsmItmMIO){", "return", "_getAmAsmItmM().delete(amAsmItmMIO);", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["public", "BfCardInfoPopUpSvcIn", "clone(){", "try{", "BfCardInfoPopUpSvcIn", "object=", "(BfCardInfoPopUpSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaBnkMgmtSvcGetBankCodeListOut", "clone(){", "try{", "CaBnkMgmtSvcGetBankCodeListOut", "object=", "(CaBnkMgmtSvcGetBankCodeListOut)super.clone();", "if", "(", "this.bnkList==", "null", ")", "object.bnkList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.code.service.dto.CaBnkMgmtSvcGetBankCodeOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.code.service.dto.CaBnkMgmtSvcGetBankCodeOut>(bnkList.size());", "for(", "bankware.corebanking.configurationadmin.code.service.dto.CaBnkMgmtSvcGetBankCodeOut", "item", ":", "bnkList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.code.service.dto.CaBnkMgmtSvcGetBankCodeOut)item.clone());", "}", "object.bnkList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CmRefAtrbtMIO>", "selectList(CmRefAtrbtMIO", "cmRefAtrbtMIO)", "{", "return", "_getCmRefAtrbtM().selectList(cmRefAtrbtMIO);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AssetTxCore", "assetTx)", "throws", "BizApplicationException", "{", "return", "_getAssetTxSubInfoBiz().getMapSubInfo((AssetTxImpl)assetTx);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "transaction", "as", "a", "map."]}
{"code_tokens": ["public", "boolean", "isCancelled()", "{", "return", "this.getArrSts().equals(ArrStsEnum.CANCELED);", "}"], "docstring_tokens": ["Check", "whether", "if", "the", "status", "of", "arrangement", "is", "\"CANCELLED\".", "Detail", "function", "descripation", "refers", "to", "{@link", "#isActive()}."]}
{"code_tokens": ["public", "CalculateInterestOut", "calculate(CalculateInterestIn", "in)", "{", "logger.debug(\"###", "CustomBalloonCalculationStrategy", "start\");", "logger.debug(\"###", "CustomBalloonCalculationStrategy", "#4-1", "input:", "{}\",", "in);", "CalculationIntervalsOut", "calIntervalsOut", "=", "_makeCalculationIntervals(in);", "CalculateInterestOut", "out", "=", "new", "CalculateInterestOut();", "out.setIntCalIntervals(calIntervalsOut.getInterestCalculationSections());", "out.setFeeCalTgtAmt(calIntervalsOut.getFeeCalTargetAmount());", "return", "out;", "}"], "docstring_tokens": ["This", "method", "provides", "main", "business", "flow", "for", "calculating", "tax.", "Business", "Flow", ":", "1)", "Get", "calculator", "class", "by", "tax", "calculation", "way", "defined", "in", "institution", "parameter", "2)", "Make", "common", "VO", "for", "calculating", "the", "tax", "3)", "Calculate", "tax", "actually"]}
{"code_tokens": ["public", "List<ActorAddrOut>", "getListAddrInfo()", "throws", "BizApplicationException", "{", "return", "getActor().getListAddrInfo();", "}"], "docstring_tokens": ["Inquire", "the", "actor's", "address", "information", "list.", "It", "inquires", "the", "effective", "information", "on", "transaction", "date."]}
{"code_tokens": ["public", "CaLogInSvcGetLoginUserOut", "clone(){", "try{", "CaLogInSvcGetLoginUserOut", "object=", "(CaLogInSvcGetLoginUserOut)super.clone();", "if", "(", "this.roleList==", "null", ")", "object.roleList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaLogInSvcGetLoginUserRoleOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaLogInSvcGetLoginUserRoleOut>(roleList.size());", "for(", "bankware.corebanking.configurationadmin.actor.service.dto.CaLogInSvcGetLoginUserRoleOut", "item", ":", "roleList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.actor.service.dto.CaLogInSvcGetLoginUserRoleOut)item.clone());", "}", "object.roleList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CaTblXtnAtrbtOut>", "getTableExtendAttribute(String", "instCd,", "String", "tblNm)", "throws", "BizApplicationException", "{", "return", "this.getTableExtendAttribute(instCd,", "tblNm,", "CaXtnAtrbtVrtnCmpsEnum.NA,", "null);", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "input", "condition"]}
{"code_tokens": ["public", "LnAplctnInfo", "clone(){", "try{", "LnAplctnInfo", "object=", "(LnAplctnInfo)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "apply(ArrStsChngIn", "arrStsChngIn)", "throws", "BizApplicationException", "{", "_setArrStatus(", "ArrStsEnum.APPLIED,", "arrStsChngIn", ");", "_changeStatus(", "arrStsChngIn,", "null);", "}"], "docstring_tokens": ["Change", "the", "status", "of", "arrangement", "into", "\"Applied\",", "while", "change", "product", "of", "arrangement", "based", "on", "product", "code", "input.", "Following", "additional", "arrangement", "information", "can", "be", "registered.", "1)", "Account", "number", "2)", "Whether", "if", "created", "mandatory", "condition", "automatically", "or", "not", "3)", "A", "list", "of", "arrangement", "level", "condition", "4)", "A", "list", "of", "arrangement", "relation", "information", "5)", "A", "list", "of", "arrangement", "extended", "attribute"]}
{"code_tokens": ["public", "List<CaDocInqryIO>", "getCaDoc(CaDocInqryIO", "docInqryIn)", "throws", "BizApplicationException", "{", "List<CaDocInqryIO>", "docInqryList", "=", "null;", "List<CaDocBsicIO>", "docBsicList", "=", "_getDocBsic().searchDoc(docInqryIn);", "if(docBsicList", "!=", "null", "&&", "!docBsicList.isEmpty())", "{", "docInqryList", "=", "new", "ArrayList<CaDocInqryIO>();", "for(CaDocBsicIO", "docBsicIO", ":", "docBsicList)", "{", "CaDocInqryIO", "docInqryIO", "=", "new", "CaDocInqryIO();", "docInqryIO.setInstCd(docInqryIn.getInstCd());", "docInqryIO.setCmpntCd(docBsicIO.getCmpntCd());", "docInqryIO.setDocId(docBsicIO.getDocId());", "docInqryIO.setDocNm(docBsicIO.getDocNm());", "docInqryIO.setDocStsCd(docBsicIO.getDocStsCd());", "docInqryIO.setDocTpCd(docBsicIO.getDocTpCd());", "docInqryIO.setRgstrnDocTmpltYn(docBsicIO.getRgstrnDocTmpltYn());", "docInqryIO.setDocMkngTpCd(docBsicIO.getDocMkngTpCd());", "docInqryList.add(docInqryIO);", "}", "}", "return", "docInqryList;", "}"], "docstring_tokens": ["Get", "Document", "Object", "with", "document", "id"]}
{"code_tokens": ["public", "CaBizRuleInqrySvcBySrvcIn", "clone(){", "try{", "CaBizRuleInqrySvcBySrvcIn", "object=", "(CaBizRuleInqrySvcBySrvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "PreScrnngRslt", "clone(){", "try{", "PreScrnngRslt", "object=", "(PreScrnngRslt)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isValid(String", "type)", "{", "return", "(", "\"F\".equalsIgnoreCase(type)", "||", "\"L\".equalsIgnoreCase(type)", ")", ";", "//added", "by", "Roh(change", "to", "simplify)", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "saveSubInfo(ScrtyIntSubInfo", "subInfo,", "String", "txDt,", "Integer", "txSeqNbr,", "ScrtyIntImpl", "scrtyIntImpl)", "throws", "BizApplicationException{", "//", "0.", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{ScrtyIntSubInfo.class.getSimpleName()});", "}", "logger.debug(\"##", "<AS>", "saveSubInfo", "->", "subInfo", "=", "{}", "::", "\",", "subInfo.getFieldValues());", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "for(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(entry.getValue()", "!=", "null)", "{", "_getAtrbtChk().checkStandardAttribute(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsScrtyIntSIO", "subInfoCache", "=", "getSubInfoCache(scrtyIntImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsScrtyIntSIO();", "subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId());", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "2-1.", "insert", "_getAsScrtyIntSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "2-2.", "update", "_getAsScrtyIntSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "xtnAtrbtNm", "and", "xtnAtrbtCntnt"]}
{"code_tokens": ["public", "CalculateInterestOut", "calculate(CalculateInterestIn", "in)", "{", "logger.debug(\"###", "CustomAmortizedCalculationStrategy", "start\");", "logger.debug(\"###", "CustomAmortizedCalculationStrategy", "#4-1", "input:", "{}\",", "in);", "CalculationIntervalsOut", "calIntervalsOut", "=", "_makeCalculationIntervals((CustomCalculateInterestIn)", "in);", "CalculateInterestOut", "out", "=", "new", "CalculateInterestOut();", "out.setIntCalIntervals(calIntervalsOut.getInterestCalculationSections());", "out.setPartialRepymntNotClearAmt(calIntervalsOut.getPartialRepaymentNotClearAmt());", "out.setFeeCalTgtAmt(calIntervalsOut.getFeeCalTargetAmount());", "out.setInstallmntAmt(calIntervalsOut.getInstallmentAmount());", "out.setInstallmntAmtReCalHistory(calIntervalsOut.getInstallmentAmountReCalHistory());", "return", "out;", "}"], "docstring_tokens": ["This", "method", "provides", "main", "business", "flow", "for", "calculating", "tax.", "Business", "Flow", ":", "1)", "Get", "calculator", "class", "by", "tax", "calculation", "way", "defined", "in", "institution", "parameter", "2)", "Make", "common", "VO", "for", "calculating", "the", "tax", "3)", "Calculate", "tax", "actually"]}
{"code_tokens": ["public", "PdCndQueryBizProcGetCndDetailRngCndValOut", "clone(){", "try{", "PdCndQueryBizProcGetCndDetailRngCndValOut", "object=", "(PdCndQueryBizProcGetCndDetailRngCndValOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr,", "AssetImpl", "assetImpl,", "Integer", "assetThingSeqNbr)", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm)){", "return;", "}", "//", "1.", "\uc790\uc0b0\ubb3c\uac74\ubcf4\uc870\uba85\uc138\uc758", "\uc885\ub958", "\uc870\ud68c", "AssetThingSubInfoKndEnum", "subInfoKnd", "=", "assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr);", "//", "2.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttribute(xtnAtrbtNm,", "xtnAtrbtCntnt);", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(assetImpl,", "assetThingSeqNbr);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"assetId\",", "assetImpl.getAssetBasicCache().getAssetId());", "//", "PK", "setting", "subInfoCache.set(\"assetThingSeqNbr\",", "assetThingSeqNbr);", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(assetImpl,", "assetThingSeqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "3-1.", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "4.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoKnd,", "subInfoCache,", "assetImpl,", "assetThingSeqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(assetImpl,", "assetThingSeqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "3-2.", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "asset", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "deleteArrCustRXtnInfo(ArArrCustRXtnInfoDIO", "arArrCustRXtnInfoDIO,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "\uae30\uc874", "\ud655\uc7a5\uc18d\uc131", "\uc870\ud68c", "ArArrCustRXtnInfoDIO", "arArrCustRXtnInfoOld", "=", "selectArrCustRXtnInfo(arArrCustRXtnInfoDIO);", "//", "\uc870\ud68c\uacb0\uacfc\uac00", "\uc874\uc7ac\ud558\uc9c0", "\uc54a\ub294", "\uacbd\uc6b0", "\uc5d0\ub7ec\ucc98\ub9ac", "if", "(arArrCustRXtnInfoOld", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPARE0064\",", "new", "Object[]", "{", "arArrCustRXtnInfoDIO.getXtnAtrbtNm()", "});", "}", "//", "\ud655\uc7a5\uc18d\uc131", "update", "arArrCustRXtnInfoOld.setXtnAtrbtCntnt(null);", "updateArrCustRXtnInfo(arArrCustRXtnInfoOld,", "txDt,", "txSeqNbr);", "}"], "docstring_tokens": ["Remove", "one", "arrangement/customer", "relation", "extended", "attribute", "of", "subsidiary", "information(CTI)"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(", "value))", "{", "for", "(AssetScrtyIntRelStsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@assetScrtyIntRelStsCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(StlmntCalcnSubInfoInqryIn", "stlmntCalcnSubInfoInqryIn)", "throws", "BizApplicationException", "{", "return", "_getStlmntCalcnSubInfoBiz().getMapSubInfo(_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn));", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "detail", "information."]}
{"code_tokens": ["public", "CaOnlyDstbSendOut", "clone(){", "try{", "CaOnlyDstbSendOut", "object=", "(CaOnlyDstbSendOut)super.clone();", "if", "(", "this.dstbRqstSqlList==", "null", ")", "object.dstbRqstSqlList", "=", "null;", "else{", "java.util.List<java.lang.String>", "clonedList", "=", "new", "java.util.ArrayList<java.lang.String>(dstbRqstSqlList.size());", "for(", "java.lang.String", "item", ":", "dstbRqstSqlList", "){", "clonedList.add(item);", "}", "object.dstbRqstSqlList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(ArrVldtnRequiredValEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "AprvlCndMgmtGetAprvlCondXtnInfoIO", "clone(){", "try{", "AprvlCndMgmtGetAprvlCondXtnInfoIO", "object=", "(AprvlCndMgmtGetAprvlCondXtnInfoIO)super.clone();", "if", "(", "this.listVal==", "null", ")", "object.listVal", "=", "null;", "else{", "java.util.List<java.lang.String>", "clonedList", "=", "new", "java.util.ArrayList<java.lang.String>(listVal.size());", "for(", "java.lang.String", "item", ":", "listVal", "){", "clonedList.add(item);", "}", "object.listVal", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrReal>", "getListCustOwnArrBasedOnArrBasic(String", "custId,", "ArrStsEnum", "arrStsEnum,", "String", "bizDscd,String", "pdTpCd,", "String", "pdTmpltCd,", "String", "pdCd)", "throws", "BizApplicationException", "{", "return", "_getArrCustRelQryBizImpl().getArrRealListBasedOnArrBasic(custId,", "arrStsEnum,", "ArrCustRelEnum.MAIN_CONTRACTOR,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "pdCd,", "0,", "0,", "false);", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "customer", "own", "arrangement", "in", "specific", "status."]}
{"code_tokens": ["public", "String", "getArrKindCd(){", "return", "arrKndCd;", "}"], "docstring_tokens": ["Inquire", "the", "arrangement", "kind", "code."]}
{"code_tokens": ["public", "CaActorRolePSvcSrchOut", "clone(){", "try{", "CaActorRolePSvcSrchOut", "object=", "(CaActorRolePSvcSrchOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AsmImpl", "asm)", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc800\uc7a5", "\ud560", "Map", "\uc0dd\uc131", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "2.", "\ubcf4\uc870\uba85\uc138\uc815\ubcf4", "\uc870\ud68c(\uce90\uc2dc\ub85c\ubd80\ud130)", "IValueObject", "subInfo", "=", "getSubInfoCache(asm);", "//", "3.", "\uc870\ud68c\ub41c", "\ubcf4\uc870\uba85\uc138\uc815\ubcf4\uac00", "\uc5c6\uc73c\uba74", "\ube48", "Map", "\ub9ac\ud134", "if(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "4.", "\uac12\uc774", "null\uc774", "\uc544\ub2cc", "\uc815\ubcf4\ub97c", "Map\uc5d0", "\uc800\uc7a5", "for(Entry<String,Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(AsmSubInfo.FIELDS.get(entry.getKey())==null)", "{", "continue;", "}", "if(entry.getValue()!=null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "subsidiary", "information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["public", "void", "terminateArrCustRelation(ArrCustRelTrmntnIn", "in)", "throws", "BizApplicationException", "{", "if(ArrCustRelEnum.MAIN_CONTRACTOR.getValue().equals(in.getArrCustRelCd())){", "throw", "new", "BizApplicationException(\"AAPDPE0104\");", "}", "super.terminateArrCustRelation(in);", "}"], "docstring_tokens": ["Terminate", "arrangement", "customer", "relationship."]}
{"code_tokens": ["public", "CrncyGetOut", "getCurrency(String", "crncyCd)", "throws", "BizApplicationException", "{", "_checkQueryInputArgument(crncyCd);", "CmCrncyCdMIO", "outParm", "=", "_selectCurrencyInformation(crncyCd,", "_getCmnContext().getStandardInstCode());", "if", "(outParm", "==", "null)", "{", "return", "null;", "}", "return", "_setCurrencyInformationToOutput(outParm);", "}"], "docstring_tokens": ["It", "inquiries", "the", "Currency", "Information", "by", "currency", "code."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "ArrIssmdaImpl", "arrIssmdaImpl,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm)){", "return;", "}", "ArArrIssmdaSIO", "sqlIO", "=", "null;", "//", "1.\uae30\uc874", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "ArrIssmdaSubInfo", "oldCache", "=", "(ArrIssmdaSubInfo)", "getSubInfoCache(arrIssmdaImpl);", "if", "(oldCache", "==", "null)", "{", "sqlIO", "=", "new", "ArArrIssmdaSIO();", "sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd());", "sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId());", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveArArrIssmdaSubHEmpty(arrIssmdaImpl,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "sqlIO);", "_getArArrIssmdaSDso().insert(sqlIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "oldCache))", "{", "return;", "}", "sqlIO", "=", "new", "ArArrIssmdaSIO();", "sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd());", "sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId());", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveArArrIssmdaSubH(arrIssmdaImpl,", "oldCache,", "txDt,", "txSeqNbr);", "//", "\uae30\uc874", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(oldCache,", "sqlIO);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "sqlIO);", "//", "update", "_getArArrIssmdaSDso().update(sqlIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(", "sqlIO,", "arrIssmdaImpl);", "}"], "docstring_tokens": ["Save", "an", "asset", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "ArrTxCore", "arrTx)", "throws", "BizApplicationException{", "_getArrTxSubInfoBiz().saveSubInfo(subInfoMap,", "(ArrTxImpl)arrTx);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "thing", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "AssetTxBsicInfoIO", "getBasicInfo()", "throws", "BizApplicationException", "{", "if(assetTxBasicCache", "==", "null)", "{", "return", "null;", "}", "AssetTxBsicInfoIO", "assetTxBsicInfoIO", "=", "new", "AssetTxBsicInfoIO();", "DtoCoreUtils.setSubInfoIO(assetTxBasicCache,", "assetTxBsicInfoIO);", "return", "assetTxBsicInfoIO;", "}"], "docstring_tokens": ["It", "inquires", "basic", "information", "of", "insurance."]}
{"code_tokens": ["public", "BfCndCndRelSvcIn", "clone(){", "try{", "BfCndCndRelSvcIn", "object=", "(BfCndCndRelSvcIn)super.clone();", "object.aplyDt", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.aplyDt.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "RoleMgmtSvcGetRoleScrnRelListOut", "clone(){", "try{", "RoleMgmtSvcGetRoleScrnRelListOut", "object=", "(RoleMgmtSvcGetRoleScrnRelListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.common.role.service.dto.RoleMgmtSvcGetRoleScrnRelOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.common.role.service.dto.RoleMgmtSvcGetRoleScrnRelOut>(tblNm.size());", "for(", "bankware.corebanking.common.role.service.dto.RoleMgmtSvcGetRoleScrnRelOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.common.role.service.dto.RoleMgmtSvcGetRoleScrnRelOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "PymntArrOpnSvcOut", "clone(){", "try{", "PymntArrOpnSvcOut", "object=", "(PymntArrOpnSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "PntCndImpl", "getCnd(PntCndIn", "in)", "throws", "BizApplicationException", "{", "//", "\uc870\uac74", "\uc624\ube0c\uc81d\ud2b8", "\uc0dd\uc131", "\ubc0f", "\ucd08\uae30\ud654", "//", "Get", "condition", "bean", "and", "initialize", "PntCndImpl", "cnd", "=", "new", "PntCndImpl(this,", "in);", "cnd.initialize();", "//", "Return", "condition", "return", "cnd;", "}"], "docstring_tokens": ["This", "Method", "create", "a", "condition", "object.", "condition", "information", "initialization.", "condition", "object", "has", "condition", "defined", "in", "benefit", "or", "common", "condition", "information."]}
{"code_tokens": ["public", "boolean", "checkDtoAttribute(Object", "obj)", "throws", "BizApplicationException", "{", "return", "_getDtoValidation().checkDtoAttribute(obj,", "'I');", "}"], "docstring_tokens": ["DTO", "input/output", "validation."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "ArrIssmdaImpl", "arrIssmdaImpl,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm)){", "return;", "}", "ArArrIssmdaSIO", "sqlIO", "=", "null;", "//", "1.\uae30\uc874", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "ArrIssmdaSubInfo", "oldCache", "=", "(ArrIssmdaSubInfo)", "getSubInfoCache(arrIssmdaImpl);", "if", "(oldCache", "==", "null)", "{", "sqlIO", "=", "new", "ArArrIssmdaSIO();", "sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd());", "sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId());", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveArArrIssmdaSubHEmpty(arrIssmdaImpl,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "sqlIO);", "_getArArrIssmdaSDso().insert(sqlIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "oldCache))", "{", "return;", "}", "sqlIO", "=", "new", "ArArrIssmdaSIO();", "sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd());", "sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId());", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveArArrIssmdaSubH(arrIssmdaImpl,", "oldCache,", "txDt,", "txSeqNbr);", "//", "\uae30\uc874", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(oldCache,", "sqlIO);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "sqlIO);", "//", "update", "_getArArrIssmdaSDso().update(sqlIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(", "sqlIO,", "arrIssmdaImpl);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "BigDecimal", "getTimeoutScnd(){", "return", "timeoutScnd;", "}"], "docstring_tokens": ["Inquire", "Timeout", "Second."]}
{"code_tokens": ["public", "boolean", "isValid(String", "type)", "{", "return", "(", "\"B\".equalsIgnoreCase(type)", "||", "\"C\".equalsIgnoreCase(type)", ")", ";", "//added", "by", "Roh(change", "to", "simplify)", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "AsmBsicInfoIO", "changeAsmStatus(String", "asmId,String", "asmStsCoreEnum,", "String", "rjctdRsnCoreEnum,", "String", "rjctdRsnCntnt)", "throws", "BizApplicationException", "{", "//1.\uc870\ud68c", "AsmBsicInfoIO", "in", "=", "getBasicInformation(asmId);", "//2.\ubcc0\uacbd.", "AmAsmMIO", "amAsmMIO", "=", "_setAmAsmMIO(in,", "asmStsCoreEnum,", "rjctdRsnCoreEnum,", "rjctdRsnCntnt);", "_getAmAsmMDso().updateTerminate(amAsmMIO);", "//3.\uc0c1\ud0dc\uc774\ub825\ub4f1\ub85d", "_insertStsHistory(amAsmMIO);", "return", "_getBasicInfomation(amAsmMIO);", "}", "/**", "*", "\uc2ec\uc0ac\uae30\ubcf8", "\uc0c1\ud0dc\ubcc0\uacbd", "*", "<pre>", "*", "</pre>", "*", "@param", "in", ":", "(required)", "\uc2ec\uc0ac\uc2dd\ubcc4\uc790", "*", "@param", "asmStsCd", ":", "(required)", "\uc2ec\uc0ac\uc0c1\ud0dc\ucf54\ub4dc", "*", "@return", "AsmBsicInfoIO", ":", "{@link", "AsmBsicInfoIO}"], "docstring_tokens": ["Change", "assessment", "status"]}
{"code_tokens": ["public", "boolean", "isExistArrScrtyIntRelation(String", "arrScrtyIntRelCd,", "String", "scrtyIntId,", "String", "baseDt)", "throws", "BizApplicationException", "{", "return", "_getArrScrtyIntRelBiz().isExistArrScrtyIntRelation(arrScrtyIntRelCd,", "scrtyIntId,", "baseDt,", "this);", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "Register", "arrangement-security", "interest", "relation.", "*", "</pre>", "*", "@note", "{@link", "ArrScrtyIntRelRgstrnIn}", "-", "required", "fields", ":", "scrtyIntId,", "arrScrtyIntRelCd,", "relStartDt,", "txDt,", "txSeqNbr,", "arrScrtyIntRelStsRsnCd", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\uacc4\uc57d\uc124\uc815\uad00\uacc4\ub97c", "\ub4f1\ub85d\ud55c\ub2e4.", "*", "</pre>", "*", "@note", "{@link", "ArrScrtyIntRelRgstrnIn}"], "docstring_tokens": ["Inquire", "existence", "of", "arrangement/security", "interest", "relation."]}
{"code_tokens": ["public", "PdTemplateQuerySvcGetCndGrpTmpltDSubOut", "clone(){", "try{", "PdTemplateQuerySvcGetCndGrpTmpltDSubOut", "object=", "(PdTemplateQuerySvcGetCndGrpTmpltDSubOut)super.clone();", "if", "(", "this.rngCndBaseVal==null", ")", "object.rngCndBaseVal", "=", "null;", "else", "object.rngCndBaseVal", "=", "(bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDRngBaseValOut)this.rngCndBaseVal.clone();", "if", "(", "this.listCndBaseVal==", "null", ")", "object.listCndBaseVal", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDListBaseValOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDListBaseValOut>(listCndBaseVal.size());", "for(", "bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDListBaseValOut", "item", ":", "listCndBaseVal", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDListBaseValOut)item.clone());", "}", "object.listCndBaseVal", "=", "clonedList;", "}", "if", "(", "this.cndBtwnRel==", "null", ")", "object.cndBtwnRel", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndRelOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndRelOut>(cndBtwnRel.size());", "for(", "bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndRelOut", "item", ":", "cndBtwnRel", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndRelOut)item.clone());", "}", "object.cndBtwnRel", "=", "clonedList;", "}", "if", "(", "this.cndValBtwnRel==", "null", ")", "object.cndValBtwnRel", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndValRelOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndValRelOut>(cndValBtwnRel.size());", "for(", "bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndValRelOut", "item", ":", "cndValBtwnRel", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndValRelOut)item.clone());", "}", "object.cndValBtwnRel", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "ScrtyIntCore", "scrtyInt,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getScrtyIntSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "(ScrtyIntImpl)", "scrtyInt);", "}"], "docstring_tokens": ["Save", "an", "insurance", "subsidiary", "information."]}
{"code_tokens": ["public", "List<InterestCalculationSection>", "apply(ApplyInterestCalculationSectionExceptionIn", "in,", "List<InterestCalculationSection>", "intCalIntervals)", "throws", "BizApplicationException", "{", "final", "String", "balOvrduBaseDt", "=", "in.getBalOvrduBaseDt();", "final", "String", "balOvrduStartDt", "=", "in.getBalOvrduStartDt();", "final", "String", "holidyDfrdBalOvrduBaseDt", "=", "in.getHolidyDfrdBalOvrduBaseDt();", "for", "(InterestCalculationSection", "interval", ":", "intCalIntervals)", "{", "List<CalculationType>", "typeList", "=", "new", "ArrayList<>();", "for", "(CalculationType", "type", ":", "interval.getCalTps())", "{", "typeList.add(type);", "//", "\uc774\uc790\uacc4\uc0b0\uc720\ud615\uad6c\ubd84", "=", "315", "//", "AND", "\uacc4\uc0b0\uc2dc\uc791\ub144\uc6d4\uc77c", "=", "\uc794\uc561\uc5f0\uccb4\uc2dc\uc791\uc77c", "if", "(\"315\".equals(type.getIntCalTpCd())", "&&", "type.getCalStartDt().equals(balOvrduStartDt))", "{", "CalculationType", "t1", "=", "type.clone();", "t1.setIntCalTpCd(\"101\");", "//", "\uc57d\uc815\uc774\uc790", "t1.setCalStartDt(balOvrduBaseDt);", "//", "\uc794\uc561\uc5f0\uccb4\uae30\uc900\uc77c", "t1.setCalEndDt(holidyDfrdBalOvrduBaseDt);", "//", "\ud734\uc77c\uc774\uc5f0\uc794\uc561\uc5f0\uccb4\uae30\uc900\uc77c", "typeList.add(t1);", "}", "}", "//", "\ubcc0\uacbd\ub41c", "\uc720\ud615", "\ubc18\uc601", "interval.setCalTps(typeList);", "}", "return", "intCalIntervals;", "}"], "docstring_tokens": ["Change", "status", "of", "arrangement", "activity", "into", "\"Applied\".", "Available", "next", "status", "is", "managed", "by", "ArrActvtyMapStsChngDflt", "and", "it", "throws", "error", "if", "new", "status", "is", "not", "available."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(", "value))", "{", "for", "(ScrtyIntStsChngRsnEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@scrtyIntStsCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "remove(String", "instCd,", "String", "agrmntTpCd)", "throws", "BizApplicationException", "{", "//check", "required", "inputs", "if(StringUtils.isEmpty(instCd)){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@instCd\"});", "}else", "if(StringUtils.isEmpty(agrmntTpCd)){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@agrmntTpCd\"});", "}", "CaAtCustAgrmntMIO", "atCustAgrmntMIO", "=", "_getAtCustAgrmntMDso().select(instCd,", "agrmntTpCd);", "if(atCustAgrmntMIO", "==", "null){", "throw", "new", "BizApplicationException(\"AAPATE0120\");", "}", "_getCaCmnContext().setHeaderColumn(atCustAgrmntMIO);", "atCustAgrmntMIO.setInstCd(instCd);", "_getAtCustAgrmntMDso().delete(atCustAgrmntMIO);", "}"], "docstring_tokens": ["It", "deletes", "the", "document", "notice", "relation", "information.", "Needs", "caution", "as", "it", "actually", "deletes", "the", "information."]}
{"code_tokens": ["public", "List<StlmntDtlIO>", "calculate(IntCalculatorIO", "intCalculatorIO)", "throws", "BizApplicationException", "{", "/*", "*", "check", "interest", "calculation", "condition", "*/", "_validateCommonInfo(intCalculatorIO);", "//", "For", "interest", "return", "StlmntDtlIO", "rtnStlmntDtlIO", "=", "new", "StlmntDtlIO();", "/*", "*", "Make", "the", "target", "list", "of", "interest", "calculation", "*/", "List<StlmntCalcnDtlIO>", "stlmntCalcnDList", "=", "_makeSettlement(intCalculatorIO,", "rtnStlmntDtlIO);", "/*", "*", "Make", "the", "list", "of", "settlement", "result", "and", "return", "it", "*/", "List<StlmntDtlIO>", "stlmntDtlIOList", "=", "super.makeInterestSettlementInformation(intCalculatorIO,", "stlmntCalcnDList,", "CalcnBaseAmtTpEnum.ACMLTD_AMT.getValue(),", "rtnStlmntDtlIO);", "return", "stlmntDtlIOList;", "}"], "docstring_tokens": ["This", "method", "calculates", "the", "interest", "of", "account", "accordance", "with", "type", "of", "interest", "transaction.", "It", "must", "be", "performed", "after", "executing", "normally", "the", "createCalculator", "method."]}
{"code_tokens": ["public", "ArArrAplyIntRtDIO", "select(ArArrAplyIntRtDIO", "arArrAplyIntRtDIO)", "{", "return", "_getArArrAplyIntRtD().select(arArrAplyIntRtDIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "CaXpExtrnlIntrfcMsgInfoDIO", "select(CaXpExtrnlIntrfcMsgInfoDIO", "xpExtrnlIntrfcMsgInfoDIO)", "{", "return", "_getCaXpExtrnlMsgInfoD().select(xpExtrnlIntrfcMsgInfoDIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "String", "cd", "=", "\"\";", "if(supplInfoVal.get(CCM03.CD)", "!=", "null)", "{", "cd", "=", "supplInfoVal.get(CCM03.CD).toString();", "}", "AmtTpDtlIO", "amtTpDtlIO", "=", "_getAmtTpXtn().getAmountType(cd);", "if(amtTpDtlIO", "==", "null", "||", "!amtTpDtlIO.getMostUpAmtTpCd().equals(AmtTpEnum.FEE.getValue()))", "{", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["This", "method", "check", "the", "code", "number.", "If", "code", "is", "exist", "return", "true,", "else", "return", "false."]}
{"code_tokens": ["public", "CaLeasePrtctnMgmtSvcRemoveLeasePrtctnIn", "clone(){", "try{", "CaLeasePrtctnMgmtSvcRemoveLeasePrtctnIn", "object=", "(CaLeasePrtctnMgmtSvcRemoveLeasePrtctnIn)super.clone();", "if", "(", "this.leasePrtctnList==", "null", ")", "object.leasePrtctnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn>(leasePrtctnList.size());", "for(", "bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn", "item", ":", "leasePrtctnList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn)item.clone());", "}", "object.leasePrtctnList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "registerAssetCustRel(AssetCustRelRgstrnIn", "rgstrnIn)", "throws", "BizApplicationException{", "//", "\ub4f1\ub85d\ud560", "\uace0\uac1d\uc758", "\uc0c1\ud0dc", "\uac80\uc99d", "_checkCustAlive(rgstrnIn.getCustId());", "super.registerAssetCustRel(rgstrnIn);", "}"], "docstring_tokens": ["Register", "relation", "between", "asset", "and", "customer."]}
{"code_tokens": ["public", "CashChargeSvcOut", "clone(){", "try{", "CashChargeSvcOut", "object=", "(CashChargeSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<StlmntDtlIO>", "calculate(IntCalculatorIO", "intCalculatorIO)", "throws", "BizApplicationException", "{", "/*", "*", "Get", "lists", "of", "target", "of", "interest", "calculation", "*/", "List<StlmntCalcnDtlIO>", "stlmntCalcnDList", "=", "_calculateInterest(intCalculatorIO);", "if(logger.isDebugEnabled())", "{", "logger.debug(\"##j", "stlmntDtlIOList:", "{}", "\",", "stlmntCalcnDList);", "}", "/*", "*", "Make", "settlement", "result", "of", "the", "interest", "*/", "List<StlmntDtlIO>", "stlmntDtlIOList", "=", "super.makeInterestSettlementInformation(intCalculatorIO,", "stlmntCalcnDList,", "CalcnBaseAmtTpEnum.BALANCE.getValue(),", "null);", "return", "stlmntDtlIOList;", "}"], "docstring_tokens": ["This", "method", "provides", "main", "business", "flow", "for", "calculating", "tax.", "Business", "Flow", ":", "1)", "Get", "calculator", "class", "by", "tax", "calculation", "way", "defined", "in", "institution", "parameter", "2)", "Make", "common", "VO", "for", "calculating", "the", "tax", "3)", "Calculate", "tax", "actually"]}
{"code_tokens": ["public", "List<ArrIntRt>", "getListArrIntRt(Arrangement", "arr,", "PdIntRtStrctrClCdEnum", "pdIntRtStrctr,", "String", "baseDt)", "throws", "BizApplicationException", "{", "if", "(StringUtils.isEmpty(baseDt))", "{", "baseDt", "=", "ArrCmnUtil.getRckngDt(_getCmnContext());", "}", "ArrIntRtIn", "arrIntRtIn", "=", "new", "ArrIntRtIn();", "arrIntRtIn.setArr(arr);", "arrIntRtIn.setPdIntRtStrctr(pdIntRtStrctr);", "arrIntRtIn.setPrcsDt(baseDt);", "arrIntRtIn.setCrncyCd(arr.getCrncyCd());", "arrIntRtIn.setStartDt(baseDt);", "arrIntRtIn.setEndDt(DateUtils.getDateDayAfter(CCM01.ONE,baseDt));", "arrIntRtIn.setIntClcltYn(CCM01.NO);", "arrIntRtIn.setIsGenerate(false);", "return", "getListArrIntRt(arrIntRtIn);", "}"], "docstring_tokens": ["Inquire", "interest", "rate", "applied", "to", "the", "arrangement."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(SndRcvTrgtDscdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "Pd", "getPd()", "{", "return", "pd;", "}"], "docstring_tokens": ["Methods", "to", "create", "a", "product", "object", "Product", "information", "initialization.", "Use", "inputed", "product", "code,", "apply", "date", "to", "create", "a", "product", "object", "and", "return", "it", "if", "the", "product", "does", "not", "exist,", "return", "null"]}
{"code_tokens": ["public", "ActorRgstSvcCtcptXtnIn", "clone(){", "try{", "ActorRgstSvcCtcptXtnIn", "object=", "(ActorRgstSvcCtcptXtnIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "removeExtrnlIntrfcMsgAuthInfo(CaExtrnlIntrfcMsgAuthInfoIO", "msgAuthInfo)", "throws", "BizApplicationException", "{", "_checkInputValidation(msgAuthInfo);", "int", "result", "=", "_getXpExtrnlAuthInfoDDso().delete(_setInputValidation(msgAuthInfo));", "if(result", "==", "0)", "throw", "new", "BizApplicationException(\"AAPSTE0047\",", "null);", "//", "Failed", "to", "change", "the", "information.", "}"], "docstring_tokens": ["It", "removes", "list", "of", "External", "Interface", "Message", "Authentication", "Information."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "assetTxSubInfoMap,", "AssetTxCore", "assetTx)", "throws", "BizApplicationException", "{", "_getAssetTxSubInfoBiz().saveMapSubInfo(assetTxSubInfoMap,", "(AssetTxImpl)", "assetTx);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "thing", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "CustRprsnImpl", "custRprsnImpl)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustRprsnSIO", "subInfoIO", "=", "getSubInfoCache(custRprsnImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtCustRprsnSIO();", "subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId());", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85\uacfc", "\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "insert", "_getAtCustRprsnSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(custRprsnImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "update", "_getAtCustRprsnSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custRprsnImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "xtnAtrbtNm", "and", "xtnAtrbtCntnt"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "CustImpl", "custImpl)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustSIO", "subInfoIO", "=", "getSubInfoCache(custImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtCustSIO();", "subInfoIO.setCustId(custImpl.getCustId());", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85\uacfc", "\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "insert", "_getAtCustSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(custImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "update", "_getAtCustSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AprslCore", "aprslCore,", "Integer", "aprslThingSeqNbr)", "throws", "BizApplicationException", "{", "return", "_getAprslThingSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AprslImpl)aprslCore,", "aprslThingSeqNbr);", "}"], "docstring_tokens": ["This", "method", "inquires", "settlement", "subsidiary", "detail", "information", "list", "(inquire", "all", "subsidiary", "detail", "information", "of", "a", "given", "settlement", "master", "by", "using", "the", "key", "value", "other", "than", "the", "detail", "sequence", "number)."]}
{"code_tokens": ["public", "void", "changeArrStatus(ArrStsChngIn", "arrStsChngIn,", "ArrStsChngAdtnlIn", "arrStsChngAdtnlIn)", "throws", "BizApplicationException", "{", "_getArrRealCoreFundamentalAgent().changeArrStatus(arrStsChngIn,", "arrStsChngAdtnlIn,", "false,", "this);", "}"], "docstring_tokens": ["Change", "arrangement", "status", "code", "with", "accepted", "status", "and", "apply", "additional", "information", "change."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ActorImpl", "actorImpl)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "subInfo", "=", "getSubInfoCache(actorImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "calculation", "detail", "information."]}
{"code_tokens": ["public", "int", "deleteServiceProfileAttribute(CaSrvcPrflAtrbtInfoIO", "in)", "throws", "BizApplicationException", "{", "_checkServiceProfileAttributeName(in);", "//", "status", "update", "for", "SrvcPrflAtrbtD", "this._deleteSvSrvcPrflAtrbtD(in);", "//", "status", "update", "for", "SvInstSrvcPrflD", "this._deleteSvInstSrvcPrflD(in);", "return", "0;", "}"], "docstring_tokens": ["Delete", "the", "service", "profile", "attribute."]}
{"code_tokens": ["public", "AplctnRgstSvcGetOut", "clone(){", "try{", "AplctnRgstSvcGetOut", "object=", "(AplctnRgstSvcGetOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<InsrncRltdAssetOut>", "getListRelatedAsset(String", "insrncId)", "throws", "BizApplicationException", "{", "List<AsAssetInsrncRIO>", "asAssetInsrncRList", "=", "_getAsAssetInsrncRDso().selectAsset(_getCmnContextCore().getInstCode(),", "insrncId);", "List<InsrncRltdAssetOut>", "rltdAssetList", "=", "new", "ArrayList<InsrncRltdAssetOut>();", "for(AsAssetInsrncRIO", "item", ":", "asAssetInsrncRList)", "{", "InsrncRltdAssetOut", "rltdAsset", "=", "new", "InsrncRltdAssetOut();", "rltdAsset.setAssetId(item.getAssetId());", "rltdAsset.setAssetInsrncRelStsCd(item.getAssetInsrncRelStsCd());", "rltdAsset.setRelStartDt(item.getRelStartDt());", "rltdAsset.setRelEndDt(item.getRelEndDt());", "rltdAssetList.add(rltdAsset);", "}", "return", "rltdAssetList;", "}"], "docstring_tokens": ["It", "inquires", "lists", "of", "asset", "information", "related", "with", "insurance."]}
{"code_tokens": ["public", "GlQuerySvcAcctgDtOut", "clone(){", "try{", "GlQuerySvcAcctgDtOut", "object=", "(GlQuerySvcAcctgDtOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if", "(!this.getArrangementCore().isReal())", "return;", "switch", "(arrSrvcTpCd)", "{", "case", "\"OpenDeposit\":", "_doOpenValidation();", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "specific", "service", "type.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "void", "getLogSeqNbr(CmnJrnzArea", "cmnJrnzArea,", "String", "chnlCd)", "throws", "BizApplicationException", "{", "logger.debug(\"<AC>", "AcctgJrnlCmnCustomImpl", "_getLogSeqNbr", "CmnJrnzArea", "logSeqNbr", ":", "{}\",", "cmnJrnzArea.getLogSeqNbr());", "//20210121", "CmnJrnzArea\uc758", "\ub85c\uadf8\uc77c\ub828\ubc88\ud638\uac00", "\uc774\ubbf8", "\uc678\ubd80\uc5d0\uc11c", "\ucc44\ubc88\ub41c", "\uc0c1\ud0dc\uc774\uba74", "\ucc44\ubc88\ud558\uc9c0", "\uc54a\uc74c.", "if(cmnJrnzArea.getLogSeqNbr()!=null", "&&", "cmnJrnzArea.getLogSeqNbr().compareTo(BigDecimal.ZERO)!=0)", "{", "return;", "}", "String", "logSeqNbr", "=", "null;", "//", "\ub85c\uadf8\uc77c\ub828\ubc88\ud638", "\uc14b\ud305", "if(!_getCmnContext().isChannelAtm()", "&&", "!_getCmnContext().isChannelTellerWindow())", "{", "//", "if", "(!ChannelEnum.CD_ATM.getValue().equals(chnlCd)", "&&", "//", "!ChannelEnum.TELLER_WINDOW.getValue().equals(chnlCd))", "{", "//Double", "d", "=", "Math.random()", "*", "Double.parseDouble(\"999999999999999\")", "+", "1;", "Double", "d", "=", "new", "SecureRandom().nextDouble()*Double.parseDouble(\"999999999999999\")", "+", "1;", "logSeqNbr", "=", "String.valueOf(d.longValue());", "}", "else", "{", "//", "\ub85c\uadf8\uc77c\ub828\ubc88\ud638", "\ucc44\ubc88", "logSeqNbr", "=", "_getNbrg().getNumbering(NumberingCoreEnum.LOG_SEQUENCE_NUMBER.getValue());", "//log", "sequence", "number", "}", "cmnJrnzArea.setLogSeqNbr(new", "BigDecimal(logSeqNbr));", "if(logger.isDebugEnabled()){", "logger.debug(\"##", "AcctgJrnlCmnCustomImpl", ">", "logSeqNbr", ":", "{}\",", "logSeqNbr);", "}"], "docstring_tokens": ["This", "method", "creates", "general", "ledger", "log", "sequence", "number.", "It", "depends", "on", "the", "requirements", "of", "the", "site,", "the", "log", "sequence", "number", "numbering", "method", "of", "the", "General", "ledger", "may", "be", "applied", "differently."]}
{"code_tokens": ["public", "CaClSysIO", "saveClassificationHierarchy(CaClSysIO", "in)", "throws", "BizApplicationException", "{", "CaCmClHrarcyMIO", "daoIn", "=", "_getInputClassificationHierarchy(in);", "CaCmClHrarcyMIO", "cmClHrarcyMIO", "=", "_getCmClHrarcyMDso().selectWithStatusAll(daoIn.getClHrarcyId());", "if", "(cmClHrarcyMIO", "==", "null)", "{", "_getCmClHrarcyMDso().insert(daoIn);", "}", "else", "{", "_getCmClHrarcyMDso().update(daoIn);", "}", "//", "save", "multi", "language", "CaTrnsfrLngSaveListIn", "mltLngIn", "=", "new", "CaTrnsfrLngSaveListIn();", "List<CaTrnsfrLngSaveIn>", "mltLngListIn", "=", "new", "ArrayList<CaTrnsfrLngSaveIn>();", "CaTrnsfrLngSaveIn", "mltUseLng", "=", "new", "CaTrnsfrLngSaveIn();", "mltUseLng.setTrnsfrKndCd(CCM01.TRANS_CL_HRARCY);", "mltUseLng.setTrnsfrOriginKeyVal(in.getClHrarcyId());", "mltUseLng.setQryUnitCd(in.getClHrarcyId());", "mltUseLng.setLngCd(_getCmnContext().getLanguageCode());", "mltUseLng.setTrnsfrRsltVal(in.getClHrarcyNm());", "mltLngListIn.add(mltUseLng);", "if(!CCM01.LNG_ENG.equals(_getCmnContext().getLanguageCode()))", "{", "CaTrnsfrLngSaveIn", "mltEngLng", "=", "new", "CaTrnsfrLngSaveIn();", "mltEngLng.setTrnsfrKndCd(CCM01.TRANS_CL_HRARCY);", "mltEngLng.setTrnsfrOriginKeyVal(daoIn.getClHrarcyId());", "mltEngLng.setQryUnitCd(daoIn.getClHrarcyId());", "mltEngLng.setLngCd(CCM01.LNG_ENG);", "mltEngLng.setTrnsfrRsltVal(in.getClHrarcyEngNm());", "mltLngListIn.add(mltEngLng);", "}", "mltLngIn.setTrnsfrLngList(mltLngListIn);", "_getTrnsfrLng().saveTransferLanguage(mltLngIn);", "CaClSysIO", "out", "=", "_getOutputClassificationHierarchy(daoIn);", "return", "out;", "}"], "docstring_tokens": ["It", "saves", "classification", "hierarchy."]}
{"code_tokens": ["public", "List<ActorRoleActorRoleRIO>", "getListActorRoleActorRoleRelation()", "throws", "BizApplicationException", "{", "return", "getActor().getListActorRoleActorRoleRelation();", "}"], "docstring_tokens": ["Inquire", "effective", "and", "normal", "status", "actor", "role-actor", "role", "relation", "list", "on", "transaction", "date."]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbCnstncyCmNbrgRuleMDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "String", "getUnmaskId()", "throws", "BizApplicationException", "{", "return", "_getContextHeader().getUnmaskId();", "}"], "docstring_tokens": ["Unmask", "Id", "inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "void", "deleteDocClassificationInfo(String", "instCd,", "CaDocClIO", "docClIO)", "throws", "BizApplicationException", "{", "_getDocCl().delete(instCd,", "docBsicIO,", "docClIO);", "}"], "docstring_tokens": ["It", "removes", "document", "classification."]}
{"code_tokens": ["public", "List<ArrCashFlowIO>", "simulateArrCashFlowScheduleForEarlyRpymnt(ArrReal", "arr,", "String", "baseDt,", "BigDecimal", "rpymntAmt,", "IntCalcnLnRsltOut", "intCalcRsltOut)", "throws", "BizApplicationException", "{", "if(StringUtils.isEmpty(baseDt))", "{", "baseDt", "=", "_getCmnContext().getTxDate();", "}", "BigDecimal", "lnInstlmntAmt", "=", "intCalcRsltOut.getLnInstlmntAmt();", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"##", "simulateArrCashFlowScheduleForEarlyRpymnt", "->", "intCalcRsltOut", "=", "{}", "::", "\",", "intCalcRsltOut.getFieldValues());", "logger.debug(\"##", "simulateArrCashFlowScheduleForEarlyRpymnt", "->", "rpymntAmt", "=", "{}", "::", "\",", "rpymntAmt);", "logger.debug(\"##", "simulateArrCashFlowScheduleForEarlyRpymnt", "->", "lnInstlmntAmt", "=", "{}", "::", "\",", "lnInstlmntAmt);", "logger.debug(\"##", "simulateArrCashFlowScheduleForEarlyRpymnt", "->", "earlyRepaymentTgtAmt", "=", "{}", "::", "\",", "intCalcRsltOut.getEarlyRepaymentTgtAmt());", "}", "//\uc870\uae30\uc0c1\ud658\uae08\uc561", "Row", "\ucd94\uac00", "BigDecimal", "earlyRepaymentTgtAmt", "=", "intCalcRsltOut.getEarlyRepaymentTgtAmt();", "//", "\uc870\uae30\uc0c1\ud658\ub300\uc0c1\uae08\uc561", "BigDecimal", "calcnBaseAmt", "=", "earlyRepaymentTgtAmt;", "if", "(intCalcRsltOut.getLnInstlmntAmtCalcnBal()", "!=", "null)", "{", "calcnBaseAmt", "=", "calcnBaseAmt.add(intCalcRsltOut.getLnInstlmntAmtCalcnBal());", "//", "\ud560\ubd80\uae08\uacc4\uc0b0\uc794\uc561", "}", "ArrCashFlowIO", "arrCashFlow", "=", "new", "ArrCashFlowIO();", "arrCashFlow.setInstCd(arr.getInstCd());", "arrCashFlow.setArrId(arr.getArrId());", "arrCashFlow.setSctnSeqNbr(0);", "arrCashFlow.setSeqNbr(0);", "/**", "Amount", "Type", "Code(Early", "Repayment", "Fee)", "*/", "arrCashFlow.setAmtTpCd(AmtTpEnum.PRNCPL.getValue());", "//\uc6d0\uae08", "arrCashFlow.setCrncyCd(arr.getCrncyCd());", "arrCashFlow.setCalcnBaseAmt(calcnBaseAmt);", "/**", "calculation", "from", "date", "-->", "early", "repayment", "date", "*/", "arrCashFlow.setSctnStartDt(baseDt);", "/**", "calculation", "to", "date", "-->", "early", "repayment", "date", "*/", "arrCashFlow.setSctnEndDt(baseDt);", "/**", "scheduled", "repayment", "date", "-->", "early", "repayment", "date", "*/", "arrCashFlow.setRpymntSchdldDt(baseDt);", "arrCashFlow.setAplyIntRt(BigDecimal.ZERO);", "arrCashFlow.setTdyRpymntAmt(earlyRepaymentTgtAmt);", "arrCashFlow.setRpymntSchdldAmt(earlyRepaymentTgtAmt);", "arrCashFlow.setRpymntAmt(earlyRepaymentTgtAmt);", "/**", "repayment", "status", "as", "Unpaid", "*/", "arrCashFlow.setRpymntStsCd(RpymntStsEnum.FULL_PAID.getValue());", "arrCashFlow.setCrtnBaseDt(arrCashFlow.getSctnStartDt());", "List<ArrCashFlowIO>", "arrCashFlowValList", "=", "new", "ArrayList<ArrCashFlowIO>();", "arrCashFlowValList.add(arrCashFlow);", "/**", "*", "\ud655\uc7a5\uc815\ubcf4", "\uc138\ud305", "*/", "Map<String,", "Object>", "xtdInfo", "=", "new", "HashMap<String,", "Object>();", "xtdInfo.put(\"arrOpnDt\",", "arr.getArrOpnDt());", "xtdInfo.put(\"arrMtrtyDt\",", "arr.getArrMtrtyDt());", "xtdInfo", "=", "_getLnIntCalculatorCmnBiz().setXtnInfo(arr,", "xtdInfo);", "xtdInfo.put(IntCalcXtnInfoEnum.LN_TX_TP_DSCD.getValue()", ",", "TxTpDscdEnum.DEPOSIT.getCode());", "//", "\uc0c1\ud658\uc720\ud615", "11:\uc785\uae08", "xtdInfo.put(IntCalcXtnInfoEnum.CRNCY_CD.getValue()", ",", "arr.getCrncyCd()", ");", "//", "\ud1b5\ud654\ucf54\ub4dc", "xtdInfo.put(IntCalcXtnInfoEnum.RPYMNT_AMT.getValue()", ",", "rpymntAmt", ");", "//", "\uc0c1\ud658\uc6d0\uae08", "xtdInfo.put(IntCalcXtnInfoEnum.PAYMENT_DATE.getValue()", ",", "baseDt", ");", "//", "\uc0c1\ud658\uc77c\uc790", "xtdInfo.put(IntCalcXtnInfoEnum.CASH_TRNSFR.getValue()", ",", "CashTrnsfrEnum.TRNSFR", ");", "//", "\uc0c1\ud658\uc790\uae08\uc720\ud615\ucf54\ub4dc(2:\ub300\uccb4)", "xtdInfo.put(IntCalcXtnInfoEnum.CASH_TRNSFR_AMT.getValue()", ",", "BigDecimal.ZERO", ");", "//", "\uc0c1\ud658\uc790\uae08\uae08\uc561", "xtdInfo.put(IntCalcXtnInfoEnum.IS_SMLTN.getValue()", ",", "Boolean.TRUE", ");", "//", "\uc2dc\ubbac\ub808\uc774\uc158\uc5ec\ubd80", "xtdInfo.put(IntCalcXtnInfoEnum.ARR_TX_SEQ_NBR.getValue()", ",", "0", ");", "//", "\uac70\ub798\ubc88\ud638", "xtdInfo.put(IntCalcXtnInfoEnum.RPYMNT_CNT.getValue()", ",", "0", ");", "//", "\uc0c1\ud658\ud68c\ucc28", "xtdInfo.put(IntCalcXtnInfoEnum.INT_PYMNT_DT.getValue()", ",", "arr.getArrMtrtyDt()", ");", "//", "\uc774\uc790\ub0a9\uc785\uae30\ud55c", "xtdInfo.put(IntCalcXtnInfoEnum.PRTL_RPYMNT_AF_RPYMNT_DSCD.getValue()", ",", "PrtlRpymntAfRpymntEnum.RECALCULATION.getValue());", "//\uc77c\ubd80\uc0c1\ud658\ud6c4\uc0c1\ud658\ucf54\ub4dc", "(2:\uc7ac\uacc4\uc0b0)", "xtdInfo.put(ArrXtnInfoEnum.LOAN_INSTALLMENT_AMOUNT.getValue()", ",", "lnInstlmntAmt", ");", "//\ubcc0\uacbd", "\ud6c4", "\ud560\ubd80\uae08", "//", "xtdInfo.put(IntCalcXtnInfoEnum.INT_CAL_DTL_TP_DSCD.getValue()", ",", "IntCalDtlTpEnum.PARTIAL_REPAYMENT.getCode());", "//01:\uc2e0\uaddc,", "02:\ub0a9\uc785\uc77c\ubcc0\uacbd,", "03:\uc870\uae30\uc0c1\ud658,", "04:\uae08\ub9ac\ubcc0\uacbd,", "09:\uc77c\uacb0\uc0b0", "//", "xtdInfo.put(\"ovrduBaseDtForEarlyRepay\"", ",", "intCalcRsltOut.getOvrduBaseDt()", ");", "//", "xtdInfo.put(\"lastPymntDtForEarlyRepay\"", ",", "intCalcRsltOut.getLastIntCalcnDt());", "//", "xtdInfo.put(\"nxtPymntDtForEarlyRepay\"", ",", "intCalcRsltOut.getNxtPymntDt()", ");", "//", "xtdInfo.put(\"lastPymntNthForEarlyRepay\"", ",", "intCalcRsltOut.getLastPymntNth()", ");", "if", "(_getLnIntCalculatorCmnBiz().isBalloonPayment(arr))", "{", "BigDecimal", "lastBal", "=", "_getArrBalMngr().getArrPrincipalBal(arr,", "arr.getCrncyCd()).getLastBal();", "xtdInfo.put(\"loanBalForEarlyRepay\"", ",", "lastBal.subtract(intCalcRsltOut.getEarlyRepaymentTgtAmt()));", "}", "else", "{", "xtdInfo.put(\"loanBalForEarlyRepay\"", ",", "intCalcRsltOut.getLnInstlmntAmtCalcnBal());", "}", "StlmntRsltVal", "stlmntRsltVal", "=", "calculateInterestRepayment(arr,", "xtdInfo);", "List<ArrCashFlowIO>", "arrCashFlowList", "=", "stlmntRsltVal.getIntCalcnLnRslt().getArrCashFlowList();", "arrCashFlowValList.addAll(arrCashFlowList);", "//", "CashFlow", "\ud560\ubd80\uae08", "\ucd94\uac00", "logger.debug(\"##", "_setModifiedInstlmntAmt", "->", "BF", "arrCashFlowValList.size()", "=", "{}", "::", "\",", "arrCashFlowValList.size());", "List<ArrCashFlowIO>", "instlmntAmtList", "=", "intCalcRsltOut.getArrCashFlowListInslmntAmtMdfctn();", "arrCashFlowValList.addAll(instlmntAmtList);", "logger.debug(\"##", "_setModifiedInstlmntAmt", "->", "AF", "arrCashFlowValList.size()", "=", "{}", "::", "\",", "arrCashFlowValList.size());", "return", "_getArrCashFlowProvider().getListMergedArrCashFlow(arr,", "baseDt,", "arrCashFlowValList,", "CashFlwChngRsnCdEnum.REPAYMENT.getValue());", "}"], "docstring_tokens": ["Simulate", "a", "repayment", "schedule", "for", "loan", "condition", "change", "(early", "repayment)."]}
{"code_tokens": ["public", "List<CaInstSrvcIO>", "getListInstService(String", "instCd,", "String", "cmpntCd,", "String", "baseDt)", "throws", "BizApplicationException", "{", "String", "sInstCd", "=", "instCd;", "if", "(StringUtils.isEmpty(instCd))", "sInstCd", "=", "_getCaCmnContext().getInstCode();", "List<CaSvInstSrvcMIO>", "svInstSrvcMIOList;", "List<CaInstSrvcIO>", "instSrvcList", "=", "new", "ArrayList<CaInstSrvcIO>();", "if", "(baseDt", "==", "null)", "baseDt", "=", "CCM01.MIN_DATE;", "if", "(StringUtils.isEmpty(cmpntCd))", "{", "svInstSrvcMIOList", "=", "_getSvInstSrvcMDso().selectListByInstCdAndBaseDt(sInstCd,", "baseDt);", "}", "else", "{", "CaSvInstSrvcMIO", "svInstSrvcMIO", "=", "new", "CaSvInstSrvcMIO();", "svInstSrvcMIO.setInstCd(sInstCd);", "svInstSrvcMIO.setCmpntCd(cmpntCd);", "svInstSrvcMIO.setAplyStartDt(baseDt);", "svInstSrvcMIOList", "=", "_getSvInstSrvcMDso().selectListByCmpntCd(svInstSrvcMIO);", "}", "for", "(CaSvInstSrvcMIO", "svInstSrvcMIO", ":", "svInstSrvcMIOList)", "{", "CaInstSrvcIO", "instSrvc", "=", "_setInstitutionService(svInstSrvcMIO);", "instSrvcList.add(instSrvc);", "}", "return", "instSrvcList;", "}"], "docstring_tokens": ["inquiry", "institution", "service", "list"]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getCndGrpCd(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "String", "output", "=", "bfCnd.getCndGrpCd();", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "group", "code."]}
{"code_tokens": ["public", "Integer", "getCustCountByLoginIdNbr(String", "loginIdNbr,", "String", "paymentInstYn)", "throws", "BizApplicationException", "{", "return", "_getCustBsicXtnBiz().getCustCountCustByLoginIdentificationNumber(_getCmnContext().getInstCode(),", "loginIdNbr,", "paymentInstYn);", "}"], "docstring_tokens": ["Inquire", "customers'", "information", "that", "matches", "the", "input", "login", "type", "code,", "login", "identification", "number,", "payment", "institution", "YN,", "page", "number", "and", "page", "count.", "It", "inquires", "the", "effective", "login", "information", "on", "transaction", "date."]}
{"code_tokens": ["public", "List<ArrCashFlowIO>", "getListArrDueDateAdvent(String", "instCd,", "String", "deptId,", "String", "inqryStartDt,", "String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrCashFlowBiz().getListArrDueDateAdvent(instCd,", "deptId,", "inqryStartDt,", "inqryEndDt);", "}"], "docstring_tokens": ["Inquire", "the", "list", "of", "repayment", "schedules", "due", "for", "each", "department."]}
{"code_tokens": ["public", "LnArrCndChngDtlInqryIn", "clone(){", "try{", "LnArrCndChngDtlInqryIn", "object=", "(LnArrCndChngDtlInqryIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CashTransitSvcAprvCashTransit", "clone(){", "try{", "CashTransitSvcAprvCashTransit", "object=", "(CashTransitSvcAprvCashTransit)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<StlmntDtlIO>", "calculate(IntCalculatorIO", "intCalculatorIO)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"##\ubaa9\ud45c\uae08\uc561\ubc29\uc2dd", "intCalculatorIO:", "{}", "\",", "intCalculatorIO);", "}", "/*", "*", "Make", "the", "target", "list", "of", "interest", "calculation", "*/", "List<StlmntCalcnDtlIO>", "stlmntCalcnDList", "=", "_makeDemandDepositStlmnt(intCalculatorIO);", "/*", "*", "Calculate", "interest", "by", "accumulated", "amount", "*/", "super.calculateIntByAcmltd(intCalculatorIO.getArr(),", "intCalculatorIO.getCrncyCd(),", "stlmntCalcnDList);", "/**", "*", "2018.04.30", "(2018.06.19", "\uc801\uc6a9)", "*", "\uc608\ubcf4\uc6a9", "\ubcf4\ud5d8\uae08\uc9c0\uae09\uacf5\uace0\uc77c", "\uc774\uc804", "\ucd5c\uc885", "\uacb0\uc0b0\uae30\uc900\uc77c", "\uad6c\uac04\uc5d0", "\uc801\uc218", "\uae08\uc561", "\ubcc0\uacbd", "*", "\uc6d0\uae08", "->", "\uc6d0\ub9ac\uae08", "*/", "setInterestByDepositerInfoExtraction(intCalculatorIO,", "stlmntCalcnDList);", "/*", "*", "Make", "the", "list", "of", "settlement", "result", "and", "return", "it", "*/", "return", "super.makeInterestSettlementInformation(intCalculatorIO,", "stlmntCalcnDList,", "CalcnBaseAmtTpEnum.ACMLTD_AMT.getValue(),", "null);", "}"], "docstring_tokens": ["This", "method", "provides", "main", "business", "flow", "for", "calculating", "tax.", "Business", "Flow", ":", "1)", "Get", "calculator", "class", "by", "tax", "calculation", "way", "defined", "in", "institution", "parameter", "2)", "Make", "common", "VO", "for", "calculating", "the", "tax", "3)", "Calculate", "tax", "actually"]}
{"code_tokens": ["public", "PswdChngMgmtSvcOut", "clone(){", "try{", "PswdChngMgmtSvcOut", "object=", "(PswdChngMgmtSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "custId,", "ArrCustRelEnum", "arrCustRelEnum,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId,", "arrCustRelEnum,", "null,", "null,", "null,", "null,", "curArrSts,", "arrSts,", "inqryStartDt,", "inqryEndDt);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "of", "specific", "product", "code", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "(Paging)", "Inquire", "modification", "arrangement", "of", "inquired", "arrangement", "if", "hasVrtnArr", "is", "true."]}
{"code_tokens": ["public", "ActorDueDlgncInfo", "getDueDiligenceInfoDetail(String", "dueDlgncDscd,", "int", "dueDlgncSeqNbr)", "throws", "BizApplicationException", "{", "//", "due", "diligence", "information", "+", "extend", "information", "ActorDueDlgncInfo", "dueDlgncInfo", "=", "super.getDueDiligenceInfoDetailByEav(dueDlgncDscd,", "dueDlgncSeqNbr);", "//", "subsidiary", "information", "Map<String,", "String>", "subInfoMap", "=", "_getActorDueDlgncSubInfoBiz().getMapSubInfo(this,", "dueDlgncDscd,", "dueDlgncSeqNbr);", "if", "(dueDlgncInfo", "!=", "null)", "{", "dueDlgncInfo.getDueDlgncXtnInfoMap().putAll(subInfoMap);", "}", "return", "dueDlgncInfo;", "}"], "docstring_tokens": ["Inquire", "the", "actor's", "effective", "due", "diligence", "detail", "information", "which", "are", "due", "diligence", "basic,", "extended", "information", "and", "contact", "point", "information", "by", "the", "input", "due", "diligence", "distinction", "code.", "It", "inquires", "only", "the", "information", "of", "which", "due", "diligence", "status", "code", "is", "normal(01)."]}
{"code_tokens": ["public", "String", "checkPassword(String", "pswd)", "throws", "BizApplicationException{", "//check", "required", "inputs", "if", "(StringUtils.isEmpty(pswd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@pswd\"});", "}", "return", "_getStaffLoginBiz().checkPassword(getStaffBasicInfo(),", "pswd);", "}"], "docstring_tokens": ["It", "checks", "if", "the", "input", "password", "equals", "the", "registered", "password", "of", "the", "main", "login", "information."]}
{"code_tokens": ["public", "ArrCnd", "getArrCnd(PdCndEnum", "arrCndEnum)", "throws", "BizApplicationException", "{", "return", "(ArrCnd)", "super.getArrCndCore(arrCndEnum.getValue());", "}"], "docstring_tokens": ["Inquire", "effective", "arrangement", "condition", "by", "product", "condition", "ENUM.", "Detail", "function", "description", "refers", "to", "{@link", "#getArrCnd(String)}"]}
{"code_tokens": ["public", "List<StlmntDtlIO>", "simulate(Arrangement", "arr,", "InterestTransactionTypeEnum", "intTxTp,", "List<StlmntDtlIO>", "intStlmntDtlList,", "Map<String,", "String>", "xtdInfo)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"HHH", "TaxCalculator", ":", "simulate\");", "}", "return", "super.simulate((ArrangementCore)arr,", "intTxTp.getValue(),", "intStlmntDtlList,", "xtdInfo);", "}", "//", "\ube44\uc0ac\uc6a9\ub85c\uc9c1", "\uc8fc\uc11d\ucc98\ub9ac", "//", "private", "void", "_checkInputParameter(InterestTransactionTypeEnum", "intTxTp,", "int", "txSeqNbr,", "boolean", "smltn)", "throws", "BizApplicationException", "{", "//", "//", "if(!smltn", "&&", "!InterestTransactionTypeEnum.DEPOSITOR_INFO_EXTRACTION.equals(intTxTp))", "{", "//", "//", "\uac70\ub798\uc77c\ub828\ubc88\ud638", "\ud544\uc218\uc785\ub825", "\uac80\uc99d", "//", "if", "(txSeqNbr", "==", "0){", "//", "//", "this", "transaction", "sequence", "number", "is", "not", "numbered", "in", "this", "transaction", "//", "throw", "new", "BizApplicationException(\"AAPSTE0117\",", "null);", "//", "}", "//", "}", "//", "}"], "docstring_tokens": ["This", "method", "provides", "an", "tax", "calculation", "simulation", "function", "Business", "Flow", ":", "1)", "Get", "calculator", "class", "by", "tax", "calculation", "way", "defined", "in", "institution", "parameter", "2)", "Make", "common", "VO", "for", "calculating", "the", "tax", "3)", "Calculate", "tax", "actually"]}
{"code_tokens": ["public", "PdRqstIntCalcnSmltnIn", "clone(){", "try{", "PdRqstIntCalcnSmltnIn", "object=", "(PdRqstIntCalcnSmltnIn)super.clone();", "if", "(", "this.schdlCntnt==", "null", ")", "object.schdlCntnt", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnschdlList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnschdlList>(schdlCntnt.size());", "for(", "bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnschdlList", "item", ":", "schdlCntnt", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnschdlList)item.clone());", "}", "object.schdlCntnt", "=", "clonedList;", "}", "if", "(", "this.ovrduRt==", "null", ")", "object.ovrduRt", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntOvrduRtList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntOvrduRtList>(ovrduRt.size());", "for(", "bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntOvrduRtList", "item", ":", "ovrduRt", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntOvrduRtList)item.clone());", "}", "object.ovrduRt", "=", "clonedList;", "}", "if", "(", "this.agrmntRt==", "null", ")", "object.agrmntRt", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntRtList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntRtList>(agrmntRt.size());", "for(", "bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntRtList", "item", ":", "agrmntRt", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntRtList)item.clone());", "}", "object.agrmntRt", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "executeWatchListFiltering(int", "txSeqNbr)", "throws", "BizApplicationException", "{", "if(txSeqNbr", "==", "CCM01.ZERO){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@txSeqNbr\"});", "}", "//assemble", "watch", "list", "filtering", "input", "WatchListFilterIn", "watchListFilterIn", "=", "_assembleWatchListFilterIn();", "//execute", "watch", "list", "filtering", "WatchListFilterRule", "watchListFilterRule", "=", "(WatchListFilterRule)", "CbbApplicationContext.getBean(\"WatchListFilterRuleSampleImpl\");", "//FIXME", "ActorDueDlgncRgstIn", "dueDlgncRgstIn", "=", "watchListFilterRule.executeWatchListFiltering(watchListFilterIn);", "String", "dueDlgncDscd", "=", "dueDlgncRgstIn.getDueDlgncDscd();", "if(dueDlgncRgstIn", "==", "null", "||", "!DueDlgncDsEnum.EDD.getValue().equals(dueDlgncDscd)){", "return", "null;", "}", "//", "separate", "subsidiary", "information", "from", "extend", "information", "Map<String,", "String>", "subInfoMap", "=", "_getActorDueDlgncSubInfoBiz().getMapSubInfoCrtn(dueDlgncRgstIn.getDueDlgncXtnInfoList());", "Integer", "dueDlgncSeqNbr", "=", "null;", "//set", "transaction", "sequence", "number", "dueDlgncRgstIn.setStsChngTxSeqNbr(txSeqNbr);", "if", "(this.isDueDiligenceExist(dueDlgncDscd,", "DueDlgncStsEnum.NORMAL.getValue()))", "{", "//modify", "due", "diligence", "status(normal", "->", "target)", "ActorDueDlgncMdfyIn", "dueDlgncMdfyIn", "=", "_convertDueDlgncRgstToMdfyIn(dueDlgncRgstIn);", "super.modifyDueDiligenceInfoByEav(dueDlgncMdfyIn,", "false);", "dueDlgncSeqNbr", "=", "dueDlgncMdfyIn.getDueDlgncSeqNbr();", "}", "else", "if", "(this.isDueDiligenceExist(dueDlgncDscd,", "DueDlgncStsEnum.TARGET.getValue()))", "{", "//modify", "due", "diligence", "target", "information", "ActorDueDlgncMdfyIn", "dueDlgncMdfyIn", "=", "_convertDueDlgncRgstToMdfyIn(dueDlgncRgstIn);", "super.modifyDueDiligenceInfoByEav(dueDlgncMdfyIn,", "true);", "dueDlgncSeqNbr", "=", "dueDlgncMdfyIn.getDueDlgncSeqNbr();", "}", "else", "{", "//", "create", "due", "diligence", "information", "and", "register", "information", "change", "history", "super.registerDueDiligenceInfoByEav(dueDlgncRgstIn);", "dueDlgncSeqNbr", "=", "dueDlgncRgstIn.getDueDlgncSeqNbr();", "}", "//", "save", "subsidiary", "information", "_getActorDueDlgncSubInfoBiz().saveMapSubInfo(this,", "dueDlgncDscd,", "dueDlgncSeqNbr,", "subInfoMap);", "return", "dueDlgncDscd;", "}"], "docstring_tokens": ["It", "executes", "watch", "list", "filtering.", "If", "the", "actor", "is", "decided", "as", "a", "EDD", "target", "customer,", "due", "diligence", "information", "will", "be", "registered/modified."]}
{"code_tokens": ["public", "List<XtnCdIO>", "getListCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "List<AmtTpDtlIO>", "amtTpList", "=", "_getAmtTpXtn().getListLowerAmountType(AmtTpEnum.FEE.getValue());", "List<XtnCdIO>", "xtnCdIOs", "=", "new", "ArrayList<XtnCdIO>();", "String", "lngCd", "=", "supplInfoVal", "==", "null", "?", "null", ":", "String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue()));", "if(", "amtTpList", "==", "null", "||", "amtTpList.isEmpty()", ")", "return", "xtnCdIOs;", "for(AmtTpDtlIO", "out", ":", "amtTpList)", "{", "if", "(!out.getUpAmtTpCd().equals(AmtTpEnum.FEE.getValue()))", "{", "XtnCdIO", "xtnCdIO", "=", "new", "XtnCdIO();", "xtnCdIO.setCd(out.getAmtTpCd());", "if(StringUtils.isEmpty(lngCd))", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CdNbrEnum.AMOUNT_TYPE_CD.getValue()", "+", "out.getAmtTpCd()));", "}", "else", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CdNbrEnum.AMOUNT_TYPE_CD.getValue()", "+", "out.getAmtTpCd(),", "lngCd));", "}", "xtnCdIOs.add(xtnCdIO);", "}", "}", "return", "xtnCdIOs;", "}"], "docstring_tokens": ["It", "gets", "the", "customer", "agreement", "code", "list", "registered", "in", "the", "input", "institution."]}
{"code_tokens": ["public", "void", "saveSubInfo(AprslRqstSubInfo", "subInfo,", "AprslRqstImpl", "aprslRqstImpl)", "throws", "BizApplicationException{", "//", "0.", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{AprslRqstSubInfo.class.getSimpleName()});", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "for(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(entry.getValue()", "!=", "null)", "{", "_getAtrbtChk().checkStandardAttribute(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsAprslRqstSIO", "subInfoCache", "=", "getSubInfoCache(aprslRqstImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsAprslRqstSIO();", "subInfoCache.setAprslRqstId(aprslRqstImpl.getAprslRqstBasicCache().getAprslRqstId());", "//PK", "setting", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "2-1.", "insert", "_getAsAprslRqstSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "aprslRqstImpl.setAprslRqstSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoCache))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "2-2.", "update", "_getAsAprslRqstSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "xtnAtrbtNm", "and", "xtnAtrbtCntnt."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(CaDocMakingTpEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{", "value,", "\"@docMkngTpCd\"", "});", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(QuestionnaireIdEnum", "enumObject:", "values())", "{", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{", "value,", "\"@qstnrId\"", "});", "}", "return", "true;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "List<PdPdRelOut>", "getRelBtwnPdsBackward(PdPdRelIn", "in)", "{", "/**", "*", "DataCache", "START", "*/", "String", "uKey", "=", "PdUtil.concatenateKeys(Arrays.asList(pdPdM.getInstCd(),", "getPdInfoDscd()", "+", "\"Backward\",", "pdPdM.getPdCd()", "+", "\"Backward\",", "in.getPdBtwnRelCd()));", "//", "Get", "cache", "data", "List<PdPdRelOut>", "list", "=", "_getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_PD_RELATION_LIST_CACHE,", "uKey);", "if", "(CollectionCoreUtils.isEmpty(list))", "{", "PdPdRelationBackwardListIn", "inDao", "=", "new", "PdPdRelationBackwardListIn();", "inDao.setInstitutionId(pdPdM.getInstCd());", "inDao.setPdCd(pdPdM.getPdCd());", "inDao.setPdBetweenRelationCd(in.getPdBtwnRelCd());", "inDao.setRelationPdInfoDscd(in.getRelPdInfoDscd());", "inDao.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(),", "_getAplyTmString(in.getAplyTm())));", "list", "=", "_convertToPdPdRelOut(_getPdCore().getListPdPdRelationBackward(inDao));", "//", "\uac12\uc774", "\uc5c6\uc73c\uba74", "Dummy", "\uc800\uc7a5", "if", "(CollectionCoreUtils.isEmpty(list))", "{", "PdPdRelOut", "dummy", "=", "new", "PdPdRelOut();", "dummy.setPdCd(CPD01.DUMMY);", "List<PdPdRelOut>", "dummyList", "=", "new", "ArrayList<>();", "dummyList.add(dummy);", "_getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_PD_RELATION_LIST_CACHE,", "uKey,", "dummyList);", "}", "else", "{", "_getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_PD_RELATION_LIST_CACHE,", "uKey,", "list);", "}", "}", "//", "Cache\uc5d0", "\uc800\uc7a5\ub418\uc5b4", "\uc788\ub294\uac8c", "Dummy\uc774\uba74", "null\ub85c", "\ubcc0\ud658", "if", "(!CollectionUtils.isEmpty(list)", "&&", "CPD01.DUMMY.equals(list.get(0).getPdCd()))", "{", "list", "=", "Collections.emptyList();", "}", "/**", "*", "DataCache", "END", "*/", "return", "list;", "}"], "docstring_tokens": ["This", "Method", "inquire", "of", "products", "backward", "by", "product", "relatipn", "type", "distinction", "code.", "inquire", "all", "products", "that", "contain", "input", "product.", "if", "there", "is", "no", "relation", "product", "information", "distinction", "code,", "all", "products", "inquire"]}
{"code_tokens": ["public", "List<CaCntrlCntrMngrSvcGetTreeO>", "getControlCenterTree(String", "instCd)", "throws", "BizApplicationException", "{", "List<CaCntrlCntrMngrSvcGetTreeO>", "outList", "=", "new", "ArrayList<CaCntrlCntrMngrSvcGetTreeO>();", "//", "\ubd80\uc810\ubcc4", "\uc81c\uc5b4\uc13c\ud130", "\ub178\ub4dc", "\uc870\ud68c", "_addParentNode(instCd,", "outList,", "CaCntrlCntrTpEnum.BRNCH_UNIT.getValue());", "_addParentNode(instCd,", "outList,", "CaCntrlCntrTpEnum.TRMNL_UNIT.getValue());", "return", "outList;", "}"], "docstring_tokens": ["Inquiry", "control", "center", "tree."]}
{"code_tokens": ["public", "Arr", "getArr()", "{", "return", "arr;", "}"], "docstring_tokens": ["This", "method", "inquire", "customer", "account", "arrangement", "using", "account", "number", "and", "child", "arrangement", "sequence", "number.", "Detail", "function", "description", "refers", "to", "{@link", "#getArr(ArrRealGetIn)}."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "for", "(ClHrarcyCoreEnum", "item", ":", "ClHrarcyCoreEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "IValueObject", "subInfo", "=", "_getSubInfoCache(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "Object", "xtnAtrbtCntnt", "=", "subInfo.get(xtnAtrbtNm);", "if", "(xtnAtrbtCntnt", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(xtnAtrbtCntnt);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal", "request."]}
{"code_tokens": ["public", "Integer", "getListDataCntForConsistency()", "throws", "BizApplicationException", "{", "return", "_getDstbCnstncyCmCdInstDDso().selectListCntForConsistency();", "}"], "docstring_tokens": ["Validate", "Query", "Row", "Count", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"Disbursement\":", "_doDisbursementAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"Repayment\"", ":", "_doRepaymentAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"ReduceLimit\"", ":", "_doReduceLoanLimtAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"IncreaseLimit\"", ":", "_doIncreaseLoanLimitAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"IncreaseTermExtension\"", ":", "_doIncreaseLoanLimitAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "condition", "related", "actions", "for", "input", "service", "according", "to", "product", "condition", "value", "or", "negotiated", "value.", "For", "example,", "the", "\"Required", "document\"", "condition", "has", "the", "product", "required", "document", "type", "for", "loan", "application", "service.", "The", "arrangement", "condition", "action", "validate", "the", "required", "document", "type", "is", "received", "(presented)", "or", "not.", "Another", "example", "is", "the", "deposit", "open", "service,", "\"Interest", "capitalization", "YN\"", "condition", "dose", "the", "action", "to", "make", "an", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date.", "This", "method", "performs", "the", "function", "of", "performing", "product", "condition", "management", "rule", "registered", "on", "system.", "Implementation", "of", "condition", "management", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "according", "to", "the", "arrangement", "condition", "class", "implementation", "method,", "and", "the", "implemented", "arrangement", "condition", "class", "should", "specify", "the", "process", "target", "class", "by", "condition.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", "Caution", ":", "-", "To", "define", "condition", "management", "rule", "by", "service", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", ">", "Select", "service"]}
{"code_tokens": ["public", "BfCndMltplVdlnOut", "getCndMltplVdln(BfCndMltplVdlnIn", "in)", "throws", "BizApplicationException", "{", "ValidateInputCndValIn", "validationIn", "=", "new", "ValidateInputCndValIn();", "validationIn.setInstitutionId(getInstCd());", "validationIn.setCndList(_convertToPdCndMultipleValidationCndListInList(in.getCndList()));", "validationIn.setPdCd(bf.getPdCd());", "validationIn.setBaseDate(PdUtil.parseStringToDate(in.getAplyDt()));", "ValidateInputCndValOut", "validateOut", "=", "_bfCndApi().validateInputCndVal(validationIn);", "return", "_convertValidateInputCndValOutToPdCndMltplVdlnOut(validateOut);", "}"], "docstring_tokens": ["This", "Method", "verify", "benefit", "condition", "Error", "code", "description", "00:", "Normal", "02:", "No", "such", "condition", "defined", "under", "benefit", "03:", "Condition", "value", "is", "not", "correct", "04:", "Composing", "condition", "value", "is", "not", "correct", "05:", "k", "condition", "must", "be", "inputed(when", "the", "condition", "is", "a", "complex", "condition)", "99:", "It's", "composing", "condition(temporary", "code)"]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "DeptImpl", "deptImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtDeptSIO", "subInfo", "=", "getSubInfoCache(deptImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "subInfo.get(atrbtNm);", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["This", "method", "provides", "to", "inquire", "the", "specific", "subsidiary", "information", "named", "'xtnAtrbtNm'."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,", "ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"ArrangementConditionTest\":", "case", "\"IncludeMiscellaneousRevenue\":", "_doIncludeMiscellaneousRevenueAction();", "return;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "specific", "service", "type.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "void", "registerTxPassword(String", "pswd)", "throws", "BizApplicationException", "{", "_getArrPswdXtnBiz().registerArrPassword(pswd,", "this,", "ArrPswdTpEnum.TX_PASSWORD);", "}"], "docstring_tokens": ["Register", "transaction", "password", "on", "membership", "arrangement.", "Password", "managed", "as", "extended", "attribute", "of", "arrangement,", "but", "cannot", "be", "registered/inquired/modified/deleted", "by", "general", "API", "managing", "extend", "attribute."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "//", "switch", "(arrSrvcTpCd)", "{", "//", "//", "//", "case", "\"Application\":", "//", "case", "\"ApplyMembership\":", "//", "case", "\"ApplyLinkingAccount\":", "//", "case", "\"OpenDeposit\":", "//", "case", "\"OpenLoan\":", "//", "case", "\"OpenMembership\":", "//", "_doOpenAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "//", "return;", "//", "//", "//", "default:", "//", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "//", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "//", "}", "List<ArrRelDocInfoOut>", "arrRltdDocList", "=", "((ArrRealImpl)getArrangementCore()).getListArrDocRelation(ArrDocRelEnum.RECEIVE.getValue(),", "null,", "null);", "if(logger.isDebugEnabled()){", "logger.debug(\"##", "<AR>", "ArrCndRequireDocTpImpl", ">", "arrRltdDocList", ":", "{}", "\",", "arrRltdDocList", ");", "logger.debug(\"##", "<AR>", "ArrCndRequireDocTpImpl", ">", "getListCdList", ":", "{}", "\",", "getListCdList()", ");", "}", "List<String>", "requriedDocumentTpList", "=", "new", "ArrayList<String>();", "for", "(String", "listCd", ":", "getListCdList())", "{", "if", "(!_isReceivedRequiredDoc(listCd,arrRltdDocList))", "requriedDocumentTpList.add(listCd);", "}", "if", "(!requriedDocumentTpList.isEmpty()){", "if(logger.isDebugEnabled()){", "logger.debug(\"##", "<AR>", "ArrCndRequireDocTpImpl", ">", "_doOpenAction", ":", "{}", "\",", "requriedDocumentTpList", ");", "}", "//\ud544\uc694\uc11c\ub958\uac00", "\ub4f1\ub85d\ub418\uc9c0", "\uc54a\uc558\uc2b5\ub2c8\ub2e4.", "throw", "new", "BizApplicationException(\"AAPARE0414\");", "}", "}", "//", "//", "private", "void", "_doOpenAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "//", "//", "List<ArrRelDocInfoOut>", "arrRltdDocList", "=", "((ArrRealImpl)getArrangementCore()).getListArrDocRelation(ArrDocRelEnum.RECEIVE.getValue(),", "null,", "null);", "//", "if(logger.isDebugEnabled()){", "//", "logger.debug(\"##", "<AR>", "ArrCndRequireDocTpImpl", ">", "arrRltdDocList", ":", "{}", "\",", "arrRltdDocList", ");", "//", "logger.debug(\"##", "<AR>", "ArrCndRequireDocTpImpl", ">", "getListCdList", ":", "{}", "\",", "getListCdList()", ");", "//", "}", "//", "//", "//", "List<String>", "requriedDocumentTpList", "=", "new", "ArrayList<String>();", "//", "for", "(String", "listCd", ":", "getListCdList())", "{", "//", "if", "(!_isReceivedRequiredDoc(listCd,arrRltdDocList))", "requriedDocumentTpList.add(listCd);", "//", "}", "//", "//", "//", "if", "(!requriedDocumentTpList.isEmpty()){", "//", "if(logger.isDebugEnabled()){", "//", "logger.debug(\"##", "<AR>", "ArrCndRequireDocTpImpl", ">", "_doOpenAction", ":", "{}", "\",", "requriedDocumentTpList", ");", "//", "}", "//", "//", "//", "//\ud544\uc694\uc11c\ub958\uac00", "\ub4f1\ub85d\ub418\uc9c0", "\uc54a\uc558\uc2b5\ub2c8\ub2e4.", "//", "throw", "new", "BizApplicationException(\"AAPARE0414\");", "//", "}", "//", "//", "//", "}"], "docstring_tokens": ["Perform", "the", "condition", "action", "related", "to", "the", "specific", "service", "type.", "For", "example", "1", ",", "In", "case", "of", "loan", "installment", "disbursement", "possible", "condition", ",the", "loan", "disbursement", "possible", "condition", "class'", "\"doServiceAction\"", "method", "dose", "the", "validation", "step", "like", "1.investigates", "disbursed", "amount,", "2.get", "product", "condition", "value", "whether", "installment", "disbursement", "is", "allowed,", "3.", "make", "decision", "whether", "the", "service", "is", "permitted", "or", "not.", "The", "other", "example,", "the", "interest", "capitalization", "YN", "condition", "class", "do", "the", "action", "to", "make", "a", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date", "when", "arrangement", "open", "service", "is", "executed."]}
{"code_tokens": ["public", "CaStaffChngSvcIndvIn", "clone(){", "try{", "CaStaffChngSvcIndvIn", "object=", "(CaStaffChngSvcIndvIn)super.clone();", "if", "(", "this.staffXtnInfoList==", "null", ")", "object.staffXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcXtnInfoListIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcXtnInfoListIO>(staffXtnInfoList.size());", "for(", "bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcXtnInfoListIO", "item", ":", "staffXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcXtnInfoListIO)item.clone());", "}", "object.staffXtnInfoList", "=", "clonedList;", "}", "if", "(", "this.staffCtcptIO==null", ")", "object.staffCtcptIO", "=", "null;", "else", "object.staffCtcptIO", "=", "(bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcCtcptIO)this.staffCtcptIO.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getCmpxCndYn(){", "return", "cmpxCndYn;", "}"], "docstring_tokens": ["This", "method", "inquire", "whether", "it", "is", "a", "complex", "condition."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AsmCore", "asm)", "{", "_getAsmSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AsmImpl)asm);", "}"], "docstring_tokens": ["Save", "an", "security", "interest", "subsidiary", "information."]}
{"code_tokens": ["public", "int", "delete(AmAsmArrRIO", "amAsmArrRIO){", "return", "_getAmAsmArrR().delete(amAsmArrRIO);", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "//", "query", "data", "return", "!(_getDcDocMDso().select(DocStsEnum.NORMAL.getValue(),", "String.valueOf(supplInfoVal.get(CCM03.CD)),", "DocTypEnum.NOTICE_MSG.getValue())", "==", "null);", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["public", "int", "delete(CaSvInstScrnMIO", "svInstScrnMIO)", "{", "return", "_getSvInstScrnM().delete(svInstScrnMIO);", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "StaffCashBxBalSvcCashCountDtlOut", "clone(){", "try{", "StaffCashBxBalSvcCashCountDtlOut", "object=", "(StaffCashBxBalSvcCashCountDtlOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<TaxRtIO>", "getListTaxRate(String", "isoNatCd,", "String", "taxRtCd,", "String", "taxTpCd,", "String", "aplyStartDt,", "String", "aplyEndDt)", "throws", "BizApplicationException", "{", "return", "_getListTaxRate(isoNatCd,", "taxRtCd,", "taxTpCd,", "aplyStartDt,", "aplyEndDt);", "}"], "docstring_tokens": ["This", "method", "provide", "the", "tax", "rate", "by", "ISO", "country", "code,", "tax", "rate", "code,", "tax", "type,", "start", "date,", "and", "end", "date."]}
{"code_tokens": ["public", "void", "saveXtnInfo(ArrGrpXtnInfoEnum", "arrGrpXtnInfoEnum,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "super.saveXtnInfo(arrGrpXtnInfoEnum.getValue(),", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr);", "}"], "docstring_tokens": ["Save", "(create", "or", "change", ")", "extend", "attribute."]}
{"code_tokens": ["public", "void", "saveSubInfo", "(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "StStlmntSIO", "stStlmntSIOIn)", "{", "logger.debug(\"##<ST-StlmntSubInfoBiz>", "saveSubInfo\");", "if(xtnAtrbtNm==null", "||", "xtnAtrbtNm.isEmpty())", "{", "return;", "}", "//", "1.create", "a", "new", "instance", "of", "I/F", "VO", "(\ubd88\ud544\uc694)", "//", "IValueObject", "subInfoIntrfcVO", "=", "new", "StlmntSubInfo();", "//", "2.create", "a", "new", "instance", "of", "DBIO", "VO", "StStlmntSIO", "stStlmntSIO", "=", "new", "StStlmntSIO();", "//", "3.set", "key", "to", "DBIO", "VO", "_setKey(stStlmntSIO,", "stStlmntSIOIn);", "//", "4.set", "subsidiary", "detail", "to", "DBIO", "VO", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "stStlmntSIO);", "//", "5.insert", "subsidiary", "detail", "_insertSubInfo(stStlmntSIO);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "interface", "VO."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(TrmntnDscdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(ArrCustRelStsChngRsnCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "CaCmnCdSvcGetCdMListIn", "clone(){", "try{", "CaCmnCdSvcGetCdMListIn", "object=", "(CaCmnCdSvcGetCdMListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArArrDeptRIO", "select(ArArrDeptRIO", "arArrDeptRIO)", "{", "return", "_getArArrDeptR().select(arArrDeptRIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "LcNegtnSvcIn", "clone(){", "try{", "LcNegtnSvcIn", "object=", "(LcNegtnSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(CaDtDscdEnum", "item", ":", "CaDtDscdEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "\"99\".equalsIgnoreCase(value)", "?", "false", ":", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "int", "delete(CaAmAsmItmMIO", "amAsmItmMIO){", "return", "_getAmAsmItmM().delete(amAsmItmMIO);", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "void", "saveSubInfo(CustTxImpl", "custTxImpl,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustTxSIO", "subInfoIO", "=", "getSubInfoCache(custTxImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtCustTxSIO();", "subInfoIO.setCustId(custTxImpl.getCustId());", "subInfoIO.setTxDt(custTxImpl.getCustTxDt());", "subInfoIO.setTxSeqNbr(custTxImpl.getCustTxSeqNbr());", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85\uacfc", "\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "insert", "_getAtCustTxSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "update", "_getAtCustTxSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custTxImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(ActorCore", "actorCore,", "String", "ctcptId,", "int", "ctcptChngSeqNbr,", "Map<String,", "String>", "xtnInfoMap)", "throws", "BizApplicationException", "{", "_getActorCtcptSubInfoBiz().saveMapSubInfo((ActorImpl)", "actorCore,", "ctcptId,", "ctcptChngSeqNbr,", "xtnInfoMap);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "subInfoMap"]}
{"code_tokens": ["public", "void", "modifyAssetRegionClassification(String", "instCd,", "CaAssetRegionClIO", "in)", "throws", "BizApplicationException", "{", "if(in.getAplyEndDt().equals(CCM01.MAX_DATE))", "{", "CaAsAssetRegionClMIO", "asAssetRegionClMIO", "=", "_setInputData(instCd,", "in);", "_AsAssetRegionClMDso().update(asAssetRegionClMIO);", "}", "else", "{", "//", "TODO", "throws", "}", "}"], "docstring_tokens": ["It", "modifies", "asset", "region", "classification", "information."]}
{"code_tokens": ["public", "Integer", "getListArrBasedOnStsHistoryCount(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistoryCount(deptId,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "null,", "arrDeptRel,", "curArrSts,", "arrSts,", "inqryStartDt,", "inqryEndDt,", "false);", "}"], "docstring_tokens": ["Inquire", "total", "count", "of", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "of", "specific", "product", "hierarchy", "whose", "]", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "Inquire", "modification", "arrangement", "of", "inquired", "arrangement", "if", "hasVrtnArr", "is", "true."]}
{"code_tokens": ["public", "CaCmRoleClRIO", "select(String", "instCd,", "String", "roleId,", "String", "clHrarcyId,", "String", "clId)", "{", "return", "_getCmRoleClR().select(instCd,", "roleId,", "clHrarcyId,", "clId);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "String", "getPdTmpltCd()", "{", "return", "pdPdM.getPdTmpltCd();", "}"], "docstring_tokens": ["This", "Method", "inquire", "product", "template", "code"]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapAssetXtnInfoAsStr()", "throws", "BizApplicationException", "{", "return", "_getAssetXtnInfoBiz().getMapAssetXtnInfo(this);", "}"], "docstring_tokens": ["Inquire", "all", "extended", "information", "of", "the", "asset", "as", "a", "map."]}
{"code_tokens": ["public", "void", "saveSubInfo(ArrSrvcBlckngSubInfo", "arrSrvcBlckngSubInfo,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if(arrSrvcBlckngSubInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{ArrSrvcBlckngSubInfo.class.getSimpleName()});", "}", "//", "1.", "\uae30\uc874", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "ArArrSrvcBlckngSIO", "subInfoCache", "=", "_getSubInfoCache(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "ArArrSrvcBlckngSIO();", "subInfoCache.setArrId(arrRealImpl.getArrId());", "subInfoCache.setArrSrvcBlckngSeqNbr(arrSrvcBlckngSeqNbr);", "subInfoCache.setSeqNbr(seqNbr);", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveArArrSrvcBlckngSubH(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(arrSrvcBlckngSubInfo,", "subInfoCache);", "//", "insert", "_getArArrSrvcBlckngSDso().insert(subInfoCache);", "//", "save", "cache", "_saveSubInfoCache(subInfoCache,", "arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(arrSrvcBlckngSubInfo,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveArArrSrvcBlckngSubH(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(arrSrvcBlckngSubInfo,", "subInfoCache);", "//", "update", "_getArArrSrvcBlckngSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "appraisal", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "CaAsmItmMgmtSvcRegisterAsmItmOut", "registerAsmItm(CaAsmItmMgmtSvcRegisterAsmItmIn", "in)", "throws", "BizApplicationException", "{", "CaAsmItmMgmtSvcRegisterAsmItmOut", "out", "=", "new", "CaAsmItmMgmtSvcRegisterAsmItmOut();", "if(", "logger.isDebugEnabled()", "){", "logger.debug(\"##", "<ASM>", "registerAsmItm", ":", "{}\",", "in.toString());", "}", "CaAsmItmIO", "asmItm", "=", "_getCaAsmItmMgnt().getAsmItm(in.getInstCd(),", "in.getAsmItmId());", "//", "\uae30\ub4f1\ub85d\uac74\uc774", "\uc788\uc73c\uba74", "\uc218\uc815", "if", "(asmItm", "!=", "null)", "{", "CaAsmItmIO", "caAsmItmIO", "=", "_updateAsmItm(asmItm,", "in);", "out.setAsmItmId(caAsmItmIO.getAsmItmId());", "}", "//", "\uae30\ub4f1\ub85d\uac74\uc774", "\uc5c6\uc73c\uba74", "\ub4f1\ub85d", "else", "{", "CaAsmItmIO", "caAsmItmIO", "=", "_insertAsmItm(in);", "out.setAsmItmId(caAsmItmIO.getAsmItmId());", "}", "if(", "logger.isDebugEnabled()", "){", "logger.debug(\"##", "<ASM>", "CaAsmItmMgmtSvcRegisterAsmItmOut", ":", "{}\",", "out.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["It", "resgisters", "assessment", "item", "information."]}
{"code_tokens": ["public", "ArrXtnSvcDeleteXtnList", "clone(){", "try{", "ArrXtnSvcDeleteXtnList", "object=", "(ArrXtnSvcDeleteXtnList)super.clone();", "if", "(", "this.tblList==", "null", ")", "object.tblList", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcIn>(tblList.size());", "for(", "bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcIn", "item", ":", "tblList", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcIn)item.clone());", "}", "object.tblList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "registerSettlement(StlmntDtlIO", "stlmntDtl)", "throws", "BizApplicationException", "{", "//", "1.\uc815\uc0b0\uae30\ubcf8\uc758", "\ud655\uc7a5\uc18d\uc131\uc744", "CTI\ubc29\uc2dd\uacfc", "EAV\ubc29\uc2dd\uc73c\ub85c", "\ubd84\ub9ac", "\ucd94\ucd9c", "//", "CTI\ubc29\uc2dd\uc740", "subInfoMap\uc73c\ub85c", "\ubcf4\uad00\ud558\uba70", "\ub9c8\uc9c0\ub9c9\uc5d0", "saveSubInfo\ud1b5\ud574", "\ubcf4\uc870\uba85\uc138\uc5d0", "\uc801\uc7ac\ub428", "//", "EAV\ubc29\uc2dd\uc740", "stlmntDtl\uc548\uc758", "xtninfoList\uc5d0", "\ub0a8\uc544", "(only", "EAV\uc18d\uc131\ub9cc", "\uc794\uc874)", "\ucf54\uc5b4\uc18c\uc2a4(registerSettlement)\uc5d0\uc11c", "\uc801\uc7ac\ub428", "Map<String,String>", "stlmntSubInfoMap", "=", "new", "HashMap<String,", "String>();", "stlmntSubInfoMap", "=", "_getStlmntSubInfoBiz().getMapSubInfoCrtn(stlmntDtl.getStlmntXtnInfoList());", "//", "2.\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30\uc758", "\ud655\uc7a5\uc18d\uc131\uc744", "CTI\ubc29\uc2dd\uacfc", "EAV\ubc29\uc2dd\uc73c\ub85c", "\ubd84\ub9ac", "\ucd94\ucd9c", "Map<String,", "Map<String,", "String>>", "stlmntCalcnSubInfoMap", "=", "new", "HashMap<String,", "Map<String,", "String>>();", "Map<String,String>", "calcnSubInfoMap", "=", "null;", "if", "(stlmntDtl.getStlmntCalcnDList()", "!=", "null)", "{", "int", "dtlSeqNbr", "=", "0;", "for(StlmntCalcnDtlIO", "stlmntCalcnD", ":", "stlmntDtl.getStlmntCalcnDList())", "{", "dtlSeqNbr", "=", "dtlSeqNbr", "+", "1;", "calcnSubInfoMap", "=", "new", "HashMap<String,", "String>();", "if", "(stlmntCalcnD.getStlmntXtnInfoList()", "!=", "null)", "{", "//stlmntCalcnD.stlmntXtnInfo\ub294", "EAV\uc18d\uc131\ub9cc", "\ub0a8\uace0", "CTI\uc18d\uc131\uc740", "stlmntCalcSubInfoMap\uc73c\ub85c", "\ubd84\ub9ac\ub428", "calcnSubInfoMap", "=", "_getStlmntCalcnSubInfoBiz().getMapSubInfoCrtn(stlmntCalcnD.getStlmntXtnInfoList());", "stlmntCalcnSubInfoMap.put(String.valueOf(dtlSeqNbr),", "calcnSubInfoMap", ");", "}", "}", "}", "//", "3.\uc815\uc0b0\uae30\ubcf8,", "\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30,", "EAV\ubc29\uc2dd\uc758", "\uc815\uc0b0\uae30\ubcf8\ud655\uc7a5\uc18d\uc131,", "\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30\ud655\uc7a5\uc18d\uc131", "\uc801\uc7ac", "super.registerSettlement(stlmntDtl);", "//", "4.[\uc815\uc0b0\ubcf4\uc870\uba85\uc138]", "//", "4-1.\uc815\uc0b0\ubcf4\uc870\uba85\uc138DBIO", "Instance", "\uc0dd\uc131", "StStlmntSIO", "stStlmntSIOIn", "=", "new", "StStlmntSIO();", "//", "4-2.\uc815\uc0b0\ubcf4\uc870\uba85\uc138DBIO\uc5d0", "\ud0a4\uac12", "set", "_setStlmntSKey(stStlmntSIOIn,", "stlmntDtl);", "//", "4-3.\uc815\uc0b0\ubcf4\uc870\uba85\uc138", "\uc801\uc7ac", "_getStlmntSubInfoBiz().saveMapSubInfo(stlmntSubInfoMap,", "stStlmntSIOIn);", "//", "5.[\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30\ubcf4\uc870\uba85\uc138]", "for", "(Map.Entry<String,", "Map<String,", "String>>", "stlmntCalcnSubInfo", ":", "stlmntCalcnSubInfoMap.entrySet())", "{", "//", "5-1.\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30\ubcf4\uc870\uba85\uc138DBIO", "Instance", "\uc0dd\uc131", "StStlmntCalcnSIO", "stStlmntCalcnSIOIn", "=", "new", "StStlmntCalcnSIO();", "//", "5-2.\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30\ubcf4\uc870\uba85\uc138DBIO\uc5d0", "\ud0a4\uac12", "set", "_setStlmntCalcnSKey(stStlmntCalcnSIOIn,", "stlmntDtl,", "Integer.valueOf(stlmntCalcnSubInfo.getKey()));", "//", "5-3.\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30\ubcf4\uc870\uba85\uc138", "\uc801\uc7ac", "_getStlmntCalcnSubInfoBiz().saveMapSubInfo(stlmntCalcnSubInfo.getValue(),", "stStlmntCalcnSIOIn);", "}", "}"], "docstring_tokens": ["This", "method", "registers", "settlement.", "1.", "Save", "settlement", "base", "information", "2.", "Save", "settlement", "detail", "information", "(if", "input[stlmntDtlIO.stlmntCalcnDList]", "exists)", "3.", "Save", "settlement", "extended", "information", "(if", "input[stlmntDtlIO.stlmntXtnInfoList]", "exists)"]}
{"code_tokens": ["public", "boolean", "check(String", "vldnTrgt)", "throws", "BizApplicationException", "{", "//", "Implement", "logic", "for", "validate", "Account", "Number", "//", "\uacc4\uc88c\ubc88\ud638", "\uac80\uc99d", "\ub85c\uc9c1", "\uad6c\ud604", "ArrRealGetIn", "arrRealGetIn", "=", "new", "ArrRealGetIn();", "arrRealGetIn.setArrExtrnlIdNbrTpCd(ArrExtrnlIdNbrTpEnum.ACCOUNT_NUMBER.getValue());", "arrRealGetIn.setArrIdNbr(vldnTrgt);", "arrRealGetIn.setNthNbr(CCM01.ZERO);", "if(", "_getArrMngr().getArrReal(arrRealGetIn)==null)", "throw", "new", "BizApplicationException(\"AAPARE0007\",", "new", "String[]{vldnTrgt});", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Complex", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "int", "updateJournalDeferredDfrdSeqNbr(JrnzPrcsAcctgItm", "jrnzPrcsAcctgItm)", "{", "return", "_getAcAcctgLDfrd().updateJournalDeferredDfrdSeqNbr(jrnzPrcsAcctgItm);", "}"], "docstring_tokens": ["This", "class", "provides", "the", "functionality", "to", "update", "deferred", "log", "sequence", "number", "and", "deferred", "transaction", "number", "on", "accounting", "logs."]}
{"code_tokens": ["public", "int", "delete(AmAsmCrdtChkRsltDIO", "amAsmCrdtChkRsltDIO){", "return", "_getAmAsmCrdtChkRsltD().delete(amAsmCrdtChkRsltDIO);", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbCnstncyCmRefAtrbtMDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "AsmBsicInfoIO", "changeAsmStatus(String", "asmId,String", "asmStsCoreEnum,", "String", "rjctdRsnCoreEnum,", "String", "rjctdRsnCntnt)", "throws", "BizApplicationException", "{", "//1.\uc870\ud68c", "AsmBsicInfoIO", "in", "=", "getBasicInformation(asmId);", "//2.\ubcc0\uacbd.", "AmAsmMIO", "amAsmMIO", "=", "_setAmAsmMIO(in,", "asmStsCoreEnum,", "rjctdRsnCoreEnum,", "rjctdRsnCntnt);", "_getAmAsmMDso().updateTerminate(amAsmMIO);", "//3.\uc0c1\ud0dc\uc774\ub825\ub4f1\ub85d", "_insertStsHistory(amAsmMIO);", "return", "_getBasicInfomation(amAsmMIO);", "}", "/**", "*", "\uc2ec\uc0ac\uae30\ubcf8", "\uc0c1\ud0dc\ubcc0\uacbd", "*", "<pre>", "*", "</pre>", "*", "@param", "in", ":", "(required)", "\uc2ec\uc0ac\uc2dd\ubcc4\uc790", "*", "@param", "asmStsCd", ":", "(required)", "\uc2ec\uc0ac\uc0c1\ud0dc\ucf54\ub4dc", "*", "@return", "AsmBsicInfoIO", ":", "{@link", "AsmBsicInfoIO}"], "docstring_tokens": ["change", "assessment", "status"]}
{"code_tokens": ["public", "int", "delete(ArArrXtnInfoDIO", "arArrXtnInfoDIO)", "{", "_getCmnContextCore().setHeaderColumn(arArrXtnInfoDIO);", "return", "_getArArrXtnInfoD().delete(arArrXtnInfoDIO);", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "BigDecimal", "getTaxRate(String", "isoNatCd,", "String", "taxRtCd,", "String", "taxTpCd,", "String", "baseDt)", "throws", "BizApplicationException", "{", "return", "_getTaxRate(isoNatCd,", "taxRtCd,", "taxTpCd,", "baseDt);", "}"], "docstring_tokens": ["This", "method", "provide", "the", "tax", "rate", "by", "ISO", "country", "code,", "tax", "rate", "code,", "tax", "type,", "and", "start", "date."]}
{"code_tokens": ["public", "DpstIntCalculatorOut", "calculateInterestTermination(Arr", "arr,", "int", "txSeqNbr,", "String", "paymentDate,", "String", "arrTrmntnDscd,", "Map<String,", "String>", "xtdInfo,", "boolean", "smltn)", "throws", "BizApplicationException", "{", "if(", "smltn", "==", "false", ")", "{", "arr.setLockBasic();", "}", "if(", "xtdInfo", "==", "null", ")", "{", "xtdInfo", "=", "new", "HashMap<String,", "String>();", "}", "xtdInfo.put(ArrTxXtnInfoEnum.TERMINATION_DSCD.getValue(),", "arrTrmntnDscd);", "return", "_calculateInt(arr,", "txSeqNbr,", "null,", "paymentDate,", "smltn,", "xtdInfo,", "InterestTransactionTypeEnum.TERMINATION);", "}"], "docstring_tokens": ["This", "method", "calculates", "and", "pay", "interest", "for", "terminating", "the", "account.", "1.Demand", "deposit", "product", ":", "calculate", "interest", "on", "the", "same", "plan", "as", "settlement", "case", "2.Installment", "product", ":", "calculate", "early", "termination", "interest,", "maturity", "termination", "interest,", "or", "after", "maturity", "termination", "interest", "based", "on", "interest", "calculation", "end", "date", "2-1)Regular", "Installment", ":", "Calculate", "maturity", "interest", "by", "(Monthly", "Payment", "Amount)", "(Contract", "Months)", "(Contract", "Months", "+", "1)", "/", "2", "(interest", "rate)", "2-2)Free", "Installment", ":", "Calculate", "maturity", "interest", "by", "(Number", "of", "months", "and", "days", "elapsed", "per", "deposit)", "(interest", "rate)", "3.Term", "deposit", "product", ":", "calculate", "early", "termination", "interest,", "maturity", "termination", "interest,", "or", "after", "maturity", "termination", "interest", "based", "on", "interest", "end", "date", "3-1)Maturity", "interest", "payment", ":", "Calculate", "maturity", "interest", "by", "(Number", "of", "months", "and", "days", "elapsed", "since", "the", "deposit)", "(interest", "rate)", "3-2)Regular", "interest", "payment", ":", "Calculate", "maturity", "interest", "by", "(Number", "of", "months", "and", "days", "elapsed", "since", "the", "deposit)", "(interest", "rate)", "Purchase", "return", "Interest", "can", "be", "occurred", "based", "on", "interest", "already", "paid", "-", "Cautions", "1.", "For", "the", "demand-based", "products,", "when", "setting", "the", "value", "of", "ArrTxXtnInfoEnum.TARGET_AMOUNT_CHANGE_YN", "to", "Y", "in", "the", "transaction", "extension", "information,", "the", "interest", "is", "calculated", "at", "the", "interest", "rate", "for", "average", "balance", "regardless", "of", "the", "target", "amount."]}
{"code_tokens": ["public", "CaNoticeMsgCdSvcGetListIn", "clone(){", "try{", "CaNoticeMsgCdSvcGetListIn", "object=", "(CaNoticeMsgCdSvcGetListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "activate(ScrtyIntStsChngIn", "scrtyIntStsChngIn)", "throws", "BizApplicationException", "{", "throw", "new", "BizApplicationException(\"AAPASE0064\",null);", "}"], "docstring_tokens": ["Change", "status", "of", "arrangement", "activity", "into", "\"Active\"."]}
{"code_tokens": ["public", "CaDstbChrncDataRqstOut", "clone(){", "try{", "CaDstbChrncDataRqstOut", "object=", "(CaDstbChrncDataRqstOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CdMgmtSvcGetCdListByCdNbrListOut", "clone(){", "try{", "CdMgmtSvcGetCdListByCdNbrListOut", "object=", "(CdMgmtSvcGetCdListByCdNbrListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.common.code.service.dto.CdMgmtSvcGetCdListByCdNbrListDtlOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.common.code.service.dto.CdMgmtSvcGetCdListByCdNbrListDtlOut>(tblNm.size());", "for(", "bankware.corebanking.common.code.service.dto.CdMgmtSvcGetCdListByCdNbrListDtlOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.common.code.service.dto.CdMgmtSvcGetCdListByCdNbrListDtlOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "deleteArrIssmdaRXtnInfo(ArArrIssmdaRXtnInfoDIO", "arArrIssmdaRXtnInfoDIO,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "\uae30\uc874", "\ud655\uc7a5\uc18d\uc131", "\uc870\ud68c", "ArArrIssmdaRXtnInfoDIO", "arArrIssmdaRXtnInfoOld", "=", "selectArrIssmdaRXtnInfo(arArrIssmdaRXtnInfoDIO);", "//", "\uc870\ud68c\uacb0\uacfc\uac00", "\uc874\uc7ac\ud558\uc9c0", "\uc54a\ub294", "\uacbd\uc6b0", "\uc5d0\ub7ec\ucc98\ub9ac", "if", "(arArrIssmdaRXtnInfoOld", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPARE0064\",", "new", "Object[]", "{", "arArrIssmdaRXtnInfoDIO.getXtnAtrbtNm()", "});", "}", "//", "\ud655\uc7a5\uc18d\uc131", "update", "arArrIssmdaRXtnInfoOld.setXtnAtrbtCntnt(null);", "updateArrIssmdaRXtnInfo(arArrIssmdaRXtnInfoOld,", "txDt,", "txSeqNbr);", "}"], "docstring_tokens": ["Remove", "one", "arrangement/issued", "media", "relation", "extended", "attribute", "of", "subsidiary", "information(CTI)"]}
{"code_tokens": ["public", "BigDecimal", "getAccumulatedAmount(String", "startDt,", "String", "endDt)", "throws", "BizApplicationException", "{", "return", "getAccumulatedAmount(startDt,", "endDt,", "null,", "true,", "false).getAcmltdAmt();", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "accumulated", "amount", "within", "the", "period", "you", "entered.", "If", "isMinusSkip", "is", "false,", "the", "negative", "amount", "is", "added", "the", "accumulated", "amount."]}
{"code_tokens": ["public", "DueDiligenceInqryTrgtSvcOut", "clone(){", "try{", "DueDiligenceInqryTrgtSvcOut", "object=", "(DueDiligenceInqryTrgtSvcOut)super.clone();", "if", "(", "this.eddTrgtList==", "null", ")", "object.eddTrgtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqryTrgtSvcListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqryTrgtSvcListOut>(eddTrgtList.size());", "for(", "bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqryTrgtSvcListOut", "item", ":", "eddTrgtList", "){", "clonedList.add(", "(bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqryTrgtSvcListOut)item.clone());", "}", "object.eddTrgtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaSrvcMgmtSvcSaveServiceInfoListIn", "clone(){", "try{", "CaSrvcMgmtSvcSaveServiceInfoListIn", "object=", "(CaSrvcMgmtSvcSaveServiceInfoListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "terminate(InsrncStsChngIn", "in)", "throws", "BizApplicationException", "{", "InsrncStsCoreEnum", "afStstCd", "=", "InsrncStsCoreEnum.TERMINATED;", "//", "1.", "\uc785\ub825\uac12", "\uac80\uc99d", "_checkStsChnginput(in,", "afStstCd);", "//", "2.", "\ubcf4\uc99d\uae30\ubcf8", "\uc124\uc815\uc0c1\ud0dc", "\ubcc0\uacbd", "(\"\ud574\uc9c0\"\uc0c1\ud0dc\ub85c", "\ubcc0\uacbd)", "_getInsrncBsicBiz().changeInsrnStatus(this,", "in,", "afStstCd.getValue());", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "t", "change", "the", "status", "of", "insurance", "to", "cancel", "status", "*", "</pre>", "*", "@seealso", "*", "@note", "{@link", "InsrncStsChngIn}", ":", "required", "fields", "-", "all", "of", "them", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\ubcf4\ud5d8\uc758", "\uc0c1\ud0dc\ub97c", "\ucde8\uc18c\uc0c1\ud0dc\ub85c", "\ubcc0\uacbd\ud55c\ub2e4.", "*", "</pre>", "*", "@seealso", "*", "@note", "{@link", "InsrncStsChngIn}"], "docstring_tokens": ["Change", "status", "of", "arrangement", "issued", "media", "into", "\"Terminated\"."]}
{"code_tokens": ["public", "ArrInternal", "getInternalArr(String", "arrId)", "throws", "BizApplicationException", "{", "ArrRealImpl", "arrReal", "=", "(ArrRealImpl)", "super.getArrRealCore(arrId);", "return", "(ArrInternal)", "_checkArrObjectByKind(", "arrReal,", "ArrKndEnum.INTERNAL", ");", "}"], "docstring_tokens": ["This", "method", "inquire", "internal", "arrangement", "using", "account", "number", "and", "nth", "number.", "Detail", "function", "description", "refers", "to", "{@link", "#getInternalArrByAcctNbr(String)}."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "null,", "null,", "null,", "null,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt,", "false);", "}"], "docstring_tokens": ["Inquire", "specific", "customer", "own", "(as", "main", "contractor)", "arrangements", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "Current", "Status", "/", "Base", "Status", "/", "Inquiry", "Period(Start", "Date", "/", "End", "Date)", "Approved", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Get", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "approved", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Get", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Active", "/", "1/1", "~", "3/1", ":", "Get", "arrangement", "activated", "within", "1/1", "~", "3/1", "and", "still", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired."]}
{"code_tokens": ["public", "CaDataVldtnMgmtSvcGetPrsntIn", "clone(){", "try{", "CaDataVldtnMgmtSvcGetPrsntIn", "object=", "(CaDataVldtnMgmtSvcGetPrsntIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getDstbTrgtScrnYn()", "{", "return", "dstbTrgtScrnYn;", "}"], "docstring_tokens": ["Inquire", "distribution", "target", "screen", "yn."]}
{"code_tokens": ["public", "CaDstbCtvdRsltErrSrchCndIn", "clone(){", "try{", "CaDstbCtvdRsltErrSrchCndIn", "object=", "(CaDstbCtvdRsltErrSrchCndIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(ScrtyIntMAtrbtCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@ScrtyIntMAtrbt\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if(", "logger.isDebugEnabled()", ")", "{", "logger.debug(", "\"##", "<TWD>", "=ArrCndLoanInstallmentDisbursementPossibleYNImpl{}\",arrSrvcTpCd);", "}", "switch", "(arrSrvcTpCd)", "{", "case", "\"Disbursement\":", "_doDisbursementAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "return;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "List<CaTblXtnAtrbtOut>", "getTableExtendAttribute(String", "instCd,", "String", "tblNm,", "CaXtnAtrbtVrtnCmpsEnum", "xtnAtrbtVrtnCmpsCd,", "Map<String,", "String>", "mapCnd)", "throws", "BizApplicationException", "{", "//", "Check", "input", "if", "(StringUtils.isEmpty(instCd))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@instCd\"", "});", "}", "if", "(StringUtils.isEmpty(tblNm))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@tblNm\"", "});", "}", "if", "(xtnAtrbtVrtnCmpsCd", "==", "null", "||", "StringUtils.isEmpty(xtnAtrbtVrtnCmpsCd.getValue()))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "if", "(!CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)", "&&", "!CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)", "&&", "(mapCnd", "==", "null", "||", "mapCnd.isEmpty()))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "List<CaTblXtnAtrbtOut>", "out", "=", "new", "ArrayList<CaTblXtnAtrbtOut>();", "List<String>", "itmList", "=", "new", "ArrayList<String>();", "//", "Set", "condition", "if", "(CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd))", "{", "//", "skip;", "}", "else", "if", "(CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd))", "{", "itmList.add(\"", "\");", "}", "else", "if", "(CaXtnAtrbtVrtnCmpsEnum.PD_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb1", "=", "new", "StringBuilder();", "sb1.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdTmpltCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTmpltCd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdCd\")).append(\"\\\"}\");", "itmList.add(sb1.toString());", "StringBuilder", "sb2", "=", "new", "StringBuilder();", "sb2.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdTmpltCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTmpltCd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb2.toString());", "StringBuilder", "sb3", "=", "new", "StringBuilder();", "sb3.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb3.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb3.append(\"\\\"pdTmpltCd\\\":\\\"\\\",\").append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb3.toString());", "StringBuilder", "sb4", "=", "new", "StringBuilder();", "sb4.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb4.append(\"\\\"pdTpCd\\\":\\\"\\\",\").append(\"\\\"pdTmpltCd\\\":\\\"\\\",\").append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb4.toString());", "}", "else", "if", "(CaXtnAtrbtVrtnCmpsEnum.ACTOR_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"actorTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"actorTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_ARR_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrArrRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrArrRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_CUST_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrCustRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrCustRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "/*", "2016.03.29", "hongun.song", "\ucd94\uac00*/", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_ACTVTY_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrActvtyTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrActvtyTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_SRVC_BLCKNG_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrSrvcBlckngCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrSrvcBlckngCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_ISSMDA_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrIssmdaTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrIssmdaTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.DUE_DLGNC_DSCD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"dueDlgncDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"dueDlgncDscd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "if(mapCnd.get(\"actorTpCd\")", "!=", "null){", "StringBuilder", "sbAct", "=", "new", "StringBuilder();", "sbAct.append(\"{\").append(\"\\\"actorTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"actorTpCd\")).append(\"\\\"}\");", "itmList.add(sbAct.toString());", "}", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_DOC_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrDocRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrDocRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.PRTNR_DTL_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"prtnrDtlTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"prtnrDtlTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}else", "{", "//", "Input", "field", "is", "incorrect.", "Information", "for", "Checking", ":", "{0}", "throw", "new", "BizApplicationException(\"AAPSVE0001\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn", "inDao", "=", "new", "CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn();", "inDao.setStdInstCd(_getCaCmnContext().getStandardInstCode());", "inDao.setInstCd(instCd);", "inDao.setTblNm(tblNm);", "inDao.setJsonKeyValCntnt(itmList);", "if", "(CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd))", "{", "inDao.setXtnAtrbtVrtnCmpsCd(\"\");", "}", "else", "if", "(CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd))", "{", "inDao.setXtnAtrbtVrtnCmpsCd(CaXtnAtrbtVrtnCmpsEnum.NA.getValue());", "}", "else", "{", "inDao.setXtnAtrbtVrtnCmpsCd(xtnAtrbtVrtnCmpsCd.getValue());", "}", "//", "execute", "query", "List<CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut>", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "for(CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut", "xtnAtrbtOut", ":", "xtnAtrbtList)", "{", "if(_getCaCmnContext().getStandardInstCode().equals(xtnAtrbtOut.getInstCd()))", "{", "CaCmTblXtnAtrDIO", "cmTblXtnAtrDIO", "=", "_getCmTblXtnAtrDDso().select(_getCaCmnContext().getStandardInstCode(),", "tblNm,", "xtnAtrbtOut.getXtnAtrbtNm());", "if(cmTblXtnAtrDIO", "!=", "null", "&&", "StringUtils.isEmpty(cmTblXtnAtrDIO.getInstIndvDfntnMndtryYn())", "&&", "CCM01.YES.equals(_getCmTblXtnAtrDDso().select(_getCaCmnContext().getStandardInstCode(),", "tblNm,", "xtnAtrbtOut.getXtnAtrbtNm()).getInstIndvDfntnMndtryYn()))", "{", "throw", "new", "BizApplicationException(\"AAPCME0182\",", "new", "Object[]", "{", "xtnAtrbtOut.getXtnAtrbtNm()", "});", "}", "}", "}", "//", "one", "more", "try", "with", "standard", "institution", "if(xtnAtrbtList.isEmpty())", "{", "inDao.setInstCd(_getCaCmnContext().getStandardInstCode());", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "}", "//", "set", "output", "for", "(CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut", "xtnAtrbt", ":", "xtnAtrbtList)", "{", "CaTblXtnAtrbtOut", "outParm", "=", "new", "CaTblXtnAtrbtOut();", "outParm.setTblNm(xtnAtrbt.getTblNm());", "outParm.setXtnAtrbtNm(xtnAtrbt.getXtnAtrbtNm());", "outParm.setMndtryYn(xtnAtrbt.getMndtryYn());", "outParm.setScrnInpYn(xtnAtrbt.getScrnInpYn());", "outParm.setScrnChngAblYn(xtnAtrbt.getScrnChngAblYn());", "outParm.setCustInqryTrgtYn(xtnAtrbt.getCustInqryTrgtYn());", "outParm.setIntrnlInqryTrgtYn(xtnAtrbt.getIntrnlInqryTrgtYn());", "outParm.setAtrbtTpCd(xtnAtrbt.getAtrbtTpCd());", "outParm.setCdNbr(xtnAtrbt.getCdNbr());", "outParm.setClHrarcyId(xtnAtrbt.getClHrarcyId());", "if(StringUtils.isEmpty(xtnAtrbt.getAtrbtTpCd()))", "{", "CaStdAtrbtIO", "stdAtrbt", "=", "_getStdAtrbtMgmt().getStandardAttribute(xtnAtrbt.getXtnAtrbtNm());", "if(stdAtrbt", "!=", "null", "&&", "stdAtrbt.getAtrbtTpCd()", "!=", "null)", "{", "outParm.setAtrbtTpCd(stdAtrbt.getAtrbtTpCd());", "}", "}", "out.add(outParm);", "}", "return", "out;", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "no", "condition(cmnContext", "institution)", "basic", "method", "reference", ":", "{@link", "TblXtnAtrbtCore", "getTableExtendAttribute(String,", "String,", "XtnAtrbtVrtnCmpsEnum,", "Map<String,", "String>)}"]}
{"code_tokens": ["public", "void", "removeArrCndClass(CaArrCndClassIn", "in)", "throws", "BizApplicationException", "{", "_checkInput(in);", "CaArArrCndClassMIO", "arArrCndClassMIO", "=", "new", "CaArArrCndClassMIO();", "arArrCndClassMIO.setInstCd(in.getInstCd());", "arArrCndClassMIO.setCndCd(in.getCndCd());", "arArrCndClassMIO.setCndClassNm(in.getCndClassNm());", "arArrCndClassMIO.setBizDscd(StringUtils.isEmpty(in.getBizDscd())", "?", "CCM01.CHAR_AT", ":", "in.getBizDscd()", ");", "arArrCndClassMIO.setPdTpCd(StringUtils.isEmpty(in.getPdTpCd())", "?", "CCM01.CHAR_AT", ":", "in.getPdTpCd()", ");", "arArrCndClassMIO.setPdTmpltCd(StringUtils.isEmpty(in.getPdTmpltCd())", "?", "CCM01.CHAR_AT", ":", "in.getPdTmpltCd()", ");", "arArrCndClassMIO.setPdCd(StringUtils.isEmpty(in.getPdCd())", "?", "CCM01.CHAR_AT", ":", "in.getPdCd()", ");", "_getArArrCndClassMDso().delete(arArrCndClassMIO);", "List<CaArArrSrvcCndRIO>", "sqlOutList", "=", "_getArArrSrvcCndRDso().selectListByCndCd(CCM01.CHAR_AT,", "in.getCndCd());", "for", "(", "CaArArrSrvcCndRIO", "sqlOut", ":", "sqlOutList", ")", "{", "_getCaCmnContext().setHeaderColumn(sqlOut);", "_getArArrSrvcCndRDso().delete(sqlOut);", "}", "}"], "docstring_tokens": ["Delete", "arrangement", "condition", "mapped", "class", "(", "condition", "variation", "class", "name", ")"]}
{"code_tokens": ["public", "PrtnrListQrySvcIn", "clone(){", "try{", "PrtnrListQrySvcIn", "object=", "(PrtnrListQrySvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(InsrncImpl", "insrnc){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\ud5d8\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AsInsrncSIO", "subInfo", "=", "getSubInfoCache(insrnc);", "//", "2.", "\ubcf4\ud5d8\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\ud5d8\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(InsrncSubInfo.FIELDS.get(entry.getKey())", "==", "null)", "{", "continue;", "}", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "Subsidiary", "Information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "{", "for", "(PdCndDetailTypeCoreEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "//", "Return", "Output", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "String", "getCrncyCd()", "{", "return", "crncyCd;", "}"], "docstring_tokens": ["Inquire", "currency", "code", "of", "arrangement"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AsmImpl", "asm)", "{", "//0.", "\uc800\uc7a5\ud558\ub824\ub294", "\uc18d\uc131\uac12\uc758", "\uc720\ud6a8\uc131", "\uac80\uc99d(\ucf54\ub4dc\uad00\ub828", "\uc18d\uc131\uc77c", "\uacbd\uc6b0", "\uc720\ud6a8\ud55c", "\ucf54\ub4dc\uac12\uc778\uc9c0", "\uac80\uc99d\ud55c\ub2e4.)", "_getAtrbtChk().checkStandardAttribute(xtnAtrbtNm,", "xtnAtrbtCntnt);", "//1.", "\uc2ec\uc0ac\ubcf4\uc870\uba85\uc138", "\uc870\ud68c(\uce90\uc2dc\ub85c\ubd80\ud130)", "IValueObject", "oldCache", "=", "getSubInfoCache(asm);", "//2.", "DB", "\ubc18\uc601", "if(oldCache", "==", "null)", "{", "//", "2.1.1", "DBIO", "VO", "\uc0dd\uc131", "oldCache", "=", "new", "AmAsmSIO();", "//", "2.1.2", "set", "primary", "key", "oldCache.set(\"instCd\",_getCmnContext().getInstCode());", "oldCache.set(\"asmId\",asm.getBasicInfo().getAsmId());", "//", "2.1.3", "\uc800\uc7a5\ud558\ub824\ub294", "\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "oldCache);", "//", "2.1.4", "insert", "_getAmAsmSDso().insert((AmAsmSIO)oldCache);", "asm.setAsmSubInfoCache(oldCache);", "}else", "{", "//", "2.2.1", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "oldCache))", "{", "return;", "}", "//", "2.2.2", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "oldCache);", "//", "2.2.3", "update", "_getAmAsmSDso().update((AmAsmSIO)oldCache);", "}", "}"], "docstring_tokens": ["Save", "an", "appraisal", "request", "subsidiary", "information."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(value))", "{", "for", "(ActiveStatusEnum", "item", ":", "ActiveStatusEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "void", "saveSubInfo(ActorImpl", "actorImpl,", "String", "ctcptId,", "Integer", "ctcptChngSeqNbr,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "//", "**", "\uc5f0\ub77d\ucc98", "\ubcf4\uc870\uba85\uc138\ub294", "\ubcc0\uacbd\uc774\ub825\uc744", "\uad00\ub9ac\ud558\uc9c0", "\uc54a\ub294\ub2e4.", "AtActorCtcptSIO", "subInfoIO", "=", "getSubInfoCache(actorImpl,", "ctcptId,", "ctcptChngSeqNbr);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtActorCtcptSIO();", "subInfoIO.setActorId(actorImpl.getActorId());", "subInfoIO.setActorCtcptId(ctcptId);", "subInfoIO.setActorCtcptChngSeqNbr(ctcptChngSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85\uacfc", "\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "insert", "_getAtActorCtcptSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "update", "_getAtActorCtcptSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoIO,", "actorImpl,", "ctcptId,", "ctcptChngSeqNbr);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "xtnAtrbtNm", "and", "xtnAtrbtCntnt"]}
{"code_tokens": ["public", "AssetOwnerList", "clone(){", "try{", "AssetOwnerList", "object=", "(AssetOwnerList)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "delete(CaSvInstSrvcMIO", "svInstSrvcMIO)", "{", "return", "_getSvInstSrvcM().delete(svInstSrvcMIO);", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "CaArrPdRuleMgmtTestSvcIn", "clone(){", "try{", "CaArrPdRuleMgmtTestSvcIn", "object=", "(CaArrPdRuleMgmtTestSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getInstCd(){", "return", "instCd;", "}"], "docstring_tokens": ["This", "method", "inquire", "institution", "code"]}
{"code_tokens": ["public", "AssetLTVQrySvcIn", "clone(){", "try{", "AssetLTVQrySvcIn", "object=", "(AssetLTVQrySvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrRelArrInfoOut>", "getListArrArrHistoryAsMain(String", "arrArrRelCd,", "String", "rltdArrId)", "throws", "BizApplicationException", "{", "return", "_getArrArrRelBiz().getListArrArrHistoryAsMain(arrArrRelCd,", "rltdArrId,", "this);", "}"], "docstring_tokens": ["Inquire", "list", "of", "arrangement/arrangement", "relation", "information", "as", "related", "arrangement", "id."]}
{"code_tokens": ["public", "void", "saveSubInfo(CustCore", "custCore,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "_getCustSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(CustImpl)", "custCore);", "}"], "docstring_tokens": ["Save", "an", "asset", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo,", "ActorImpl", "actorImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ActorSubInfoKndEnum", "subInfoKnd", "=", "actorImpl.getSubInfoKnd();", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoIO", "=", "getSubInfoCache(actorImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "PK", "setting", "subInfoIO", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoIO.set(\"actorId\",", "actorImpl.getActorId());", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(actorImpl,", "subInfoIO);", "//", "PK", "setting", "subInfoIO.set(\"actorId\",", "actorImpl.getActorId());", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoIO);", "}", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "String", "cacheKey", "=", "XtnTableEnum.AT_ACTOR_M.getValue().concat(actorImpl.getActorId());", "actorImpl.saveSubInfoCache(cacheKey,", "subInfoIO);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "interface", "VO."]}
{"code_tokens": ["public", "DateMngrCheckDateOut", "calculateDate(String", "baseDt)", "throws", "BizApplicationException", "{", "//", "Validate", "date", "_checkDate(baseDt);", "//", "New", "result", "object", "DateMngrCheckDateOut", "out", "=", "new", "DateMngrCheckDateOut();", "//", "Next", "date", "out.setNxtDt(_getCalculationDate(baseDt,", "1));", "//", "Next", "next", "date", "out.setNxtNxtDt(_getCalculationDate(baseDt,", "2));", "//", "Before", "date", "out.setBfDt(_getCalculationDate(baseDt,", "-1));", "//", "Before", "before", "date", "out.setBfBfDt(_getCalculationDate(baseDt,", "-2));", "return", "out;", "}"], "docstring_tokens": ["It", "calculates", "the", "date", "of", "the", "day.", "(\u00b11~2", "days)"]}
{"code_tokens": ["public", "String", "getTxInpHms(){", "return", "txInpHms;", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "input", "Hms", "of", "transaction."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt,", "boolean", "hasVrtnArr)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "null,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt,", "hasVrtnArr);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "Current", "Status", "/", "Base", "Status", "/", "Inquiry", "Period(Start", "Date", "/", "End", "Date)", "Approved", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "approved", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Active", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "activated", "within", "1/1", "~", "3/1", "and", "still", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired."]}
{"code_tokens": ["public", "StlmntDataRcvDBatIO", "clone(){", "try{", "StlmntDataRcvDBatIO", "object=", "(StlmntDataRcvDBatIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "LnAgrmntOpenSvcPdCndIn", "clone(){", "try{", "LnAgrmntOpenSvcPdCndIn", "object=", "(LnAgrmntOpenSvcPdCndIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "undoSubInfo(ScrtyIntImpl", "scrtyInt,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "1.", "\uc124\uc815\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138\uc774\ub825", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uac00", "\uc5c6\ub294", "\uacbd\uc6b0", "\ub9ac\ud134", "AsScrtyIntSubHIO", "hstSqlIO", "=", "_getSubInfoHstCache(scrtyInt,", "txDt,", "txSeqNbr);", "if(hstSqlIO", "==", "null){", "return;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138\uc774\ub825\uc758", "\ucde8\uc18c\uc5ec\ubd80\ub97c", "'Y'\ub85c", "\uac31\uc2e0", "hstSqlIO.setCnclYn(CCM01.YES);", "_getAsScrtyIntSubHDso().update(hstSqlIO);", "//", "4.", "\ubcf4\uc870\uba85\uc138\uc774\ub825", "DBIO", "VO\ub97c", "\ubcf4\uc870\uba85\uc138", "DBIO", "VO\ub85c", "convert", "AsScrtyIntSIO", "sqlIO", "=", "new", "AsScrtyIntSIO();", "DtoUtils.setSubInfoIO(hstSqlIO,", "sqlIO);", "//", "set", "PK", "&", "business", "column", "//", "5.", "\ubcf4\uc870\uba85\uc138", "\uac12", "\uc6d0\ubcf5", "_getAsScrtyIntSDso().update(sqlIO);", "}"], "docstring_tokens": ["Return", "the", "value", "of", "the", "subsidiary", "information", "to", "the", "previous", "value.", "However,", "this", "method", "is", "not", "invoked", "because", "no", "cancellation", "function", "is", "currently", "made", "in", "the", "asset", "area.", "If", "cancellation", "function", "is", "made", "in", "the", "asset", "area,", "this", "method", "should", "be", "called", "through", "the", "method", "{@link", "AssetThingSubInfoBiz", "#undoSubInfo}."]}
{"code_tokens": ["public", "void", "validate(String", "arrSrvcCd,ArrRealCore", "arrReal,", "CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "List<Arr>", "arrList", "=", "_getArrCustMngr().getListCustOwnLoanArrActive(cust.getCustId());", "if", "(arrList", "==", "null", "||", "arrList.isEmpty())", "return;", "for", "(Arr", "custArr", ":", "arrList)", "{", "if", "(_getLnOvrduInfoProvider().isOverdue(custArr,", "ArrCmnUtil.getRckngDt(_getCmnContext()))){", "//Customer", "Own", "Arrangement", "({1})", "is", "in", "overdue.", "This", "service", "({0})", "could", "not", "be", "finished", "properly", "//\uace0\uac1d\uc18c\uc720", "\uacc4\uc57d({1})\uc774", "\uc5f0\uccb4\uc0c1\ud0dc\uc785\ub2c8\ub2e4.", "\ubcf8\uc11c\ube44\uc2a4({0})", "\uc2e4\ud589\uc774", "\ubd88\uac00", "\ud569\ub2c8\ub2e4", "//-TWD", "throw", "new", "BizApplicationException(\"APARE0304\",", "new", "Object[]{dataMngr.getCmnCd(arrSrv.cdNbr,arrSrv.getValue()),arr.getAcctNbr()});", "throw", "new", "BizApplicationException(\"AAPARE0304\",", "new", "Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd),custArr.getAcctNbr()});", "}", "}", "}"], "docstring_tokens": ["Processing", "rules", "should", "be", "commonly", "performed", "according", "to", "the", "rules", "defined", "in", "the", "service", "processing", "rule,", "based", "on", "the", "representative", "service", "type", "registered", "to", "the", "specific", "service."]}
{"code_tokens": ["public", "void", "saveSubInfo(Map<String,", "String>", "subInfoMap,", "ArrTxImpl", "arrTx)", "{", "//", "1.", "\uc785\ub825\uc73c\ub85c", "\ubc1b\uc740", "Map\uc774", "\ube44\uc5ec", "\uc788\uac70\ub098", "null\uc77c", "\ub54c", ",", "null", "\uccb4\ud06c\ud558\ub294", "\uc774\uc720\ub294", "CTI,", "EAV\ubd84\ub9ac\ud558\ub294", "\uba54\uc18c\ub4dc\uc5d0\uc11c", "\uc5c6\uc73c\uba74", "null", "return\ud558\uace0", "\uc788\uc74c.", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "\uc18d\uc131\uac12", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\uac70\ub798\uad00\ub828", "\ubcf4\uc870\uba85\uc138", "\uc870\ud68c(\uce90\uc2dc\ub85c\ubd80\ud130)", "IValueObject", "oldCache", "=", "getSubInfoCache(arrTx);", "//", "4.", "DB", "\ubc18\uc601", "if(oldCache", "==", "null)", "{", "//", "4.1.1", "DBIO", "VO", "\uc778\uc2a4\ud134\uc2a4", "\uc0dd\uc131", "oldCache", "=", "_newSubInfoDBIO(arrTx);", "//", "4.1.2", "primary", "key", "\uc870\ub9bd", "_setKey(oldCache,arrTx);", "//", "4.1.3", "\ubcf4\uc870\uc815\ubcf4Map->", "DBIO", "VO\uac12", "\ucc44\uc6b0\uae30", "DtoUtils.setSubInfoIO(subInfoMap,", "oldCache);", "//", "4.1.4", "\uce90\uc2f1\ub41c", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc5c6\uc73c\uba74", "\ucd5c\ucd08", "\uc800\uc7a5,", "\uc989", "insert", "_insertSubInfo(arrTx,", "oldCache);", "//", "4.1.5", "arrTx.setArrTxSubInfoCache(oldCache);", "}else", "{", "//", "4.2.1.", "\uce90\uc2f1\ub41c", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc788\uc73c\uba74", "\ubcc0\uacbd", "\uc800\uc7a5,", "\uc989", "update,", "update\uc804", "\uae30\uc874\uc815\ubcf4\ub791", "\ub3d9\uc77c", "\uc2dc", "\ub9ac\ud134", "if", "(!DtoUtils.isValChanged(subInfoMap,", "oldCache))", "{", "return;", "}", "//", "4.2.4", "update", "-", "\uc0c8\ub85c\ubcc0\uacbd\ub418\uc5b4\uc57c", "\ud560", "\uc18d\uc131\uc744", "DBIO", "VO", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "oldCache);", "//", "4.2.5", "update", "-", "update", "\uc218\ud589", "_updateSubInfo(arrTx,", "oldCache);", "}", "//", "//", "5.", "\uce90\uc2dc", "\ucc98\ub9ac", "(DBIO", "VO->Interface", "VO)", "&", "\uce90\uc2f1", "//", "_saveSubInfoCache(subInfoDBIO,arrTx);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "subsidiary", "information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "String", "getDayCloseWay()", "throws", "BizApplicationException", "{", "//FIXME:", "jungwooyung", "160122", "-", "\ucd94\ud6c4", "\uc2dc\uc2a4\ud15c\ud30c\ub77c\ubbf8\ud130\ud654", "return", "DayCloseWayEnum.APPLICATION.getValue();", "}"], "docstring_tokens": ["It", "inquiries", "day", "closing", "way."]}
{"code_tokens": ["public", "CustEtcReportSvcGetOut", "clone(){", "try{", "CustEtcReportSvcGetOut", "object=", "(CustEtcReportSvcGetOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "pdCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "null,", "null,", "null,", "pdCd,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "0,", "0,", "false);", "}"], "docstring_tokens": ["Inquire", "specific", "customer", "own", "(as", "main", "contractor)", "arrangements", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "Current", "Status", "/", "Base", "Status", "/", "Inquiry", "Period(Start", "Date", "/", "End", "Date)", "Approved", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Get", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "approved", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Get", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Active", "/", "1/1", "~", "3/1", ":", "Get", "arrangement", "activated", "within", "1/1", "~", "3/1", "and", "still", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired."]}
{"code_tokens": ["public", "java.lang.String", "getIssueDt(){", "return", "issueDt;", "}"], "docstring_tokens": ["Inquire", "issue", "date", "of", "arrangement", "issued", "media."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "AssetImpl", "assetImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "assetSubInfo", "=", "getSubInfoCache(assetImpl);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(assetSubInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "assetSubInfo.get(atrbtNm);", "//", "\uc18d\uc131\uac12\uc774", "null\uc778\uacbd\uc6b0", "null\ub9ac\ud134", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["This", "method", "provides", "to", "inquire", "the", "specific", "subsidiary", "information", "named", "'xtnAtrbtNm'."]}
{"code_tokens": ["public", "String", "getAttributeName()", "{", "return", "stdDtoClassAtrbt.getAttributeName();", "}"], "docstring_tokens": ["Query", "attribute", "name"]}
{"code_tokens": ["public", "TestBatchDIO", "clone(){", "try{", "TestBatchDIO", "object=", "(TestBatchDIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "LnAgrmntOpenSvcSmltnRsltIO", "clone(){", "try{", "LnAgrmntOpenSvcSmltnRsltIO", "object=", "(LnAgrmntOpenSvcSmltnRsltIO)super.clone();", "if", "(", "this.rpymntPlnList==", "null", ")", "object.rpymntPlnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut>(rpymntPlnList.size());", "for(", "bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut", "item", ":", "rpymntPlnList", "){", "clonedList.add(", "(bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut)item.clone());", "}", "object.rpymntPlnList", "=", "clonedList;", "}", "if", "(", "this.intRtList==", "null", ")", "object.intRtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvc360IntRt>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvc360IntRt>(intRtList.size());", "for(", "bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvc360IntRt", "item", ":", "intRtList", "){", "clonedList.add(", "(bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvc360IntRt)item.clone());", "}", "object.intRtList", "=", "clonedList;", "}", "if", "(", "this.feeList==", "null", ")", "object.feeList", "=", "null;", "else{", "java.util.List<bankware.corebanking.deposit.simulation.service.dto.FeeSmltnSvcOutSub>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.deposit.simulation.service.dto.FeeSmltnSvcOutSub>(feeList.size());", "for(", "bankware.corebanking.deposit.simulation.service.dto.FeeSmltnSvcOutSub", "item", ":", "feeList", "){", "clonedList.add(", "(bankware.corebanking.deposit.simulation.service.dto.FeeSmltnSvcOutSub)item.clone());", "}", "object.feeList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapXtnInfo()", "throws", "BizApplicationException", "{", "//", "\uc561\ud130", "\ud655\uc7a5\uc815\ubcf4", "\ubc0f", "\ubcf4\uc870\uba85\uc138", "\uc870\ud68c", "Map<String,", "String>", "xtnInfoMap", "=", "getActor().getMapXtnInfo();", "//", "\uace0\uac1d", "\ud655\uc7a5\uc815\ubcf4", "\uc870\ud68c", "xtnInfoMap.putAll(super.getMapXtnInfoByEav());", "//", "\uace0\uac1d", "\ubcf4\uc870\uba85\uc138", "\uc870\ud68c", "xtnInfoMap.putAll(_getCustSubInfoBiz().getMapSubInfo(this));", "return", "xtnInfoMap;", "}"], "docstring_tokens": ["Inquire", "the", "actor", "extended", "information", "map.", "Inquire", "extended", "information", "with", "normal", "extended", "attribute", "status", "code."]}
{"code_tokens": ["public", "SellTcSvcIn", "clone(){", "try{", "SellTcSvcIn", "object=", "(SellTcSvcIn)super.clone();", "if", "(", "this.sellList==", "null", ")", "object.sellList", "=", "null;", "else{", "java.util.List<bankware.corebanking.foreignexchange.currencyexchange.service.dto.SellTcInfoList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.foreignexchange.currencyexchange.service.dto.SellTcInfoList>(sellList.size());", "for(", "bankware.corebanking.foreignexchange.currencyexchange.service.dto.SellTcInfoList", "item", ":", "sellList", "){", "clonedList.add(", "(bankware.corebanking.foreignexchange.currencyexchange.service.dto.SellTcInfoList)item.clone());", "}", "object.sellList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getNumbering(String", "instCd,", "String", "nbrgAtrbtNm,", "Map<String,", "Object>", "inpParmMap,", "Boolean", "isReUseSameTxNbrg)", "throws", "BizApplicationException", "{", "//", "\uae30\uad00\ucf54\ub4dc\uc640", "\ucc44\ubc88\uc18d\uc131\uba85\uc774", "\uc788\ub294\uc9c0", "\uac80\uc99d", "\ud55c\ub2e4.", "_checkNumberingInput(instCd,", "nbrgAtrbtNm);", "//", "Query", "numbering", "rule", "CaNumberingGetIn", "inParm", "=", "new", "CaNumberingGetIn();", "inParm.setInstCd(instCd);", "inParm.setNbrgAtrbtNm(nbrgAtrbtNm);", "//", "\ucc44\ubc88\uaddc\uce59", "\uc870\ud68c", "CaNumberingGetListOut", "numbering02Out", "=", "this.getNumberingRule(inParm);", "CaCmNbrgRuleMIO", "cmNbrgRuleMIO", "=", "_setCommonNumberingRuleMasterParameter(numbering02Out);", "List<CaCmNbrgRuleCmpsDIO>", "listCmNbrgRuleCmpsDIO", "=", "new", "ArrayList<CaCmNbrgRuleCmpsDIO>();", "for", "(CaNumberingGetOut", "numbering02OutSub1", ":", "numbering02Out.getTblNm())", "{", "listCmNbrgRuleCmpsDIO.add(_setNumberingRuleCompositionDetailParameter(numbering02OutSub1));", "}", "//", "Assemble", "numbering", "layer", "value", "String", "jsonCntnt", "=", "\"\";", "Map<String,", "Object>", "tierValMap", "=", "new", "LinkedHashMap<String,", "Object>();", "for", "(CaCmNbrgRuleCmpsDIO", "cmNbrgRuleCmpsDIO", ":", "listCmNbrgRuleCmpsDIO)", "{", "//", "\ucc44\ubc88\uacc4\uce35\uc5ec\ubd80\uac00", "Y", "\uc774\uba74", "\ucc44\ubc88\uacc4\uce35\uac12\uc744", "\uac00\uc838", "\uc628\ub2e4.", "if", "(CCM01.YES.equals(cmNbrgRuleCmpsDIO.getNbrgTierYn()))", "{", "Entry<String,", "String>", "entry", "=", "_getNbrgTierVal(instCd,", "cmNbrgRuleMIO,", "cmNbrgRuleCmpsDIO,", "jsonCntnt,", "inpParmMap,", "isReUseSameTxNbrg,", "\"\");", "tierValMap.put(entry.getKey().toString(),", "entry.getValue().toString());", "}", "}", "if", "(tierValMap.isEmpty())", "{", "//", "Fail", "to", "query", "Assemble", "numbering", "layer", "value", "throw", "new", "BizApplicationException(\"AAPCME0084\",", "new", "Object[]", "{\"@nbrgTierYn\",", "\"@nbrgAtrbtNm\",", "nbrgAtrbtNm});", "}", "jsonCntnt", "=", "_getJsonString(tierValMap);", "//", "Numbering", "and", "assemble", "number", "String", "nbrgVal", "=", "\"\";", "for", "(CaCmNbrgRuleCmpsDIO", "cmNbrgRuleCmpsDIO", ":", "listCmNbrgRuleCmpsDIO)", "{", "if", "(cmNbrgRuleCmpsDIO.getCmpsStartPstnCnt()", ">", "0", "&&", "cmNbrgRuleCmpsDIO.getCmpsFgrsCnt()", ">", "0)", "{", "nbrgVal", "=", "nbrgVal", "+", "_getNumberingCompositionValue(instCd,", "cmNbrgRuleMIO,", "cmNbrgRuleCmpsDIO,", "jsonCntnt,", "inpParmMap,", "isReUseSameTxNbrg,", "nbrgVal);", "}", "}", "String", "orgNbrgVal", "=", "nbrgVal;", "if(!StringUtils.isEmpty(cmNbrgRuleMIO.getEncrptnDscd())){", "try", "{", "if(CaEncryptDstnctnEnum.ONE_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){", "nbrgVal", "=", "CryptUtils.encryptSHA1(orgNbrgVal);", "}", "else", "if(CaEncryptDstnctnEnum.TWO_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){", "nbrgVal", "=", "CryptUtils.encryptAES(orgNbrgVal);", "}", "}", "catch", "(Exception", "e)", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"Exception", ":", "{}\",", "e);", "}", "//logger.debug(\"####", "NbrgImpl.getNumbering", "modify", "source:{0}", ",", "Error:{1}\",", "new", "Object[]{orgNbrgVal,e});", "throw", "new", "BizApplicationException(\"AAPCME0000\",", "new", "String[]", "{\"getNumbering\",", "\"Encrypt", "getNumber\"", "});", "}", "}", "return", "nbrgVal;", "}"], "docstring_tokens": ["It", "calculates", "next", "number."]}
{"code_tokens": ["public", "boolean", "check(String", "in)", "throws", "BizApplicationException", "{", "if", "(!StringUtils.isEmpty(in)", "&&", "in.compareTo(_getCmnContext().getTxDate())", ">=", "0)", "{", "//", "{0}", "must", "be", "smaller", "than", "{1}.", "throw", "new", "BizApplicationException(\"AAPCME0007\",", "new", "Object[]", "{", "\"@txDt\",", "\"@rckngDt\"", "});", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Simple", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "void", "modifyDoc(CaDocBsicIO", "modifyDocBsicIO)", "throws", "BizApplicationException", "{", "_getDocBsic().modify(modifyDocBsicIO);", "setDocBasic(modifyDocBsicIO);", "}"], "docstring_tokens": ["It", "modifies", "document", "information."]}
{"code_tokens": ["public", "List<StTxMIO>", "getListCounterpartArrTx(StTxMIO", "in)", "throws", "BizApplicationException", "{", "return", "_getStTxMByArrDso().selectCounterpartArrTxList(in);", "}"], "docstring_tokens": ["This", "method", "inquires", "an", "{@link", "ArrTx}", "object", "that", "contains", "the", "entered", "transaction", "information", "as", "its", "counterpart", "transaction", "information."]}
{"code_tokens": ["public", "void", "modifyCndValue(String", "baseDt,", "List<ArrCndCrtn>", "ArrCndCrtnList,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getArrRealCoreFundamentalAgent().changeCndValue(baseDt,", "ArrCndCrtnList,", "txDt,", "txSeqNbr,", "this);", "}"], "docstring_tokens": ["This", "method", "change", "the", "arrangement", "condition", "value", "to", "new", "one", "It", "terminate", "old", "condition", "on", "base", "date", "(effective", "end", "date),", "and", "create", "new", "condition"]}
{"code_tokens": ["public", "String", "getSubInfo(ActorCore", "actorCore,", "String", "ctcptId,", "int", "ctcptChngSeqNbr,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getActorCtcptSubInfoBiz().getSubInfo((ActorImpl)", "actorCore,", "ctcptId,", "ctcptChngSeqNbr,", "xtnAtrbtNm);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal", "thing."]}
{"code_tokens": ["public", "CndVal", "getCndVal(List<ProvideCnd>", "prvdCndList)", "throws", "BizApplicationException", "{", "if", "(isComplexCnd())", "{", "//", "Error", "if", "complex", "condition", "throw", "new", "BizApplicationException(\"AAPPDE0004\",", "null);", "}", "CndVal", "cndVal", "=", "null;", "//", "Set", "input", "PdPdCndSimpleSearchIn", "inDao", "=", "new", "PdPdCndSimpleSearchIn();", "inDao.setTntInstId(getInstCd());", "inDao.setAplyStartDt(_getAplyStartDt());", "inDao.setCndCd(getCndCd());", "inDao.setCndGrpCd(getCndGrpCd());", "inDao.setCndGrpTmpltCd(getCndGrpTmpltCd());", "if", "(isListCnd())", "{", "//", "\ubaa9\ub85d\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getListCndValue(inDao);", "}", "else", "if", "(isRngCnd())", "{", "//", "\ubc94\uc704\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getRangeCndValue(inDao);", "}", "else", "if", "(isIntCnd())", "{", "//", "\uc6b0\ub300\uae08\ub9ac\uc77c", "\uacbd\uc6b0", "\uc81c\uacf5\uc870\uac74\uc5d0\ub530\ub978", "\uaddc\uce59\uc744", "\uacc4\uc0b0\ud558\uc5ec", "\uc544\ub798", "\ub85c\uc9c1\uc744", "\ud0dc\uc6b8\uc9c0\ub9d0\uc9c0", "\uacb0\uc815", "if", "(isPreferentialInterestCnd()", "&&", "!isPreferentialInterestProvideCndApplyRulePass(prvdCndList))", "{", "return", "null;", "}", "//", "\uae08\ub9ac\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getInterestCndValue(inDao);", "}", "else", "if", "(isFeeCnd())", "{", "//", "\uc218\uc218\ub8cc\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getFeeCndValue(inDao);", "}", "//", "Return", "CndVal", "return", "cndVal;", "}"], "docstring_tokens": ["This", "method", "inquire", "privide", "condition", "value."]}
{"code_tokens": ["public", "void", "saveSubInfo(ActorCore", "actorCore,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "_getActorSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(ActorImpl)", "actorCore);", "}"], "docstring_tokens": ["Save", "an", "security", "interest", "subsidiary", "information."]}
{"code_tokens": ["public", "CaArrPsbkMsgMgmtSvcGetListPsbkMsgOut", "clone(){", "try{", "CaArrPsbkMsgMgmtSvcGetListPsbkMsgOut", "object=", "(CaArrPsbkMsgMgmtSvcGetListPsbkMsgOut)super.clone();", "if", "(", "this.psbkMsgList==", "null", ")", "object.psbkMsgList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg>(psbkMsgList.size());", "for(", "bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg", "item", ":", "psbkMsgList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg)item.clone());", "}", "object.psbkMsgList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "IValueObject", "getSubInfo(StlmntCalcnSubInfoInqryIn", "stlmntCalcnSubInfoInqryIn)", "throws", "BizApplicationException", "{", "return", "_getStlmntCalcnSubInfoBiz().getSubInfo(_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn));", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal", "thing."]}
{"code_tokens": ["public", "CustChngSvcDeleteLoginInfoIn", "clone(){", "try{", "CustChngSvcDeleteLoginInfoIn", "object=", "(CustChngSvcDeleteLoginInfoIn)super.clone();", "if", "(", "this.loinIdNbrList==", "null", ")", "object.loinIdNbrList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.security.service.dto.CustChngSvcDeleteLoginInfoInSub>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.security.service.dto.CustChngSvcDeleteLoginInfoInSub>(loinIdNbrList.size());", "for(", "bankware.corebanking.customer.security.service.dto.CustChngSvcDeleteLoginInfoInSub", "item", ":", "loinIdNbrList", "){", "clonedList.add(", "(bankware.corebanking.customer.security.service.dto.CustChngSvcDeleteLoginInfoInSub)item.clone());", "}", "object.loinIdNbrList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrCndChngDtlInqryOutList", "clone(){", "try{", "ArrCndChngDtlInqryOutList", "object=", "(ArrCndChngDtlInqryOutList)super.clone();", "if", "(", "this.dtlList==", "null", ")", "object.dtlList", "=", "null;", "else{", "java.util.List<bankware.corebanking.deposit.query.service.dto.ArrCndChngDtlInqryOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.ArrCndChngDtlInqryOut>(dtlList.size());", "for(", "bankware.corebanking.deposit.query.service.dto.ArrCndChngDtlInqryOut", "item", ":", "dtlList", "){", "clonedList.add(", "(bankware.corebanking.deposit.query.service.dto.ArrCndChngDtlInqryOut)item.clone());", "}", "object.dtlList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getPrfIntRtAplyTmCd(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "String", "output", "=", "bfCnd.getPrfIntRtAplyTmCd();", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "preference", "interest", "rate", "apply", "term", "code."]}
{"code_tokens": ["public", "CmAprvlMIO", "select(CmAprvlMIO", "cmApprvMIO)", "{", "return", "_getCmAprvlM().select(cmApprvMIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if", "(!this.getArrangementCore().isReal())", "return;", "//", "if(", "!super.isIntRtRegisterTarget(arrSrvc))", "return;", "//", "//", "super.registerArrIntRt(arrSrvc,", "this.getArr().getArrOpnDt(),", "arrCndActionRequiredValue.getTxDt(),", "arrCndActionRequiredValue.getTxSeqNbr()", ");", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "CndVal", "getListCndValueWithName(List<CmpsCnd>", "cmpsCndList)", "throws", "BizApplicationException", "{", "if", "(!isListCnd())", "{", "//", "\ubaa9\ub85d\ucf54\ub4dc\uac00", "\uc544\ub2c8\uba74", "\uc624\ub958", "throw", "new", "BizApplicationException(\"AAPPDE0042\",", "null);", "}", "if", "(isComplexCnd())", "{", "if", "(CollectionCoreUtils.isEmpty(cmpsCndList))", "{", "//", "\ubcf5\ud569\uc870\uac74\uc778", "\uacbd\uc6b0", "\uad6c\uc131\uc870\uac74\uc774", "\uc5c6\uc73c\uba74", "\uc624\ub958", "throw", "new", "BizApplicationException(\"AAPPDE0007\",", "null);", "}", "PdComplexCndStructureInfoOut", "outDao", "=", "getComplexCndStructureInfo(cmpsCndList);", "PdPdCndUnitComplexSearchIn", "inDao", "=", "new", "PdPdCndUnitComplexSearchIn();", "inDao.setTntInstId(getInstCd());", "inDao.setAplyStartDt(_getAplyStartDt());", "inDao.setCndCd(getCndCd());", "inDao.setCndGrpCd(getCndGrpCd());", "inDao.setCmpxStrctrId(getCmpxStrctrId());", "inDao.setCndGrpTmpltCd(getCndGrpTmpltCd());", "inDao.setTierNbr(outDao.getTierNbr());", "//", "Return", "Output", "return", "_getComplexListCndValueWithName(inDao);", "}", "else", "{", "//", "Set", "input", "PdPdCndSimpleSearchIn", "inDao", "=", "new", "PdPdCndSimpleSearchIn();", "inDao.setTntInstId(getInstCd());", "inDao.setAplyStartDt(_getAplyStartDt());", "inDao.setCndCd(getCndCd());", "inDao.setCndGrpCd(getCndGrpCd());", "inDao.setCndGrpTmpltCd(getCndGrpTmpltCd());", "//", "Return", "Output", "return", "_getListCndValueWithName(inDao);", "}", "}"], "docstring_tokens": ["This", "method", "inquire", "list", "condition", "value.", "with", "inquire", "list", "code", "name."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "ArrIssmdaCore", "arrIssmda)", "throws", "BizApplicationException", "{", "return", "_getArrIssmdaSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(ArrIssmdaImpl)", "arrIssmda);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "security", "interest."]}
{"code_tokens": ["public", "boolean", "isTableAttributeValid(String", "xtnTblNm,", "String", "xtnAtrbtNm,", "String", "atrbtCntnt,", "AtrbtCheckPdInfo", "pd)", "throws", "BizApplicationException", "{", "if(!_checkAttributeBase(xtnTblNm,", "xtnAtrbtNm,", "atrbtCntnt))", "{", "return", "false;", "}", "CmTblXtnAtrVrtnCmpsDIO", "cmTblXtnAtrVrtnCmpsDIO", "=", "_getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getInstCode(),", "xtnTblNm,", "xtnAtrbtNm);", "if(cmTblXtnAtrVrtnCmpsDIO", "==", "null", "||", "\"\".equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd()))", "{", "//", "\uae30\uad00\uc5d0", "\ub370\uc774\ud130\uac00", "\uc5c6\uc744\uc2dc", "STDA", "\uae30\uad00\uc73c\ub85c", "\uc7ac\uc870\ud68c", "\ud558\uc5ec", "\uac80\uc99d", "\ud55c\ub2e4.", "cmTblXtnAtrVrtnCmpsDIO", "=", "new", "CmTblXtnAtrVrtnCmpsDIO();", "cmTblXtnAtrVrtnCmpsDIO", "=", "_getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getStandardInstCode(),", "xtnTblNm,", "xtnAtrbtNm);", "if(cmTblXtnAtrVrtnCmpsDIO", "!=", "null", "&&", "XtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd()))", "{", "return", "true;", "}", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())){", "return", "true;", "}", "//", "Check", "for", "the", "possibility", "of", "registering", "the", "extended", "attribute", "inton", "//", "the", "product", "that", "contains", "the", "corresponding", "arrangement", "//", "\ud574\ub2f9", "\uacc4\uc57d\uc774", "\uc18d\ud55c", "\uc0c1\ud488\uc5d0", "\ub4f1\ub85d", "\uac00\ub2a5\ud55c", "\ud655\uc7a5\uc18d\uc131\uc778\uc9c0", "\uac80\uc99d", "if", "(pd", "!=", "null)", "{", "return", "_checkAttributeNameInPd(xtnTblNm,", "xtnAtrbtNm,", "pd);", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "extend", "attribute", "validation", "Not", "product."]}
{"code_tokens": ["public", "boolean", "checkCode(CdNbrInfoIO", "in,", "String", "cd)", "throws", "BizApplicationException", "{", "String", "xtnCdClassNm", "=", "in.getXtnCdClassNm();", "String", "lngCd", "=", "in.getLngCd();", "if", "(StringCoreUtils.isEmpty(xtnCdClassNm))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@xtnCdClassNm\"", "});", "}", "//", "\ud574\ub2f9", "\ud074\ub798\uc2a4\uc758", "\ube48\uba85", "\ucd94\ucd9c", "\ud574\uc57c", "\ub41c\ub2e4.", "CbbClass", "cbpClass", "=", "_getCbpClass().getClassInfo(xtnCdClassNm);", "String", "beanName", "=", "cbpClass.getBeanName();", "if(logger.isDebugEnabled())", "{", "logger.debug(\"lyj", "beanName", ":", "{}\",", "beanName);", "}", "if(!CCM01.CHAR_AT.equals(beanName))", "{", "xtnCdClassNm", "=", "beanName;", "}", "if", "(StringCoreUtils.isEmpty(lngCd))", "{", "lngCd", "=", "_getCmnContextCore().getLanguageCode();", "}", "String", "cdNbr", "=", "in.getCdNbr();", "String", "instCd", "=", "in.getInstCd();", "if(StringCoreUtils.isEmpty(in.getInstCd()))", "{", "instCd", "=", "_getCmnContextCore().getInstCode();", "}", "//", "Get", "the", "login", "user's", "language", "code", "name", "Map<String,", "Object>", "supplInfoVal", "=", "new", "HashMap<String,", "Object>();", "supplInfoVal.put(InstParamEnum.LANGUAGE_CODE.getValue(),", "lngCd);", "supplInfoVal.put(InstParamEnum.INSTITUTION_CODE.getValue(),", "instCd);", "supplInfoVal.put(CCM03.CD,", "cd);", "XtnCdCore", "xtdCd", "=", "(XtnCdCore)", "CbbApplicationContext.getBean(xtnCdClassNm);", "return", "xtdCd.checkCode(cdNbr,", "supplInfoVal);", "}"], "docstring_tokens": ["This", "method", "check", "the", "code", "number.", "If", "code", "is", "exist", "return", "true,", "else", "return", "false."]}
{"code_tokens": ["public", "CustCmphInqrySvcGetCustIdIn", "clone(){", "try{", "CustCmphInqrySvcGetCustIdIn", "object=", "(CustCmphInqrySvcGetCustIdIn)super.clone();", "if", "(", "this.xtnInfoList==", "null", ")", "object.xtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustXtnInfoListIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustXtnInfoListIn>(xtnInfoList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustXtnInfoListIn", "item", ":", "xtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustXtnInfoListIn)item.clone());", "}", "object.xtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "TxHstQrySvcInquiryLinkTransactionOut", "clone(){", "try{", "TxHstQrySvcInquiryLinkTransactionOut", "object=", "(TxHstQrySvcInquiryLinkTransactionOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Integer", "getAcctgLogCount(String", "guid,", "String", "deptId,", "String", "acctgPrcsngDt)", "throws", "BizApplicationException{", "//", "\ubcc0\uacbd", "Integer", "result", "=", "0;", "List<JrnzPrcsAcctgItm>", "jrnzPrcsAcctgItmList", "=", "null;", "//", "guid", "\ubaa9\ub85d\uc744", "\uc120", "\uc870\ud68c\ud6c4", "coa", "\uc5d0\uc11c", "\uac01\uc8fc\uacc4\uc815", "\uc81c\uc678\ud558\uc5ec", "\uc870\ud68c", "\ud55c\ub2e4.", "jrnzPrcsAcctgItmList", "=", "_getAcAcctgLDso().selectListByGuid(guid,", "_getCmnContextCore().getInstCode(),", "deptId,", "acctgPrcsngDt);", "for(JrnzPrcsAcctgItm", "jrnzPrcsAcctgItm", ":", "jrnzPrcsAcctgItmList)", "{", "result", "+=", "_getAcCoaMDso().selectListDistr(jrnzPrcsAcctgItm.getInstCd(),", "null,", "jrnzPrcsAcctgItm.getAcctgItmCd(),", "null,", "TitlAcctgClcdEnum.FOOT_NOTE.getValue(),", "CCM01.NO).size();", "}", "if(logger.isDebugEnabled())", "{", "logger.debug(\"", "###################", "getAcctgLogCount", "result:", "{}\",", "result);", "}", "return", "result;", "}"], "docstring_tokens": ["It", "inquires", "the", "total", "number", "of", "accounting", "log", "generated", "through", "one", "financial", "transaction.", "It", "returns", "the", "total", "counts", "of", "accounting", "log", "with", "the", "entered", "GUID,", "accounting", "processing", "date."]}
{"code_tokens": ["public", "List<CaRoleScrnRIO>", "getListRoleScrennRelation(String", "instCd)", "throws", "BizApplicationException", "{", "_checkStringValue(instCd,", "CCM03.INST_CD);", "List<CaCmRoleScrnRIO>", "cmRoleScrnList", "=", "_getCmRoleScrnRDso().selectListForRoleId(instCd);", "List<CaRoleScrnRIO>", "roleScrnList", "=", "new", "ArrayList<CaRoleScrnRIO>();", "for(CaCmRoleScrnRIO", "cmRoleScrnRIO", ":", "cmRoleScrnList)", "{", "roleScrnList.add(_getRoleScrnRIO(cmRoleScrnRIO));", "}", "return", "roleScrnList;", "}"], "docstring_tokens": ["It", "inquires", "role", "screen", "relation", "list", "for", "role", "identification"]}
{"code_tokens": ["public", "String", "checkPassword(StaffBsicInfoIO", "staffBsicInfo,", "String", "pswd)", "throws", "BizApplicationException", "{", "String", "securityCheckRsltTpCd", "=", "null;", "if", "(staffBsicInfo", "==", "null)", "{", "return", "SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue();", "}", "if", "(staffBsicInfo.getPswd()", "==", "null)", "{", "securityCheckRsltTpCd", "=", "SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue();", "}", "else", "{", "if", "(staffBsicInfo.getPswd().equals(pswd))", "{", "securityCheckRsltTpCd", "=", "SecurityCheckRsltTpEnum.SUCCESS.getValue();", "}", "else", "{", "securityCheckRsltTpCd", "=", "SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue();", "}", "}", "return", "securityCheckRsltTpCd;", "}"], "docstring_tokens": ["It", "checks", "if", "the", "input", "password", "equals", "with", "the", "registered", "password", "of", "the", "input", "login", "information."]}
{"code_tokens": ["public", "List<CaInstScrnInfoIO>", "getListInstScreen(String", "instCd)", "throws", "BizApplicationException", "{", "CaSvInstScrnMIO", "svInstScrnMIO", "=", "new", "CaSvInstScrnMIO();", "List<CaInstScrnInfoIO>", "out", "=", "new", "ArrayList<CaInstScrnInfoIO>();", "CaInstScrnInfoIO", "scrnInfoIO", "=", "null;", "svInstScrnMIO.setInstCd(instCd);", "List<CaSvInstScrnMIO>", "outDaoList", "=", "_getSvInstScrnMDso().selectList(svInstScrnMIO);", "for(", "CaSvInstScrnMIO", "outDao:", "outDaoList", "){", "scrnInfoIO", "=", "new", "CaInstScrnInfoIO();", "//", "Generated", "by", "code", "generator", "[[", "scrnInfoIO.setScrnId(outDao.getScrnId());//", "set", "[Screen", "id]", "scrnInfoIO.setAplyStartDt(outDao.getAplyStartDt());", "scrnInfoIO.setInstCd(outDao.getInstCd());", "scrnInfoIO.setScrnUrlAddr(outDao.getScrnUrlAddr());//", "set", "[Screen", "URL", "address]", "//", "Generated", "by", "code", "generator", "]]", "out.add(scrnInfoIO);", "}", "return", "out;", "}"], "docstring_tokens": ["Inquiry", "institution", "screen", "list", "by", "institution", "code."]}
{"code_tokens": ["public", "int", "delete(CmNbrgRuleMIO", "cmNbrgRuleMIO)", "{", "super.clearCache(DataCacheCoreConfig.COMMON_NUMBER_RULE_SELECT_CACHE);", "return", "_getCmNbrgRuleM().delete(cmNbrgRuleMIO);", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "RlsttCltrlMgmtSvcDelIn", "clone(){", "try{", "RlsttCltrlMgmtSvcDelIn", "object=", "(RlsttCltrlMgmtSvcDelIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DepoBnkArrMgmtSvcClsOut", "clone(){", "try{", "DepoBnkArrMgmtSvcClsOut", "object=", "(DepoBnkArrMgmtSvcClsOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getInstCd()", "{", "String", "tntInstId", "=", "null;", "if", "(pdPdCndM", "==", "null)", "{", "tntInstId", "=", "this.instCd;", "if", "(StringCoreUtils.isEmpty(tntInstId))", "{", "return", "null;", "}", "}", "else", "{", "tntInstId", "=", "pdPdCndM.getInstCd();", "}", "//", "Return", "\uae30\uad00\ucf54\ub4dc", "return", "tntInstId;", "}"], "docstring_tokens": ["It", "inquires", "institution", "code", "where", "the", "teller", "belongs", "to."]}
{"code_tokens": ["public", "List<CaCmnCdCheckOut>", "getListCode(String", "cdNbr)", "throws", "BizApplicationException", "{", "//", "Check", "the", "code", "number", "_checkCodeNumber(cdNbr);", "List<CaCmnCdCheckOut>", "out", "=", "new", "ArrayList<CaCmnCdCheckOut>();", "//", "Get", "the", "code", "master", "information", "CaCdNbrInfoIO", "cdMstOut", "=", "_getCodeMasterInformation(cdNbr);", "//", "Get", "the", "code", "detail", "information", "List<CaCdDtlIO>", "cdDtlOutList", "=", "_getCdDtl().getCodeDetail(cdMstOut);", "for", "(CaCdDtlIO", "cdDtlIO", ":", "cdDtlOutList)", "{", "CaCmnCdCheckOut", "cmnCdCheckOut", "=", "_setCodeCheckOut(cdDtlIO,", "cdMstOut.getCdNbrTpCd());", "out.add(cmnCdCheckOut);", "}", "return", "out;", "}"], "docstring_tokens": ["It", "gets", "the", "customer", "agreement", "code", "list", "registered", "in", "the", "input", "institution."]}
{"code_tokens": ["public", "AplyDstbTgtDtlIO", "clone(){", "try{", "AplyDstbTgtDtlIO", "object=", "(AplyDstbTgtDtlIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustRgstSvcCntctPntListIn", "clone(){", "try{", "CustRgstSvcCntctPntListIn", "object=", "(CustRgstSvcCntctPntListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "PswdVldtnSvcCheckPswdOut", "clone(){", "try{", "PswdVldtnSvcCheckPswdOut", "object=", "(PswdVldtnSvcCheckPswdOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrBsicQrySvcGetChildrenArrItmOut", "clone(){", "try{", "ArrBsicQrySvcGetChildrenArrItmOut", "object=", "(ArrBsicQrySvcGetChildrenArrItmOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getApplyDateString(String", "applyDate)", "throws", "BizApplicationException", "{", "String", "out", "=", "\"\";", "if", "(StringCoreUtils.isEmpty(applyDate))", "{", "throw", "new", "BizApplicationException(\"AAPATE0067\",", "new", "String[]", "{", "\"Apply", "Date\"", "});", "}", "else", "if", "(applyDate.length()", ">", "8)", "{", "out", "=", "applyDate.replace(\"-\",", "\"\");", "//", "YYYY-MM-DD", "->", "YYYYMMDD", "}", "else", "if", "(applyDate.length()", "==", "8)", "{", "out", "=", "applyDate;", "}", "if", "(out.length()", ">", "8", "||", "out.isEmpty())", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]{\"@aplyStartDt\"});", "}", "//", "Return", "output", "return", "out;", "}"], "docstring_tokens": ["Methods", "to", "convert", "the", "date", "format", "-", "YYYY-MM-DD", "->", "YYYYMMDD"]}
{"code_tokens": ["public", "WorkflowVariableSvcIO", "clone(){", "try{", "WorkflowVariableSvcIO", "object=", "(WorkflowVariableSvcIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CmpsCnd>", "getCmpsCnd()", "throws", "BizApplicationException", "{", "if", "(!isComplexCnd())", "{", "throw", "new", "BizApplicationException(\"AAPPDE0003\",", "null);", "//", "\ub2e8\uc21c\uc870\uac74", "simple", "condition", "}", "//", "Return", "output", "return", "getCmpsCnd(getCmpxStrctrId());", "}"], "docstring_tokens": ["This", "method", "inquire", "all", "composing", "condition", "list", "in", "input", "value", "complex", "structure", "identity.", "if", "simple", "condition,", "throws", "Exception.", "DataCache", "has", "been", "applied."]}
{"code_tokens": ["public", "int", "delete(CaArArrCndClassMIO", "CaArArrCndClassMIO)", "{", "int", "cnt", "=", "_getArArrCndClassM().delete(CaArArrCndClassMIO);", "_getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_CND_CLASS_NAME_CACHE,", "null);", "return", "cnt;", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "GrntCltrlMgmtSvcSaveOut", "clone(){", "try{", "GrntCltrlMgmtSvcSaveOut", "object=", "(GrntCltrlMgmtSvcSaveOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "updateArrDocRXtnInfo(ArArrDocRXtnInfoDIO", "arArrDocRXtnInfoDIO,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "if(!StringCoreUtils.isEmpty(txDt)", "&&", "txSeqNbr", "!=", "null)", "{", "_saveArrRelAtrbtValChangeHistory(arArrDocRXtnInfoDIO.getArrId(),", "ArrRelKndCoreEnum.DOCUMENT.getValue(),", "arArrDocRXtnInfoDIO.getArrDocRelCd(),", "arArrDocRXtnInfoDIO.getDocIssueId(),", "CCM01.ZERO,", "arArrDocRXtnInfoDIO.getXtnAtrbtNm(),arArrDocRXtnInfoDIO.getXtnAtrbtCntnt(),", "txDt,", "txSeqNbr);", "}", "//", "\ud655\uc7a5\uc18d\uc131", "update", "_getCmnContextCore().setHeaderColumn(arArrDocRXtnInfoDIO);", "_getArArrDocRXtnInfoDDso().update(arArrDocRXtnInfoDIO);", "}"], "docstring_tokens": ["Modify", "one", "arrangement/document", "relation", "extended", "attribute", "of", "subsidiary", "information(CTI)"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr,", "ScrtyIntImpl", "scrtyIntImpl)", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm)){", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttribute(xtnAtrbtNm,", "xtnAtrbtCntnt);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsScrtyIntSIO", "subInfoCache", "=", "getSubInfoCache(scrtyIntImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsScrtyIntSIO();", "subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId());", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "2-1.", "insert", "_getAsScrtyIntSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "2-2.", "update", "_getAsScrtyIntSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "appraisal", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "CaAtrbtVldtnWayEnum", "getAttributeValidationWayCode()", "{", "return", "(isValidationTailored)?", "atrbtVldtnWayCd:", "CaAtrbtVldtnWayEnum.getEnum(stdDtoClassAtrbt.getAtrbtVldtnWayCd());", "}"], "docstring_tokens": ["Get", "attribute", "validation", "way", "code"]}
{"code_tokens": ["public", "CaRoleMgmtSvcSaveRoleServiceRelationListIn", "clone(){", "try{", "CaRoleMgmtSvcSaveRoleServiceRelationListIn", "object=", "(CaRoleMgmtSvcSaveRoleServiceRelationListIn)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcSaveRoleServiceRelationIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcSaveRoleServiceRelationIn>(tblNm.size());", "for(", "bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcSaveRoleServiceRelationIn", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcSaveRoleServiceRelationIn)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DateMngrCalDayHmsOut", "calculateDateByDayHourMinuteSecond(String", "endTmstmp)", "throws", "BizApplicationException", "{", "String", "startTmstmp", "=", "_getCmnContext().getTxDate()+_getCmnContext().getTxTime();", "//", "\ud604\uc7ac\uc2dc\uac04", "if", "(!DateCoreUtils.isValidDate(startTmstmp,", "DATE_FORMAT_YYYYMMDD.concat(TIME_FORMAT_HHMMSS)))", "{", "throw", "new", "BizApplicationException(\"AAPCME0001\",", "new", "Object[]", "{", "startTmstmp,", "\"\"", "});", "}", "if", "(!DateCoreUtils.isValidDate(endTmstmp,", "DATE_FORMAT_YYYYMMDD.concat(TIME_FORMAT_HHMMSS)))", "{", "throw", "new", "BizApplicationException(\"AAPCME0001\",", "new", "Object[]", "{", "endTmstmp,", "\"\"", "});", "}", "return", "_calculateDateByDayHourMinuteSecond(startTmstmp,", "endTmstmp);", "}"], "docstring_tokens": ["It", "calculates", "the", "remaining", "time(in", "hours,", "minutes,", "seconds)", "from", "a", "specific", "start", "date", "to", "a", "specific", "end", "date.", "If", "the", "start", "date", "is", "greater", "than", "the", "end", "date,", "it", "is", "an", "error."]}
{"code_tokens": ["public", "void", "terminate(ArrActvtyChngIn", "arrActvtyChngIn)", "throws", "BizApplicationException", "{", "super.changeStatus(ArrActvtyStsEnum.TERMINATED.getValue(),", "arrActvtyChngIn);", "}"], "docstring_tokens": ["Change", "status", "of", "arrangement", "issued", "media", "into", "\"Terminated\"."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "IValueObject", "subInfo", "=", "_getSubInfoCache(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "Object", "xtnAtrbtCntnt", "=", "subInfo.get(xtnAtrbtNm);", "if", "(xtnAtrbtCntnt", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(xtnAtrbtCntnt);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "calculation", "detail", "information."]}
{"code_tokens": ["public", "void", "modifyArrPrtnrRelation(ArrPrtnrRelChngIn", "in)", "throws", "BizApplicationException", "{", "_getArrPrtnrRelBiz().modifyArrPrtnrRelation(in,", "this);", "}"], "docstring_tokens": ["Change", "arrangement-partner", "relation."]}
{"code_tokens": ["public", "PrtnrRgstSvcIn", "clone(){", "try{", "PrtnrRgstSvcIn", "object=", "(PrtnrRgstSvcIn)super.clone();", "if", "(", "this.xtnInfoList==", "null", ")", "object.xtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.partner.open.service.dto.PrtnrRgstSvcXtnInfoIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.partner.open.service.dto.PrtnrRgstSvcXtnInfoIn>(xtnInfoList.size());", "for(", "bankware.corebanking.partner.open.service.dto.PrtnrRgstSvcXtnInfoIn", "item", ":", "xtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.partner.open.service.dto.PrtnrRgstSvcXtnInfoIn)item.clone());", "}", "object.xtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaErrMsgMgmtSvcGetErrMsgListOut", "clone(){", "try{", "CaErrMsgMgmtSvcGetErrMsgListOut", "object=", "(CaErrMsgMgmtSvcGetErrMsgListOut)super.clone();", "if", "(", "this.errMsgList==", "null", ")", "object.errMsgList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaErrMsgMgmtSvcGetErrMsgOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaErrMsgMgmtSvcGetErrMsgOut>(errMsgList.size());", "for(", "bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaErrMsgMgmtSvcGetErrMsgOut", "item", ":", "errMsgList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaErrMsgMgmtSvcGetErrMsgOut)item.clone());", "}", "object.errMsgList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isTableAttributeValid(String", "xtnTblNm,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AtrbtCheckPdInfo", "pd)", "throws", "BizApplicationException", "{", "return", "_getAtrbt().isTableAttributeValid(xtnTblNm,", "xtnAtrbtNm,", "xtnAtrbtCntnt,", "pd);", "}"], "docstring_tokens": ["Validate", "extend", "attribute", "validation."]}
{"code_tokens": ["public", "void", "modifyBasicInformation(InsrncCoreImpl", "insrncImpl,", "InsrncBsicMdfctnIn", "mdfctnIn)", "throws", "BizApplicationException", "{", "//", "0.", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "if(StringCoreUtils.isEmpty(mdfctnIn.getMgmtDeptId()))", "{", "mdfctnIn.setMgmtDeptId(_getCmnContextCore().getDeptId());", "}", "_insertInsrncAtrbtChngHst(insrncImpl.getInsrncBasicCache(),", "mdfctnIn);", "//", "1.", "\uce90\uc2dc", "\ubc18\uc601", "AsInsrncMIO", "asInsrncMIO", "=", "insrncImpl.getInsrncBasicCache();", "DtoCoreUtils.setSubInfoIO(mdfctnIn,", "asInsrncMIO);", "//", "2.", "\ubcf4\ud5d8", "\uae30\ubcf8", "update", "_getAsInsrncMDso().update(asInsrncMIO);", "}", "/**", "*", "\ubcf4\ud5d8\uae30\ubcf8\uc815\ubcf4", "\ub4f1\ub85d", "*", "<pre>", "*", "\uc790\uc0b0\uc2dd\ubcc4\uc790\ub97c", "\uc0dd\uc131\ud55c\ub2e4.", "*", "\uc785\ub825\ub41c", "\uc815\ubcf4\ub85c", "\uc790\uc0b0\uc815\ubcf4\ub97c", "\ub4f1\ub85d\ud55c\ub2e4.", "*", "\uc790\uc0b0\uc758", "\uc0c1\ud0dc\uc774\ub825\uc744", "\ub4f1\ub85d\ud55c\ub2e4.", "*", "\uc790\uc0b0\uc758", "\uc18d\uc131\uc774\ub825\uc744", "\ub4f1\ub85d\ud55c\ub2e4.", "*", "</pre>", "*", "@param", "in", ":", "{@link", "InsrncBsicInfoIO}", "\ubcf4\ud5d8\uae30\ubcf8\uc815\ubcf4", "*", "@param", "chngTxDt", ":", "(required)", "\ubcc0\uacbd\ub144\uc6d4\uc77c", "*", "@param", "chngTxSeqNbr", ":", "(required)", "\ubcc0\uacbd\uc77c\ub828\ubc88\ud638", "*", "@return", "InsrncBsicInfoIO", ":", "{@link", "InsrncBsicInfoIO}"], "docstring_tokens": ["It", "modifies", "the", "insurance", "information."]}
{"code_tokens": ["public", "CaCntrlCntrMgmtSvcGetCntrlCntrDtlIn", "clone(){", "try{", "CaCntrlCntrMgmtSvcGetCntrlCntrDtlIn", "object=", "(CaCntrlCntrMgmtSvcGetCntrlCntrDtlIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CaStdAtrbtIO>", "getListPrflAttributeName(String", "prflDscd)", "throws", "BizApplicationException", "{", "if(", "StringUtils.isEmpty(prflDscd)", "){", "throw", "new", "BizApplicationException(\"AAPCME0441\",", "new", "Object[]", "{});", "}", "List<CaCmStdAtrMIO>", "outCmStdAtrList", "=", "_getCmStdAtrMDso().selectListPrflAtrbtNmByPrflDscd(prflDscd);", "return", "_setStdAtrbtIO(outCmStdAtrList);", "}"], "docstring_tokens": ["Query", "profile", "attribute", "name", "list."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "ArrTxImpl", "arrTx)", "throws", "BizApplicationException", "{", "//", "1.", "\uce90\uc2dc\uae30\uc900\uc73c\ub85c", "\uac70\ub798\uad00\ub828", "\ubcf4\uc870\uba85\uc138", "\uc870\ud68c(\uce90\uc2f1", "\ub418\uc9c0", "\uc54a\uc558\uc73c\uba74", "DB\uc870\ud68c", "\ud6c4", "\uce90\uc2f1", "&", "return)", "IValueObject", "subInfo", "=", "getSubInfoCache(arrTx);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc5c6\uc73c\uba74", "return", "null", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\uc870\ud68c\ub41c", "\ubcf4\uc870\uba85\uc138\uc5d0\uc11c", "\ud2b9\uc815\ubcf4\uc870\uba85\uc138", "\uac12", "\uc870\ud68c,", "\uc788\uc73c\uba74", "string\uac12", "return,", "\uc5c6\uc73c\uba74", "return", "null.", "Object", "atrbtVal", "=", "subInfo.get(atrbtNm);", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["This", "method", "provides", "to", "inquire", "the", "specific", "subsidiary", "information", "named", "'xtnAtrbtNm'."]}
{"code_tokens": ["public", "java.lang.String", "getAssetId(){", "return", "assetId;", "}"], "docstring_tokens": ["Inquire", "the", "asset", "identification", "of", "this", "asset", "transaction."]}
{"code_tokens": ["public", "String", "calculateMaturityDate(ArrangementCore", "arr,", "ArrCndRngCore", "contractTerm)", "throws", "BizApplicationException", "{", "String", "arrMtrtyDt", "=", "calculateMaturityDate(arr,", "arr.getArrOpnDt(),", "contractTerm);", "return", "adjustMtrtyDt(", "arr,", "arrMtrtyDt", ");", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "Calculation", "of", "the", "expiration", "date", "from", "the", "new", "date", "to", "the", "contract", "period", "*", "</pre>", "*", "@seealso", "{@link", "#calculateMaturityDate(ArrangementCore,", "String)}", ":", "Calculate", "maturity", "date", "with", "contract", "term", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\uc2e0\uaddc\uc77c\ub85c", "\ubd80\ud130", "\uacc4\uc57d\uae30\uac04", "\ud574\ub2f9\uc77c\uae4c\uc9c0\uc758", "\ub9cc\uae30\uc77c", "\uc0b0\ucd9c", "*", "</pre>", "*", "@seealso", "{@link", "#calculateMaturityDate(ArrangementCore,", "String)}"], "docstring_tokens": ["Calculate", "maturity", "date", "with", "contract", "term", "from", "accepted", "date."]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo", ",", "StStlmntSIO", "stStlmntSIOIn)", "{", "logger.debug(\"##<ST-StlmntSubInfoBiz>", "saveSubInfo\");", "//", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{this.getClass().getSimpleName()});", "}", "logger.debug(\"##<ST-StlmntSubInfoBiz>", "saveSubInfo", "null", "check", "ok\");", "//", "1.create", "a", "new", "instance", "of", "DB", "IO", "IValueObject", "subInfoDBIO", "=", "new", "StStlmntSIO();", "//", "2.set", "primary", "key", "_setKey(subInfoDBIO,", "stStlmntSIOIn);", "//", "3.convert", "IvalueObject", "to", "DBIO", "VO", "DtoUtils.setSubInfoIO(subInfo,", "subInfoDBIO);", "//", "4.save", "subsidiary", "detail(\ubcf4\uc870\uba85\uc138)", "_insertSubInfo(subInfoDBIO);", "/*", "*", "settlement\ub294", "\uc18d\uc131\uc744", "\ub300\ubd80\ubd84", "insert", "\ud558\ub294", "\uacbd\uc6b0\uc774\ubbc0\ub85c", "\uc544\ub798", "\ub85c\uc9c1\uc744", "\ub9c9\uc74c", "*/", "//", "IValueObject", "sqlOut", "=", "getSubInfo(stlmnt);", "//", "//", "//", "\ud574\ub2f9", "\uac70\ub798\uad00\ub828", "\ubcf4\uc870\uba85\uc138", "\ub370\uc774\ud130\uac00", "\uc5c6\uc744", "\ub54c", "//", "if(sqlOut", "==", "null)", "{", "//", "_insertSubInfo(subInfoDBIO);", "//", "//", "\ub9f4\ubc84\ubcc0\uc218", "VO", "\uac12", "\uc124\uc815", "//", "Stlmnt.setStlmntSubInfo(subInfo);", "//", "//", "}else", "{", "//", "//", "\uae30", "\uc870\ud68c", "\ub41c", "\uac12\uc5d0", "update\ub418\uc5b4\ud560", "\ud544\ub4dc", "\uc124\uc815", "//", "DtoUtils.setSubInfoIO(subInfo,", "sqlOut);", "//", "//", "DBIO", "IO\uc5d0", "\ub0b4\uc6a9\ud544\ub4dc", "\ubc18\uc601", "//", "DtoUtils.setSubInfoIO(sqlOut,", "subInfoDBIO);", "//", "//", "_updateSubInfo(subInfoDBIO);", "//", "//", "\ub9f4\ubc84\ubcc0\uc218", "VO", "\uac12", "\uc124\uc815(sqlOut\uc740", "\uae30\uc874", "+", "\uc0c8\ub85c", "update\ub418\uc5b4\uc57c", "\ud560", "\ud544\ub4dc", "\ubaa8\ub450", "\ubc18\uc601\ub41c", "\ucd5c\uc2e0", "\ubcf4\uc870\uba85\uc138IO)", "//", "stlmnt.setStlmntSubInfo(sqlOut);", "//", "}", "}", "//", "//", "/**", "//", "*", "set", "primary", "key", "of", "subsidiary", "table", "//", "*", "@param", "stlmntSIO", "//", "*", "@param", "Stlmnt", "//", "*/", "//", "private", "IValueObject", "_setKey(IValueObject", "stlmntSIO,", "String", "arrId,", "String", "txDt,", "int", "txSeqNbr,", "String", "amtTpCd,", "String", "prchsRtrnYn)", "{", "//", "stlmntSIO.set(\"instCd\",", "_getCmnContext().getInstCode());", "//", "stlmntSIO.set(\"arrId\",", "arrId);", "//", "stlmntSIO.set(\"txDt\",", "txDt);", "//", "stlmntSIO.set(\"txSeqNbr\",", "txSeqNbr);", "//", "stlmntSIO.set(\"amtTpCd\",", "amtTpCd);", "//", "stlmntSIO.set(\"prchsRtrnYn\",", "prchsRtrnYn);", "//", "//", "return", "stlmntSIO;", "//", "//", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(DtDscdEnum", "item", ":", "DtDscdEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "\"99\".equalsIgnoreCase(value)", "?", "false", ":", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "List<CmpsCndOut>", "getAllCmpsCndValueList(String", "cmpxStrctrId)", "throws", "BizApplicationException", "{", "//", "Return", "output", "return", "getListCmpsCndValue(null,", "cmpxStrctrId);", "}"], "docstring_tokens": ["This", "method", "inquire", "the", "composing", "condition", "value", "of", "all", "tiers", "of", "the", "complex", "condition.", "DataCache", "has", "been", "applied."]}
{"code_tokens": ["public", "List<CrIntCalDtrmnCndOut>", "getListInterestCalculationDetermineCondition(String", "instCd)", "throws", "BizApplicationException", "{", "//", "\ud544\uc218", "\uc785\ub825", "\uac12", "\uccb4\ud06c", "_getCrCalculatorUtil().checkInputStringData(\"AAPCME0006\",", "instCd,", "\"instCd\");", "CrIntCalDtrmnCndMIO", "in", "=", "new", "CrIntCalDtrmnCndMIO();", "in.setTntInstId(instCd);", "return", "_getCrIntCalDtrmnCndMDso().selectListCondition(in);", "}"], "docstring_tokens": ["Methods", "to", "query", "interest", "calculation", "determine", "condition", "-", "All", "interest", "calculation", "determine", "condition", "history", "for", "each", "institution", "are", "inquired"]}
{"code_tokens": ["public", "void", "registerAprvRsltRslt(List<AmAsmAprvRsltIO>", "amAsmAprvRsltIO)", "throws", "BizApplicationException{", "_getAsmAprvRsltBiz().registerAprvRsltRslt(amAsmAprvRsltIO);", "}"], "docstring_tokens": ["It", "registers", "detail", "information", "of", "credit", "approval", "result."]}
{"code_tokens": ["protected", "void", "register(StaffImpl", "staffImpl,", "StaffStsIO", "staffStsIO)", "throws", "BizApplicationException", "{", "if(staffStsIO", "!=", "null)", "{", "AtStaffStsDXtnIO", "atStaffStsDIO", "=", "new", "AtStaffStsDXtnIO();", "_getCmnContext().setHeaderColumn(atStaffStsDIO);", "atStaffStsDIO.setInstCd(staffImpl.getInstCd());", "atStaffStsDIO.setStaffId(staffImpl.getStaffId());", "atStaffStsDIO.setStaffStsCd(staffStsIO.getStaffStsCd());", "atStaffStsDIO.setStaffStsChngRsnCd(staffStsIO.getStaffStsChngRsnCd());", "atStaffStsDIO.setStaffStsChngRsnCntnt(staffStsIO.getStaffStsChngRsnCntnt());", "atStaffStsDIO.setEfctvEndDt(staffStsIO.getEfctvEndDt()", "==", "null", "?", "CCM01.MAX_DATE", ":", "staffStsIO.getEfctvEndDt());", "atStaffStsDIO.setEfctvStartDt(staffStsIO.getEfctvStartDt()", "==", "null", "?", "_getCmnContext().getTxDate()", ":", "staffStsIO.getEfctvStartDt());", "//", "2020.03.09", "\uc9c1\uc6d0\uc0c1\ud0dc\uba85\uc138", "\ud14c\uc774\ube14\uc5d0", "\uc0c1\ud0dc\ubcc0\uacbd\ub144\uc6d4\uc77c/\uc0c1\ud0dc\ubcc0\uacbd\uc2dc\ubd84\ucd08", "\uceec\ub7fc", "\ucd94\uac00", "atStaffStsDIO.setStsChngDt(_getCmnContext().getTxDate());", "atStaffStsDIO.setStsChngHms(_getCmnContext().getTxTime());", "AtStaffStsDXtnIO", "lastAtStaffStsDIO", "=", "_getAtStaffStsDXtnDso().select(atStaffStsDIO.getInstCd(),", "atStaffStsDIO.getStaffId(),", "atStaffStsDIO.getEfctvStartDt());", "if(lastAtStaffStsDIO", "==", "null)", "{", "_getAtStaffStsDXtnDso().insert(atStaffStsDIO);", "}", "//", "\uc720\ud6a8\uc2dc\uc791\uc77c\uc774", "\ub2e4\ub978", "\uacbd\uc6b0", "else", "if(!lastAtStaffStsDIO.getEfctvStartDt().equals(atStaffStsDIO.getEfctvStartDt()))", "{", "_getCmnContext().setHeaderColumn(lastAtStaffStsDIO);", "lastAtStaffStsDIO.setInstCd(staffImpl.getInstCd());", "lastAtStaffStsDIO.setEfctvEndDt(DateUtils.getDateDayBefore(1,", "atStaffStsDIO.getEfctvStartDt()));", "_getAtStaffStsDXtnDso().updateEfctvEndDt(lastAtStaffStsDIO);", "_getAtStaffStsDXtnDso().insert(atStaffStsDIO);", "//", "2020.03.15", "\uc9c1\uc6d0\uae30\ubcf8\uc5d0", "\uc9c1\uc6d0\uc0c1\ud0dc\ucf54\ub4dc/\uc9c1\uc6d0\uc0c1\ud0dc\ubcc0\uacbd\uc0ac\uc720\ucf54\ub4dc/\uc0c1\ud0dc\ubcc0\uacbd\ub144\uc6d4\uc77c/\uc0c1\ud0dc\ubcc0\uacbd\uc2dc\ubd84\ucd08\uac00", "\ucd94\uac00\ub428", "_getAtStaffMXtnDso().updateSts(atStaffStsDIO);", "}", "//", "\uc720\ud6a8\uc2dc\uc791\uc77c\uc774", "\ub3d9\uc77c\ud55c", "\uacbd\uc6b0", "else", "{", "_getCmnContext().setHeaderColumn(lastAtStaffStsDIO);", "lastAtStaffStsDIO.setInstCd(staffImpl.getInstCd());", "lastAtStaffStsDIO.setStaffStsCd(staffStsIO.getStaffStsCd());", "lastAtStaffStsDIO.setStaffStsChngRsnCd(staffStsIO.getStaffStsChngRsnCd());", "lastAtStaffStsDIO.setStaffStsChngRsnCntnt(staffStsIO.getStaffStsChngRsnCntnt());", "lastAtStaffStsDIO.setEfctvEndDt(staffStsIO.getEfctvEndDt()", "==", "null", "?", "CCM01.MAX_DATE", ":", "staffStsIO.getEfctvEndDt());", "_getAtStaffStsDXtnDso().update(lastAtStaffStsDIO);", "//", "2020.03.15", "\uc9c1\uc6d0\uae30\ubcf8\uc5d0", "\uc9c1\uc6d0\uc0c1\ud0dc\ucf54\ub4dc/\uc9c1\uc6d0\uc0c1\ud0dc\ubcc0\uacbd\uc0ac\uc720\ucf54\ub4dc/\uc0c1\ud0dc\ubcc0\uacbd\ub144\uc6d4\uc77c/\uc0c1\ud0dc\ubcc0\uacbd\uc2dc\ubd84\ucd08\uac00", "\ucd94\uac00\ub428", "_getAtStaffMXtnDso().updateSts(lastAtStaffStsDIO);", "}", "staffImpl.appendActorInfoChngHst(atStaffStsDIO,", "lastAtStaffStsDIO,", "TableNmEnum.AT_STAFF_STS_D.getValue(),", "staffStsIO.getChngRsnCntnt());", "}", "}"], "docstring_tokens": ["It", "registers", "the", "document", "notice", "relation", "information.", "Needs", "caution", "as", "the", "registered", "information", "performs", "the", "update", "transaction."]}
{"code_tokens": ["public", "StlmntGlQuerySvcItemOut", "clone(){", "try{", "StlmntGlQuerySvcItemOut", "object=", "(StlmntGlQuerySvcItemOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "LnArr360Cnd", "clone(){", "try{", "LnArr360Cnd", "object=", "(LnArr360Cnd)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "validateTxPassword(ArrMbrshp", "arrMbrshp,", "String", "txPswd)", "throws", "BizApplicationException", "{", "if(null", "==", "txPswd", "||", "txPswd.isEmpty())", "{", "throw", "new", "BizApplicationException(\"AAPDPE0029\",", "null);", "}", "/*", "*", "Get", "customer's", "membership", "arrangement", "*", "*/", "if(arrMbrshp", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPDPE0028\",", "null);", "}", "arrMbrshp.validateTxPassword(txPswd);", "}"], "docstring_tokens": ["Validate", "input", "value", "by", "comparing", "to", "transaction", "password", "registered", "on", "membership", "arrangement.", "Password", "managed", "as", "extended", "attribute", "of", "arrangement,", "but", "cannot", "be", "registered/inquired/modified/deleted", "by", "general", "API", "managing", "extend", "attribute."]}
{"code_tokens": ["public", "CndVal", "getComplexCndValue(int", "tierNbr)", "throws", "BizApplicationException", "{", "//", "If", "isCmpxCnd", "is", "false", "if", "(!isComplexCnd())", "{", "//", "Simple", "condition", "throw", "new", "BizApplicationException(\"AAPPDE0003\",", "null);", "}", "//", "Set", "Input", "PdPdCndUnitComplexSearchIn", "inDao", "=", "_setPdPdCndUnitComplexSearchIn(tierNbr);", "if", "(isListCnd())", "{", "return", "_getComplexListCndValue(inDao);", "}", "else", "if", "(isRngCnd())", "{", "return", "_getComplexRangeCndValue(inDao);", "}", "/*else", "if", "(isIntCnd())", "{", "return", "_getComplexInterestCndValue(inDao);", "}", "else", "if", "(isFeeCnd())", "{", "return", "_getComplexFeeCndValue(inDao);", "}*/", "else", "{", "return", "null;", "}", "}"], "docstring_tokens": ["This", "method", "inquire", "complex", "condition", "value."]}
{"code_tokens": ["public", "StlmntRsltVal", "calculateInterestProvisionalSettlement(ArrReal", "arr,", "String", "crncyCd,", "String", "paymentDate,", "Integer", "arrTxSeqNbr,", "String", "intPymntDt,", "String", "acProcDt,", "Boolean", "isAccrual,", "String", "accrualBasisYn,", "String", "lnRpymntTpCd)", "throws", "BizApplicationException", "{", "//", "TODO", "Auto-generated", "method", "stub", "return", "null;", "}", "//", "/**", "//", "*", "Calculate", "Interest", "covering", "\"balance-based", "Interest", "calculation\"", "//", "*", "2016.03.28", "\ub300\ucd9c\uc794\uc561\uc5d0", "\ub300\ud55c", "\uc774\uc790\uacc4\uc0b0(\uac00\uacb0\uc0b0\uc6a9)", "//", "*", "//", "*", "@param", "arr", "//", "*", "-", "(required)arrangement", "interface", "//", "*", "@param", "crncyCd", "//", "*", "-", "(required)currency", "code", "//", "*", "@param", "paymentDate", "//", "*", "-", "(required)transaction", "date", "//", "*", "@return", "StlmntRsltVal", "-", "Settlement", "Result", "Value", "\uc815\uc0b0", "\uacb0\uacfc\uac12", "//", "*", "@throws", "BizApplicationException", "//", "*/", "//", "@Override", "//", "@BxmCategory(logicalName", "=", "\"Calculate", "Interest", "about", "balance-based", "for", "ProvisionalSettlement\")", "//", "public", "StlmntRsltVal", "calculateInterestProvisionalSettlement(ArrReal", "arr,", "String", "crncyCd,", "String", "paymentDate,", "Integer", "arrTxSeqNbr,", "String", "intPymntDt,", "String", "acProcDt,", "Boolean", "isAccrual)", "throws", "BizApplicationException", "{", "//", "//", "StlmntRsltVal", "stlmntRsltVal", "=", "(StlmntRsltVal)super.calculateInterestProvisionalSettlement((ArrRealCore)arr,", "crncyCd,", "paymentDate,", "arrTxSeqNbr,", "intPymntDt,", "acProcDt,", "isAccrual);", "//", "//", "return", "stlmntRsltVal;", "//", "}", "//", "@Override", "//", "@BxmCategory(logicalName", "=", "\"Calculate", "Interest", "about", "balance-based", "for", "ProvisionalSettlement\")", "//", "public", "StlmntRsltVal", "calculateInterestProvisionalSettlement(ArrReal", "arr,", "String", "crncyCd,", "String", "paymentDate,", "Integer", "arrTxSeqNbr,", "String", "intPymntDt,", "String", "acProcDt,", "Boolean", "isAccrual,", "String", "accrualBasisYn)", "throws", "BizApplicationException", "{", "//", "//", "StlmntRsltVal", "stlmntRsltVal", "=", "(StlmntRsltVal)super.calculateInterestProvisionalSettlement((ArrRealCore)arr,", "crncyCd,", "paymentDate,", "arrTxSeqNbr,", "intPymntDt,", "acProcDt,", "isAccrual,", "accrualBasisYn);", "//", "//", "return", "stlmntRsltVal;", "//", "}", "//", "@Override", "//", "@BxmCategory(logicalName", "=", "\"Calculate", "Interest", "about", "balance-based", "for", "ProvisionalSettlement\")", "//", "public", "StlmntRsltVal", "calculateInterestProvisionalSettlement(ArrReal", "arr,", "String", "crncyCd,", "String", "paymentDate,", "Integer", "arrTxSeqNbr,", "String", "intPymntDt,", "String", "acProcDt,", "Boolean", "isAccrual,", "String", "accrualBasisYn,", "String", "lnRpymntTpCd)", "throws", "BizApplicationException", "{", "//", "//", "StlmntRsltVal", "stlmntRsltVal", "=", "(StlmntRsltVal)super.calculateInterestProvisionalSettlement((ArrRealCore)arr,", "crncyCd,", "paymentDate,", "arrTxSeqNbr,", "intPymntDt,", "acProcDt,", "isAccrual,", "accrualBasisYn,", "lnRpymntTpCd);", "//", "//", "return", "stlmntRsltVal;", "//", "}", "//", "/*", "//", "*", "(non-Javadoc)", "//", "*", "//", "*", "@see", "tw.linebank.corebanking.settlement.interestcalculationloan.interfaces.", "//", "*", "IntCalculatorLnMngr", "//", "*", "#IntCalculatorLnArrIntRtReFixRpymnt(bankware.corebanking", "//", "*", ".arrangement.arrangement.interfaces.Arr,", "java.lang.String,", "//", "*", "java.lang.String,", "tw.linebank.corebanking.settlement.enums.CashTrnsfrEnum,", "//", "*", "java.math.BigDecimal,", "boolean)", "//", "*/", "//", "@Override", "//", "@BxmCategory(logicalName", "=", "\"Calculate", "Loan", "whole", "Early", "Repayment", "&", "Termination\")", "//", "public", "StlmntRsltVal", "calculateInterestLoanArrInterestRatetReFixRpymnt(ArrReal", "arr,", "String", "crncyCd,", "String", "paymentDate,", "String", "cashTrnsfr,", "BigDecimal", "cashTrnsfrAmt,", "boolean", "smltn)", "throws", "BizApplicationException", "{", "//", "//", "StlmntRsltVal", "stlmntRsltVal", "=", "(StlmntRsltVal)super.calculateInterestLoanArrInterestRatetReFixRpymnt((ArrRealCore)arr,", "crncyCd,", "paymentDate,", "cashTrnsfr,", "cashTrnsfrAmt,", "smltn);", "//", "//", "return", "stlmntRsltVal;", "//", "}", "//", "@BxmCategory(logicalName", "=", "\"Get", "Accumulated", "Amount\")", "//", "public", "List<GetIntCalculatorLnDailyBalanceOut>", "getListAccumulatedAmount(ArrReal", "arr,", "String", "calcStartDt,", "String", "calcEndDt)", "throws", "BizApplicationException", "{", "//", "return", "super.getListAccumulatedAmount((ArrRealCore)arr,", "calcStartDt,", "calcEndDt);", "//", "}", "//", "/**", "//", "*", "calculate", "the", "Principal", "Amount", "from", "Payable", "Amount(Principal", "+", "Interest", "+", "//", "*", "Early", "Repayment", "Fee", "Amount)", "-", "applied", "only", "for", "'Full", "Pay", "at", "Maturity'", "//", "*", "Loan", "Arrangement", "with", "interest", "paid", "at", "enddate", "oth", "the", "loan", "-", "applied", "//", "*", "only", "for", "both", "'Interest", "Advance'", "and", "'Interest", "Arrear'", "//", "*", "//", "*", "@param", "arr", "//", "*", "-", "(required)Arrangement", "information", "//", "*", "@param", "crncyCd", "//", "*", "-", "(optional)currency", "Code", "//", "*", "@param", "toDate", "//", "*", "-", "(required)date", "of", "Repayment", "//", "*", "@param", "pyablAmt", "//", "*", "-", "(required)Amount", "to", "pay(Principal", "+", "Interest", "+", "Early", "//", "*", "Repayment", "Fee", "Amount)", "//", "*", "@param", "smltn", "//", "*", "-", "(required)simulation", "Yes", "or", "No", "(", "only", "'true'", "is", "allowed)", "//", "*", "//", "*", "@return", "PrnCalcOut", "-", "the", "result", "of", "the", "calculation(1.calculated", "principal", "//", "*", "Amount", ",", "2.overdue", "Yes", "or", "No", "//", "*", "@throws", "BizApplicationException", "//", "*/", "//", "/*", "//", "*", "(non-Javadoc)", "//", "*", "//", "*", "@see", "tw.linebank.corebanking.settlement.interestcalculationloan.interfaces.", "//", "*", "IntCalculatorLnMngr", "//", "*", "#calculatePrincipalFromRepaymentAmount(bankware.corebanking", "//", "*", ".arrangement.arrangement.interfaces.Arr,", "java.lang.String,", "//", "*", "java.lang.String,", "java.math.BigDecimal,", "boolean)", "//", "*/", "//", "@BxmCategory(logicalName", "=", "\"calculate", "the", "Principal", "Amount", "from", "Payable", "Amount\")", "//", "public", "PrnCalcOut", "calculatePrincipalFromRepaymentAmount(ArrReal", "arr,", "String", "crncyCd,", "String", "toDate,", "BigDecimal", "pyablAmt,", "boolean", "smltn)", "throws", "BizApplicationException", "{", "//", "//", "PrnCalcOut", "prnCalcOut", "=", "super.calculatePrincipalFromRepaymentAmount((ArrRealCore)arr,", "crncyCd,", "toDate,", "pyablAmt,", "smltn);", "//", "//", "return", "prnCalcOut;", "//", "}", "//", "/**", "//", "*", "get", "the", "list", "of", "loan", "interest", "by", "customer's", "death", "information", "\uace0\uac1d\uc0ac\ub9dd\uc815\ubcf4\ub85c", "//", "*", "\ub300\ucd9c\uc774\uc790\uacc4\uc0b0", "\uc870\ud68c", "//", "*", "//", "*", "@param", "arr", "//", "*", "-", "(required)arrangement", "interface", "//", "*", "@param", "xtdInfo", "//", "*", "-", "(required)interest", "calculation", "extend", "information", "//", "*", "@return", "List<ArrCashFlowDDtlIO>", "-", "-", "cashflow", "list", "//", "*", "@throws", "BizApplicationException", "//", "*/", "//", "@BxmCategory(logicalName", "=", "\"Get", "Loan", "Interest", "Amount", "by", "Death", "Information\")", "//", "public", "List<ArrCashFlowIO>", "getListLoanInterestAmountByDeathInfo(ArrReal", "arr,", "Map<String,", "Object>", "xtdInfo)", "throws", "BizApplicationException", "{", "//", "return", "super.getListLoanInterestAmountByDeathInfo((ArrRealCore)arr,", "xtdInfo);", "//", "}", "//", "/**", "//", "*", "Get", "Settlement", "Unrepaid", "Arrangement", "Cash", "Flow", "For", "Purchase", "Loan", "Interest", "//", "*", "Amount", "\ubbf8\uc218\uc774\uc790", "\ud658\uc785\uc744", "\uc704\ud55c", "\ubbf8\uc218\ud604\uae08\ub0b4\uc5ed", "\uc870\ud68c", "//", "*", "//", "*", "@param", "arr", "//", "*", "-", "(required)arrangement", "interface", "//", "*", "@param", "xtdInfo", "//", "*", "-", "(required)interest", "calculation", "extend", "information", "//", "*", "@return", "List<ArrCashFlowIO>", "-", "-", "cashflow", "list", "//", "*", "@throws", "BizApplicationException", "//", "*/", "//", "@BxmCategory(logicalName", "=", "\"Get", "Settlement", "Unrepaid", "Arrangement", "Cash", "Flow", "For", "Purchase", "Loan", "Interest", "Amount\")", "//", "public", "List<ArrCashFlowIO>", "getListStUnrpdArrCashFlowForPurchaseInterest(ArrReal", "arr,", "Map<String,", "Object>", "xtdInfo)", "throws", "BizApplicationException", "{", "//", "//", "List<ArrCashFlowIO>", "arrCashFlowIO", "=", "super.getListStUnrpdArrCashFlowForPurchaseInterest((ArrRealCore)arr,", "xtdInfo);", "//", "//", "return", "arrCashFlowIO;", "//", "}", "//", "//", "/**", "//", "*", "get", "the", "list", "of", "arrangement's", "scheduled", "Interest", "Amount", "that", "a", "repayment", "//", "*", "date", "is", "due", "for", "specific", "period", "By", "CUST_ID", "\uace0\uac1dID\ub85c", "\ud2b9\uc815\uae30\uac04\uc758", "\uc774\uc790\uc608\uc0c1\uc870\ud68c", "//", "*", "//", "*", "@param", "instCd", "//", "*", "-", "(required)institute", "code", "//", "*", "@param", "custId", "//", "*", "-", "(required)Customer", "ID", "//", "*", "@param", "sctnStartDt", "//", "*", "-", "(required)section", "start", "date", "//", "*", "@return", "List<ArrCashFlowDDtlIO>", "-", "-", "cashflow", "list", "//", "*", "@throws", "BizApplicationException", "//", "*/", "//", "@BxmCategory(logicalName", "=", "\"get", "the", "list", "of", "scheduled", "Interest", "Amoun", "with", "custId\")", "//", "public", "List<ArrDuedateAdventListOut>", "getCustOwnArrListBasedOnArrBasic(String", "custId,", "String", "sctnStartDt)", "throws", "BizApplicationException", "{", "//", "//", "List<ArrDuedateAdventListOut>", "arrDuedateAdventList", "=", "super.getListCustOwnArrBasedOnArrBasic(custId,", "sctnStartDt);", "//", "//", "return", "arrDuedateAdventList;", "//", "}", "//", "//", "//", "/**", "//", "*", "@return", "the", "arrCashFlow", "//", "*/", "//", "private", "LnIntCalcnMinusImpl", "_getLnIntCalcnMinusImpl()", "{", "//", "if", "(lnIntCalcnMinusImpl", "==", "null)", "{", "//", "lnIntCalcnMinusImpl", "=", "(LnIntCalcnMinusImpl)", "CbbApplicationContext.getBean(", "//", "LnIntCalcnMinusImpl.class,", "lnIntCalcnMinusImpl);", "//", "}", "//", "return", "lnIntCalcnMinusImpl;", "//", "}", "//", "/*", "//", "*", "(non-Javadoc)", "//", "*", "//", "*", "@see", "//", "*", "tw.linebank.corebanking.settlement.settlement.interfaces.IntCalculatorLnMngr", "//", "*", "#calculateInterestTermination(", "//", "*", "tw.linebank.corebanking.arrangement.arrangement.interfaces.Arr,", "//", "*", "java.lang.String,", "java.lang.String,", "java.lang.String,", "//", "*", "tw.linebank.corebanking.settlement.enums.CashTrnsfrEnum,", "//", "*", "java.math.BigDecimal,", "boolean)", "//", "*/", "//", "@Override", "//", "@BxmCategory(logicalName", "=", "\"Calculate", "Loan", "whole", "Early", "Repayment", "&", "Termination\")", "//", "public", "StlmntRsltVal", "calculateInterestTermination(", "ArrReal", "arr,", "String", "crncyCd,", "String", "paymentDate,", "String", "arrTrmntnDscd,", "String", "cashTrnsfr,", "BigDecimal", "cashTrnsfrAmt,", "boolean", "smltn)", "throws", "BizApplicationException", "{", "//", "//", "if", "(logger.isDebugEnabled())", "{", "//", "logger.debug(\"##", "<SHW>", "IntCalculatorMngrImpl.calculateIntTrmntn", "START\");", "//", "}", "//", "StlmntRsltVal", "stlmntRsltVal", "=", "(StlmntRsltVal)super.calculateInterestTerminationCore((ArrRealCore)arr,", "crncyCd,", "paymentDate,", "arrTrmntnDscd,", "cashTrnsfr,", "cashTrnsfrAmt,", "smltn);", "//", "//", "return", "stlmntRsltVal;", "//", "}", "//", "/*", "//", "*", "(non-Javadoc)", "//", "*", "//", "*", "@see", "//", "*", "tw.linebank.corebanking.settlement.settlement.interfaces.IntCalculatorLnMngr", "//", "*", "#calculateInterestPartialTermination", "//", "*", "(tw.linebank.corebanking.arrangement.arrangement.interfaces.Arr,", "//", "*", "java.lang.String,", "java.math.BigDecimal,", "java.lang.String,", "//", "*", "java.lang.String,", "tw.linebank.corebanking.settlement.enums.CashTrnsfrEnum,", "//", "*", "java.math.BigDecimal,", "boolean)", "//", "*/", "//", "/**", "//", "*", "(To", "Do)", "2015.10.28\uc77c", "\uc870\uae30\uc0c1\ud658\ud6c4", "\uc0c1\ud658\uc2a4\ucf00\uc974", "\uc7ac\uc870\uc815", "\ubc29\ubc95", "\ud30c\ub77c\ubbf8\ud130", "\uc0ad\uc81c", "\ubc0f", "\ud655\uc815\uc815\ubcf4", "\uc800\uc7a5", "\ubd88\ud544\uc694..", "*", "//", "*", "prncplDcrsWay", "\ud30c\ub77c\ubbf8\ud130", "\uc0ad\uc81c", "\uc5d0\uc815", "...", "//", "*/", "//", "@Override", "//", "@BxmCategory(logicalName", "=", "\"Calculate", "Loan", "Partial", "Early", "Repayment\")", "//", "public", "StlmntRsltVal", "calculateInterestPartialTermination(ArrReal", "arr,", "String", "crncyCd,", "BigDecimal", "prncplAmt,", "String", "paymentDate,", "String", "cashTrnsfr,", "BigDecimal", "cashTrnsfrAmt,", "boolean", "smltn)", "throws", "BizApplicationException", "{", "//", "return", "(StlmntRsltVal)super.calculateInterestPartialTermination((ArrRealCore)arr,", "crncyCd,", "prncplAmt,", "paymentDate,", "cashTrnsfr,", "cashTrnsfrAmt,", "smltn);", "//", "}", "//", "//", "@Override", "//", "@BxmCategory(logicalName", "=", "\"Calculate", "Loan", "Partial", "Early", "Repayment\")", "//", "public", "StlmntRsltVal", "calculateInterestPartialTermination(ArrReal", "arr,", "String", "crncyCd,", "BigDecimal", "prncplAmt,", "String", "paymentDate,", "String", "cashTrnsfr,", "BigDecimal", "cashTrnsfrAmt,", "boolean", "smltn,", "Integer", "arrTxSeqNbr,", "String", "prtlRpymntAfRpymntDscd,", "Integer", "rpymntCnt)", "throws", "BizApplicationException", "{", "//", "//", "StlmntRsltVal", "stlmntRsltVal", "=", "(StlmntRsltVal)super.calculateInterestPartialTermination((ArrRealCore)", "arr,", "crncyCd,", "prncplAmt,", "paymentDate,", "cashTrnsfr,", "cashTrnsfrAmt,", "smltn,", "arrTxSeqNbr,", "prtlRpymntAfRpymntDscd,", "rpymntCnt);", "//", "//", "return", "stlmntRsltVal;", "//", "}", "//", "/**", "//", "*", "Calculate", "Interest", "&", "process", "repayment", "of", "the", "\"CYCLE", "REPAYMENT...\"", "//", "*", "interest", "&", "principal", "to", "be", "repaid", "until", "a", "date", "2016.04.21", "\uc5ec\uc2e0\uc0c1\ud658", "\uc774\uc790", "\uacc4\uc0b0", "//", "*", "//", "*", "@deprecated", "method", "name", "[calculateInterestEtcRepayment]", "changed", "to", "//", "*", "[calculateInterestRepayment]", "//", "*", "@param", "arr", "//", "*", "-", "(required)arrangement", "interface", "//", "*", "@param", "xtdInfo", "//", "*", "-", "(required)currency", "code", "//", "*", "@return", "StlmntRsltVal", "-", "Settlement", "Result", "Value", "//", "*", "@throws", "BizApplicationException", "//", "*/", "//", "@Deprecated", "//", "public", "StlmntRsltVal", "calculateInterestEtcRepayment(ArrReal", "arr,", "Map<String,", "Object>", "xtdInfo)", "throws", "BizApplicationException", "{", "//", "return", "calculateInterestRepayment(arr,", "xtdInfo);", "//", "}"], "docstring_tokens": ["This", "method", "calculates", "the", "provisional", "interest", "settlement.", "The", "way", "of", "interest", "calculation", "by", "product", "is", "as", "follows.", "1.Demand", "deposit", "product", ":", "calculate", "interest", "on", "the", "same", "plan", "as", "settlement", "case", "2.Installment", "product", ":", "calculate", "maturity", "interest", "for", "each", "deposit", "3.Term", "deposit", "product", ":", "calculate", "maturity", "interest", "on", "the", "deposit"]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "assetTxSubInfoMap,", "AssetTxCore", "assetTx)", "throws", "BizApplicationException", "{", "_getAssetTxSubInfoBiz().saveMapSubInfo(assetTxSubInfoMap,", "(AssetTxImpl)", "assetTx);", "}"], "docstring_tokens": ["Save", "the", "asset", "thing", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "java.lang.String", "getAssetStsCd(){", "return", "assetStsCd;", "}"], "docstring_tokens": ["Inquire", "the", "asset", "status", "code."]}
{"code_tokens": ["public", "String", "getUpAcctgItmNm(CaCoaDtlIO", "in)", "throws", "BizApplicationException", "{", "CaCoaDtlIO", "coaDtlIO", "=", "getCoa(in.getInstCd(),in.getAcctgDscd(),in.getAcctgItmCd());", "if", "(!StringUtils.isEmpty(coaDtlIO.getUpAcctgItmCd())){", "CaAcCoaMIO", "acCoaMIO", "=", "_getAcCoaMDso().select(_getAcCoaMIO(coaDtlIO.getInstCd(),coaDtlIO.getAcctgDscd(),coaDtlIO.getUpAcctgItmCd()));", "if", "(acCoaMIO", "==", "null){", "return", "null;", "}else{", "return", "acCoaMIO.getAcctgTitlAcctgAbrvtnNm();", "}", "}else{", "return", "null;", "}", "}"], "docstring_tokens": ["This", "method", "is", "for", "getting", "upper", "accounting", "item", "name", "of", "accounting", "item", "code."]}
{"code_tokens": ["public", "ArrCndSvcQryIn", "clone(){", "try{", "ArrCndSvcQryIn", "object=", "(ArrCndSvcQryIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AprslCore", "aprslCore,", "Integer", "prfClaimSeqNbr)", "throws", "BizApplicationException", "{", "return", "_getAprslPrfClaimSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AprslImpl)aprslCore,", "prfClaimSeqNbr);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal", "request."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "ActorImpl", "actorImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "subInfo", "=", "getSubInfoCache(actorImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "subInfo.get(atrbtNm);", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["This", "method", "inquires", "settlement", "subsidiary", "detail", "information", "list", "(inquire", "all", "subsidiary", "detail", "information", "of", "a", "given", "settlement", "master", "by", "using", "the", "key", "value", "other", "than", "the", "detail", "sequence", "number)."]}
{"code_tokens": ["public", "Map<AssetXtnInfoEnum,", "String>", "getMapAssetXtnInfo()", "throws", "BizApplicationException", "{", "Map<AssetXtnInfoEnum,", "String>", "xtnInfoHash", "=", "new", "HashMap<AssetXtnInfoEnum,", "String>();", "//", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "Map<String,", "String>", "xtnInfoStrMap", "=", "super.getMapAssetXtnInfoAsStrByEav();", "for(Entry<String,", "String>", "entry", ":", "xtnInfoStrMap.entrySet()){", "xtnInfoHash.put(AssetXtnInfoEnum.getEnum(entry.getKey()),", "entry.getValue());", "}", "//", "\ubcf4\uc870\uba85\uc138", "Map<String,", "String>", "subInfoMap", "=", "_getAssetSubInfoBiz().getMapSubInfo(this);", "for(Entry<String,", "String>", "entry", ":", "subInfoMap.entrySet()){", "xtnInfoHash.put(AssetXtnInfoEnum.getEnum(entry.getKey()),", "entry.getValue());", "}", "return", "xtnInfoHash;", "}"], "docstring_tokens": ["Inquire", "all", "extended", "information", "of", "the", "asset", "as", "a", "map."]}
{"code_tokens": ["public", "String", "getNextRebuildDate(String", "arg0,", "String", "arg1)", "throws", "BizApplicationException", "{", "return", "\"20220215\";", "}"], "docstring_tokens": ["Get", "the", "next", "scheduled", "date", "of", "interest", "rate", "rebuild", "related", "to", "this", "condition."]}
{"code_tokens": ["public", "CustDocOvrvwInqrySvcGetIn", "clone(){", "try{", "CustDocOvrvwInqrySvcGetIn", "object=", "(CustDocOvrvwInqrySvcGetIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "BigDecimal", "getRoleLImitMax(String", "instCd,", "String", "crncyCd,", "List<String>", "roleList)", "throws", "BizApplicationException", "{", "instCd", "=", "StringUtils.isEmpty(instCd)", "?", "_getCmnContext().getInstCode()", ":", "instCd;", "_checkStringValue(crncyCd,", "CCM03.CRNCY_CD);", "if(roleList", "==", "null", "||", "roleList.isEmpty())", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@\".concat(\"roleList\")", "});", "}", "return", "_getCmRoleMDso().selectRoleLimitMax(instCd,", "crncyCd,", "roleList);", "}"], "docstring_tokens": ["It", "inquires", "the", "maximum", "limit", "for", "each", "currency", "in", "the", "role", "list."]}
{"code_tokens": ["public", "List<PdLstCtMOut>", "getListListConditionInfo(String", "instId,", "String", "cndCd)", "throws", "BizApplicationException", "{", "String", "mTntInstId", "=", "_getInstitution().getMotherInstitutionId(instId);", "//", "\uc870\uac74\uae30\ubcf8", "\uc870\ud68c", "CndTmpltIn", "inCnd", "=", "new", "CndTmpltIn();", "inCnd.setInstCd(instId);", "inCnd.setCndCd(cndCd);", "CndTmpltOut", "cndTmpltOut", "=", "this.getCndTmpltInfo(inCnd);", "if", "(cndTmpltOut", "==", "null)", "{", "return", "new", "ArrayList<PdLstCtMOut>();", "}", "List<PdLstCtMIO>", "outIOList", "=", "new", "ArrayList<PdLstCtMIO>();", "//", "listRefTpCd", "null\uc774\uba74", "\ubaa9\ub85d\ucf54\ub4dc\ub85c", "\ubcf8\ub2e4.", "if", "(StringCoreUtils.isEmpty(cndTmpltOut.getListRefTpCd())", "||", "ListReferenceTypeCoreEnum.LIST_CD.getValue().equals(cndTmpltOut.getListRefTpCd()))", "{", "/**", "*", "DataCache", "START", "*/", "//", "Make", "unique", "key", "String", "uKey", "=", "PdUtil.concatenateKeys(Arrays.asList(mTntInstId,", "cndCd));", "//", "\ubaa9\ub85d\uc870\uac74\uc815\ubcf4", "\ubaa9\ub85d\uc870\ud68c", "//", "Get", "cache", "data", "outIOList", "=", "_getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_LIST_CND_LIST_CACHE,", "uKey);", "if", "(outIOList", "==", "null)", "{", "//", "\ubaa9\ub85d\uc870\uac74\uc815\ubcf4", "\ubaa9\ub85d\uc870\ud68c", "outIOList", "=", "_convertToPdLstCtMOutList(_getTemplate().getListListCndTemplateBase(instId,", "cndCd));", "//", "Put", "cache", "data", "_getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_LIST_CND_LIST_CACHE,", "uKey,", "outIOList);", "}", "/**", "*", "DataCache", "END", "*/", "}", "else", "if", "(ListReferenceTypeCoreEnum.CMN_CD.getValue().equals(cndTmpltOut.getListRefTpCd()))", "{", "List<CmnCdCheckOut>", "cmnCdList", "=", "_getCd().getListCode(cndTmpltOut.getRefTrgtNm());", "if", "(!CollectionCoreUtils.isEmpty(cmnCdList))", "{", "for", "(CmnCdCheckOut", "cmnCd", ":", "cmnCdList)", "{", "PdLstCtMIO", "outIO", "=", "new", "PdLstCtMIO();", "outIO.setListCd(cmnCd.getCd());", "outIO.setListCdNm(cmnCd.getCdNm());", "outIO.setActvYn(CPD01.YES);", "outIOList.add(outIO);", "}", "}", "}", "//", "Return", "output", "return", "_setOutput4GettListConditionInfoList(outIOList,", "mTntInstId,", "cndCd);", "}"], "docstring_tokens": ["Methods", "for", "querying", "list", "condition", "information", "(List", "by", "institution)"]}
{"code_tokens": ["public", "PdCalculationJudgmentCndDetailInqryListCdSvcOut", "clone(){", "try{", "PdCalculationJudgmentCndDetailInqryListCdSvcOut", "object=", "(PdCalculationJudgmentCndDetailInqryListCdSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isArrKindStandingOrder()", "{", "return", "super.getArrKindCd().equals(ArrKndEnum.STANDING_ORDER.getValue());", "}"], "docstring_tokens": ["Check", "if", "kind", "of", "arrangement", "is", "\"Standing", "order\"", "arrangement."]}
{"code_tokens": ["public", "List<AssetCore>", "getListAssetCore(String", "assetCustRelCd,", "String", "custId,", "String", "actvStsCd)", "throws", "BizApplicationException", "{", "List<AssetCore>", "assetList", "=", "new", "ArrayList<AssetCore>();", "List<String>", "assetIdList", "=", "new", "ArrayList<String>();", "switch", "(AssetCustRelCoreEnum.getEnum(assetCustRelCd))", "{", "case", "DEBTOR", ":", "assetIdList", "=", "_getAssetBasicBiz().getListAssetByDebtorId(custId,", "actvStsCd);", "break;", "case", "OWNER", ":", "assetIdList", "=", "_getAssetBasicBiz().getListAssetByOwnerId(custId,", "actvStsCd);", "break;", "case", "ISSUER", ":", "assetIdList", "=", "_getAssetBasicBiz().getListAssetByIssuerId(custId,", "actvStsCd);", "break;", "default:", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@assetCustRelCd\"});", "}", "for(String", "assetId", ":", "assetIdList){", "AssetCore", "asset", "=", "getAssetCore(assetId);", "assetList.add(asset);", "}", "return", "assetList;", "}"], "docstring_tokens": ["It", "is", "inquires", "asset", "object", "with", "customer", "identification", "and", "status,", "and", "asset", "customer", "relationship."]}
{"code_tokens": ["public", "int", "delete(CaDcDocRefAtrbtMIO", "dcDocRefAtrbtMIO)", "{", "return", "_getDcDocRefAtrbtM().delete(dcDocRefAtrbtMIO);", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(ArrSyncKndEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "List<ArrPlanIO>", "getArrPlans(String", "arrSrvcCd,String", "exctnPlnDt,String", "arrPlnStsCd,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "//", "\uacc4\uc57d", "\uacc4\ud68d", "\uc8fc\uc81c\uc601\uc5ed", "\ubbf8\uc0ac\uc6a9", "\uc2dc", "skip", "if", "(!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.PLAN))", "{", "return", "new", "ArrayList<ArrPlanIO>();", "}", "_checkInput(arrSrvcCd,exctnPlnDt,arrReal);", "List<ArrPlanIO>", "arrPlanIOList", "=", "new", "ArrayList<ArrPlanIO>();", "for", "(ArArrPlnMIO", "arArrPlnMIO", ":_selectListPlan(arrSrvcCd,", "exctnPlnDt,", "arrPlnStsCd,", "arrReal))", "{", "arrPlanIOList.add(_buildArrPlanIO(arArrPlnMIO));", "}", "return", "arrPlanIOList;", "}"], "docstring_tokens": ["Inquire", "arrangement", "active", "plans", "on", "specified", "date", "with", "arrangement", "service", "type", "code", "It", "inquire", "that", "only", "the", "status", "is", "'Active'."]}
{"code_tokens": ["public", "String", "getPntStsCd()", "{", "return", "pdPdM.getPdStsCd();", "}"], "docstring_tokens": ["This", "Method", "inquire", "point", "status", "code"]}
{"code_tokens": ["public", "List<CaInstSrvcIO>", "getListInstService(String", "instCd,", "String", "cmpntCd,", "String", "baseDt)", "throws", "BizApplicationException", "{", "String", "sInstCd", "=", "instCd;", "if", "(StringUtils.isEmpty(instCd))", "sInstCd", "=", "_getCaCmnContext().getInstCode();", "List<CaSvInstSrvcMIO>", "svInstSrvcMIOList;", "List<CaInstSrvcIO>", "instSrvcList", "=", "new", "ArrayList<CaInstSrvcIO>();", "if", "(baseDt", "==", "null)", "baseDt", "=", "CCM01.MIN_DATE;", "if", "(StringUtils.isEmpty(cmpntCd))", "{", "svInstSrvcMIOList", "=", "_getSvInstSrvcMDso().selectListByInstCdAndBaseDt(sInstCd,", "baseDt);", "}", "else", "{", "CaSvInstSrvcMIO", "svInstSrvcMIO", "=", "new", "CaSvInstSrvcMIO();", "svInstSrvcMIO.setInstCd(sInstCd);", "svInstSrvcMIO.setCmpntCd(cmpntCd);", "svInstSrvcMIO.setAplyStartDt(baseDt);", "svInstSrvcMIOList", "=", "_getSvInstSrvcMDso().selectListByCmpntCd(svInstSrvcMIO);", "}", "for", "(CaSvInstSrvcMIO", "svInstSrvcMIO", ":", "svInstSrvcMIOList)", "{", "CaInstSrvcIO", "instSrvc", "=", "_setInstitutionService(svInstSrvcMIO);", "instSrvcList.add(instSrvc);", "}", "return", "instSrvcList;", "}"], "docstring_tokens": ["inquiry", "institution", "service", "list", "by", "institution", "code", "and", "component", "code", "basic", "method", "reference", ":", "{@link", "#getListInstService(String,", "String,", "String)}"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "ArrIssmdaCore", "arrIssmda,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getArrIssmdaSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(ArrIssmdaImpl)", "arrIssmda,", "txDt,", "txSeqNbr);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "interface", "VO."]}
{"code_tokens": ["public", "LnIntSmltnSvcCndValListIn", "clone(){", "try{", "LnIntSmltnSvcCndValListIn", "object=", "(LnIntSmltnSvcCndValListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "java.lang.String", "getArrLastAgrmntHms(){", "return", "arrLastAgrmntHms;", "}"], "docstring_tokens": ["Inquire", "the", "time", "when", "the", "arrangement", "agreed", "for", "the", "last."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "StStlmntCalcnSIO", "stStlmntCalcnSIOIn)", "{", "logger.debug(\"##<ST-StlmntCalcnSubInfoBiz>", "saveMapSubInfo\");", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.create", "a", "new", "instance", "of", "I/F", "VO", "//IValueObject", "subInfoIfVo", "=", "new", "StlmntCalcnSubInfo();", "//", "2.create", "a", "new", "instance", "of", "DBIO", "VO", "StStlmntCalcnSIO", "stStlmntCalcnSIO", "=", "new", "StStlmntCalcnSIO();", "//", "3.set", "primary", "key", "_setKey(stStlmntCalcnSIO,", "stStlmntCalcnSIOIn);", "//", "4.convert", "map", "to", "DBIO", "VO", "DtoUtils.setSubInfoIO(subInfoMap,", "stStlmntCalcnSIO);", "//", "5.insert", "subsidiary", "detail", "_insertSubInfo(stStlmntCalcnSIO);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "preferential", "claim", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "CaCrdtrtgMgmtSvcGetCrdtrtg", "clone(){", "try{", "CaCrdtrtgMgmtSvcGetCrdtrtg", "object=", "(CaCrdtrtgMgmtSvcGetCrdtrtg)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<InterestCalculationSection>", "apply(ApplyInterestCalculationSectionExceptionIn", "in,", "List<InterestCalculationSection>", "intCalIntervals)", "throws", "BizApplicationException", "{", "String", "partialRepymntTxDt", "=", "in.getPartialRepymntTxDt();", "//", "\uc77c\ubd80\uc0c1\ud658\uac70\ub798\uc77c", "BigDecimal", "partialRepymntTotalPrncpl", "=", "in.getPartialRepymntTotalPrncpl();", "//", "\uc77c\ubd80\uc0c1\ud658", "\uc6d0\uae08", "\ud569\uacc4", "//", "\uc2e0\uaddc", "\uacc4\uc0b0\uad6c\uac04", "(\ud68c\ubd84\uacc4\uc0b0\uad6c\ubd84", "=", "4-\uc77c\ubd80\uc0c1\ud658", "\ubbf8\uc218\uc774\uc790", "\uc815\ub9ac)", "InterestCalculationSection", "interval", "=", "new", "InterestCalculationSection();", "interval.setPymntNth(in.getDesiredPymntNth());", "interval.setNthCalTgtDscd(NthCalculationTargetDscdEnum.PARTIAL_REPAYMENT_NOT_LEVY_INTEREST.getCode());", "//", "\uacc4\uc0b0\uc720\ud615", "\ucd94\uac00", "173-\uc77c\ubd80\uc0c1\ud658\ubbf8\uc218\uc774\uc790,", "\ucd5c\uc885\uc774\uc218\uc77c", "~", "\uc77c\ubd80\uc0c1\ud658\uac70\ub798\uc77c,", "\uc77c\ubd80\uc0c1\ud658\uc6d0\uae08\ud569\uacc4", "CalculationType", "type", "=", "new", "CalculationType();", "type.setInstCd(in.getInstCd());", "type.setIntCalTpCd(\"173\");", "type.setCalTgtAmt(partialRepymntTotalPrncpl);", "type.setCalStartDt(in.getLastPymntDt());", "type.setCalEndDt(partialRepymntTxDt);", "type.setCalBaseTrmCnt(365);", "type.setIntCalTgt(false);", "interval.setCalTps(Arrays.asList(new", "CalculationType[]", "{", "type", "}));", "//", "\uacc4\uc0b0\uad6c\uac04", "\uac00\uc7a5", "\uc55e\uc5d0", "\ucd94\uac00", "intCalIntervals.add(0,", "interval);", "return", "intCalIntervals;", "}"], "docstring_tokens": ["This", "method", "Applies", "the", "initiated", "arrangement,", "and", "change", "the", "arrangement", "status", "to", "applied."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(StaffCore", "staffCore)", "throws", "BizApplicationException", "{", "return", "_getStaffSubInfoBiz().getMapSubInfo((StaffImpl)staffCore);", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "Subsidiary", "Information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["public", "List<SvCntrlCntrBrnchDIO>", "selectList(String", "instCd,", "String", "cntrlCntrId,", "String", "txDt)", "{", "return", "_getSvCntrlCntrBrnchD().selectList(instCd,", "cntrlCntrId,", "txDt);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "validate()", "throws", "BizApplicationException", "{", "//", "\ud574\ub2f9", "\uba54\uc18c\ub4dc\ub294", "({0})", "\ud074\ub798\uc2a4\uc758", "\uc778\uc2a4\ud134\uc2a4\ub85c", "\uc0ac\uc6a9\ud560", "\uc218", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\uacc4\uc57d\ub2f4\ub2f9\uc790\uc5d0\uac8c", "\ubb38\uc758\ubc14\ub78d\ub2c8\ub2e4.", "//", "This", "method", "cannot", "be", "used", "by", "instance", "of", "({0})", "class.", "throw", "new", "BizApplicationException(\"AAPARE0678\",new", "Object[]{this.getClass().getName()});", "}"], "docstring_tokens": ["It", "performs", "common", "service", "processing", "rules", "defined", "in", "the", "service", "processing", "rules", "and", "whether", "the", "contract-based", "service", "is", "available,", "based", "on", "the", "service", "type", "input.", "Whether", "contract", "services", "are", "available", "verifies:", "1)", "Verification", "of", "service", "restriction", "based", "on", "product", "information", "of", "contract.", "2)", "Verification", "of", "restriction", "related", "to", "the", "service", "set", "in", "the", "contract", "such", "as", "pledge", "setting.", "3)", "Perform", "verification", "rules", "that", "should", "be", "performed", "in", "common", "as", "the", "requirement", "that", "dead", "customers", "should", "not", "become", "financial", "transactions."]}
{"code_tokens": ["public", "List<CustCrtfctAplctnIO>", "getListCertificateApplicationFromTo(CustCrtfctAplctnInqryIn", "custCrtfctAplctnInqryIn)", "throws", "BizApplicationException", "{", "if", "(custCrtfctAplctnInqryIn", "==", "null)", "{", "return", "null;", "}", "//check", "required", "inputs", "if", "(StringUtils.isEmpty(custCrtfctAplctnInqryIn.getInqryStartDt()))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@inqryStartDt\"});", "}", "else", "if", "(StringUtils.isEmpty(custCrtfctAplctnInqryIn.getInqryEndDt()))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@inqryEndDt\"});", "}", "return", "_getCustCrtfctAplctnXtn().getListCertificateApplication(custCrtfctAplctnInqryIn);", "}"], "docstring_tokens": ["Inquire", "customer", "certificate", "application", "information", "list", "between", "inquiry", "start", "and", "end", "date."]}
{"code_tokens": ["public", "void", "modifyExtrnlInstMsgMetaInfo(CaExtrnlIntrfcMsgMgmtIn", "in)", "throws", "BizApplicationException", "{", "/**", "*", "check", "required", "items", "*/", "_checkParam(in);", "/**", "*", "\uc218\uc815\ud558\ub824\ub294", "\ub9e4\ud0c0\uc815\ubcf4\uac00", "\uc874\uc7ac\ud558\ub294", "\uc9c0", "\uac80\uc99d", "*/", "CaXpExtrnlIntrfcMsgMIO", "xpExtrnlIntrfcMsgMIO", "=", "_getXpExtrnlMsgMDso().select(_setSelectIn(in));", "if(xpExtrnlIntrfcMsgMIO", "==", "null)", "{", "throw", "new", "BizApplicationException(\"CAPXPE0010\");", "}", "CaXpExtrnlMsgMIn", "xpExtrnlIntrfcMsgMIn", "=", "new", "CaXpExtrnlMsgMIn();", "_getCaCmnContext().setColumn(xpExtrnlIntrfcMsgMIn);", "xpExtrnlIntrfcMsgMIn.setInstCd(xpExtrnlIntrfcMsgMIO.getInstCd());", "xpExtrnlIntrfcMsgMIn.setExtrnlInstCd(xpExtrnlIntrfcMsgMIO.getExtrnlInstCd());", "xpExtrnlIntrfcMsgMIn.setExtrnlInstTxDscd(xpExtrnlIntrfcMsgMIO.getExtrnlInstTxDscd());", "/**", "*", "set", "modifiable", "items", "*/", "xpExtrnlIntrfcMsgMIn.setExtrnlMsgFormatDscd(in.getExtrnlMsgFormatDscd());//", "set", "[\ub300\uc678\uc804\ubb38\ud615\uc2dd\uad6c\ubd84\ucf54\ub4dc]", "xpExtrnlIntrfcMsgMIn.setBizSrvcCd(in.getBizSrvcCd());//", "set", "[\uc5c5\ubb34\uc11c\ube44\uc2a4\ucf54\ub4dc]", "xpExtrnlIntrfcMsgMIn.setRsltRcvSrvcCd(in.getRsltRcvSrvcCd());//", "set", "[\uacb0\uacfc\uc218\uc2e0\uc11c\ube44\uc2a4\ucf54\ub4dc]", "xpExtrnlIntrfcMsgMIn.setSysIntrfcId(in.getSysIntrfcId());//", "set", "[\uc2dc\uc2a4\ud15c\uc778\ud130\ud398\uc774\uc2a4\uc2dd\ubcc4\uc790]", "xpExtrnlIntrfcMsgMIn.setExtrnlIntrfcMthdDscd(in.getExtrnlIntrfcMthdDscd());//", "set", "[\ub300\uc678\uc778\ud130\ud398\uc774\uc2a4\ubc29\uc2dd\uad6c\ubd84\ucf54\ub4dc]", "xpExtrnlIntrfcMsgMIn.setExtrnlIntrfcCallWayDscd(in.getExtrnlIntrfcCallWayDscd());//", "set", "[\ub300\uc678\uc778\ud130\ud398\uc774\uc2a4\ud638\ucd9c\ubc29\ubc95\uad6c\ubd84\ucf54\ub4dc]", "xpExtrnlIntrfcMsgMIn.setExtrnlIntrfcAuthWayDscd(in.getExtrnlIntrfcAuthWayDscd());//", "set", "[\ub300\uc678\uc778\ud130\ud398\uc774\uc2a4\uc778\uc99d\ubc29\ubc95\uad6c\ubd84\ucf54\ub4dc]", "xpExtrnlIntrfcMsgMIn.setExtrnlIntrfcMsgMthdDscd(in.getExtrnlIntrfcMsgMthdDscd());//", "set", "[\ub300\uc678\uc778\ud130\ud398\uc774\uc2a4\uc804\ubb38\ubc29\uc2dd\uad6c\ubd84\ucf54\ub4dc]", "//xpExtrnlIntrfcMsgMIO.setExtrnlInstUrlVal(in.getExtrnlInstUrlVal());//", "set", "[\ub300\uc678\uae30\uad00URL\uac12]", "xpExtrnlIntrfcMsgMIn.setDvlpSrvrExtrnlInstUrlVal(in.getDvlpSrvrExtrnlInstUrlVal());", "xpExtrnlIntrfcMsgMIn.setTstSrvrExtrnlInstUrlVal(in.getTstSrvrExtrnlInstUrlVal());", "xpExtrnlIntrfcMsgMIn.setOprtnSrvrExtrnlInstUrlVal(in.getOprtnSrvrExtrnlInstUrlVal());", "xpExtrnlIntrfcMsgMIn.setExtrnlInstUrlPrfxVal(in.getExtrnlInstUrlPrfxVal());//", "set", "[\ub300\uc678\uae30\uad00URL\uc811\ub450\uc0ac\uac12]", "xpExtrnlIntrfcMsgMIn.setUrlParmNmDscd(in.getUrlParmNmDscd());//", "set", "[URL\ud30c\ub77c\ubbf8\ud130\uba85\uad6c\ubd84\ucf54\ub4dc]", "xpExtrnlIntrfcMsgMIn.setParmNm(in.getParmNm());//", "set", "[\ud30c\ub77c\ubbf8\ud130\uba85]", "xpExtrnlIntrfcMsgMIn.setExtrnlInstUrlSuffixVal(in.getExtrnlInstUrlSuffixVal());//", "set", "[\ub300\uc678\uae30\uad00URL\uc811\ubbf8\uc0ac\uac12]", "xpExtrnlIntrfcMsgMIn.setAdtnlParmNm(in.getAdtnlParmNm());//", "set", "[\ucd94\uac00\ud30c\ub77c\ubbf8\ud130\uba85]", "xpExtrnlIntrfcMsgMIn.setTimeoutScnd(in.getTimeoutScnd());//", "set", "[\ud0c0\uc784\uc544\uc6c3\ucd08]", "xpExtrnlIntrfcMsgMIn.setInpDtoNm(in.getInpDtoNm());//", "set", "[\uc785\ub825DTO\uba85]", "xpExtrnlIntrfcMsgMIn.setOutpDtoNm(in.getOutpDtoNm());//", "set", "[\ucd9c\ub825DTO\uba85]", "xpExtrnlIntrfcMsgMIn.setRelRmkCntnt(in.getRelRmkCntnt());//", "set", "[\uad00\ub828\ube44\uace0\ub0b4\uc6a9]", "_getXpExtrnlMsgMDso().update(xpExtrnlIntrfcMsgMIn);", "}", "/*", "(non-Javadoc)", "*", "@see", "bankware.corebanking.externalproxy.extrnlInstInfo.business.ExtrnlIntrfcMsgMgmt#delete(bankware.corebanking.externalproxy.extrnlInstInfo.dao.dto.CaXpExtrnlIntrfcMsgMIO)", "*/", "//", "@Override", "//", "public", "int", "delete(CaExtrnlIntrfcMsgMgmtIn", "in)", "{", "//", "//", "CaXpExtrnlIntrfcMsgMIO", "xpExtrnlIntrfcMsgMIO", "=", "new", "CaXpExtrnlIntrfcMsgMIO();", "//", "int", "out;", "//", "//", "//", "Generated", "by", "code", "generator", "[[", "//", "xpExtrnlIntrfcMsgMIO.setInstCd(in.getInstCd());//", "set", "[\uae30\uad00\ucf54\ub4dc]", "//", "xpExtrnlIntrfcMsgMIO.setExtrnlInstCd(in.getExtrnlInstCd());//", "set", "[\ub300\uc678\uae30\uad00\ucf54\ub4dc]", "//", "xpExtrnlIntrfcMsgMIO.setExtrnlInstTxDscd(in.getExtrnlInstTxDscd());//", "set", "[\ub300\uc678\uae30\uad00\uac70\ub798\uad6c\ubd84\ucf54\ub4dc]", "//", "xpExtrnlIntrfcMsgMIO.setExtrnlMsgFormatDscd(in.getExtrnlMsgFormatDscd());//", "set", "[\ub300\uc678\uc804\ubb38\ud615\uc2dd\uad6c\ubd84\ucf54\ub4dc]", "//", "//", "Generated", "by", "code", "generator", "]]", "//", "//", "out", "=", "_getXpExtrnlIntrfcMsgMDso().delete(xpExtrnlIntrfcMsgMIO);", "//", "//", "return", "out;", "//", "}"], "docstring_tokens": ["It", "modifies", "information", "about", "communication", "registered."]}
{"code_tokens": ["public", "boolean", "check(String", "vldnTrgt)", "throws", "BizApplicationException", "{", "return", "Pattern.matches(\"^[a-zA-Z0-9\\\\@\\\\.]*$\",", "vldnTrgt);", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Simple", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "ArrTxCore", "arrTx)", "{", "return", "_getArrTxSubInfoBiz().getSubInfo(xtnAtrbtNm,(ArrTxImpl)arrTx);", "}"], "docstring_tokens": ["Get", "a", "extended", "information", "of", "Subsidiary", "Information(CTI)"]}
{"code_tokens": ["public", "CustTotalInqrySvcGetCustOvrvwOut", "clone(){", "try{", "CustTotalInqrySvcGetCustOvrvwOut", "object=", "(CustTotalInqrySvcGetCustOvrvwOut)super.clone();", "if", "(", "this.xtnInfoList==", "null", ")", "object.xtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustXtnInfoOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustXtnInfoOut>(xtnInfoList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustXtnInfoOut", "item", ":", "xtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustXtnInfoOut)item.clone());", "}", "object.xtnInfoList", "=", "clonedList;", "}", "if", "(", "this.ctcptList==", "null", ")", "object.ctcptList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustCntctPntOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustCntctPntOut>(ctcptList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustCntctPntOut", "item", ":", "ctcptList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustCntctPntOut)item.clone());", "}", "object.ctcptList", "=", "clonedList;", "}", "if", "(", "this.unqNbrList==", "null", ")", "object.unqNbrList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustUnqIdNbrOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustUnqIdNbrOut>(unqNbrList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustUnqIdNbrOut", "item", ":", "unqNbrList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustUnqIdNbrOut)item.clone());", "}", "object.unqNbrList", "=", "clonedList;", "}", "if", "(", "this.actorNmList==", "null", ")", "object.actorNmList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustNameInfoOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustNameInfoOut>(actorNmList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustNameInfoOut", "item", ":", "actorNmList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustNameInfoOut)item.clone());", "}", "object.actorNmList", "=", "clonedList;", "}", "if", "(", "this.actorRelList==", "null", ")", "object.actorRelList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustRelInfoOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustRelInfoOut>(actorRelList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustRelInfoOut", "item", ":", "actorRelList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustRelInfoOut)item.clone());", "}", "object.actorRelList", "=", "clonedList;", "}", "if", "(", "this.addrList==", "null", ")", "object.addrList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetAddrOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetAddrOut>(addrList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetAddrOut", "item", ":", "addrList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetAddrOut)item.clone());", "}", "object.addrList", "=", "clonedList;", "}", "if", "(", "this.telNbrList==", "null", ")", "object.telNbrList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetTelNbrOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetTelNbrOut>(telNbrList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetTelNbrOut", "item", ":", "telNbrList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetTelNbrOut)item.clone());", "}", "object.telNbrList", "=", "clonedList;", "}", "if", "(", "this.elctrncAddrList==", "null", ")", "object.elctrncAddrList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetElctrncAddrOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetElctrncAddrOut>(elctrncAddrList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetElctrncAddrOut", "item", ":", "elctrncAddrList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetElctrncAddrOut)item.clone());", "}", "object.elctrncAddrList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "PdBaseIntRtInqrySvcBaseRt", "clone(){", "try{", "PdBaseIntRtInqrySvcBaseRt", "object=", "(PdBaseIntRtInqrySvcBaseRt)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(ActorImpl", "actorImpl,", "String", "ctcptId,", "Integer", "ctcptChngSeqNbr,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "//", "**", "\uc5f0\ub77d\ucc98", "\ubcf4\uc870\uba85\uc138\ub294", "\ubcc0\uacbd\uc774\ub825\uc744", "\uad00\ub9ac\ud558\uc9c0", "\uc54a\ub294\ub2e4.", "AtActorCtcptSIO", "subInfoIO", "=", "getSubInfoCache(actorImpl,", "ctcptId,", "ctcptChngSeqNbr);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtActorCtcptSIO();", "subInfoIO.setActorId(actorImpl.getActorId());", "subInfoIO.setActorCtcptId(ctcptId);", "subInfoIO.setActorCtcptChngSeqNbr(ctcptChngSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85\uacfc", "\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "insert", "_getAtActorCtcptSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "update", "_getAtActorCtcptSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoIO,", "actorImpl,", "ctcptId,", "ctcptChngSeqNbr);", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "delete(CaArArrSrvcBlckngRgstPIO", "CaArArrSrvcBlckngRgstPIO)", "{", "_getArArrSrvcBlckngRgstP().delete(CaArArrSrvcBlckngRgstPIO);", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "void", "modifyCndValue(String", "baseDt,", "String", "cndVal,", "String", "txDt,", "int", "txSeqNbr)", "throws", "BizApplicationException", "{", "_isInstallmentDateChange();", "_changePlan();", "}"], "docstring_tokens": ["Change", "arrangement", "condition", "value", "1)Change", "arrangement", "level", "condition", "value", "2)If", "it", "is", "not", "registered,", "create", "new", "condition", "value", "3)If", "is", "is", "interest", "condition", "change", "also", "change", "interest", "related", "tables", "4)If", "it", "is", "same", "with", "before", "condition", "value", "and", "after", "condition", "value", "then", "exception"]}
{"code_tokens": ["public", "Integer", "getFrctnAplyCnt()", "throws", "BizApplicationException{", "if", "(isComplexAndTierIsNotDecided())", "{", "return", "null;", "}", "if", "(isComplex())", "{", "return", "_getCmpxIntCndValSub1().getFrctnAplyCnt();", "}", "return", "_getSmplIntCndVal().getFrctnAplyCnt();", "}"], "docstring_tokens": ["This", "method", "inquire", "product", "interest", "rate", "structure", "Fraction", "Apply", "Count"]}
{"code_tokens": ["public", "CaSrvcBlckngInfoMgmtSvcGetSrvcBlckngInfoIn", "clone(){", "try{", "CaSrvcBlckngInfoMgmtSvcGetSrvcBlckngInfoIn", "object=", "(CaSrvcBlckngInfoMgmtSvcGetSrvcBlckngInfoIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AsmCore", "asm){", "return", "_getAsmSubInfoBiz().getMapSubInfo((AsmImpl)asm);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "thing", "as", "a", "map."]}
{"code_tokens": ["public", "boolean", "isExtendAttribute()", "{", "return", "stdDtoClassAtrbt.isXtnAtrbtYn();", "}"], "docstring_tokens": ["Check", "whether", "extend", "attribute"]}
{"code_tokens": ["public", "String", "getSubInfo(ActorImpl", "actorImpl,", "String", "ctcptId,", "Integer", "ctcptChngSeqNbr,", "String", "atrbtNm)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtActorCtcptSIO", "subInfo", "=", "getSubInfoCache(actorImpl,", "ctcptId,", "ctcptChngSeqNbr);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "subInfo.get(atrbtNm);", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal."]}
{"code_tokens": ["public", "List<CaClTreeIO>", "getListClassification(CaClTreeIO", "in)", "throws", "BizApplicationException", "{", "List<CaClTreeIO>", "out", "=", "new", "ArrayList<CaClTreeIO>();", "CaCmClTreeDIO", "inDao", "=", "_getInputClassification(in);", "inDao.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue());", "List<CaCmClTreeDIO>", "daoOtList", "=", "_getCmClTreeDDso().selectList(inDao);", "for", "(CaCmClTreeDIO", "daoOut", ":", "daoOtList)", "{", "CaClTreeIO", "sub", "=", "_getOutputClassificationTree(daoOut);", "out.add(sub);", "}", "return", "out;", "}"], "docstring_tokens": ["It", "inquiries", "classification", "tree."]}
{"code_tokens": ["public", "String", "getTransferLanguage(String", "trnsfrKnd,", "String", "trnsfrKeyVal,", "String", "lngCd)", "throws", "BizApplicationException", "{", "if(StringCoreUtils.isEmpty(trnsfrKnd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@trnsfrKnd\"", "});", "}", "if(StringCoreUtils.isEmpty(trnsfrKeyVal))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@trnsfrKeyVal\"", "});", "}", "if(StringCoreUtils.isEmpty(lngCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@lngCd\"", "});", "}", "return", "_getCmMltLngTrnsltnDDso().getTransferLanguage(trnsfrKnd,", "trnsfrKeyVal,", "lngCd);", "}"], "docstring_tokens": ["Offering", "terminology", "that", "fit", "with", "the", "language", "code.", "basic", "method", "reference", ":", "{@link", "#getTransferLanguage(String,", "String,", "String)}"]}
{"code_tokens": ["public", "boolean", "isTerminated()", "{", "return", "this.arrGrpStsCd.equals(ArrGrpStsCoreEnum.TERMINATED.getValue());", "}"], "docstring_tokens": ["Check", "if", "the", "status", "of", "arrangement", "activity", "is", "\"Terminated\"."]}
{"code_tokens": ["public", "String", "getNumbering(String", "nbrgAtrbtNm,Map<String,", "Object>", "inpParmMap)", "throws", "BizApplicationException", "{", "return", "getNumbering(_getCmnContext().getInstCode(),", "nbrgAtrbtNm,", "inpParmMap,", "false);", "}"], "docstring_tokens": ["It", "calculates", "next", "number.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'instCd'", "value", "is", "replaced", "by", "instCd", "in", "Common", "Context.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'isReUseSameTxNbrg'", "value", "is", "replaced", "by", "false.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'inpParmMap'", "value", "is", "replaced", "by", "null."]}
{"code_tokens": ["public", "CustCheckPwdOut", "login(String", "loinIdNbr,", "String", "pswd,", "String", "loinTpCd)", "throws", "BizApplicationException,", "ParseException", "{", "//check", "required", "inputs", "if", "(StringUtils.isEmpty(pswd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@pswd\"});", "}", "//check", "input", "code", "_getCd().validateCode(ActorBaseCdNbrCoreEnum.LOIN_TP_CD.getValue(),", "loinTpCd);", "if", "(StringUtils.isEmpty(loinIdNbr))", "{", "return", "_getCustLoinInfoBiz().login(this,", "getCustLoinInfoCache(getLoginIdNbr()),", "pswd,", "loinTpCd);", "}", "else", "{", "return", "_getCustLoinInfoBiz().login(this,", "getCustLoinInfoCache(loinIdNbr),", "pswd,", "loinTpCd);", "}", "}"], "docstring_tokens": ["It", "executes", "login", "process", "of", "the", "customer", "related", "person", "by", "the", "main", "login", "identification", "number.", "It", "considers", "password", "error", "count,", "error", "allowance", "count", "exceeded", "YN,", "lock", "time", "and", "password", "update", "cycle.", "It", "leaves", "login", "attempt", "history.", "Exception", "must", "be", "handled", "separately", "at", "the", "service", "level", "according", "to", "the", "login", "result."]}
{"code_tokens": ["public", "PrtnrshpArrOpnSvcArrIn", "clone(){", "try{", "PrtnrshpArrOpnSvcArrIn", "object=", "(PrtnrshpArrOpnSvcArrIn)super.clone();", "if", "(", "this.cndList==", "null", ")", "object.cndList", "=", "null;", "else{", "java.util.List<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrCndIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrCndIn>(cndList.size());", "for(", "bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrCndIn", "item", ":", "cndList", "){", "clonedList.add(", "(bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrCndIn)item.clone());", "}", "object.cndList", "=", "clonedList;", "}", "if", "(", "this.xtnList==", "null", ")", "object.xtnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrXtnIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrXtnIn>(xtnList.size());", "for(", "bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrXtnIn", "item", ":", "xtnList", "){", "clonedList.add(", "(bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrXtnIn)item.clone());", "}", "object.xtnList", "=", "clonedList;", "}", "if", "(", "this.relList==", "null", ")", "object.relList", "=", "null;", "else{", "java.util.List<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrRelIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrRelIn>(relList.size());", "for(", "bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrRelIn", "item", ":", "relList", "){", "clonedList.add(", "(bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrRelIn)item.clone());", "}", "object.relList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "java.math.BigDecimal", "getLastBal(){", "return", "lastBal;", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "last", "balance."]}
{"code_tokens": ["public", "boolean", "isCancelled()", "{", "return", "this.getArrSts().equals(ArrStsEnum.CANCELED);", "}"], "docstring_tokens": ["Check", "if", "arrangement", "group", "is", "in", "\"Canceled\"", "status."]}
{"code_tokens": ["public", "AcManualEntryTxDIO", "select(AcManualEntryTxDIO", "acManualEntryTxDIO)", "{", "acManualEntryTxD", "=", "(AcManualEntryTxD)", "CbbApplicationContext.getBean(AcManualEntryTxD.class,", "acManualEntryTxD);", "return", "acManualEntryTxD.select(acManualEntryTxDIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "LnAgrmntOpenCcutTrgtIO", "clone(){", "try{", "LnAgrmntOpenCcutTrgtIO", "object=", "(LnAgrmntOpenCcutTrgtIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Pd", "getPd(String", "instCd,String", "arrCrtnDt,String", "arrCrtnTm,", "String", "pdCd)", "throws", "BizApplicationException", "{", "PdIn", "pdIn", "=", "new", "PdIn();", "pdIn.setInstCd(instCd);", "//", "Product", "Code", "pdIn.setPdCd(pdCd);", "//", "Product", "Code", "pdIn.setAplyDt(arrCrtnDt);", "//", "Apply", "Date", "pdIn.setAplyTm(arrCrtnTm);", "//", "Product", "Code", "Pd", "pd", "=", "_getPdMngr().getPd(pdIn);", "if", "(pd", "==", "null", "||", "!pd.isAvailable()", ")", "{", "throw", "new", "BizApplicationException(\"AAPARE0000\",", "new", "Object[]{instCd+\":\"+pdCd+\":\"+arrCrtnDt+\":\"+arrCrtnTm});", "}", "return", "pd;", "}"], "docstring_tokens": ["Methods", "to", "create", "a", "product", "object", "Product", "information", "initialization.", "Use", "inputed", "product", "code,", "apply", "date", "to", "create", "a", "product", "object", "and", "return", "it", "if", "the", "product", "does", "not", "exist,", "return", "null"]}
{"code_tokens": ["public", "TlrClsMgmtSvcSaveTlrClsIn", "clone(){", "try{", "TlrClsMgmtSvcSaveTlrClsIn", "object=", "(TlrClsMgmtSvcSaveTlrClsIn)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.BillCtgryCashMgmtSvcBillCtgryIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.BillCtgryCashMgmtSvcBillCtgryIn>(tblNm.size());", "for(", "bankware.corebanking.accounting.cashaccounting.service.dto.BillCtgryCashMgmtSvcBillCtgryIn", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.cashaccounting.service.dto.BillCtgryCashMgmtSvcBillCtgryIn)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaExtrnlInfoMgmtSvcRemoveMsgMapInfoIn", "clone(){", "try{", "CaExtrnlInfoMgmtSvcRemoveMsgMapInfoIn", "object=", "(CaExtrnlInfoMgmtSvcRemoveMsgMapInfoIn)super.clone();", "if", "(", "this.msgMapInfoList==", "null", ")", "object.msgMapInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.externalproxy.service.dto.ExtrnlIntrfcMsgMapInfoOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.externalproxy.service.dto.ExtrnlIntrfcMsgMapInfoOut>(msgMapInfoList.size());", "for(", "bankware.corebanking.configurationadmin.externalproxy.service.dto.ExtrnlIntrfcMsgMapInfoOut", "item", ":", "msgMapInfoList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.externalproxy.service.dto.ExtrnlIntrfcMsgMapInfoOut)item.clone());", "}", "object.msgMapInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrReal", "getArr()", "{", "return", "(ArrReal)", "super.getArrCore();", "}"], "docstring_tokens": ["Inquire", "customer", "account", "arrangement", "using", "arrangement", "id", "(internal", "use)", "or", "business", "key", "like", "account", "number,", "application", "number", ",", "mobile", "number", "so", "on.."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "assetSubInfoMap,", "AssetCore", "asset,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getAssetSubInfoBiz().saveMapSubInfo(assetSubInfoMap,", "txDt,", "txSeqNbr,", "(AssetImpl)", "asset);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "subInfoMap."]}
{"code_tokens": ["public", "CaSelfAuthCdSvcGetOut", "clone(){", "try{", "CaSelfAuthCdSvcGetOut", "object=", "(CaSelfAuthCdSvcGetOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "ActorImpl", "actorImpl)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(subInfoMap", "==", "null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ActorSubInfoKndEnum", "subInfoKnd", "=", "actorImpl.getSubInfoKnd();", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoIO", "=", "getSubInfoCache(actorImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoIO.set(\"actorId\",", "actorImpl.getActorId());", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(actorImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoIO);", "}", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "String", "cacheKey", "=", "XtnTableEnum.AT_ACTOR_M.getValue().concat(actorImpl.getActorId());", "actorImpl.saveSubInfoCache(cacheKey,", "subInfoIO);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "subInfoMap."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(CaDstbCtvdRsltCdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@answerTrgtTpCd\"});", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "validateTxProcess()", "throws", "BizApplicationException", "{", "//", "Validate", "only", "in", "case", "of", "triggering", "transaction", "Integer", "callDepth", "=", "CbbApplicationContext.getCurrentServiceCallDepth();", "if(callDepth", "!=", "0)", "return;", "List<StTxMIO>", "stTxMIOList", "=", "_restoreTxInfo();", "if(stTxMIOList", "==", "null)", "return;", "if(stTxMIOList.size()", ">", "0){", "for(StTxMIO", "stTxMIO", ":", "stTxMIOList)", "{", "ArrRealCore", "arr", "=", "_getArrMngr().getArrRealCore(stTxMIO.getArrId());", "StTxMIO", "out", "=", "_getArrTxBiz().getArrTx(stTxMIO,", "arr);", "//", "if(out", "==", "null)", "out", "=", "_getArrTxBiz().getAccrualTx(stTxMIO,", "arr);", "if(out", "==", "null)", "throw", "new", "BizApplicationException(\"AAPSTE0020\",", "new", "Object[]", "{stTxMIO.getTxDt(),", "stTxMIO.getTxSeqNbr()});", "if(logger.isDebugEnabled())", "{", "logger.debug(\"HHH", "StTxMIO:", "{}", "\",", "out);", "}", "//", "Transaction", "history", "is", "not", "registered.", "if(TxStsCoreEnum.NUMBERED.getValue().equals(out.getTxStsCd()))", "throw", "new", "BizApplicationException(\"AAPACE3016\",", "new", "Object[]", "{out.getArrId()});", "if", "(logger.isDebugEnabled()){", "logger.debug(\"ArrTx", "linked", "transaction", "logging\");", "logger.debug(out.toString());", "}", "}", "}", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "This", "method", "validates", "the", "transaction", "sequence", "number", "and", "verifies", "that", "the", "transaction", "was", "created.", "*", "Occurs", "an", "error", "if", "the", "transaction", "is", "not", "inserted", "or", "the", "transaction", "status", "is", "NUMBERED.", "*", "It", "is", "called", "from", "distributed,", "so", "it", "accepts", "and", "processes", "the", "base", "list", "of", "transactions", "instead", "of", "the", "value", "loaded", "in", "memory.", "*", "</pre>", "*", "*", "@seealso", "{@link", "#validateTxProcess(List)}", ":", "validates", "the", "transaction", "sequence", "number", "and", "*", "verifies", "that", "the", "transaction", "was", "created", "with", "list", "of", "basic", "transaction", "infomation.", "*", "*", "@note", "The", "last", "valid", "transaction", "date", "can", "not", "be", "greater", "than", "the", "date", "of", "the", "transaction", "you", "want", "to", "create.", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\uc774", "\uba54\uc18c\ub4dc\ub294", "\uac70\ub798\uc77c\ub828\ubc88\ud638\ub97c", "\uc815\uc0c1\uc801\uc73c\ub85c", "\ucc44\ubc88\ud55c", "\ud6c4,", "\uac70\ub798\uac00", "\uc0dd\uc131\ub418\uc5c8\ub294\uc9c0", "\uac80\uc99d\ud55c\ub2e4.", "*", "\uac70\ub798\uac00", "insert", "\ub418\uc9c0", "\uc54a\uc558\uac70\ub098", "\uac70\ub798\uc0c1\ud0dc\uac00", "NUMBERED(\ucc44\ubc88\ub9cc", "\ub41c", "\uacbd\uc6b0)\uc778", "\uacbd\uc6b0\uc5d0\ub294", "\uc624\ub958\ub97c", "\ubc1c\uc0dd\uc2dc\ud0a8\ub2e4.", "*", "\ubd84\uc0b0\uc5d0\uc11c", "\ud638\ucd9c\ub418\uc5b4\uc9c0\ubbc0\ub85c", "\uba54\ubaa8\ub9ac\uc5d0", "\uc801\uc7ac\ub41c", "\uac12", "\ub300\uc2e0", "\uac70\ub798\uae30\ubcf8\ubaa9\ub85d\uc744", "\ubc1b\uc544\uc11c", "\ucc98\ub9ac\ud55c\ub2e4.", "*", "</pre>", "*", "*", "@seealso", "{@link", "#validateTxProcess(List)}"], "docstring_tokens": ["This", "method", "validates", "the", "transaction", "sequence", "number", "and", "verifies", "that", "the", "transaction", "was", "created.", "Occurs", "an", "error", "if", "the", "transaction", "is", "not", "inserted", "or", "the", "transaction", "status", "is", "NUMBERED.", "It", "is", "called", "from", "distributed,", "so", "it", "accepts", "and", "processes", "the", "base", "list", "of", "transactions", "instead", "of", "the", "value", "loaded", "in", "memory."]}
{"code_tokens": ["public", "String", "getDocId()", "throws", "BizApplicationException", "{", "if(docIssueIO", "!=", "null)", "return", "docIssueIO.getDocId();", "return", "null;", "}"], "docstring_tokens": ["It", "provides", "document", "id."]}
{"code_tokens": ["public", "String", "getSaleStartTime()", "{", "return", "PdUtil.parseDateToHHMMSS(bf.getSaleStartDt());", "}"], "docstring_tokens": ["This", "Method", "inquire", "sale", "start", "time", "of", "product"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AprslRqstCore", "aprslRqstCore)", "throws", "BizApplicationException", "{", "_getAprslRqstSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AprslRqstImpl)", "aprslRqstCore);", "}"], "docstring_tokens": ["Save", "an", "appraisal", "subsidiary", "information."]}
{"code_tokens": ["public", "String", "getSaleEndDt()", "{", "if", "(pdPdM", "==", "null)", "{", "return", "CPD01.END_DT;", "}", "//", "Return", "output", "return", "(pdPdM.getSaleEndDt()", "==", "null)", "?", "CPD01.END_DT", ":", "PdUtil.parseDateToYYYYMMDD(pdPdM.getSaleEndDt());", "}"], "docstring_tokens": ["This", "Method", "inquire", "sale", "end", "date", "of", "benefit"]}
{"code_tokens": ["public", "TxJrnlSvcGetTxJrnlOut", "clone(){", "try{", "TxJrnlSvcGetTxJrnlOut", "object=", "(TxJrnlSvcGetTxJrnlOut)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaStdAbrvtnMgmtSvcRegisterStdAbrvtnIn", "clone(){", "try{", "CaStdAbrvtnMgmtSvcRegisterStdAbrvtnIn", "object=", "(CaStdAbrvtnMgmtSvcRegisterStdAbrvtnIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbCnstncyStAmtTpMDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "assetSubInfoMap,", "AssetCore", "asset,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getAssetSubInfoBiz().saveMapSubInfo(assetSubInfoMap,", "txDt,", "txSeqNbr,", "(AssetImpl)", "asset);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(ExclsvDscdEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CmClTreeDIO", "select(String", "clId,", "String", "clHrarcyId)", "{", "return", "_getCmClTreeD().select(clId,", "clHrarcyId);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "String", "getCndNm()", "throws", "BizApplicationException", "{", "String", "cndName", "=", "_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_PDCND,", "cndCd);", "if", "(StringCoreUtils.isEmpty(cndName)", "||", "cndCd.equals(cndName))", "{", "String", "dbCndName", "=", "BfCndCoreImpl.getInstance().getCndName(motherInstCd,", "cndCd);", "if", "(StringUtils.isNotBlank(dbCndName))", "{", "cndName", "=", "dbCndName;", "}", "}", "//", "Return", "Output", "return", "cndName;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "name."]}
{"code_tokens": ["public", "CaDstbCtvdSrchRsltListOut", "clone(){", "try{", "CaDstbCtvdSrchRsltListOut", "object=", "(CaDstbCtvdSrchRsltListOut)super.clone();", "if", "(", "this.srchOutList==", "null", ")", "object.srchOutList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.distribution.service.dto.CaDstbCtvdSrchOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.distribution.service.dto.CaDstbCtvdSrchOut>(srchOutList.size());", "for(", "bankware.corebanking.configurationadmin.distribution.service.dto.CaDstbCtvdSrchOut", "item", ":", "srchOutList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.distribution.service.dto.CaDstbCtvdSrchOut)item.clone());", "}", "object.srchOutList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaAsmItmMgmtSvcGetAsmItmListIn", "clone(){", "try{", "CaAsmItmMgmtSvcGetAsmItmListIn", "object=", "(CaAsmItmMgmtSvcGetAsmItmListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CashSndRcvPrdDtlIO>", "getListCashSndRcvPrd(String", "inqryStartDt,String", "inqryEndDt,", "String", "rltvStaffId,", "String", "sndRcvTrgtDscd)", "throws", "BizApplicationException", "{", "CashSndRcvPrdDtlIO", "cashSndRcvPrdDtlIO", "=", "new", "CashSndRcvPrdDtlIO();", "cashSndRcvPrdDtlIO.setInstCd(getInstCd());", "cashSndRcvPrdDtlIO.setDeptId(getDeptId());", "cashSndRcvPrdDtlIO.setStaffId(getStaffId());", "cashSndRcvPrdDtlIO.setInqryStartDt(inqryStartDt);", "cashSndRcvPrdDtlIO.setInqryEndDt(inqryEndDt);", "cashSndRcvPrdDtlIO.setRltdStaffId(rltvStaffId);", "cashSndRcvPrdDtlIO.setSndRcvTrgtDscd(sndRcvTrgtDscd);", "return", "_getCashSndRcv().getListCashSndRcvPrd(cashSndRcvPrdDtlIO);", "}"], "docstring_tokens": ["It", "the", "history", "of", "cash", "acquisition", "and", "delivery", "between", "teller", "by", "date", ".", "It", "inquires", "the", "history", "of", "cash", "acquisition", "and", "delivery", "between", "teller", "from", "inquiry", "start", "date", "to", "inquiry", "end", "date.", "You", "can", "inquire", "the", "history", "of", "cash", "acquisition", "and", "delivery", "by", "cash", "send", "receive", "target", "distinction", "code.", "(1", ":", "cash,", "2", ":", "other", "check,", "3", ":", "transfer)"]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "AprslImpl", "aprslImpl,", "Integer", "aprslThingSeqNbr)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "aprslThingSubInfo", "=", "getSubInfoCache(aprslImpl,", "aprslThingSeqNbr);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(aprslThingSubInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "aprslThingSubInfo.get(atrbtNm);", "//", "\uc18d\uc131\uac12\uc774", "null\uc778\uacbd\uc6b0", "null\ub9ac\ud134", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "insurance."]}
{"code_tokens": ["public", "CaRoleMgmtSvcGetRoleServiceRelationListOut", "clone(){", "try{", "CaRoleMgmtSvcGetRoleServiceRelationListOut", "object=", "(CaRoleMgmtSvcGetRoleServiceRelationListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleServiceRelationOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleServiceRelationOut>(tblNm.size());", "for(", "bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleServiceRelationOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleServiceRelationOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaArrIssmdaTmpltMgmtSvcGetRelatedPsbkMsgListOut", "clone(){", "try{", "CaArrIssmdaTmpltMgmtSvcGetRelatedPsbkMsgListOut", "object=", "(CaArrIssmdaTmpltMgmtSvcGetRelatedPsbkMsgListOut)super.clone();", "if", "(", "this.psbkMsgList==", "null", ")", "object.psbkMsgList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgInfoList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgInfoList>(psbkMsgList.size());", "for(", "bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgInfoList", "item", ":", "psbkMsgList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgInfoList)item.clone());", "}", "object.psbkMsgList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaStaffChngSvcAddrListIO", "clone(){", "try{", "CaStaffChngSvcAddrListIO", "object=", "(CaStaffChngSvcAddrListIO)super.clone();", "if", "(", "this.ctcptXtnInfoList==", "null", ")", "object.ctcptXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcCtcptXtnListIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcCtcptXtnListIO>(ctcptXtnInfoList.size());", "for(", "bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcCtcptXtnListIO", "item", ":", "ctcptXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcCtcptXtnListIO)item.clone());", "}", "object.ctcptXtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "check(String", "vldnTrgt)", "throws", "BizApplicationException", "{", "boolean", "outMsg;", "if(logger.isDebugEnabled()){", "logger.debug(\"CustIdVldtnImpl", "vldnTrgt", ":", "{}", "\",", "vldnTrgt);", "}", "//", "Query", "customer", "by", "customer", "id", "Cust", "cust", "=", "_getCustMngr().getCust(vldnTrgt);", "if", "(cust", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPATE0008\",", "new", "String[]{", "\"@custId\",", "vldnTrgt", "});", "}", "else", "{", "outMsg", "=", "true;", "}", "return", "outMsg;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Complex", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "void", "saveSubInfo(AtCustSIO", "subInfoIO,", "CustImpl", "custImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustSIO", "oldSubInfoIO", "=", "getSubInfoCache(custImpl);", "if", "(oldSubInfoIO", "==", "null)", "{", "//", "PK", "setting", "subInfoIO.setCustId(custImpl.getCustId());", "//", "insert", "_getAtCustSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoIO,", "oldSubInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(custImpl,", "oldSubInfoIO);", "//", "PK", "setting", "subInfoIO.setCustId(custImpl.getCustId());", "//", "update", "_getAtCustSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "LnStsQuerySvcGetLnStsListBrnchIn", "clone(){", "try{", "LnStsQuerySvcGetLnStsListBrnchIn", "object=", "(LnStsQuerySvcGetLnStsListBrnchIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CashTransitSvcIn", "clone(){", "try{", "CashTransitSvcIn", "object=", "(CashTransitSvcIn)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn>(tblNm.size());", "for(", "bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(RpymntWayDscdEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrRealByArrStsList(String", "custId,", "List<ArrStsEnum>", "arrStsEnumList,", "String", "arrCustRelCd,", "String", "bizDscd,String", "pdTpCd,", "String", "pdTmpltCd,", "String", "pdCd)", "throws", "BizApplicationException", "{", "return", "_getArrCustRelQryBizImpl().getListArrRealByArrStsList(custId,", "arrStsEnumList,", "arrCustRelCd,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "pdCd,", "0,", "0,", "false);", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "arrangements", "of", "specific", "product", "currently", "in", "specific", "status", "lise", "related", "to", "customer", "with", "specific", "arrangement-customer", "relation", "type."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "pdCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "null,", "null,", "null,", "pdCd,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt,", "false);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "which", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "(Paging)"]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if", "(!this.getArrangementCore().isReal())", "return;", "switch", "(arrSrvcTpCd)", "{", "case", "\"OpenStandingOrder\":", "_buildInitialPlan(", "arrSrvcTpCd,arrCndActionRequiredValue);", "return;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "void", "undoSubInfo(ArrIssmdaImpl", "arrIssmdaImpl,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "ArArrIssmdaSubHIO", "in", "=", "new", "ArArrIssmdaSubHIO();", "in.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd());", "in.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId());", "in.setIssueArrId(arrIssmdaImpl.getIssueArrId());", "in.setTxDt(txDt);", "in.setTxSeqNbr(txSeqNbr);", "in.setCnclYn(CCM01.NO);", "//", "\ubcf4\uc870\uba85\uc138", "\uc774\ub825", "\uc870\ud68c\uacb0\uacfc\uac00", "\uc5c6\ub294", "\uacbd\uc6b0", "\ub9ac\ud134", "ArArrIssmdaSubHIO", "arArrIssmdaSubHIO", "=", "(ArArrIssmdaSubHIO)", "_getSubInfoHstCache(arrIssmdaImpl,", "txDt,", "txSeqNbr);", "if(arArrIssmdaSubHIO", "==", "null){", "return;", "}", "//", "\ucde8\uc18c\uc5ec\ubd80\ub97c", "'Y'\ub85c", "\uac31\uc2e0", "arArrIssmdaSubHIO.setCnclYn(CCM01.YES);", "_getArArrIssmdaSubHDso().update(arArrIssmdaSubHIO);", "//", "\ubcf4\uc870\uba85\uc138", "\uc6d0\ubcf5", "ArArrIssmdaSIO", "arArrIssmdaSIO", "=", "new", "ArArrIssmdaSIO();", "DtoUtils.setSubInfoIO(arArrIssmdaSubHIO,", "arArrIssmdaSIO);", "_getArArrIssmdaSDso().update(arArrIssmdaSIO);", "}"], "docstring_tokens": ["Restore", "extended", "information", "of", "subsidiary", "information(CTI)"]}
{"code_tokens": ["public", "AssetMtrtyAdventSubInfoOut", "clone(){", "try{", "AssetMtrtyAdventSubInfoOut", "object=", "(AssetMtrtyAdventSubInfoOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getAttributeDtoClassName()", "{", "return", "stdDtoClassAtrbt.getAttributeDtoClassName();", "}"], "docstring_tokens": ["Get", "attribute", "DTO", "class"]}
{"code_tokens": ["public", "AtrbtVldtnWayEnum", "getAttributeValidationWayCode()", "{", "return", "(isValidationTailored)?", "atrbtVldtnWayCd:stdDtoClassAtrbt.getAttributeValidationWayCode();", "}"], "docstring_tokens": ["Get", "attribute", "validation", "way", "code"]}
{"code_tokens": ["public", "MbrshpArrStsChngHstInqrySvcListOut", "clone(){", "try{", "MbrshpArrStsChngHstInqrySvcListOut", "object=", "(MbrshpArrStsChngHstInqrySvcListOut)super.clone();", "if", "(", "this.mbrshpArrStsHst==", "null", ")", "object.mbrshpArrStsHst", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.MbrshpArrStsChngHstInqrySvcOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.MbrshpArrStsChngHstInqrySvcOut>(mbrshpArrStsHst.size());", "for(", "bankware.corebanking.customer.query.service.dto.MbrshpArrStsChngHstInqrySvcOut", "item", ":", "mbrshpArrStsHst", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.MbrshpArrStsChngHstInqrySvcOut)item.clone());", "}", "object.mbrshpArrStsHst", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "RepeatStatus", "execute(StepContribution", "arg0,", "ChunkContext", "arg1)", "throws", "Exception", "{", "//", "String", "procKindCd", "=", "(String)arg1.getStepContext().getJobExecutionContext().get(\"procKindCd\");", "//", "20180423", "kjp", "arg", "\ubc1b\ub294", "\ubc29\ubc95\uc774", "\ubc14\ub00c\uc5c8\uc74c", "String", "procKindCd", "=", "BatchApplicationContext.getJobParameters().getString(\"procKindCd\");", "if(logger.isDebugEnabled())", "{", "logger.debug(\"DistributionApply", "procKindCd", ":", "{}\",", "procKindCd);", "}", "//\uc608\uc57d\ubc30\ud3ec", "\uc2e4\ud589", "if(PROC_KIND_CD_APPLY.equals(procKindCd)){", "_excuteForApply();", "}", "return", "RepeatStatus.FINISHED;", "}"], "docstring_tokens": ["Data", "is", "generated", "for", "new", "institutions", "in", "each", "area."]}
{"code_tokens": ["public", "InsrncRltdCustOut", "getRelatedCust(InsrncCustRelEnum", "insrncCustRelCd)", "throws", "BizApplicationException", "{", "return", "super.getRelatedCust(insrncCustRelCd.getValue());", "}"], "docstring_tokens": ["It", "inquires", "customer", "information", "related", "with", "insurance."]}
{"code_tokens": ["public", "void", "checkPassword(PswdVldtnIO", "in)", "throws", "BizApplicationException", "{", "//TODO", "\uae30\uad00\ud30c\ub77c\ubbf8\ud130ENUM", "\uc73c\ub85c", "\ubcc0\uacbd", "String", "pswdRuleStr", "=", "_getInstParmProvider().getInstParm(", "InstParamEnum.APPLY_PASSWORD_VALIDATION_RULE_CONTENT.getValue());", "if", "(pswdRuleStr", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0175\",", "new", "Object[]", "{});", "}", "String", "pswdRuleArr[]", "=", "pswdRuleStr.split(\";\");", "for(int", "i", "=", "0;", "i", "<", "pswdRuleArr.length;", "i++)", "{", "String", "pswdRule[]", "=", "pswdRuleArr[i].split(\":\");", "if", "(pswdRule.length", "!=", "2)", "{", "throw", "new", "BizApplicationException(\"AAAAAAAAA\",", "new", "Object[]", "{});", "}", "String", "vldtnTp", "=", "pswdRule[0];", "String", "regexNm", "=", "pswdRule[1];", "CmnCdCheckIn", "inCdDao", "=", "new", "CmnCdCheckIn();", "inCdDao.setCdNbr(CCM01.REGEX_TP_DSCD);", "inCdDao.setCd(regexNm);", "if", "(CCM03.REGT.equals(vldtnTp))", "{", "DataCheckUtils.isValidPassword(_getCd().getCode(inCdDao).getCdNm(),", "in.getPswd());", "}", "}", "}"], "docstring_tokens": ["It", "checks", "password."]}
{"code_tokens": ["public", "SimpleDpstAcctInqrySvcOut", "clone(){", "try{", "SimpleDpstAcctInqrySvcOut", "object=", "(SimpleDpstAcctInqrySvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaStaffInqrySvcGetStaffRoleListOut", "clone(){", "try{", "CaStaffInqrySvcGetStaffRoleListOut", "object=", "(CaStaffInqrySvcGetStaffRoleListOut)super.clone();", "if", "(", "this.staffRoleList==", "null", ")", "object.staffRoleList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffRoleOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffRoleOut>(staffRoleList.size());", "for(", "bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffRoleOut", "item", ":", "staffRoleList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffRoleOut)item.clone());", "}", "object.staffRoleList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "StaffLoginHstSrchSvcIn", "clone(){", "try{", "StaffLoginHstSrchSvcIn", "object=", "(StaffLoginHstSrchSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "AprvlRgstSvcGetIn", "clone(){", "try{", "AprvlRgstSvcGetIn", "object=", "(AprvlRgstSvcGetIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CaTblXtnAtrbtOut>", "getTableExtendAttribute(String", "tblNm)", "throws", "BizApplicationException", "{", "return", "this.getTableExtendAttribute(_getCaCmnContext().getInstCode(),", "tblNm,", "CaXtnAtrbtVrtnCmpsEnum.NA,", "null);", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "input", "condition"]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo,", "ActorImpl", "actorImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ActorSubInfoKndEnum", "subInfoKnd", "=", "actorImpl.getSubInfoKnd();", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoIO", "=", "getSubInfoCache(actorImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "PK", "setting", "subInfoIO", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoIO.set(\"actorId\",", "actorImpl.getActorId());", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(actorImpl,", "subInfoIO);", "//", "PK", "setting", "subInfoIO.set(\"actorId\",", "actorImpl.getActorId());", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoIO);", "}", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "String", "cacheKey", "=", "XtnTableEnum.AT_ACTOR_M.getValue().concat(actorImpl.getActorId());", "actorImpl.saveSubInfoCache(cacheKey,", "subInfoIO);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "interface", "VO"]}
{"code_tokens": ["public", "String", "getValAsString(Integer", "seqNbr)", "throws", "BizApplicationException", "{", "ArArrCndDIO", "arArrCndDIO", "=", "new", "ArArrCndDIO();", "arArrCndDIO.setInstCd(_getCmnContextCore().getInstCode());", "arArrCndDIO.setArrId(this.getArrangementCore().getArrId());", "//", "ArrangementCore", "Id", "arArrCndDIO.setCndCd(this.getCndCd());", "//", "Condition", "Code", "arArrCndDIO.setSeqNbr(seqNbr);", "//", "Sequence", "Number", "ArrRealCore", "arrReal", "=", "(ArrRealCore)this.getArrangementCore();", "//\uac70\ub798\uacc4\uc57d\ubd84\ub9ac\ucc98\ub9ac", "if", "(ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd()))", "{", "arArrCndDIO", "=", "_getArArrTmpryCndDDso().select(arArrCndDIO);", "}", "else", "{", "arArrCndDIO", "=", "_getArArrCndDDso().select(arArrCndDIO);", "}", "if", "(arArrCndDIO", "==", "null)", "{", "return", "null;", "}", "return", "this._getValueAsString(arArrCndDIO);", "}"], "docstring_tokens": ["This", "method", "get", "condition", "value", "using", "the", "sequence", "number."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(NoticeSrchCrtrEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{", "value,", "\"@noticeSrchCrtrCd\"", "});", "}", "return", "true;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(ClsgPrsntStsInqryEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "boolean", "isPossibleByTransactionType(String", "intTxTp)", "throws", "BizApplicationException", "{", "switch", "(InterestTransactionTypeEnum.getEnum(intTxTp))", "{", "case", "SETTLEMENT", ":", "case", "PROVISIONAL_SETTLEMENT", ":", "case", "TERMINATION", ":", "case", "DEPOSITOR_INFO_EXTRACTION", ":", "case", "DAILY_ACCRUAL", ":", "return", "true;", "default:", "/*", "*", "The", "transaction", "type", "of", "interest", "was", "not", "allowed.", "transaction", "type", ":", "{0}", "*/", "throw", "new", "BizApplicationException(\"AAPSTE0100\",", "new", "Object[]", "{", "intTxTp", "});", "}", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "checking", "if", "transaction", "is", "possible", "by", "input", "transaction", "type."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "//", "query", "data", "return", "!(_getDcDocMDso().select(DocStsEnum.NORMAL.getValue(),", "String.valueOf(supplInfoVal.get(CCM03.CD)),", "DocTypEnum.NOTICE_MSG.getValue())", "==", "null);", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value", "by", "cdDtlIO", "DTO.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter."]}
{"code_tokens": ["public", "IntRtCmptnSvcGetOut", "clone(){", "try{", "IntRtCmptnSvcGetOut", "object=", "(IntRtCmptnSvcGetOut)super.clone();", "if", "(", "this.intRtCmptnSvcGetsub==", "null", ")", "object.intRtCmptnSvcGetsub", "=", "null;", "else{", "java.util.List<bankware.corebanking.underexamination.application.service.dto.IntRtCmptnSvcGetsub>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.underexamination.application.service.dto.IntRtCmptnSvcGetsub>(intRtCmptnSvcGetsub.size());", "for(", "bankware.corebanking.underexamination.application.service.dto.IntRtCmptnSvcGetsub", "item", ":", "intRtCmptnSvcGetsub", "){", "clonedList.add(", "(bankware.corebanking.underexamination.application.service.dto.IntRtCmptnSvcGetsub)item.clone());", "}", "object.intRtCmptnSvcGetsub", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "check(String", "vldnTrgt)", "throws", "BizApplicationException", "{", "boolean", "isOk;", "if(_getCmnContext().getTxDate().compareTo(vldnTrgt)", "<", "0", ")", "{", "throw", "new", "BizApplicationException(\"AAPCME0606\",", "new", "String[]{vldnTrgt});", "}", "else", "{", "isOk", "=", "true;", "}", "return", "isOk;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Simple", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "java.lang.String", "getMthrArrId(){", "return", "mthrArrId;", "}"], "docstring_tokens": ["This", "method", "inquires", "a", "mother", "arrangement", "identification", "of", "the", "transaction."]}
{"code_tokens": ["public", "boolean", "isValidType(AtrbtTpEnum", "atrbtTp,", "Integer", "dcmlPntLen,", "String", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"atrbtTpCd={}\",", "atrbtTp);", "logger.debug(\"atrbtCntnt={}\",", "atrbtCntnt);", "}", "if", "(atrbtTp", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0037\",", "new", "Object[]", "{", "atrbtTp", "});", "}", "//", "Validate", "attribute", "type", "switch", "(atrbtTp)", "{", "case", "TEXT:", "//", "text", "return", "(StringCoreUtils.isEmpty(atrbtCntnt))", "?", "false", ":", "true;", "case", "TEXT_DATE:", "//", "date", "return", "DateCoreUtils.isValidDate(atrbtCntnt);", "case", "TEXT_NUMBER:", "//", "number", "return", "DataCheckCoreUtils.isNumeric(atrbtCntnt);", "case", "NUMBER:", "//", "number", "boolean", "chkNbr", "=", "DataCheckCoreUtils.isNumeric(atrbtCntnt);", "if(logger.isDebugEnabled())", "{", "logger.debug(\"", "###########", "isValidType", "NUMBER", "chkNbr", ":", "{}\",", "chkNbr);", "}", "if(chkNbr)", "{", "//", "\uc18c\uc218\uc810\uc790\ub9ac\uc218", "\uac80\uc99d", "return", "_isValidDecimalPoint(dcmlPntLen,", "atrbtCntnt);", "}", "else", "{", "return", "chkNbr;", "}", "case", "TEXT_ALPHA_NUMERIC:", "//", "Alpha-Number", "return", "DataCheckCoreUtils.isAlphaNumeric(atrbtCntnt);", "case", "YES_OR_NO:", "//", "yes", "or", "no", "return", "(CCM01.YES.equals(atrbtCntnt)", "||", "CCM01.NO.equals(atrbtCntnt))", "?", "true", ":", "false;", "case", "PASSWORD:", "//", "Password", "return", "DataCheckCoreUtils.isValidPassword(atrbtCntnt);", "case", "TIMESTAMP:", "//", "timestamp", "return", "true;", "case", "JSON:", "//", "json", "return", "DataCheckCoreUtils.isJson(atrbtCntnt);", "case", "EMPTY:", "return", "true;", "default:", "throw", "new", "BizApplicationException(\"AAPCME0037\",", "new", "Object[]", "{", "atrbtTp", "});", "}", "}"], "docstring_tokens": ["Validate", "that", "the", "value", "of", "the", "input", "attribute", "matches", "the", "type", "of", "the", "attribute."]}
{"code_tokens": ["public", "String", "getCndValDefault()", "throws", "BizApplicationException", "{", "if", "(getRngVal()", "!=", "null)", "{", "return", "getRngVal().setScale(_setScale()).toPlainString();", "}", "if", "(getMinVal()", "!=", "null", "&&", "getMinVal().compareTo(getMaxVal())", "==", "0", "&&", "getMinVal().compareTo(getBsicVal())", "==", "0)", "{", "return", "getBsicVal().setScale(_setScale()).toPlainString();", "}", "return", "null;", "}"], "docstring_tokens": ["This", "method", "get", "the", "arrangement", "condition", "value", "as", "string.", "For", "list", "type", "condition,", "return", "list", "code.", "If", "level", "of", "negotiation", "is", "arrangement", "return", "arrangement", "list", "code", "or", "range", "value.", "If", "level", "of", "negotiation", "is", "product", "and", "size", "of", "list", "code", "is", "one,", "return", "product", "list", "code", "or", "default", "value.", "Others", "return", "null"]}
{"code_tokens": ["public", "List<ArrIntRt>", "generateArrDepositInterestRate(Arrangement", "arr,String", "txDt,Integer", "txSeqNbr)", "throws", "BizApplicationException{", "return", "generateArrDepositInterestRate(arr,", "null,", "null,", "txDt,", "txSeqNbr);", "}"], "docstring_tokens": ["Generate", "deposit", "normal", "interest", "rate."]}
{"code_tokens": ["public", "boolean", "isChannelArs(String", "chnlDscd)", "throws", "BizApplicationException", "{", "return", "ChannelEnum.PHONE_BANKING_ARS.getValue().equals(chnlDscd)", "?", "true", ":", "false;", "}"], "docstring_tokens": ["Inquiry", "whether", "it", "is", "a", "channel", "phone", "banking/ARS"]}
{"code_tokens": ["public", "boolean", "isSalable(String", "aplyDt,", "String", "aplyTm)", "{", "if", "(pdPdM", "==", "null", "||", "aplyDt", "==", "null)", "{", "return", "false;", "}", "Date", "baseDt", "=", "PdUtil.parseYyyyMMddHHmmssToDate(aplyDt,", "_getAplyTmString(aplyTm));", "if", "(baseDt.after(pdPdM.getSaleStartDt())", "&&", "baseDt.before(pdPdM.getSaleEndDt()))", "{", "return", "true;", "}", "return", "false;", "}"], "docstring_tokens": ["This", "Method", "inquire", "whether", "or", "not", "it", "is", "a", "sallable", "point", "on", "the", "input", "date", "and", "time."]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo,", "String", "txDt,", "Integer", "txSeqNbr,", "AssetImpl", "assetImpl)", "throws", "BizApplicationException{", "//", "0.", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{_getNewSubInfo(assetImpl.getAssetSubInfoKnd()).getClass().getSimpleName()});", "}", "logger.debug(\"##", "<AS>", "saveSubInfo", "->", "subInfo", "=", "{}", "::", "\",", "subInfo.getFieldValues());", "//", "1.", "\uc790\uc0b0\ubcf4\uc870\uba85\uc138\uc758", "\uc885\ub958", "\uc870\ud68c", "AssetSubInfoKndEnum", "subInfoKnd", "=", "assetImpl.getAssetSubInfoKnd();", "//", "2.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "for(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(entry.getValue()", "!=", "null)", "{", "_getAtrbtChk().checkStandardAttribute(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(assetImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"assetId\",", "assetImpl.getAssetBasicCache().getAssetId());", "//PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(assetImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "set", "business", "column", "//", "3-1.", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(assetImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "3-2.", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "//", "4.", "\uce90\uc2dc", "\uc800\uc7a5", "assetImpl.saveSubInfoCache(xtnTable,", "subInfoCache);", "}"], "docstring_tokens": ["Save", "an", "appraisal", "thing", "subsidiary", "information."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(PdClassificationStructureDistinctionCodeEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "java.lang.String", "getArrOpnDt(){", "return", "arrOpnDt;", "}"], "docstring_tokens": ["Inquire", "the", "date", "of", "original", "arrangement", "status", "changed", "into", "\"Active\".", "(", "It", "is", "override", "method", "of", "Arrangement.getArrOpnDt()", ")"]}
{"code_tokens": ["public", "void", "saveSubInfo(ActorCore", "actorCore,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "_getActorSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(ActorImpl)", "actorCore);", "}"], "docstring_tokens": ["Save", "an", "appraisal", "subsidiary", "information."]}
{"code_tokens": ["public", "ArrBalCore", "getArrPrincipalBalCore(ArrRealCore", "arr,", "String", "crncyCd)", "throws", "BizApplicationException", "{", "return", "getArrBalCore(arr,", "AmtTpCoreEnum.PRNCPL.getValue(),BalTpCoreEnum.CURRENT.getValue(),", "crncyCd);", "}"], "docstring_tokens": ["This", "method", "inquires", "a", "list", "of", "balances", "belonging", "to", "the", "arrangement", "that", "matches", "the", "entered", "currency", "code", "where", "the", "amount", "type", "is", "the", "principal", "and", "the", "balance", "type", "is", "the", "current", "balance."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "logger.debug(\"======", "Do", "Service", "Action", "Test", "======\");", "switch", "(arrSrvcTpCd)", "{", "case", "\"IntraRealTmTrnsfr\":", "case", "\"InterRealTmTrnsfrOut\":", "_doMoneyTransferAction(arrSrvcTpCd,arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "void", "registerStampTax(StStampTaxBsicIO", "stStampTaxBsicIO)", "throws", "BizApplicationException", "{", "_checkInputValue(stStampTaxBsicIO.getArrId(),", "\"arrId\");", "_checkInputValue(stStampTaxBsicIO.getTxDt(),", "\"txDt\");", "_checkInputValue(stStampTaxBsicIO.getTxSeqNbr(),", "\"txSeqNbr\");", "_getCmnContext().setHeaderColumn(stStampTaxBsicIO);", "StStampTaxMIO", "in", "=", "_getStampTaxIn(stStampTaxBsicIO);", "in.setCnclYn(CCM01.NO);", "in.setDtsRcvryYn(CCM01.NO);", "if(StringUtils.isEmpty(stStampTaxBsicIO.getBaseDt())){", "in.setBaseDt(stStampTaxBsicIO.getTxDt());", "}", "_getStStampTaxMDso().insert(in);", "}"], "docstring_tokens": ["This", "method", "registers", "stamp", "tax", "information."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(LevyBaseAmountCoreEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CaSrvcPrflMgmtSvcGetInstSrvcBsicDtlOut", "clone(){", "try{", "CaSrvcPrflMgmtSvcGetInstSrvcBsicDtlOut", "object=", "(CaSrvcPrflMgmtSvcGetInstSrvcBsicDtlOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "UnmaskSvcGetListHistoryOut", "clone(){", "try{", "UnmaskSvcGetListHistoryOut", "object=", "(UnmaskSvcGetListHistoryOut)super.clone();", "if", "(", "this.list==", "null", ")", "object.list", "=", "null;", "else{", "java.util.List<bankware.corebanking.common.mask.service.dto.UnmaskSvcGetHistoryOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.common.mask.service.dto.UnmaskSvcGetHistoryOut>(list.size());", "for(", "bankware.corebanking.common.mask.service.dto.UnmaskSvcGetHistoryOut", "item", ":", "list", "){", "clonedList.add(", "(bankware.corebanking.common.mask.service.dto.UnmaskSvcGetHistoryOut)item.clone());", "}", "object.list", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "AtNoticeDIO", "select(String", "instCd,", "String", "noticeId)", "{", "return", "_getAtNoticeD().select(instCd,", "noticeId);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(ActorImpl", "actorImpl,", "String", "ctcptId,", "Integer", "ctcptChngSeqNbr,", "Map<String,", "String>", "subInfoMap)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(subInfoMap", "==", "null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "//", "**", "\uc5f0\ub77d\ucc98", "\ubcf4\uc870\uba85\uc138\ub294", "\ubcc0\uacbd\uc774\ub825\uc744", "\uad00\ub9ac\ud558\uc9c0", "\uc54a\ub294\ub2e4.", "AtActorCtcptSIO", "subInfoIO", "=", "getSubInfoCache(actorImpl,", "ctcptId,", "ctcptChngSeqNbr);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtActorCtcptSIO();", "subInfoIO.setActorId(actorImpl.getActorId());", "subInfoIO.setActorCtcptId(ctcptId);", "subInfoIO.setActorCtcptChngSeqNbr(ctcptChngSeqNbr);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_getAtActorCtcptSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_getAtActorCtcptSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoIO,", "actorImpl,", "ctcptId,", "ctcptChngSeqNbr);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "int", "register(DstbCtvdRgstIn", "dstbCtvdRgstIn)", "throws", "BizApplicationException{", "//", "1.", "get", "data", "and", "seq", "String", "dstbCtvdDt", "=", "_getCmnContextCore().getTxDate();", "int", "dstbCtvdSeqNbr", "=", "_getCaDstbCtvdMDso().selectNextSeqNbr(_getCmnContextCore().getTxDate());", "//", "2.", "register", "Main", "data", "_registerBsic(dstbCtvdDt,", "dstbCtvdSeqNbr,", "dstbCtvdRgstIn.getDstbRqstId(),", "dstbCtvdRgstIn.getDstbCtvdRqstDt());", "//", "3.", "register", "Detail", "data", "_registerDetail(dstbCtvdDt,", "dstbCtvdSeqNbr,", "dstbCtvdRgstIn.getDstbCtvdRgstInList());", "return", "dstbCtvdSeqNbr;", "}"], "docstring_tokens": ["It", "registers", "the", "self", "authentication", "code", "information.", "Needs", "caution", "as", "the", "registered", "information", "performs", "the", "update", "transaction.", "It", "gets", "the", "first", "institution", "code", "in", "the", "list", "and", "query", "the", "entire", "contents."]}
{"code_tokens": ["public", "DeptRoleTmpltBsicInfoIO", "getDeptRoleTemplateInfo(", "String", "instCd,", "String", "roleTmpltId)", "throws", "BizApplicationException", "{", "return", "super.getDeptRoleTemplateInfo(instCd,", "roleTmpltId);", "}"], "docstring_tokens": ["Inquire", "the", "role", "template's", "detail", "information", "by", "the", "input", "institution", "code", "and", "role", "template", "identification.", "It", "inquires", "the", "role", "list", "of", "the", "template", "that", "are", "not", "deleted."]}
{"code_tokens": ["public", "CustCtcptChngSvcGetIn", "clone(){", "try{", "CustCtcptChngSvcGetIn", "object=", "(CustCtcptChngSvcGetIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(AprslUnitClCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@AssetXtnAtrbtNm\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "BigDecimal", "getLogSeqNbr()", "throws", "BizApplicationException{", "return", "BigDecimal.ZERO;", "}"], "docstring_tokens": ["This", "method", "provides", "the", "ability", "to", "numbering", "log", "serial", "numbers", "for", "AC_ACCTG_L", "Table", "(accounting", "log)."]}
{"code_tokens": ["public", "CaStaffRgstSvcCtcptIO", "clone(){", "try{", "CaStaffRgstSvcCtcptIO", "object=", "(CaStaffRgstSvcCtcptIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "checkCode(CaCdNbrInfoIO", "in,", "String", "cd)", "throws", "BizApplicationException", "{", "CaCmCdInstDIO", "daoIn", "=", "new", "CaCmCdInstDIO();", "daoIn.setInstCd(in.getInstCd());", "daoIn.setCdNbr(in.getCdNbr());", "daoIn.setCd(cd);", "daoIn.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue());", "List<CaCmCdInstDIO>", "daoOutList", "=", "_getCmCdInstDDso().selectListByCondition(daoIn);", "if(daoOutList", "==", "null", "||", "daoOutList.isEmpty())", "{", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr,", "AssetImpl", "assetImpl,", "Integer", "assetThingSeqNbr)", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm)){", "return;", "}", "//", "1.", "\uc790\uc0b0\ubb3c\uac74\ubcf4\uc870\uba85\uc138\uc758", "\uc885\ub958", "\uc870\ud68c", "AssetThingSubInfoKndEnum", "subInfoKnd", "=", "assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr);", "//", "2.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttribute(xtnAtrbtNm,", "xtnAtrbtCntnt);", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(assetImpl,", "assetThingSeqNbr);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"assetId\",", "assetImpl.getAssetBasicCache().getAssetId());", "//", "PK", "setting", "subInfoCache.set(\"assetThingSeqNbr\",", "assetThingSeqNbr);", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(assetImpl,", "assetThingSeqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "3-1.", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "4.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoKnd,", "subInfoCache,", "assetImpl,", "assetThingSeqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(assetImpl,", "assetThingSeqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "3-2.", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "List<TblXtnAtrbtOut>", "getTableExtendAttribute(String", "tblNm)", "throws", "BizApplicationException", "{", "return", "this.getTableExtendAttribute(_getCmnContextCore().getInstCode(),", "tblNm,", "XtnAtrbtVrtnCmpsEnum.NA,", "null);", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "input", "condition"]}
{"code_tokens": ["public", "String", "getSubInfo(ActorImpl", "actorImpl,", "String", "dueDlgncDscd,", "Integer", "dueDlgncSeqNbr,", "String", "atrbtNm)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "subInfo", "=", "getSubInfoCache(actorImpl,", "dueDlgncDscd,", "dueDlgncSeqNbr);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "subInfo.get(atrbtNm);", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["Inquire", "a", "extended", "information", "of", "Subsidiary", "Information(CTI)."]}
{"code_tokens": ["public", "ArrRealCore", "getArrRealCore(ArrRealGetIn", "arrRealGetIn)", "throws", "BizApplicationException", "{", "return", "_getArrCoreMngrAgent().getArrRealCore(arrRealGetIn);", "}"], "docstring_tokens": ["Inquire", "real", "arrangement", "using", "arrangement", "id", "(internal", "use)", "or", "business", "key", "like", "account", "number,", "application", "number", ",", "mobile", "number", "and", "so", "on.", "If", "'arrExtrnlIdNbrTp'(arrangement", "external", "identification", "number", "type)", "is", "null,", "then", "arrIdNbr", "is", "arrangement", "identification.", "If", "you", "want", "to", "get", "the", "child", "arrangements", "directly,", "passes", "account", "number", "and", "the", "nthNbr", "for", "child", "sequence", "number."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "xtnInfo,", "AsmCore", "asm)", "{", "_getAsmSubInfoBiz().saveSubInfo(xtnInfo,", "(AsmImpl)asm);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "CmAtchmntFileDIO", "clone(){", "try{", "CmAtchmntFileDIO", "object=", "(CmAtchmntFileDIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "object.atchmntFileCntnt", "=", "java.util.Arrays.copyOf(this.atchmntFileCntnt,", "this.atchmntFileCntnt.length);", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if", "(!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){", "String", "inputStr", "=", "this._getCdLstNm(getListCd());", "String", "pdListStr", "=", "this._buildPdList();", "//This", "product", "purchase", "is", "not", "allowed", "to", "customer", "type", "({0},{1})", "//\ubcf8\uc0c1\ud488\uc758", "\ud310\ub9e4\ub294", "\uace0\uac1d\uc720\ud615", "({0},{1})\uc5d0\uac8c", "\ud5c8\uc6a9\ub418\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0274\"", ",", "new", "Object[]{pdListStr,inputStr});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "void", "saveSubInfo(CustRprsnCore", "custRprsnCore,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "_getCustRprsnSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(CustRprsnImpl)", "custRprsnCore);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "interface", "VO"]}
{"code_tokens": ["public", "IpctMgmtSvcGetIpctTxEntryListIn", "clone(){", "try{", "IpctMgmtSvcGetIpctTxEntryListIn", "object=", "(IpctMgmtSvcGetIpctTxEntryListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(PrtnrCore", "prtnrCore)", "throws", "BizApplicationException", "{", "return", "_getPrtnrSubInfoBiz().getMapSubInfo((PrtnrImpl)", "prtnrCore);", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "Subsidiary", "Information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["public", "CustCheckPwdOut", "checkPassword(String", "pswd)", "throws", "BizApplicationException", "{", "//check", "required", "inputs", "if", "(StringUtils.isEmpty(pswd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@pswd\"});", "}", "return", "checkPassword(null,", "pswd,", "null);", "}"], "docstring_tokens": ["It", "checks", "if", "the", "input", "password", "equals", "with", "the", "registered", "password", "of", "the", "input", "login", "information."]}
{"code_tokens": ["public", "BigDecimal", "getLastTxAfBalBeforeSpecificTx(ArrReal", "arr,", "String", "txDt,", "int", "txSeqNbr)", "throws", "BizApplicationException", "{", "BigDecimal", "txAfBal", "=", "_getArrTxXtnBiz().getLastTxAfBalBeforeSpecificTx(_getCmnContext().getInstCode(),", "arr,", "txDt,", "txSeqNbr);", "if", "(txAfBal", "==", "null)", "{", "txAfBal", "=", "BigDecimal.ZERO;", "}", "return", "txAfBal;", "}"], "docstring_tokens": ["This", "method", "inquires", "last", "balance", "before", "specific", "transaction."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapXtnInfo(String", "assetId,", "String", "custId,", "String", "assetCustRelCd)", "throws", "BizApplicationException{", "AsAssetCustXtnInfoDIO", "input", "=", "new", "AsAssetCustXtnInfoDIO();", "input.setInstCd(_getCmnContextCore().getInstCode());", "input.setAssetId(assetId);", "input.setCustId(custId);", "input.setAssetCustRelCd(assetCustRelCd);", "Map<String,", "String>", "xtnAtrbtMap", "=", "new", "HashMap<String,", "String>();", "for(AsAssetCustXtnInfoDIO", "xtnInfo", ":", "_getAsAssetCustXtnInfoDDso().selectList(input))", "{", "xtnAtrbtMap.put(xtnInfo.getXtnAtrbtNm(),", "xtnInfo.getXtnAtrbtCntnt());", "}", "return", "xtnAtrbtMap;", "}"], "docstring_tokens": ["Inquire", "the", "actor", "extended", "information", "map.", "Inquire", "extended", "information", "with", "normal", "extended", "attribute", "status", "code."]}
{"code_tokens": ["public", "ArrSrvcBlckngGetOut", "getArrServiceBlocking(Integer", "arrSrvcBlckngSeqNbr,", "String", "baseDt,", "Boolean", "isActiveOnly)", "throws", "BizApplicationException", "{", "return", "_getArrSrvcBlckngBiz().getArrServiceActiveBlocking(arrSrvcBlckngSeqNbr,", "baseDt,", "isActiveOnly,", "false,", "this);", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "Get", "service", "blocking", "information", "registered", "to", "the", "arrangement", "based", "on", "the", "service", "blocking", "sequence", "number.", "*", "However,", "extended", "information", "of", "service", "restrictions", "is", "provided", "only", "with", "attribute", "method", "(EAV)", "information.", "*", "</pre>", "*", "*", "@seealso", "{@link", "#getListArrServiceBlockingByEav(String,", "String,", "Boolean)}", ":", "Get", "a", "list", "of", "service", "blocking", "information", "registered", "to", "the", "arrangement", "with", "specific", "service", "blocking", "kind", "code", "*", "</div>", "*", "*", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\uc11c\ube44\uc2a4\uc81c\ud55c", "\uc77c\ub828\ubc88\ud638\ub97c", "\uae30\uc900\uc73c\ub85c", "\uacc4\uc57d\uc5d0", "\ub4f1\ub85d\ub41c", "\uc11c\ube44\uc2a4\uc81c\ud55c", "\uc815\ubcf4\ub97c", "\uc870\ud68c\ud55c\ub2e4.", "*", "\ub2e8,", "\uc11c\ube44\uc2a4\uc81c\ud55c\uc758", "\ud655\uc7a5\uc815\ubcf4\ub294", "\uc18d\uc131\ubc29\uc2dd(EAV)", "\uc815\ubcf4\ub9cc", "\uc870\ud68c\ud568", "*", "</pre>", "*", "*", "@seealso", "{@link", "#getListArrServiceBlockingByEav(String,", "String,", "Boolean)}"], "docstring_tokens": ["Inquire", "service", "blocking", "information", "registered", "to", "the", "arrangement", "based", "on", "the", "service", "blocking", "sequence", "number."]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbCnstncySvScrnMDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "CaKrRoadAddrOut", "getKrRoadAddr(String", "addrId)", "throws", "BizApplicationException", "{", "CaCmKrRoadAddrMIO", "cmKrRoadAddrMIO", "=", "_getCaCmKrRoadAddrMDso().select(CaAddrHrarcyEnum.KOREA_ROAD_NAME_ADDRESS_CODE.getValue(),", "addrId);", "return", "_getKrRoadAddrOut(cmKrRoadAddrMIO);", "}"], "docstring_tokens": ["It", "inquiries", "the", "Korea", "Road", "address."]}
{"code_tokens": ["public", "String", "getDescription()", "{", "return", "desc;", "}"], "docstring_tokens": ["Query", "parent", "class", "name"]}
{"code_tokens": ["public", "int", "delete(CaArArrArrRelPdRuleMIO", "arArrArrRelPdRuleMIO)", "{", "int", "cnt", "=", "_getArArrArrRelPdRuleM().delete(arArrArrRelPdRuleMIO);", "_getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_ARR_REL_PD_RULE_CACHE,", "null);", "return", "cnt;", "}"], "docstring_tokens": ["It", "removes", "document", "information."]}
{"code_tokens": ["public", "boolean", "checkCode(CaCdNbrInfoIO", "in,", "String", "cd)", "throws", "BizApplicationException", "{", "String", "xtnCdClassNm", "=", "in.getXtnCdClassNm();", "String", "lngCd", "=", "in.getLngCd();", "if", "(StringUtils.isEmpty(xtnCdClassNm))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@xtnCdClassNm\"", "});", "}", "//", "\ud574\ub2f9", "\ud074\ub798\uc2a4\uc758", "\ube48\uba85", "\ucd94\ucd9c", "\ud574\uc57c", "\ub41c\ub2e4.", "CaCbpClassIO", "cbpClass", "=", "_getCbpClass().getClassInfo(xtnCdClassNm);", "String", "beanName", "=", "cbpClass.getBeanNm();", "if(logger.isDebugEnabled())", "{", "logger.debug(\"lyj", "beanName", ":", "{}\",", "beanName);", "}", "if(!CCM01.CHAR_AT.equals(beanName))", "{", "xtnCdClassNm", "=", "beanName;", "}", "if", "(StringUtils.isEmpty(lngCd))", "{", "lngCd", "=", "_getCaCmnContext().getLanguageCode();", "}", "String", "cdNbr", "=", "in.getCdNbr();", "String", "instCd", "=", "in.getInstCd();", "if(StringUtils.isEmpty(in.getInstCd()))", "{", "instCd", "=", "_getCaCmnContext().getInstCode();", "}", "//", "Get", "the", "login", "user's", "language", "code", "name", "Map<String,", "Object>", "supplInfoVal", "=", "new", "HashMap<String,", "Object>();", "supplInfoVal.put(CaInstParamEnum.LANGUAGE_CODE.getValue(),", "lngCd);", "supplInfoVal.put(CaInstParamEnum.INSTITUTION_CODE.getValue(),", "instCd);", "supplInfoVal.put(CCM03.CD,", "cd);", "XtnCdCore", "xtdCd", "=", "(XtnCdCore)", "CbbApplicationContext.getBean(xtnCdClassNm);", "return", "xtdCd.checkCode(cdNbr,", "supplInfoVal);", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{_getNewSubInfo(arrRealImpl.getSubInfoKnd()).getClass().getSimpleName()});", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ArrSubInfoKndEnum", "subInfoKnd", "=", "arrRealImpl.getSubInfoKnd();", "//", "2.", "\uacc4\uc57d\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(arrRealImpl);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"arrId\",", "arrRealImpl.getArrId());", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "save", "cache", "arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(),", "subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "getLogSeqNbr(CmnJrnzArea", "cmnJrnzArea,", "String", "chnlCd)", "throws", "BizApplicationException", "{", "logger.debug(\"<AC-Core>", "AcctgJrnlCmnCoreCustomImpl", "_getLogSeqNbr", "CmnJrnzArea", "logSeqNbr", ":", "{}\",", "cmnJrnzArea.getLogSeqNbr());", "//20210121", "CmnJrnzArea\uc758", "\ub85c\uadf8\uc77c\ub828\ubc88\ud638\uac00", "\uc774\ubbf8", "\uc678\ubd80\uc5d0\uc11c", "\ucc44\ubc88\ub41c", "\uc0c1\ud0dc\uc774\uba74", "\ucc44\ubc88\ud558\uc9c0", "\uc54a\uc74c.", "if(cmnJrnzArea.getLogSeqNbr()!=null", "&&", "cmnJrnzArea.getLogSeqNbr().compareTo(BigDecimal.ZERO)!=0)", "{", "return;", "}", "String", "logSeqNbr", "=", "null;", "//", "\ub85c\uadf8\uc77c\ub828\ubc88\ud638", "\uc14b\ud305", "if(!_getCmnContextCore().isChannelAtm()", "&&", "!_getCmnContextCore().isChannelTellerWindow())", "{", "//", "if", "(!ChannelEnum.CD_ATM.getValue().equals(chnlCd)", "&&", "//", "!ChannelEnum.TELLER_WINDOW.getValue().equals(chnlCd))", "{", "//Double", "d", "=", "Math.random()", "*", "Double.parseDouble(\"999999999999999\")", "+", "1;", "Double", "d", "=", "new", "SecureRandom().nextDouble()*Double.parseDouble(\"999999999999999\")", "+", "1;", "logSeqNbr", "=", "String.valueOf(d.longValue());", "}", "else", "{", "//", "\ub85c\uadf8\uc77c\ub828\ubc88\ud638", "\ucc44\ubc88", "logSeqNbr", "=", "_getNbrgCore().getNumbering(NumberingCoreEnum.LOG_SEQUENCE_NUMBER.getValue());", "//log", "sequence", "number", "}", "cmnJrnzArea.setLogSeqNbr(new", "BigDecimal(logSeqNbr));", "if(logger.isDebugEnabled()){", "logger.debug(\"##", "AcctgJrnlCmnCoreCustomImpl", ">", "logSeqNbr", ":", "{}\",", "logSeqNbr);", "}"], "docstring_tokens": ["This", "method", "provides", "the", "ability", "to", "numbering", "log", "serial", "numbers", "for", "AC_ACCTG_L", "Table", "(accounting", "log)."]}
{"code_tokens": ["public", "String", "getRoleIdByName(String", "instCd,", "String", "roleNm)", "throws", "BizApplicationException", "{", "RoleIO", "param", "=", "new", "RoleIO();", "param.setInstCd(instCd);", "param.setRoleNm(roleNm);", "param", "=", "this.getRole(param);", "if(param!=null)", "return", "param.getRoleId();", "else", "return", "null;", "}"], "docstring_tokens": ["It", "inquires", "role", "id", "by", "name"]}
{"code_tokens": ["public", "String", "getSectionEndDt()", "{", "return", "super.getSctnEndDt();", "}"], "docstring_tokens": ["This", "method", "inquires", "section", "end", "date", "of", "balance"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(StsEnum", "item", ":", "StsEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "\"99\".equalsIgnoreCase(value)", "?", "false", ":", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(CustTxImpl", "custTxImpl,", "Map<String,", "String>", "subInfoMap)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(subInfoMap", "==", "null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustTxSIO", "subInfoIO", "=", "getSubInfoCache(custTxImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtCustTxSIO();", "subInfoIO.setCustId(custTxImpl.getCustId());", "subInfoIO.setTxDt(custTxImpl.getCustTxDt());", "subInfoIO.setTxSeqNbr(custTxImpl.getCustTxSeqNbr());", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_getAtCustTxSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_getAtCustTxSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custTxImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "request", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "void", "setTimeoutScnd(", "java.lang.Integer", "timeoutScnd", ")", "{", "isSet_timeoutScnd", "=", "true;", "this.timeoutScnd", "=", "timeoutScnd;", "}"], "docstring_tokens": ["Set", "timeout", "second."]}
{"code_tokens": ["public", "List<ArrRelStaffInfoOut>", "getListArrStaffRelation(String", "arrStaffRelCd,", "String", "staffId,", "String", "baseDt)", "throws", "BizApplicationException", "{", "return", "_getArrStaffRelBiz().getListArrStaffRelation(arrStaffRelCd,", "staffId,", "baseDt,", "this);", "}"], "docstring_tokens": ["Inquire", "list", "of", "arrangement/staff", "relation", "information."]}
{"code_tokens": ["public", "List<TaxRtIO>", "getListTaxRate(String", "isoNatCd,", "String", "taxRtCd,", "String", "aplyStartDt)", "throws", "BizApplicationException", "{", "return", "_getListTaxRate(isoNatCd,", "taxRtCd,", "\"\",", "aplyStartDt,", "\"\");", "}"], "docstring_tokens": ["This", "method", "provide", "the", "tax", "rate", "by", "ISO", "country", "code,", "tax", "rate", "code,", "tax", "type,", "start", "date,", "and", "end", "date."]}
{"code_tokens": ["public", "void", "modifyCurrencyBillCategory(CaCrncyBillCtgryDtlIO", "crncyBillCtgryDtlIO)", "throws", "BizApplicationException", "{", "//", "Check", "Input", "Argument", "_checkCurrencyBillCategoryInput(crncyBillCtgryDtlIO);", "if(!_getCurrencyBillCategory(crncyBillCtgryDtlIO))", "{", "//", "No", "record", "found", "throw", "new", "BizApplicationException(\"AAPACE3018\",", "null);", "}", "if(_getAcCrncyBillCtgryMDso().update(_setAcCrncyBillCtgryCdIO(crncyBillCtgryDtlIO))", "==", "0)", "{", "//", "Failed", "to", "update", "throw", "new", "BizApplicationException(\"AAPACE1001\",", "null);", "}", "}"], "docstring_tokens": ["Modify", "a", "denomination", "This", "method", "is", "for", "modifying", "a", "new", "domination.", "If", "the", "value", "entered", "by", "the", "service", "not", "exists,", "the", "institution", "code(instCd)", "is", "set", "institution", "code", "in", "CmnContext"]}
{"code_tokens": ["public", "List<ArrAtrbtChngHst>", "getAttributeChangeHistory(ArrTxCore", "arrTx,", "boolean", "isEavOnly,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "if(arrTx==null){", "throw", "new", "BizApplicationException(\"AAPSVE0012\",", "new", "Object[]", "{\"@arrTx\"});", "}", "return", "_getArrBasicBiz().getAttributeChangeHistory(null,arrTx,isEavOnly,arrReal);", "}"], "docstring_tokens": ["Inquire", "arrangement", "attribute", "change", "history", "of", "the", "arrangement", "itself", "and", "extended", "attribute", "by", "specified", "transaction."]}
{"code_tokens": ["public", "Arr", "getArr(String", "acctNbr,", "Integer", "nthNbr)", "throws", "BizApplicationException", "{", "logger.debug(\"##", "<SHW>", "getArr(String,", "Integer", "executed!!\");", "ArrReal", "arrReal", "=", "(ArrReal)", "super.getArrRealCoreByAcctNbr(acctNbr,", "nthNbr);", "arrReal", "=", "_getArrRealCommon(arrReal,", "acctNbr);", "return", "(Arr)_checkArrObjectByKind(arrReal,", "ArrKndEnum.NORMAL);", "}"], "docstring_tokens": ["Inquire", "customer", "account", "arrangement", "using", "arrangement", "id", "(internal", "use)", "or", "business", "key", "like", "account", "number,", "application", "number", ",", "mobile", "number", "so", "on.."]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbCnstncySvInstSrvcMDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(value))", "{", "for", "(PushDtlScrnDscdEnum", "item", ":", "PushDtlScrnDscdEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(XtnTableEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "int", "getTxSeqNbr()", "{", "return", "txSeqNbr;", "}"], "docstring_tokens": ["It", "takes", "the", "transaction", "sequence", "number", "for", "each", "transaction", "date."]}
{"code_tokens": ["public", "ArrActvtyDlvry", "getArrActivityDelivery(Integer", "arrActvtySeqNbr,", "ArrReal", "arrReal)", "throws", "BizApplicationException{", "return", "(ArrActvtyDlvry)", "super.getArrActivityCore(ArrActvtyTpEnum.DELIVERY.getValue(),", "arrActvtySeqNbr,", "(ArrRealCore)arrReal);", "}"], "docstring_tokens": ["Inquire", "arrangement", "delivery", "activity", "by", "activity", "sequence", "number."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrRealByArrStsList(String", "custId,", "List<ArrStsEnum>", "arrStsEnumList,", "String", "arrCustRelCd,", "String", "bizDscd,String", "pdTpCd,", "String", "pdTmpltCd,", "String", "pdCd,", "boolean", "hasVrtnArr)", "throws", "BizApplicationException", "{", "return", "_getArrCustRelQryBizImpl().getListArrRealByArrStsList(custId,", "arrStsEnumList,", "arrCustRelCd,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "pdCd,", "0,", "0,", "hasVrtnArr);", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "arrangements", "of", "specific", "product", "currently", "in", "specific", "status", "lise", "related", "to", "customer", "with", "specific", "arrangement-customer", "relation", "type."]}
{"code_tokens": ["public", "int", "getProgressStatusTotalCount(String", "instCd,", "String", "stlmntBaseDt,", "String", "acctgDscd)", "throws", "BizApplicationException", "{", "_checkInputData(instCd,", "\"instCd\");", "_checkInputData(stlmntBaseDt,", "\"stlmntBaseDt\");", "_checkInputData(acctgDscd,", "\"acctgDscd\");", "return", "_getAcStlmntPrgrsStsMDso().selectTotalCount(instCd,", "stlmntBaseDt,", "acctgDscd);", "}"], "docstring_tokens": ["It", "inquires", "the", "total", "count", "of", "settlement", "progress."]}
{"code_tokens": ["public", "boolean", "checkRoleAthrtyAplyRng(", "String", "staffId,", "String", "roleAthrtyAplyRngTpCd", ")", "throws", "BizApplicationException", "{", "//", "2020.08.07", "LINE", "\ud504\ub85c\uc81d\ud2b8", "\uc131\ub2a5", "\uac1c\uc120\uc694\uccad", "\ubc18\uc601", "//", "\uc5ed\ud560", "\ud14c\uc774\ube14", "JOIN\ud558\uc5ec", "\uc870\ud68c\ud558\ub294", "\uac83", "\ub300\uc2e0\uc5d0", "\ud55c\ubc88\uc5d0", "\uc870\ud68c\ud558\uc5ec", "\ubc18\uc601\ud568", "//", "\ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c", "Customizing", "\uac00\ub2a5\ud558\ub3c4\ub85d", "\ucf54\uc5b4\uc5d0\uc11c", "\uc0ac\uc774\ud2b8\uc5d0\uc11c", "\uae30\ub2a5\uc73c\ub85c", "\uc774\uad00\ucc98\ub9ac\ud568", "return", "CCM01.YES.equals(_getCmRoleMDso().selectExistStaffRoleByAthrityAplyRngTpCd(_getCmnContext().getInstCode(),", "_getCmnContext().getDeptId(),", "staffId,", "roleAthrtyAplyRngTpCd));", "}"], "docstring_tokens": ["It", "checks", "if", "the", "staff", "has", "a", "role", "that", "matches", "the", "role", "authority", "range."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ScrtyIntImpl", "scrtyInt){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\uc124\uc815\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AsScrtyIntSIO", "subInfo", "=", "getSubInfoCache(scrtyInt);", "//", "2.", "\uc124\uc815\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\uc124\uc815\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(ScrtyIntSubInfo.FIELDS.get(entry.getKey())", "==", "null)", "{", "continue;", "}", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "as", "a", "map."]}
{"code_tokens": ["public", "String", "getSubInfo(ActorCore", "actorCore,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getActorSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(ActorImpl)", "actorCore);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(CaDstbWayCdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CashSndRcvMgmtSvcCashSndRcvIn", "clone(){", "try{", "CashSndRcvMgmtSvcCashSndRcvIn", "object=", "(CashSndRcvMgmtSvcCashSndRcvIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "BigDecimal", "getTaxRate(String", "isoNatCd,", "TaxRateEnum", "taxRtEnum,", "TaxTypeEnum", "taxTpEnum,", "String", "aplyStartDt)", "throws", "BizApplicationException", "{", "return", "getTaxRate(isoNatCd,", "taxRtEnum.getValue(),", "taxTpEnum.getValue(),", "aplyStartDt);", "}"], "docstring_tokens": ["This", "method", "provides", "a", "list", "of", "tax", "rate", "information", "by", "ISO", "country", "code,", "tax", "rate", "code,", "and", "start", "date."]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbCnstncySvInstSrvcPrflDDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AprslCore", "aprslCore)", "throws", "BizApplicationException", "{", "_getAprslSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AprslImpl)", "aprslCore);", "}"], "docstring_tokens": ["Save", "an", "asset", "subsidiary", "information."]}
{"code_tokens": ["public", "CaCoaMgmtSvcGetCoaListTreeOut", "clone(){", "try{", "CaCoaMgmtSvcGetCoaListTreeOut", "object=", "(CaCoaMgmtSvcGetCoaListTreeOut)super.clone();", "if", "(", "this.children==", "null", ")", "object.children", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaOut>(children.size());", "for(", "bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaOut", "item", ":", "children", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaOut)item.clone());", "}", "object.children", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustPswdSvcAllChngIn", "clone(){", "try{", "CustPswdSvcAllChngIn", "object=", "(CustPswdSvcAllChngIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isChannelExternalNetwork(String", "chnlDscd)", "throws", "BizApplicationException", "{", "return", "ChannelEnum.EXTERNAL_NETWORK.getValue().equals(chnlDscd)", "?", "true", ":", "false;", "}"], "docstring_tokens": ["Inquiry", "whether", "it", "is", "a", "channel", "external"]}
{"code_tokens": ["public", "boolean", "isChannelArs()", "throws", "BizApplicationException", "{", "return", "ChannelEnum.PHONE_BANKING_ARS.getValue().equals(this.getChannelDscd())", "?", "true", ":", "false;", "}"], "docstring_tokens": ["Inquiry", "whether", "it", "is", "a", "channel", "phone", "banking/ARS"]}
{"code_tokens": ["public", "void", "registerBlckngTrgtSrvc(CaArrExtrnlIdSrvcIO", "arrExtrnlIdSrvcIO)", "throws", "BizApplicationException", "{", "CaArArrExtrnlIdSrvcRIO", "arArrExtrnlIdSrvcRIO", "=", "new", "CaArArrExtrnlIdSrvcRIO();", "arArrExtrnlIdSrvcRIO.setInstCd(arrExtrnlIdSrvcIO.getInstCd());", "arArrExtrnlIdSrvcRIO.setArrExtrnlIdNbrTpCd(arrExtrnlIdSrvcIO.getArrExtrnlIdNbrTpCd());", "arArrExtrnlIdSrvcRIO.setArrSrvcTpCd(arrExtrnlIdSrvcIO.getArrSrvcTpCd());", "_getCaCmnContext().setHeaderColumn(arArrExtrnlIdSrvcRIO);", "CaArArrExtrnlIdSrvcRIO", "arArrExtrnlIdSrvcRVO", "=", "this._getArArrExtrnlIdSrvcRDso().select(arArrExtrnlIdSrvcRIO);", "arArrExtrnlIdSrvcRIO.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue());", "int", "result", "=", "0;", "if", "(arArrExtrnlIdSrvcRVO", "==", "null)", "{", "result", "=", "this._getArArrExtrnlIdSrvcRDso().insert(arArrExtrnlIdSrvcRIO);", "}", "else", "{", "result", "=", "this._getArArrExtrnlIdSrvcRDso().update(arArrExtrnlIdSrvcRIO);", "}", "if", "(result", "==", "0)", "{", "throw", "new", "BizApplicationException(\"AAPACE1002\",", "null);", "//", "Failed", "to", "register.", "}", "}"], "docstring_tokens": ["Register", "the", "information", "of", "relation", "between", "arrangement", "external", "identification", "number", "and", "service."]}
{"code_tokens": ["public", "int", "saveExchangeRateInfoActive(ExRtIO", "in)", "throws", "BizApplicationException", "{", "_checkNullInputArgument(in,", "CCM01.SAVE);", "int", "result", "=", "0;", "CmExRtDIO", "daoIn", "=", "_setExRtDIO(in);", "daoIn.setExRgstrnStsCd(ExchngRegtStatusEnum.ACTIVE.getValue());", "CmExRtDIO", "cmExRtDIO", "=", "new", "CmExRtDIO();", "cmExRtDIO.setInstCd(in.getInstCd());", "cmExRtDIO.setCrncyCd(in.getCrncyCd());", "cmExRtDIO.setBaseDt(in.getBaseDt());", "cmExRtDIO.setExRtAplyNth(in.getExRtAplyNth());", "cmExRtDIO.setExRgstrnStsCd(ExchngRegtStatusEnum.REGISTER.getValue());", "cmExRtDIO", "=", "_getCmExRtDDso().select(cmExRtDIO);", "if(cmExRtDIO", "==", "null)", "{", "///", "\ud658\uc728\uc815\ubcf4\uac00", "\ubbf8\ub4f1\ub85d\ub418\uc5c8\uc2b5\ub2c8\ub2e4.", "throw", "new", "BizApplicationException(\"AAPARE0445\",", "new", "Object[]", "{});", "}", "result", "=", "_getCmExRtDDso().updateActive(daoIn);", "return", "result;", "}"], "docstring_tokens": ["It", "saves", "the", "exchange", "rate", "information.", "Make", "the", "exchange", "registration", "status", "code", "'02'", "active."]}
{"code_tokens": ["public", "java.lang.String", "getUnmaskId(){", "return", "unmaskId;", "}"], "docstring_tokens": ["Unmask", "Id", "inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "BillCtgryCashMgmtSvcGetBillCtgryCashOut", "clone(){", "try{", "BillCtgryCashMgmtSvcGetBillCtgryCashOut", "object=", "(BillCtgryCashMgmtSvcGetBillCtgryCashOut)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "String", "txDt,", "Integer", "txSeqNbr,", "InsrncImpl", "insrncImpl)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsInsrncSIO", "subInfoCache", "=", "getSubInfoCache(insrncImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsInsrncSIO();", "subInfoCache.setInsrncId(insrncImpl.getInsrncBasicCache().getInsrncId());", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(insrncImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-1.", "insert", "_getAsInsrncSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "insrncImpl.setInsrncSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(insrncImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-2.", "update", "_getAsInsrncSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "the", "asset", "thing", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "boolean", "isChannelArs(String", "chnlDscd)", "throws", "BizApplicationException", "{", "return", "ChannelEnum.PHONE_BANKING_ARS.getValue().equals(chnlDscd)", "?", "true", ":", "false;", "}"], "docstring_tokens": ["Inquiry", "whether", "it", "is", "a", "channel", "phone", "banking/ARS"]}
{"code_tokens": ["public", "List<ArrRelDeptInfoOut>", "getListArrDeptRelation(String", "arrDeptRelCd,", "String", "deptId,", "String", "baseDt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelBiz().getListArrDeptRelation(arrDeptRelCd,", "deptId,", "baseDt,", "this);", "}"], "docstring_tokens": ["Inquire", "list", "of", "arrangement/department", "relation", "information."]}
{"code_tokens": ["protected", "String", "getMthrArrId()", "{", "return", "this.mthrArrId;", "}"], "docstring_tokens": ["This", "method", "inquires", "a", "mother", "arrangement", "identification", "of", "the", "transaction."]}
{"code_tokens": ["public", "boolean", "checkCode(CdNbrInfoIO", "in,", "String", "cd)", "throws", "BizApplicationException", "{", "CmCdDIO", "cmCdDIO", "=", "new", "CmCdDIO();", "cmCdDIO.setCdNbr(in.getCdNbr());", "cmCdDIO.setCdNm(in.getCdNm());", "cmCdDIO.setCd(cd);", "cmCdDIO.setActvStsCd(ActiveStatusEnum.ACTIVE.getValue());", "List<CmCdDIO>", "cdDtlList", "=", "_getCmCdDDso().selectListByCondition(cmCdDIO);", "if(cdDtlList", "==", "null", "||", "cdDtlList.isEmpty())", "{", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(ArrCndStsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "Integer", "getNthNbr()", "{", "return", "nthNbr;", "}"], "docstring_tokens": ["Inquire", "nth", "number", "of", "arrangement.", "Nth", "number", "is", "a", "sequence", "number", "to", "identify", "each", "arrangement", "when", "multiple", "arrangements", "use", "same", "account", "number", "for", "business", "purpose.", "This", "number", "is", "also", "given", "when", "the", "account", "number", "is", "given", "if", "it", "is", "necessary."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(PrtnrCore", "prtnrCore,", "Map<String,", "String>", "xtnInfoMap)", "throws", "BizApplicationException", "{", "_getPrtnrSubInfoBiz().saveMapSubInfo(xtnInfoMap,", "(PrtnrImpl)", "prtnrCore);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "subInfoMap."]}
{"code_tokens": ["public", "boolean", "isIteration()", "{", "return", "isIter;", "}"], "docstring_tokens": ["Check", "whether", "iteration"]}
{"code_tokens": ["public", "CaDocBsicIO", "getDocBasic()", "throws", "BizApplicationException", "{", "return", "docBsicIO;", "}"], "docstring_tokens": ["It", "inquiries", "a", "basic", "information", "of", "document."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(AcctgItmEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "void", "restoreCustLoginInfo()", "throws", "BizApplicationException", "{", "//", "restore", "data", "&", "register", "information", "change", "history", "_getCustLoinInfoBiz().restoreCustLoginInformation(super.getCustBasicInfo(),", "getActor().getListActorInfoMgmtItem());", "}"], "docstring_tokens": ["It", "restores", "all", "terminated", "customer", "login", "information."]}
{"code_tokens": ["public", "String", "getDeptId(){", "return", "deptId;", "}"], "docstring_tokens": ["Department", "number", "inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "Integer", "getListArrBasedOnStsHistoryCount(", "String", "deptId,ArrDeptRelEnum", "arrDeptRel,", "String", "bizDscd,", "String", "pdTpCd,String", "pdTmpltCd,String", "pdCd,", "List<String>", "arrKndList,List<String>", "curArrStsList,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "boolean", "hasVrtnArr)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistoryCount(deptId,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "pdCd,", "arrDeptRel,", "arrKndList,curArrStsList,", "arrSts,", "inqryStartDt,", "inqryEndDt,hasVrtnArr", ");", "}"], "docstring_tokens": ["Inquire", "total", "count", "of", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "of", "specific", "product", "hierarchy", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "other", "specific", "status.", "(Paging)", "Inquire", "modification", "arrangement", "of", "inquired", "arrangement", "if", "hasVrtnArr", "is", "true."]}
{"code_tokens": ["public", "List<SrvcPrflGetInstSrvcDtlIO>", "getListInstServiceByProfile(SrvcPrflGetInstSrvcIO", "in)", "throws", "BizApplicationException", "{", "List<SrvcPrflGetInstSrvcDtlIO>", "out", "=", "new", "ArrayList<SrvcPrflGetInstSrvcDtlIO>();", "List<SvSrvcMIO>", "daoList", "=", "_getListInstitutionServiceBasic(in);", "for(", "SvSrvcMIO", "tmpList", ":", "daoList", ")", "{", "SrvcPrflGetInstSrvcDtlIO", "srvcBsicIO", "=", "new", "SrvcPrflGetInstSrvcDtlIO();", "srvcBsicIO.setSrvcCd(tmpList.getSrvcCd());", "//\uc11c\ube44\uc2a4\ucf54\ub4dc", "srvcBsicIO.setSrvcNm(tmpList.getSrvcNm());", "//\uc11c\ube44\uc2a4\uba85", "srvcBsicIO.setSrvcAbrvtnNm(tmpList.getSrvcAbrvtnNm());", "//\uc11c\ube44\uc2a4\uc57d\uc5b4\uba85", "srvcBsicIO.setCmpntCd(tmpList.getCmpntCd());", "//\ucef4\ud3ec\ub10c\ud2b8\ucf54\ub4dc", "srvcBsicIO.setSrvcClassNm(tmpList.getSrvcClassNm());", "//\uc11c\ube44\uc2a4\ud074\ub798\uc2a4\uba85", "srvcBsicIO.setSrvcFtrCntnt(tmpList.getSrvcFtrCntnt());", "//\uc11c\ube44\uc2a4\ud2b9\uc131\ub0b4\uc6a9", "srvcBsicIO.setOprtnNm(tmpList.getOprtnNm());", "//\uc624\ud37c\ub808\uc774\uc158\uba85", "srvcBsicIO.setInpDtoNm(tmpList.getInpDtoNm());", "//\uc785\ub825DTO\uba85", "srvcBsicIO.setOutpDtoNm(tmpList.getOutpDtoNm());", "//\ucd9c\ub825DTO\uba85", "out.add(", "srvcBsicIO", ");", "}", "return", "out;", "}"], "docstring_tokens": ["Inquire", "institute", "service", "lists", "by", "profile."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(AssetKndCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@AssetXtnAtrbtNm\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(AprslThingKndCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@AssetXtnAtrbtNm\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapXtnInfo(boolean", "isEavOnly,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "return", "_getArrXtnInfoBiz().getMapXtnInfo(isEavOnly,", "arrReal);", "}"], "docstring_tokens": ["Inquire", "the", "actor", "extended", "information", "map.", "Inquire", "extended", "information", "with", "normal", "extended", "attribute", "status", "code."]}
{"code_tokens": ["public", "CashCardIssueSvcOut", "clone(){", "try{", "CashCardIssueSvcOut", "object=", "(CashCardIssueSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isChannelBatch()", "throws", "BizApplicationException", "{", "return", "ChannelEnum.BATCH.getValue().equals(this.getChannelDscd())", "?", "true", ":", "false;", "}"], "docstring_tokens": ["It", "checks", "batch", "channel."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AprslImpl", "aprsl){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\uc790\uc0b0\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "subInfo", "=", "getSubInfoCache(aprsl);", "//", "2.", "\uc790\uc0b0\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\uc790\uc0b0\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(!_isSubInfoContainsField(aprsl.getAprslSubInfoKnd(),", "entry.getKey()))", "{", "continue;", "}", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "insurance", "as", "a", "map."]}
{"code_tokens": ["public", "String", "getParentClassName()", "{", "return", "this.parntClassNm;", "}"], "docstring_tokens": ["Query", "parent", "class", "name"]}
{"code_tokens": ["public", "CustCheckPwdOut", "checkPassword(CustLoinInfoIO", "custLoinInfoIO,", "String", "pswd,", "String", "loinTpCd)", "throws", "BizApplicationException", "{", "CustCheckPwdOut", "custCheckPwdOut", "=", "new", "CustCheckPwdOut();", "if", "(custLoinInfoIO", "==", "null)", "{", "return", "custCheckPwdOut;", "}", "if", "(custLoinInfoIO.getEncrptnPswd()", "==", "null)", "{", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue());", "}", "else", "if", "(pswd.equals(custLoinInfoIO.getEncrptnPswd()))", "{", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.SUCCESS.getValue());", "}", "else", "{", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue());", "}", "return", "custCheckPwdOut;", "}"], "docstring_tokens": ["It", "checks", "if", "the", "input", "password", "equals", "the", "registered", "password", "of", "the", "main", "login", "information."]}
{"code_tokens": ["public", "CaNoticeMsgCdMgmtIO", "getInfo(String", "noticeMsgCd)", "throws", "BizApplicationException", "{", "if(StringUtils.isEmpty(noticeMsgCd)){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@noticeMsgCd\"});", "}", "//", "get", "caching", "data", "CaNoticeMsgCdMgmtIO", "noticeMsgCdIO", "=", "new", "CaNoticeMsgCdMgmtIO();", "//", "query", "data", "CaAtNoticeMsgMIO", "rgstrnAtNoticeMsgCdIO", "=", "_getAtNoticeMsgMDso().select(noticeMsgCd,", "null);", "if(rgstrnAtNoticeMsgCdIO", "!=", "null)", "{", "noticeMsgCdIO.setNoticeGoalTpCd(rgstrnAtNoticeMsgCdIO.getNoticeGoalTpCd());", "noticeMsgCdIO.setNoticeMsgCd(rgstrnAtNoticeMsgCdIO.getNoticeMsgCd());", "noticeMsgCdIO.setNoticeMsgNm(rgstrnAtNoticeMsgCdIO.getNoticeMsgNm());", "noticeMsgCdIO.setNoticeWayTpCd(rgstrnAtNoticeMsgCdIO.getNoticeWayTpCd());", "noticeMsgCdIO.setDelYn(rgstrnAtNoticeMsgCdIO.getDelYn());", "}", "return", "noticeMsgCdIO;", "}"], "docstring_tokens": ["Inquire", "document-notice", "relation", "information."]}
{"code_tokens": ["public", "void", "validate()", "throws", "BizApplicationException", "{", "if", "(!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getRngVal()))){", "//This", "product", "purchasable", "time", "is", "({0}", "~", "{1})", "//\ubcf8\uc0c1\ud488\uc740\uc758", "\ud310\ub9e4", "\uac00\ub2a5", "\uc2dc\uac04\uc740", "({0}", "~", "{1})", "\uc785\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0279\"", ",", "new", "Object[]{getMinVal().setScale(0).toPlainString(),getMaxVal().setScale(0).toPlainString()});", "}", "}"], "docstring_tokens": ["Processing", "rules", "should", "be", "commonly", "performed", "according", "to", "the", "rules", "defined", "in", "the", "service", "processing", "rule,", "based", "on", "the", "representative", "service", "type", "registered", "to", "the", "specific", "service."]}
{"code_tokens": ["public", "String", "getDescription()", "{", "return", "description;", "}"], "docstring_tokens": ["Query", "the", "description"]}
{"code_tokens": ["public", "void", "validate(ArrReal", "arrReal,", "Map<ArrVldtnRequiredValEnum,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "super.validate((ArrRealCore)", "arrReal,", "_convertValMap(vldtnRequiredValMap));", "}"], "docstring_tokens": ["It", "performs", "common", "service", "processing", "rules", "defined", "in", "the", "service", "processing", "rules", "and", "whether", "the", "contract-based", "service", "is", "available,", "based", "on", "the", "service", "type", "input.", "Whether", "contract", "services", "are", "available", "verifies:", "1)", "Verification", "of", "service", "restriction", "based", "on", "product", "information", "of", "contract.", "2)", "Verification", "of", "restriction", "related", "to", "the", "service", "set", "in", "the", "contract", "such", "as", "pledge", "setting.", "3)", "Perform", "verification", "rules", "that", "should", "be", "performed", "in", "common", "as", "the", "requirement", "that", "dead", "customers", "should", "not", "become", "financial", "transactions."]}
{"code_tokens": ["public", "boolean", "isTableAttributeValid(String", "xtnTblNm,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "XtnAtrbtVrtnCmpsEnum", "xtnAtrbtVrtnCmpsEnum,", "String", "inputValue)", "throws", "BizApplicationException", "{", "//", "\uc0c1\ud488\uacfc", "\uad00\ub828", "\uc5c6\ub294", "\ud655\uc7a5\uc18d\uc131\ubcc0\ud615\uad6c\uc131", "\ucf54\ub4dc\ub97c", "\uac80\uc99d", "\ud55c\ub2e4.", "return", "_getAtrbt().isTableAttributeValid(xtnTblNm,", "xtnAtrbtNm,", "xtnAtrbtCntnt,", "xtnAtrbtVrtnCmpsEnum,", "inputValue);", "}"], "docstring_tokens": ["Validate", "extend", "attribute", "validation."]}
{"code_tokens": ["public", "String", "getInstCd()", "{", "return", "arrTxBsicIO.getInstCd();", "}"], "docstring_tokens": ["Inquire", "institution", "code", "of", "arrangement", "activity."]}
{"code_tokens": ["public", "String", "getBeforeDateTxYn()", "throws", "BizApplicationException", "{", "return", "_getContextHeader().getBfDtTxYn();", "}"], "docstring_tokens": ["Before", "date", "transaction", "Yn", "inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "java.lang.String", "getCndVal(){", "return", "cndVal;", "}"], "docstring_tokens": ["This", "method", "get", "the", "arrangement", "condition", "value", "as", "string.", "for", "list", "type", "condition,", "return", "list", "code", "and", "the", "other", "type", "return", "the", "string", "number", "applied", "the", "scale", "2."]}
{"code_tokens": ["public", "CaStdAbrvtnMgmtSvcGetStdAbrvtnOut", "clone(){", "try{", "CaStdAbrvtnMgmtSvcGetStdAbrvtnOut", "object=", "(CaStdAbrvtnMgmtSvcGetStdAbrvtnOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getTxHhmmss()", "throws", "BizApplicationException", "{", "return", "this.getTxTime();", "}"], "docstring_tokens": ["Transaction", "time", "Inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "String", "getInsrncXtnInfo(String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getInsrncXtnInfoBiz().getInsrncXtnInfo(this,", "xtnAtrbtNm);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "extended", "information", "of", "the", "insurance."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,String", "xtnAtrbtCntnt,", "ArrTxImpl", "arrTx)", "{", "//", "0.", "\uc800\uc7a5\ud558\ub824\ub294", "\uc18d\uc131\uac12\uc758", "\uc720\ud6a8\uc131", "\uac80\uc99d(\ucf54\ub4dc\uad00\ub828", "\uc18d\uc131\uc77c", "\uacbd\uc6b0", "\uc720\ud6a8\ud55c", "\ucf54\ub4dc\uac12\uc778\uc9c0", "\uac80\uc99d\ud55c\ub2e4.)", "_getAtrbtChk().checkStandardAttribute(xtnAtrbtNm,", "xtnAtrbtCntnt);", "//", "1.", "\uac70\ub798\uad00\ub828", "\ubcf4\uc870\uba85\uc138", "\uc870\ud68c(\uce90\uc2dc\ub85c\ubd80\ud130)", "-", "DBIO", "VO", "IValueObject", "oldCache", "=", "getSubInfoCache(arrTx);", "//", "2.", "DB", "\ubc18\uc601", "if(oldCache", "==", "null)", "{", "//", "2.1.1", "DBIO", "VO", "\uc778\uc2a4\ud134\uc2a4", "\uc0dd\uc131", "oldCache", "=", "_newSubInfoDBIO(arrTx);", "//", "2.1.2", "primary", "key", "\uc870\ub9bd", "_setKey(oldCache,arrTx);", "//", "2.1.3", "\ubcf4\uc870\uc815\ubcf4(\ub2e8\uac74)\uc73c\ub85c\ubd80\ud130", "DBIO", "VO\uac12", "\ucc44\uc6b0\uae30", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "oldCache);", "//", "2.1.4", "\uce90\uc2f1\ub41c", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc5c6\uc73c\uba74", "\ucd5c\ucd08", "\uc800\uc7a5,", "\uc989", "insert", "_insertSubInfo(arrTx,", "oldCache);", "//", "2.1.5", "\uce90\uc2f1\ucc98\ub9ac", "(\ucd5c\ucd08\uc801\uc7ac)", "arrTx.setArrTxSubInfoCache(oldCache);", "}else", "{", "//", "2.2.1", "\uce90\uc2f1\ub41c", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc788\uc73c\uba74", "\ubcc0\uacbd", "\uc800\uc7a5,", "\uc989", "update,", "update\uc804", "\uae30\uc874\uc815\ubcf4\ub791", "\ub3d9\uc77c", "\uc2dc", "\ub9ac\ud134", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "oldCache))", "{", "return;", "}", "//", "2.2.2", "update", "-", "\uc0c8\ub85c\ubcc0\uacbd\ub418\uc5b4\uc57c", "\ud560", "\uc18d\uc131\uc744", "DBIO", "VO", "\ubc18\uc601", "DtoUtils.setSubInfoIO(xtnAtrbtNm,xtnAtrbtCntnt,", "oldCache);", "//", "2.2.3", "update", "-", "update", "\uc218\ud589", "_updateSubInfo(arrTx,", "oldCache);", "}", "//", "4.", "\uce90\uc2dc", "\ucc98\ub9ac", "(DBIO", "VO->Interface", "VO)", "&", "\uce90\uc2f1", "//_saveSubInfoCache(oldCache,arrTx);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "subsidiary", "information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "StaffSelfAuthSvcXtnAtrbtIO", "clone(){", "try{", "StaffSelfAuthSvcXtnAtrbtIO", "object=", "(StaffSelfAuthSvcXtnAtrbtIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaStyleSvcGetStyleListOut", "clone(){", "try{", "CaStyleSvcGetStyleListOut", "object=", "(CaStyleSvcGetStyleListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcStyleIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcStyleIO>(tblNm.size());", "for(", "bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcStyleIO", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcStyleIO)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "doServiceAction(ArrangementCoreImpl", "arrangement,String", "arrSrvcTpCd,ArrActionRequiredValue", "arrActionRequiredValue)", "throws", "BizApplicationException", "{", "if", "(StringUtils.isEmpty(arrSrvcTpCd))", "{", "arrSrvcTpCd", "=", "_getSrvcPrflCore().getInstServiceProfile(SrvcPrflAtrbtCoreEnum.REPRESENTATIVE_ARRANGEMENT_SERVICE_TYPE_CODE.getValue());", "}", "if", "(StringUtils.isEmpty(arrSrvcTpCd))", "{", "//", "There", "is", "no", "representative", "arrangement", "service", "type", "nor", "arrangement", "service", "type", "input.", "Please", "check", "input", "value.", "//", "\ub300\ud45c\uacc4\uc57d\uc11c\ube44\uc2a4\uc720\ud615", "\ub610\ub294", "\uc785\ub825\ub41c", "\uacc4\uc57d\uc11c\ube44\uc2a4\uc720\ud615\uc774", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\uc785\ub825\uac12\uc744", "\ud655\uc778\ud558\uc2ed\uc2dc\uc624.", "throw", "new", "BizApplicationException(\"AAPARE0716\",", "null);", "}", "//1.\uc870\uac74\ucc98\ub9ac", "this.doConditionAction(arrangement,", "arrSrvcTpCd,arrActionRequiredValue);", "//2.\ud655\uc7a5\uc18d\uc131\ucc98\ub9ac", "this.doXtnAtrbtAction(arrangement,", "arrSrvcTpCd,", "arrActionRequiredValue);", "arrangement.setIsSrvcActionDone(true);", "}"], "docstring_tokens": ["Perform", "the", "condition", "action", "related", "to", "the", "specific", "service", "type.", "For", "example", "1", ",", "In", "case", "of", "loan", "installment", "disbursement", "possible", "condition", ",the", "loan", "disbursement", "possible", "condition", "class'", "\"doServiceAction\"", "method", "dose", "the", "validation", "step", "like", "1.investigates", "disbursed", "amount,", "2.get", "product", "condition", "value", "whether", "installment", "disbursement", "is", "allowed,", "3.", "make", "decision", "whether", "the", "service", "is", "permitted", "or", "not.", "The", "other", "example,", "the", "interest", "capitalization", "YN", "condition", "class", "do", "the", "action", "to", "make", "a", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date", "when", "arrangement", "open", "service", "is", "executed."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(value))", "{", "for", "(CdNbrCoreEnum", "item", ":", "CdNbrCoreEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "DocPrntIO", "issueTemporaryDoc(Doc", "doc,", "DocIssueIn", "docIssueIn,", "PrntWayTpEnum", "prntWayTp,", "Map<String,Object>", "refObjectMap)", "throws", "BizApplicationException", "{", "DocCore", "docCore", "=", "(DocCore)doc;", "return", "super.issueTemporaryDoc(docCore,", "docIssueIn,", "prntWayTp,", "refObjectMap);", "}"], "docstring_tokens": ["It", "creates", "temporary", "document", "and", "issue", "temporary", "document.", "It", "doesn't", "insert", "issued", "information,", "crate", "only", "temporary", "information.", "It", "creates", "issuing", "document", "content", "from", "document", "template."]}
{"code_tokens": ["public", "Pd", "getPd(String", "instCd,String", "arrCrtnDt,String", "arrCrtnTm,", "String", "pdCd)", "throws", "BizApplicationException", "{", "PdIn", "pdIn", "=", "new", "PdIn();", "pdIn.setInstCd(instCd);", "//", "Product", "Code", "pdIn.setPdCd(pdCd);", "//", "Product", "Code", "pdIn.setAplyDt(arrCrtnDt);", "//", "Apply", "Date", "pdIn.setAplyTm(arrCrtnTm);", "//", "Product", "Code", "Pd", "pd", "=", "_getPdMngr().getPd(pdIn);", "if", "(pd", "==", "null", "||", "!pd.isAvailable()", ")", "{", "throw", "new", "BizApplicationException(\"AAPARE0000\",", "new", "Object[]{instCd+\":\"+pdCd+\":\"+arrCrtnDt+\":\"+arrCrtnTm});", "}", "return", "pd;", "}"], "docstring_tokens": ["Inquire", "product", "of", "arrangement"]}
{"code_tokens": ["public", "List<PdCnd>", "getCndHistory(PdCndHstIn", "in)", "throws", "BizApplicationException", "{", "List<PdCnd>", "out", "=", "null;", "Date", "aplyStartDt", "=", "PdUtil.parseStringToDate(in.getAplyStartDt()", "+", "in.getAplyStartTm());", "Date", "aplyEndDt", "=", "PdUtil.parseStringToDate(in.getAplyEndDt()", "+", "_getAplyTmString(in.getAplyEndTm()));", "List<PdPdCndMIO>", "list", "=", "null;", "PdCndHistoryListIn", "pdCndHistoryListIn", "=", "new", "PdCndHistoryListIn();", "pdCndHistoryListIn.setInstitutionId(getInstCd());", "pdCndHistoryListIn.setPdCd(pd.getPdCd());", "pdCndHistoryListIn.setCndCd(cndCd);", "pdCndHistoryListIn.setStartDate(aplyStartDt);", "pdCndHistoryListIn.setEndDate(aplyEndDt);", "List<PdCndBaseOut>", "pdCndBaseOutList", "=", "_getPdCndCore().getListPdCndHistory(pdCndHistoryListIn);", "if", "(!CollectionCoreUtils.isEmpty(pdCndBaseOutList))", "{", "list", "=", "new", "ArrayList<>();", "for", "(PdCndBaseOut", "pdCndBaseOut", ":", "pdCndBaseOutList)", "{", "PdPdCndMIO", "pdPdCndMIO", "=", "new", "PdPdCndMIO();", "pdPdCndMIO.setInstCd(pdCndBaseOut.getInstitutionId());", "pdPdCndMIO.setCndGrpTmpltCd(pdCndBaseOut.getCndGroupTemplateCd());", "pdPdCndMIO.setCndGrpCd(pdCndBaseOut.getCndGroupCd());", "pdPdCndMIO.setCndCd(pdCndBaseOut.getCndCd());", "pdPdCndMIO.setAplyStartDt(pdCndBaseOut.getApplyStartDate());", "pdPdCndMIO.setAplyEndDt(pdCndBaseOut.getApplyEndDate());", "pdPdCndMIO.setStsChngDt(PdUtil.parseDateToYYYYMMDDHHMMSS(pdCndBaseOut.getStatusChangeDate()));", "pdPdCndMIO.setCndTpCd(pdCndBaseOut.getCndTypeCd());", "pdPdCndMIO.setCmpxCndYn(pdCndBaseOut.isComplexCnd()", "?", "CPD01.YES", ":", "CPD01.NO);", "pdPdCndMIO.setCmpxStrctrId(pdCndBaseOut.getComplexStructureId());", "pdPdCndMIO.setTierAplyCalcnWayCd(pdCndBaseOut.getTierApplyCalculationWayCd());", "pdPdCndMIO.setCndStsCd(pdCndBaseOut.getCndStatusCd());", "pdPdCndMIO.setCndValDcsnLvlCd(pdCndBaseOut.getCndValDecisionLevelCd());", "pdPdCndMIO.setCndValNullYn(pdCndBaseOut.isCndValNull()", "?", "CPD01.YES", ":", "CPD01.NO);", "pdPdCndMIO.setMndtryNegCndYn(pdCndBaseOut.isMandatoryNegotiationCnd()", "?", "CPD01.YES", ":", "CPD01.NO);", "pdPdCndMIO.setCndValAplyWayCd(pdCndBaseOut.getCndValApplyWayCd());", "pdPdCndMIO.setStepCndCd(pdCndBaseOut.getStepCndCd());", "pdPdCndMIO.setIntRtAplyBaseDayCd(pdCndBaseOut.getInterestRateApplyBaseDayCd());", "pdPdCndMIO.setPrfIntRtAplyTmCd(pdCndBaseOut.getPrefInterestRateApplyTimeCd());", "pdPdCndMIO.setChildPdUseYn(pdCndBaseOut.isChildPdUse()", "?", "CPD01.YES", ":", "CPD01.NO);", "pdPdCndMIO.setCndDtlsTpCd(pdCndBaseOut.getCndDetailTypeCd());", "pdPdCndMIO.setAmtTpDscd(pdCndBaseOut.getAmtTypeDscd());", "pdPdCndMIO.setRtrnFeeYn(pdCndBaseOut.isReturnFee()", "?", "CPD01.YES", ":", "CPD01.NO);", "pdPdCndMIO.setTierHstExistYn(pdCndBaseOut.isTierHistoryExist()", "?", "CPD01.YES", ":", "CPD01.NO);", "list.add(pdPdCndMIO);", "}", "out", "=", "new", "ArrayList<PdCnd>();", "for", "(PdPdCndMIO", "pdCndMIO", ":", "list)", "{", "PdCndImpl", "cnd", "=", "new", "PdCndImpl(this.pd,", "pdCndMIO);", "out.add(cnd);", "}", "}", "//sorting", "interface", "//", "TODO", "-", "PdCnd", "//_getPdCndCustom().getCndHistory(out);", "//", "TODO", "-", "PdCnd", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "history", "information."]}
{"code_tokens": ["public", "ImportGrntAmtWhdrwlSvcIn", "clone(){", "try{", "ImportGrntAmtWhdrwlSvcIn", "object=", "(ImportGrntAmtWhdrwlSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "PdTemplateQuerySvcGetCndGrpTmpltListTypeOut", "clone(){", "try{", "PdTemplateQuerySvcGetCndGrpTmpltListTypeOut", "object=", "(PdTemplateQuerySvcGetCndGrpTmpltListTypeOut)super.clone();", "if", "(", "this.childCatalogList==", "null", ")", "object.childCatalogList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut>(childCatalogList.size());", "for(", "bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut", "item", ":", "childCatalogList", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut)item.clone());", "}", "object.childCatalogList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArArrAssetRXtnInfoDIO>", "selectList(ArArrAssetRXtnInfoDIO", "arArrAssetRXtnInfoDIO)", "{", "return", "_getArArrAssetRXtnInfoD().selectList(arArrAssetRXtnInfoDIO);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "LnAplyIntRtHstSvcListOut", "clone(){", "try{", "LnAplyIntRtHstSvcListOut", "object=", "(LnAplyIntRtHstSvcListOut)super.clone();", "if", "(", "this.intRtList==", "null", ")", "object.intRtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.query.service.dto.LnArr360IntRt>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.query.service.dto.LnArr360IntRt>(intRtList.size());", "for(", "bankware.corebanking.loan.query.service.dto.LnArr360IntRt", "item", ":", "intRtList", "){", "clonedList.add(", "(bankware.corebanking.loan.query.service.dto.LnArr360IntRt)item.clone());", "}", "object.intRtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(ActorCore", "actorCore,", "Map<String,", "String>", "xtnInfoMap)", "throws", "BizApplicationException", "{", "_getActorSubInfoBiz().saveMapSubInfo(xtnInfoMap,", "(ActorImpl)", "actorCore);", "}"], "docstring_tokens": ["Save", "the", "asset", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo,", "AprslImpl", "aprslImpl,", "Integer", "aprslThingSeqNbr)", "throws", "BizApplicationException{", "//", "0.", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{_getNewSubInfo(aprslImpl.getAprslThingSubInfoKnd(aprslThingSeqNbr)).getClass().getSimpleName()});", "}", "logger.debug(\"##", "<AS>", "saveSubInfo", "->", "subInfo", "=", "{}", "::", "\",", "subInfo.getFieldValues());", "//", "1.", "\uac10\uc815\ubb3c\uac74\ubcf4\uc870\uba85\uc138\uc758", "\uc885\ub958", "\uc870\ud68c", "AprslThingSubInfoKndEnum", "subInfoKnd", "=", "aprslImpl.getAprslThingSubInfoKnd(aprslThingSeqNbr);", "//", "2.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "for(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(entry.getValue()", "!=", "null)", "{", "_getAtrbtChk().checkStandardAttribute(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(aprslImpl,", "aprslThingSeqNbr);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"aprslId\",", "aprslImpl.getAprslBasicCache().getAprslId());", "//", "PK", "setting", "subInfoCache.set(\"aprslThingSeqNbr\",", "aprslThingSeqNbr);", "//", "PK", "setting", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "3-1.", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "4.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoKnd,", "subInfoCache,", "aprslImpl,", "aprslThingSeqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoCache))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "3-2.", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ArrTxCore", "arrTx){", "return", "_getArrTxSubInfoBiz().getMapSubInfo((ArrTxImpl)arrTx);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "thing", "as", "a", "map."]}
{"code_tokens": ["public", "int", "saveDstbTgtMInfo(CaDstbTgtMVO", "in)", "throws", "BizApplicationException{", "int", "result", "=", "_getSvDstbTgtMDso().insert(_getDstbTgtReqMIO(in));", "return", "result;", "}"], "docstring_tokens": ["-", "This", "method", "save", "target", "server", "distribution", "request", "master", "information", "-", "Functionalities", "1.", "save", "for", "target", "server", "distribution", "request", "master", "information"]}
{"code_tokens": ["public", "ArrIntSmltnSvcCndItmListOut", "clone(){", "try{", "ArrIntSmltnSvcCndItmListOut", "object=", "(ArrIntSmltnSvcCndItmListOut)super.clone();", "if", "(", "this.arrStrctrCndList==", "null", ")", "object.arrStrctrCndList", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrCndStrctr>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrCndStrctr>(arrStrctrCndList.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.ArrCndStrctr", "item", ":", "arrStrctrCndList", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.ArrCndStrctr)item.clone());", "}", "object.arrStrctrCndList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrRelCustInfoOut", "getArrCustRelation(String", "arrCustRelCd,", "String", "custId,", "String", "baseDt,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "if(ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())){return", "null;}", "if(", "StringCoreUtils.isEmpty(arrCustRelCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]{\"@arrCustRelCd\"});", "}", "if(", "StringCoreUtils.isEmpty(custId))", "{", "_getArrRelRuleImpl().validateArrRelationPluralPossibleYn(ArrRelKndCoreEnum.CUSTOMER.getValue(),", "arrCustRelCd,", "arrReal);", "custId", "=", "null;", "}", "String", "inqBaseDt", "=", "baseDt;", "if(", "StringCoreUtils.isEmpty(baseDt))", "{", "inqBaseDt", "=", "ArrCmnCoreUtil.getRckngDt(", "_getCmnContextCore()", ");", "}", "ArArrCustRIO", "arArrCustRIO", "=", "_getArArrCustRDso().selectEffective(arrReal.getInstCd(),", "arrReal.getArrId(),", "custId,", "arrCustRelCd,", "inqBaseDt);", "return", "_buildArrRelInfoOut(", "arArrCustRIO", ");", "}"], "docstring_tokens": ["Inquire", "available", "arrangement/customer", "relation", "information", "on", "specific", "date."]}
{"code_tokens": ["public", "PreScrningCardPrfrmnc", "clone(){", "try{", "PreScrningCardPrfrmnc", "object=", "(PreScrningCardPrfrmnc)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaDocRgstSvcBsicModifyIn", "clone(){", "try{", "CaDocRgstSvcBsicModifyIn", "object=", "(CaDocRgstSvcBsicModifyIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "setTxAblStartHms(", "java.lang.String", "txAblStartHms", ")", "{", "isSet_txAblStartHms", "=", "true;", "this.txAblStartHms", "=", "txAblStartHms;", "}"], "docstring_tokens": ["Set", "transaction", "able", "start", "hms."]}
{"code_tokens": ["public", "CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetIn", "clone(){", "try{", "CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetIn", "object=", "(CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "validate(String", "arrSrvcCd,ArrRealCore", "arrReal,", "CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "if", "(!_getCmnContext().isSelfChannel())", "return;", "ArrMbrshp", "arrMbrshp", "=", "_getArrCustMngr().getMembershipArr(cust.getCustId());", "if", "(arrMbrshp", "==", "null", "||", "!arrMbrshp.isActive())", "{", "//You", "are", "not", "authenticated", "with", "this", "bank", "or", "authentication", "is", "under", "processing.", "Please,", "Apply", "for", "authentication", "first.", "//\uc778\uc99d\uc5d0", "\ub300\ud55c", "\uc2ec\uc0ac\uac00", "\uc9c4\ud589\uc911\uc774\uac70\ub098,", "\uc778\uc99d\uc744", "\ubc1b\uc9c0", "\uc54a\uc740", "\ud68c\uc6d0\uc785\ub2c8\ub2e4.", "\uba3c\uc800", "\uc778\uc99d\uc744", "\ubc1b\uc73c\uc2dc\uae30", "\ubc14\ub78d\ub2c8\ub2e4.", "throw", "new", "BizApplicationException(\"AAPARE0404\",", "new", "Object[]{});", "}", "ArrCnd", "arrCnd", "=", "arrMbrshp.getArrCnd(PdCndEnum.INTERNET_CHANNEL_USE_YN.getValue());", "if", "(_getCmnContext().isChannelInternet()", "&&", "(", "arrCnd", "==", "null", "||", "CCM01.NO.equals(arrCnd.getCndVal())))", "{", "//Internet", "web", "service", "is", "not", "registered", "for", "you", "//\uc778\ud130\ub137", "\uc11c\ube44\uc2a4", "\ub4f1\ub85d\uc774", "\ub418\uc5b4", "\uc788\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0408\",", "new", "Object[]{});", "}", "arrCnd", "=", "arrMbrshp.getArrCnd(PdCndEnum.MOBILE_APP_CHANNEL_USE_YN.getValue());", "if", "(_getCmnContext().isChannelMobile()", "&&", "(", "arrCnd", "==", "null", "||", "CCM01.NO.equals(arrCnd.getCndVal())))", "{", "//Mobile", "app", "service", "is", "not", "registered", "for", "you", "//\ubaa8\ubc14\uc77c", "\uc571", "\uc11c\ube44\uc2a4", "\ub4f1\ub85d\uc774", "\ub418\uc5b4", "\uc788\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4.", "throw", "new", "BizApplicationException(\"AAPARE0409\",", "new", "Object[]{});", "}", "arrCnd", "=", "arrMbrshp.getArrCnd(PdCndEnum.PHONE_BANKING_ARS_CHANNEL_USE_YN.getValue());", "if", "(_getCmnContext().isChannelArs()", "&&", "(", "arrCnd", "==", "null", "||", "CCM01.NO.equals(arrCnd.getCndVal())))", "{", "//Mobile", "phone", "bankikng", "ARS", "service", "is", "not", "registered", "for", "you", "//\ud3f0\ubc45\ud0b9", "ARS", "\uc11c\ube44\uc2a4", "\ub4f1\ub85d\uc774", "\ub418\uc5b4", "\uc788\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0567\",", "new", "Object[]{});", "}", "}"], "docstring_tokens": ["Check", "if", "the", "issued", "media", "is", "available.", "Throw", "error", "if", "it", "is", "unavailable."]}
{"code_tokens": ["public", "void", "validate(String", "arrSrvcCd,ArrReal", "arrReal,", "Map<ArrVldtnRequiredValEnum,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "super.validate(arrSrvcCd,", "(ArrRealCore)", "arrReal,", "_convertValMap(vldtnRequiredValMap));", "}"], "docstring_tokens": ["Processing", "rules", "should", "be", "commonly", "performed", "according", "to", "the", "rules", "defined", "in", "the", "service", "processing", "rule,", "based", "on", "the", "service", "type", "input."]}
{"code_tokens": ["public", "TxHstQrySvcInquiryTxBsicInfoOut", "clone(){", "try{", "TxHstQrySvcInquiryTxBsicInfoOut", "object=", "(TxHstQrySvcInquiryTxBsicInfoOut)super.clone();", "if", "(", "this.entryList==", "null", ")", "object.entryList", "=", "null;", "else{", "java.util.List<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut>(entryList.size());", "for(", "bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut", "item", ":", "entryList", "){", "clonedList.add(", "(bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut)item.clone());", "}", "object.entryList", "=", "clonedList;", "}", "if", "(", "this.stlmntMList==", "null", ")", "object.stlmntMList", "=", "null;", "else{", "java.util.List<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut>(stlmntMList.size());", "for(", "bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut", "item", ":", "stlmntMList", "){", "clonedList.add(", "(bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut)item.clone());", "}", "object.stlmntMList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isStandardAttributeValidationUse()", "{", "return", "(isValidationTailored)?", "isStdAtrbtVldtnUse:", "stdDtoClassAtrbt.isStandardAttributeValidationUse();", "}"], "docstring_tokens": ["Check", "whether", "standard", "attribute", "validation", "use"]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapXtnInfo(ArrTxCoreImpl", "arrTx,", "ArrRealCore", "arr)", "{", "return", "_getMapXtnInfoCache(arrTx);", "}"], "docstring_tokens": ["Inquire", "partner", "and", "actor", "extended", "information", "map."]}
{"code_tokens": ["public", "boolean", "isChannelCenterCut(String", "chnlDscd)", "throws", "BizApplicationException", "{", "return", "ChannelEnum.CENTER_CUT.getValue().equals(chnlDscd)", "?", "true", ":", "false;", "}"], "docstring_tokens": ["Inquiry", "whether", "it", "is", "a", "channel", "center", "cut"]}
{"code_tokens": ["public", "ArArrGrpArrRIO", "select(ArArrGrpArrRIO", "arArrGrpArrRIO)", "{", "return", "_getArArrGrpArrR().select(arArrGrpArrRIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm)){", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ArrSubInfoKndEnum", "subInfoKnd", "=", "arrRealImpl.getSubInfoKnd();", "//", "2.", "\uacc4\uc57d\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(arrRealImpl);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"arrId\",", "arrRealImpl.getArrId());", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "save", "cache", "arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(),", "subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "appraisal", "preferential", "claim", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "DeptImpl", "deptImpl)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtDeptSIO", "subInfoIO", "=", "getSubInfoCache(deptImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtDeptSIO();", "subInfoIO.setDeptId(deptImpl.getDeptId());", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_getAtDeptSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(deptImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_getAtDeptSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "deptImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "subInfoMap."]}
{"code_tokens": ["public", "LnAplyIntRtHstSvcListIn", "clone(){", "try{", "LnAplyIntRtHstSvcListIn", "object=", "(LnAplyIntRtHstSvcListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "ArrRealCore", "arrReal)", "throws", "BizApplicationException", "{", "return", "_getArrSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(ArrRealImpl)", "arrReal);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "asset", "transaction."]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getQueryBaseDayCode(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "String", "output", "=", "bfCnd.getQueryBaseDayCode();", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "query", "base", "day", "code", "of", "benefit", "conditon."]}
{"code_tokens": ["public", "List<PntCnd>", "getCndMultiple(List<String>", "cndCdList,", "String", "aplyStartDt,", "String", "aplyStartTm,", "String", "aplyEndDt,", "String", "aplyEndTm)", "throws", "BizApplicationException", "{", "//", "Set", "input", "PntCndMltplIn", "in", "=", "new", "PntCndMltplIn();", "in.setAplyStartDt(aplyStartDt);", "in.setAplyStartTm(_getAplyTmString(aplyStartTm));", "in.setAplyEndDt(aplyEndDt);", "in.setAplyEndTm(_getAplyTmString(aplyEndTm));", "in.setCndCdList(cndCdList);", "//", "Return", "output", "return", "getCndMultiple(in);", "}"], "docstring_tokens": ["This", "Method", "create", "a", "list", "of", "condition", "objects", "for", "the", "list", "of", "input", "condition", "codes.", "condition", "information", "initialization.", "condition", "object", "has", "condition", "defined", "in", "point", "or", "common", "condition", "information."]}
{"code_tokens": ["public", "String", "getNumbering(String", "nbrgAtrbtNm,Map<String,", "Object>", "inpParmMap,Boolean", "isReUseSameTxNbrg)", "throws", "BizApplicationException", "{", "return", "getNumbering(_getCmnContext().getInstCode(),", "nbrgAtrbtNm,", "inpParmMap,", "isReUseSameTxNbrg);", "}"], "docstring_tokens": ["It", "calculates", "next", "number.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'instCd'", "value", "is", "replaced", "by", "instCd", "in", "Common", "Context.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'isReUseSameTxNbrg'", "value", "is", "replaced", "by", "false.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'inpParmMap'", "value", "is", "replaced", "by", "null."]}
{"code_tokens": ["public", "List<SctnBalWhdrwlOrderIO>", "getListSctnBalWhdrwlOrder(SctnBalWhdrwlOrderIO", "in)", "throws", "BizApplicationException", "{", "//", "Inquiry", "Product", "By", "Extend", "Amount", "Type", "List", "from", "DB", "StTxWhdrwlOrderBalHIO", "stTxWhdrwlOrderBalHIO", "=", "new", "StTxWhdrwlOrderBalHIO();", "_getCmnContext().setHeaderColumn(stTxWhdrwlOrderBalHIO);", "stTxWhdrwlOrderBalHIO.setArrId(in.getArrId());", "List<StTxWhdrwlOrderBalHIO>", "listStTxWhdrwlOrderBalHIO", "=", "_getStTxWhdrwlOrderBalHXtnDso().selectSctnList(stTxWhdrwlOrderBalHIO,", "in.getSctnStartDt(),", "in.getSctnEndDt());", "//", "Set", "Result", "value", "List<SctnBalWhdrwlOrderIO>", "outList", "=", "new", "ArrayList<SctnBalWhdrwlOrderIO>();", "if", "(listStTxWhdrwlOrderBalHIO", "!=", "null)", "{", "for(StTxWhdrwlOrderBalHIO", "out", ":", "listStTxWhdrwlOrderBalHIO)", "{", "outList.add(_getSctnBalWhdrwlOrderIO(out));", "}", "}", "return", "outList;", "}"], "docstring_tokens": ["This", "method", "inquires", "section", "of", "Balance", "Withdrawal", "Order", "List."]}
{"code_tokens": ["public", "List<CaCndTmpltOut>", "getListCndTmpltInfo(CaCndTmpltIn", "in)", "throws", "BizApplicationException", "{", "CaPdCtMIO", "daoIn", "=", "new", "CaPdCtMIO();", "daoIn.setTntInstId(in.getInstCd());", "daoIn.setCndCd(in.getCndCd());", "daoIn.setCndNm(in.getCndNm());", "daoIn.setCndTpCd(in.getCndTpCd());", "daoIn.setCndDtlsTpCd(in.getCndDtlsTpCd());", "daoIn.setActvYn(in.getActvYn());", "if", "(StringUtils.isEmpty(daoIn.getTntInstId()))", "{", "daoIn.setTntInstId(_getCmnContext().getInstCode());", "}", "List<CaCndTmpltOut>", "outList", "=", "_getCaPdCtMDso().selectConditionTemplateDetailList(daoIn);", "return", "outList;", "}"], "docstring_tokens": ["Method", "to", "query", "list", "of", "condition", "template", "information", "-", "Information", "of", "condition", "template", "with", "interest", "composition", "element", "y/n"]}
{"code_tokens": ["public", "CaTblMgmtSvcGetTblXtnAtrbtListOut", "clone(){", "try{", "CaTblMgmtSvcGetTblXtnAtrbtListOut", "object=", "(CaTblMgmtSvcGetTblXtnAtrbtListOut)super.clone();", "if", "(", "this.atrbtList==", "null", ")", "object.atrbtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetTblXtnAtrbtListDtlOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetTblXtnAtrbtListDtlOut>(atrbtList.size());", "for(", "bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetTblXtnAtrbtListDtlOut", "item", ":", "atrbtList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetTblXtnAtrbtListDtlOut)item.clone());", "}", "object.atrbtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaCmInstPMIO", "select(CaCmInstPMIO", "cmInstPMIO)", "{", "return", "_getCmInstPM().select(cmInstPMIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "String", "cd", "=", "\"\";", "if(supplInfoVal.get(CCM03.CD)", "!=", "null)", "{", "cd", "=", "supplInfoVal.get(CCM03.CD).toString();", "}", "ArArrSrvcBlckngMIO", "sqlIn", "=", "new", "ArArrSrvcBlckngMIO();", "sqlIn.setArrSrvcBlckngCd(cd);", "ArArrSrvcBlckngMIO", "ArArrSrvcBlckngMIO", "=", "_getArArrSrvcBlckngMDso().select(sqlIn);", "if(ArArrSrvcBlckngMIO", "==", "null){", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value", "by", "cdDtlIO", "DTO.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter."]}
{"code_tokens": ["public", "String", "getInputDtoName()", "{", "return", "inpDtoNm;", "}"], "docstring_tokens": ["Inquire", "input", "dto", "name."]}
{"code_tokens": ["public", "PdBaseIntRtInqrySvcOut", "clone(){", "try{", "PdBaseIntRtInqrySvcOut", "object=", "(PdBaseIntRtInqrySvcOut)super.clone();", "if", "(", "this.list==", "null", ")", "object.list", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdBaseIntRtInqrySvcBaseRt>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdBaseIntRtInqrySvcBaseRt>(list.size());", "for(", "bankware.corebanking.product.service.dto.PdBaseIntRtInqrySvcBaseRt", "item", ":", "list", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdBaseIntRtInqrySvcBaseRt)item.clone());", "}", "object.list", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "FrgnCrncyChkClctnSvcIn", "clone(){", "try{", "FrgnCrncyChkClctnSvcIn", "object=", "(FrgnCrncyChkClctnSvcIn)super.clone();", "if", "(", "this.chkInfoList==", "null", ")", "object.chkInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn>(chkInfoList.size());", "for(", "bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn", "item", ":", "chkInfoList", "){", "clonedList.add(", "(bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn)item.clone());", "}", "object.chkInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "java.util.List<bankware.corebanking.configurationadmin.assessment.service.dto.CaAsmItmMgmtSvcGetAsmItm>", "getAsmItmList(){", "return", "asmItmList;", "}"], "docstring_tokens": ["It", "inquiries", "assessment", "item", "information", "list."]}
{"code_tokens": ["public", "CaCoaMgmtSvcGetXtnTblAtrbtIO", "clone(){", "try{", "CaCoaMgmtSvcGetXtnTblAtrbtIO", "object=", "(CaCoaMgmtSvcGetXtnTblAtrbtIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "MbrshpArrOpnSvcArrXtnIn", "clone(){", "try{", "MbrshpArrOpnSvcArrXtnIn", "object=", "(MbrshpArrOpnSvcArrXtnIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "ArrRealCore", "arrRealCore)", "throws", "BizApplicationException", "{", "return", "_getArrSrvcBlckngSubInfoBiz().getSubInfo(xtnAtrbtNm,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "(ArrRealImpl)arrRealCore);", "}"], "docstring_tokens": ["get", "a", "extended", "information", "of", "subsidiary", "information(CTI)"]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{_getNewSubInfo(arrRealImpl.getSubInfoKnd()).getClass().getSimpleName()});", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ArrSubInfoKndEnum", "subInfoKnd", "=", "arrRealImpl.getSubInfoKnd();", "//", "2.", "\uacc4\uc57d\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(arrRealImpl);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"arrId\",", "arrRealImpl.getArrId());", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "save", "cache", "arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(),", "subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "String", "getAttributeValidationRule()", "{", "return", "atrbtVldtnRule;", "}"], "docstring_tokens": ["Query", "attribute", "validation", "rule"]}
{"code_tokens": ["protected", "void", "register(CustImpl", "custImpl)", "throws", "BizApplicationException", "{", "AtCustMIO", "atCustMIO", "=", "custImpl.getCustBsicCache();", "List<AtScrtyQstnrAnswerDIO>", "atScrtyQstnrAnswerDIOList", "=", "custImpl.getListQstnrAnswerCache();", "if", "(atScrtyQstnrAnswerDIOList.isEmpty())", "{", "return;", "}", "for", "(AtScrtyQstnrAnswerDIO", "item", ":", "atScrtyQstnrAnswerDIOList)", "{", "item.setInstCd(atCustMIO.getInstCd());", "item.setAnswerTrgtId(atCustMIO.getCustId());", "item.setAnswerTrgtTpCd(AnswerTrgtTpEnum.CUST.getValue());", "}", "_getSecurityQuestionnaireAnswer().register(atScrtyQstnrAnswerDIOList);", "}"], "docstring_tokens": ["It", "registers", "the", "self", "authentication", "code", "information.", "Needs", "caution", "as", "the", "registered", "information", "performs", "the", "update", "transaction.", "It", "gets", "the", "first", "institution", "code", "in", "the", "list", "and", "query", "the", "entire", "contents."]}
{"code_tokens": ["public", "PdCardAprvlMIO", "selectAprvlInfo(String", "tntInstId,", "String", "aprvlDt,", "String", "cardNbr,", "String", "aprvlNbr)", "{", "//", "\uc870\ud68c", "PdCardAprvlMIO", "out", "=", "_getPdServiceM().selectAprvlInfo(tntInstId,", "aprvlDt,", "cardNbr,", "aprvlNbr);", "//", "Return", "output", "return", "out;", "}"], "docstring_tokens": ["Methods", "to", "query", "Approval", "information"]}
{"code_tokens": ["public", "Pnt", "getDummyPnt()", "{", "return", "new", "PntImpl();", "}"], "docstring_tokens": ["Methods", "to", "get", "dummy", "point", "objects"]}
{"code_tokens": ["public", "String", "getCndGrpTmpltCd()", "{", "if", "(pdPdCndM", "==", "null)", "{", "return", "null;", "}", "return", "pdPdCndM.getCndGrpTmpltCd();", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "group", "template", "code."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(ArrCndActionRequiredValueCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "AtrlImpl", "atrlImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(subInfoMap", "==", "null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\uc561\ud130\uc5ed\ud560\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtAtrlSIO", "subInfoIO", "=", "getSubInfoCache(atrlImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtAtrlSIO();", "subInfoIO.setAtrlId(atrlImpl.getAtrlId());", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_getAtAtrlSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(atrlImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "Map\uc744", "\uae30\uc874", "\uce90\uc2dc", "\uc800\uc7a5\ub41c", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_getAtAtrlSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "atrlImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Save", "the", "asset", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "assetThingSubInfoMap,", "AssetCore", "assetImpl,", "Integer", "assetThingSeqNbr,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getAssetThingSubInfoBiz().saveMapSubInfo(assetThingSubInfoMap,", "txDt,", "txSeqNbr,", "(AssetImpl)", "assetImpl,", "assetThingSeqNbr);", "}"], "docstring_tokens": ["Save", "the", "asset", "transaction", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "boolean", "isTerminated()", "{", "return", "this.arrGrpStsCd.equals(ArrGrpStsCoreEnum.TERMINATED.getValue());", "}"], "docstring_tokens": ["It", "checks", "if", "the", "actor", "role's", "actor", "role", "status", "is", "terminated.", "It", "returns", "true", "if", "terminated,", "return", "false", "if", "actor", "role", "status", "doesn't", "exist", "or", "it", "is", "not", "terminated."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(ArrCustRelStsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
