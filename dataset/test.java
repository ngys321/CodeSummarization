static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (ReportKndCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@AssetXtnAtrbtNm"});//({0}) is invalid {1}. } return true; }
public void delete(InsrncStsChngIn in) throws BizApplicationException { InsrncStsCoreEnum afStstCd = InsrncStsCoreEnum.CANCELED; // 1. 입력값 검증 _checkStsChnginput(in, afStstCd); // 2. 보증기본 설정상태 변경 ("취소"상태로 변경) _getInsrncBsicBiz().changeInsrnStatus(this, in, afStstCd.getValue()); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if (StringUtils.isEmpty(xtnAtrbtNm)){ return; } // 1. 보조명세 종류 조회 ArrSubInfoKndEnum subInfoKnd = arrRealImpl.getSubInfoKnd(); // 2. 계약에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(arrRealImpl); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("arrId", arrRealImpl.getArrId()); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // insert _insertSubInfo(subInfoKnd, subInfoCache); // save cache arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(), subInfoCache); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache)) { return; } // 변경전 이력 저장 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // update _updateSubInfo(subInfoKnd, subInfoCache); } }
public boolean isValidType(AtrbtTpEnum atrbtTp, String atrbtCntnt) throws BizApplicationException { if (logger.isDebugEnabled()) { logger.debug("atrbtTpCd={}", atrbtTp); logger.debug("atrbtCntnt={}", atrbtCntnt); } if (atrbtTp == null) { throw new BizApplicationException("AAPCME0037", new Object[] { atrbtTp }); } // Validate attribute type switch (atrbtTp) { case TEXT: // text return (StringCoreUtils.isEmpty(atrbtCntnt)) ? false : true; case TEXT_DATE: // date return DateCoreUtils.isValidDate(atrbtCntnt); case TEXT_NUMBER: // number return DataCheckCoreUtils.isNumeric(atrbtCntnt); case NUMBER: // number return DataCheckCoreUtils.isNumeric(atrbtCntnt); case TEXT_ALPHA_NUMERIC: // Alpha-Number return DataCheckCoreUtils.isAlphaNumeric(atrbtCntnt); case YES_OR_NO: // yes or no return (CCM01.YES.equals(atrbtCntnt) || CCM01.NO.equals(atrbtCntnt)) ? true : false; case PASSWORD: // Password return DataCheckCoreUtils.isValidPassword(atrbtCntnt); case TIMESTAMP: // timestamp return true; case JSON: // json return DataCheckCoreUtils.isJson(atrbtCntnt); case EMPTY: return true; default: throw new BizApplicationException("AAPCME0037", new Object[] { atrbtTp }); } }
public ArrTx cancel() throws BizApplicationException { // 취소가능거래여부 확인 if(!_cancelableTxYn()) { throw new BizApplicationException("AAPSTE0206", new String[] {this.getSrvcNm()}); } // 취소거래 생성 ArrTx cnclArrTx = _createCnclTx(null, null, null, null); // 원거래의 취소정보 update super.modifyCancelArrTxInfo(cnclArrTx.getTxStsCd(), cnclArrTx.getTxDt(), cnclArrTx.getTxSeqNbr()); // 취소에 의한 거래후잔액 갱신 _modifyTxAfBalBasedOnCancel(); // 여신 undo 수행 _loanUndo(); // 세금취소(인지세 + 세금) _calcelTax(this.getArrId(), this.getTxDt(), this.getTxSeqNbr(), cnclArrTx.getTxDt(), cnclArrTx.getTxSeqNbr()); //일일결산 관련 취소 로직 추가 _getDailyAcrlStlmntBiz().cancelSettlement(getArr().getArrId(), getTxDt(), getTxSeqNbr()); _arrUndo(this.getArr()); return cnclArrTx; }
public List<PdTxSrvcIO> getListPdTmpltCd(PdTxSrvcIO in) throws BizApplicationException { return _convertPdTxSvcIOList2PdTxSrvcIOList(_convertToPdTxSvcIOList(_getListPdTmpltCdCmb(in))); }
public List<GlRptMgmtReportOut> getListTxDtGlRptBs(GlRptMgmtReportIn in, Integer pageNum, Integer pageCount) throws BizApplicationException{ _checkInputData(in.getInqryKndDscd(), "inqryKndDstnctnCd"); _checkDate(in.getBaseDt()); _checkInputData(in.getDeptId(), "deptId"); _checkInputData(in.getCrncyCd(), "crncyCd"); // if(pageNum == null || pageNum == 0) pageNum = 1; // if(pageCount == null || pageCount == 0) pageCount = PaginationUtils.PAGE_COUNT; List<GlRptMgmtReportOut> outList = new ArrayList<GlRptMgmtReportOut>(); List<GlRptMgmtReportOut> debitList = new ArrayList<GlRptMgmtReportOut>(); // 차변 List<GlRptMgmtReportOut> creditList = new ArrayList<GlRptMgmtReportOut>(); // 대변 String kndType = in.getInqryKndDscd(); if(GlQryKndDscdEnum.BALANCE_SHEET.getValue().equals(kndType)){ kndType = BsisDscdEnum.BS.getValue(); //대차대조표 }else if(GlQryKndDscdEnum.INCOME_STATEMENT.getValue().equals(kndType)){ kndType = BsisDscdEnum.IS.getValue(); //손익계산서 } Map<String, AcGlMIO> acGlMap = new HashMap<String, AcGlMIO>(); // 실계정과목의 상위계정 합산 결과를 담을 맵 /** * process net profit or loss */ _processProfitLossAccountingBal(in, acGlMap); /** * process general ledger's up accounting item code */ _processUpAcctgItmCd(in, acGlMap); /** * set debit & credit data */ for(Map.Entry<String, AcGlMIO> elem : acGlMap.entrySet()){ if(DebitCrdtDscdEnum.DEBIT.getValue().equals(elem.getValue().getDebitCrdtDscd()) && kndType.equals(elem.getValue().getBsisDscd())){ // BS & 차변 Item set debitList.add(_getListGlRptBsIO1(elem.getValue().getDebitCrdtDscd(), elem.getValue().getAcctgItmCd(), elem.getValue().getAcctgItmNm(), elem.getValue().getAcctgBal(), elem.getValue().getBsisDscd(), elem.getValue().getAcctgItmOutpSeqNbr())); }else if(DebitCrdtDscdEnum.CREDIT.getValue().equals(elem.getValue().getDebitCrdtDscd()) && kndType.equals(elem.getValue().getBsisDscd())){ // BS & 대변 Item set creditList.add(_getListGlRptBsIO1(elem.getValue().getDebitCrdtDscd(), elem.getValue().getAcctgItmCd(), elem.getValue().getAcctgItmNm(), elem.getValue().getAcctgBal(), elem.getValue().getBsisDscd(), elem.getValue().getAcctgItmOutpSeqNbr())); } } int dbtRowCnt = debitList.size(); // 차변리스트 int cdtRowCnt = creditList.size(); // 대변리스트 int maxLen = Math.max(dbtRowCnt, cdtRowCnt); int minLen = Math.min(dbtRowCnt, cdtRowCnt); // 차변 계정출력순서번호 별로 정렬 Collections.sort(debitList, new Comparator<GlRptMgmtReportOut>() { /* * 내림차순 : o1 o2 * 오름차순 : o2 o1 */ @Override public int compare(GlRptMgmtReportOut o1, GlRptMgmtReportOut o2) { int intReturn = 0; intReturn = o1.getAcctgItmOutpSeqNbr().compareTo( o2.getAcctgItmOutpSeqNbr()); return intReturn; } }); // 대변 계정출력순서번호 별로 정렬 Collections.sort(creditList, new Comparator<GlRptMgmtReportOut>() { /* * 내림차순 : o1 o2 * 오름차순 : o2 o1 */ @Override public int compare(GlRptMgmtReportOut o1, GlRptMgmtReportOut o2) { int intReturn = 0; intReturn = o1.getAcctgItmOutpSeqNbr().compareTo( o2.getAcctgItmOutpSeqNbr()); return intReturn; } }); //대차대조표 DataSet 처리 || 손익계산서 DataSet 처리 if ((BsisDscdEnum.BS.getValue().equals(kndType)) || (BsisDscdEnum.IS.getValue().equals(kndType))) { for(int i = 0 ; i < maxLen; i++) { GlRptMgmtReportOut glRptMgmtReportOut = new GlRptMgmtReportOut(); if(debitList.size() >= creditList.size()){ glRptMgmtReportOut = debitList.get(i); if(minLen > i) { glRptMgmtReportOut.setCdsdAcctgItmCd(creditList.get(i).getCdsdAcctgItmCd()); glRptMgmtReportOut.setCdsdAcctgItmNm(creditList.get(i).getCdsdAcctgItmNm()); glRptMgmtReportOut.setBalAmt2(creditList.get(i).getBalAmt2()); glRptMgmtReportOut.setAcctgItmOutpSeqNbr(creditList.get(i).getAcctgItmOutpSeqNbr()); } }else{ glRptMgmtReportOut = creditList.get(i); if(minLen > i) { glRptMgmtReportOut.setDbsdAcctgItmCd(debitList.get(i).getDbsdAcctgItmCd()); glRptMgmtReportOut.setDbsdAcctgItmNm(debitList.get(i).getDbsdAcctgItmNm()); glRptMgmtReportOut.setBalAmt1(debitList.get(i).getBalAmt1()); glRptMgmtReportOut.setAcctgItmOutpSeqNbr(debitList.get(i).getAcctgItmOutpSeqNbr()); } } outList.add(glRptMgmtReportOut); } } return outList; }
protected void modify(CustImpl custImpl, List<AtCustDocRIO> atCustDocRIOList) throws BizApplicationException { if (atCustDocRIOList.isEmpty()) { return; } AtCustMIO atCustMIO = custImpl.getCustBsicCache(); for (AtCustDocRIO atCustDocRIO : atCustDocRIOList) { atCustDocRIO.setInstCd(atCustMIO.getInstCd()); atCustDocRIO.setCustId(atCustMIO.getCustId()); atCustDocRIO.setRelEndDt(DateUtils.getDateDayBefore(1, _getCmnContext().getTxDate())); // Get registered data AtCustDocRIO lastCustDocRIO = _getAtCustDocRDso().selectListByDocIssueId(atCustMIO.getInstCd(), atCustMIO.getCustId(), atCustDocRIO.getDocIssueId()); if (lastCustDocRIO == null) { throw new BizApplicationException("AAPATE0016", new Object[]{ "@custDocRel", "@docIssueId", atCustDocRIO.getDocIssueId()}); } _getAtCustDocRDso().update(atCustDocRIO); } }
public boolean checkCode(String cdNbr, String cd) throws BizApplicationException { return _checkCode(cdNbr, cd); }
public void saveMapSubInfo(Map<String, String> subInfoMap, DeptImpl deptImpl) throws BizApplicationException { // 0. null check if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AtDeptSIO subInfoIO = getSubInfoCache(deptImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtDeptSIO(); subInfoIO.setDeptId(deptImpl.getDeptId()); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _getAtDeptSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(deptImpl, subInfoIO); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _getAtDeptSDso().update(subInfoIO); } // 2. 캐시 저장 deptImpl.setSubInfoCache(subInfoIO); }
public CndVal getCndVal(List<ProvideCnd> prvdCndList) throws BizApplicationException { if (isComplexCnd()) { // Error if complex condition throw new BizApplicationException("AAPPDE0004", null); } CndVal cndVal = null; // Set input PdPdCndSimpleSearchIn inDao = new PdPdCndSimpleSearchIn(); inDao.setTntInstId(getInstCd()); inDao.setAplyStartDt(_getAplyStartDt()); inDao.setCndCd(getCndCd()); inDao.setCndGrpCd(getCndGrpCd()); inDao.setCndGrpTmpltCd(getCndGrpTmpltCd()); if (isListCnd()) { // 목록조건값 조회 cndVal = _getListCndValue(inDao); } else if (isRngCnd()) { // 범위조건값 조회 cndVal = _getRangeCndValue(inDao); } /* * else if (isIntCnd()) { // 우대금리일 경우 제공조건에따른 규칙을 계산하여 아래 로직을 태울지말지 결정 if * (isPreferentialInterestCnd() && * !isPreferentialInterestProvideCndApplyRulePass(prvdCndList)) { return null; } * * // 금리조건값 조회 cndVal = _getInterestCndValue(inDao); * * } else if (isFeeCnd()) { // 수수료조건값 조회 cndVal = _getFeeCndValue(inDao); } */ // Return CndVal return cndVal; }
public ScrtyIntMngrSvcGetIn clone(){ try{ ScrtyIntMngrSvcGetIn object= (ScrtyIntMngrSvcGetIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrRealImpl getArrReal(ArArrMIO arArrMIO) throws BizApplicationException { return (ArrRealImpl) super.getArrRealCore(arArrMIO); }
public ArrExtrnlIdNbrInfo getArrExtrnlIdNbrInfo(String arrExtrnlIdNbrTpCd) throws BizApplicationException { return _getArrRealCoreFundamentalAgent().getArrExtrnlIdNbrInfo(arrExtrnlIdNbrTpCd, this); }
public void getSubInfo(List<StlmntDtlIO> stlmntDtlIOList) throws BizApplicationException { // 1.목록별 CTI 확장속성 조회 if(stlmntDtlIOList != null && !stlmntDtlIOList.isEmpty()) { for(StlmntDtlIO stlmnt : stlmntDtlIOList) { // 2.정산보조명세 DBIO VO에 검색Key값 set (검색key: 계약식별자, 거래일, 거래일련번호, 금액유형, 환입환출구분) StStlmntSIO stStlmntSIOIn = new StStlmntSIO(); _setStlmntSKey(stStlmntSIOIn, stlmnt); // 3.정산보조명세 CTI 확장속성MAP 조회 Map<String, String> stlmntSubInfoMap = _getStlmntSubInfoBiz().getMapSubInfo(stStlmntSIOIn); // 4.정산보조명세Map을 기존 정산기본 확장정보(stlmntXtnInfoList)에 조립됨 if(stlmntSubInfoMap != null) { _assembleStlmntXtnInfoOut(stlmntSubInfoMap, stlmnt, stlmnt.getStlmntXtnInfoList()); } for(StlmntCalcnDtlIO calcnDtl : stlmnt.getStlmntCalcnDList()) { // 5.정산계산근기보조명세 DBIO VO에 검색Key값 set (검색key: 계약식별자, 거래일, 거래일련번호, 금액유형, 환입환출구분, 상세일련번호) StStlmntCalcnSIO stStlmntCalcnSIOIn = new StStlmntCalcnSIO(); _setStlmntCalcnSKey(stStlmntCalcnSIOIn, calcnDtl); // 6.정산계산근기보조명세 CTI확장속성MAP Map<String, String> stlmntCalcnSubInfoMap =_getStlmntCalcnSubInfoBiz().getMapSubInfo(stStlmntCalcnSIOIn); // 7.정산계산근기 확장속성Map을 기존 정산계산근기 확장정보(StlmntCalcnDtlIO.stlmntXtnInfoList)에 조립됨 if(stlmntCalcnSubInfoMap != null) { _assembleStlmntXtnInfoOut(stlmntCalcnSubInfoMap, stlmnt, calcnDtl.getStlmntXtnInfoList()); } } } } }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String bizDscd, String pdTpCd, String pdTmpltCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, int pgNbr, int pgCnt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, bizDscd, pdTpCd, pdTmpltCd, null, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, pgNbr, pgCnt, false); }
public void doServiceAction(String arrSrvcTpCd, ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { ArrSrvcEnum arrSrvcEnum = ArrSrvcEnum.getEnum(arrSrvcTpCd); if( arrSrvcEnum == null ) { // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288", new Object[]{this.getCndCd(), this.getCndCdNm(), arrSrvcTpCd}); } switch(arrSrvcEnum) { // 수입신용장개설 case OPEN_IMPORT_LC : case OPEN_NON_LC : _validateUsanceTypeByLcKind(arrSrvcTpCd, arrCndActionRequiredValue); break; // B/L인수 case ACCEPT_BL : _validateBlAcceptanceTransaction(arrSrvcTpCd, arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public void isDefinedProduct(String arrArrRelCd, String bizDscd, String pdTpCd, String pdTmpltCd, String pdCd) throws BizApplicationException { ArArrArrRelPdRuleMIO arArrArrRelPdRuleMIO = new ArArrArrRelPdRuleMIO(); arArrArrRelPdRuleMIO.setInstCd(_getCmnContextCore().getInstCode()); arArrArrRelPdRuleMIO.setArrArrRelCd(arrArrRelCd); // 해당 계약계약관계에 상품목록이 정의되어있는지 확인 List<ArArrArrRelPdRuleMIO> arrArrRelPdRuleList = _getArArrArrRelPdRuleMDso().selectList(arArrArrRelPdRuleMIO); // 해당 계약계약관계에 정의되어 있는 상품목록이 없는 경우 validation check skip if (arrArrRelPdRuleList == null || arrArrRelPdRuleList.isEmpty()) { return; } // 관련계약의 상품이 해당 계약계약관계유형에 정의되어있는 상품인지 확인 List<ArArrArrRelPdRuleMIO> arArrArrRelPdRule = _getArrArrRelPdRuleListByProductCd(arrArrRelCd, bizDscd, pdTpCd, pdTmpltCd, pdCd); if (arArrArrRelPdRule == null || arArrArrRelPdRule.isEmpty()) { //해당 관련계약의 상품({1})이 계약간관계상품규칙테이블에 정의되어 있지 않습니다. throw new BizApplicationException("AAPARE0644", new Object[]{"@pdCd"}); } return ; }
public List<AprvlListInqryOut> getListApprove(AprvlListInqryIn in) throws BizApplicationException { _checkStringValue(in.getInqryStartDt(), "AAPCME0006", new Object[] {"@inqryStartDt"}); _checkStringValue(in.getInqryEndDt(), "AAPCME0006", new Object[] {"@inqryEndDt"}); List<CmAprvlMIO> cmAprvlMIOList = _getCmApprvMDso().selectList(_setAprvlListInput(in)); if (cmAprvlMIOList == null) { throw new BizApplicationException("AAPCME0004", null); } return _setAprvlListOut(cmAprvlMIOList); }
public List<PdClassificationInformationRelation> getListPdClassificationInfoRelation(PdClassificationInformationRelation in) throws BizApplicationException { if (StringCoreUtils.isEmpty(in.getInstCd())) { in.setInstCd(getInstCd()); } if (StringCoreUtils.isEmpty(in.getPdInfoDscd())) { in.setPdInfoDscd(pdPdM.getPdInfoDscd()); } if (StringCoreUtils.isEmpty(in.getPdCd())) { in.setPdCd(getPdCd()); } PdClRelationListIn relationIn = new PdClRelationListIn(); relationIn.setInstitutionId(in.getInstCd()); relationIn.setPdClCd(in.getPdClCd()); relationIn.setPdClStructureDscd(in.getPdClStrcDscd()); relationIn.setPdCd(in.getPdCd()); relationIn.setClStructureUsageDscd(in.getClStrctrUseDscd()); relationIn.setBaseDate(in.getAplyStartDt()); List<PdClRelationOut> relationOut = _getPdCore().getListPdClRelation(relationIn); List<PdClassificationInformationRelation> out = new ArrayList<>(); for(PdClRelationOut relation : relationOut) { PdClassificationInformationRelation temp = new PdClassificationInformationRelation(); temp.setInstCd(relation.getInstitutionId()); temp.setPdInfoDscd(relation.getPdInfoDscd()); temp.setPdCd(relation.getPdCd()); temp.setPdClStrcDscd(relation.getPdClStructureDscd()); temp.setClStrcNm(relation.getClStructureName()); temp.setPdClCd(relation.getPdClCd()); temp.setActvYn(relation.isActive() ? CPD01.YES : CPD01.NO); temp.setAplyStartDt(relation.getApplyStartDate()); temp.setAplyEndDt(relation.getApplyEndDate()); temp.setNavigation(relation.getFullPath()); out.add(temp); } return out; }
public CaDocSrchSvcVerifyDocTmpltIn clone(){ try{ CaDocSrchSvcVerifyDocTmpltIn object= (CaDocSrchSvcVerifyDocTmpltIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CmpsCnd> getCmpsCnd() throws BizApplicationException { if (!isComplexCnd()) { throw new BizApplicationException("AAPPDE0003", null); // 단순조건 simple condition } // Return output return getCmpsCnd(getCmpxStrctrId()); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AtrlImpl atrlImpl) throws BizApplicationException { // null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 액터역할에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 AtAtrlSIO subInfoIO = getSubInfoCache(atrlImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtAtrlSIO(); subInfoIO.setAtrlId(atrlImpl.getAtrlId()); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // insert _getAtAtrlSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(atrlImpl, subInfoIO); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // update _getAtAtrlSDso().update(subInfoIO); } // 2. 캐시 저장 atrlImpl.setSubInfoCache(subInfoIO); }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (AuthStsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@authStsCd"}); } return true; }
public static boolean isValid(String value) { for (PstnPrcsngDscdEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public void saveMapSubInfo(Map<String, String> subInfoMap, StlmntCalcnSubInfoInqryIn stlmntCalcnSubInfoInqryIn) throws BizApplicationException { _getStlmntCalcnSubInfoBiz().saveMapSubInfo(subInfoMap, _setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn)); }
public List<ArrReal> getListVrtnArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String pdCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt,String inqryEndDt, int pgNbr, int pgCnt) throws BizApplicationException { return _getArrDeptRelImpl().getVrtnArrListBasedOnArrStatusHistory(deptId, null, null, null, pdCd, arrDeptRel, curArrSts, arrSts, inqryStartDt, inqryEndDt, pgNbr, pgCnt); }
public Map<String, String> getMapSubInfo(AssetCore asset) throws BizApplicationException { return _getAssetSubInfoBiz().getMapSubInfo((AssetImpl)asset); }
public CaCoaMgmtSvcGetXtnTblAtrbtOut clone(){ try{ CaCoaMgmtSvcGetXtnTblAtrbtOut object= (CaCoaMgmtSvcGetXtnTblAtrbtOut)super.clone(); if ( this.atrbtList== null ) object.atrbtList = null; else{ java.util.List<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetXtnTblAtrbtIO> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetXtnTblAtrbtIO>(atrbtList.size()); for( bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetXtnTblAtrbtIO item : atrbtList ){ clonedList.add( (bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetXtnTblAtrbtIO)item.clone()); } object.atrbtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<TblXtnAtrbtDtlIO> getListAttributeExistData(String atrbtNm) { // TODO Auto-generated method stub List<TblXtnAtrbtDtlIO> out = new ArrayList<TblXtnAtrbtDtlIO>(); TblXtnAtrbtDtlIO outTblAtrbt= null; List<CmTblAtrbtMIO> cmTblAtrbtMIOList = _getCmTblAtrbtMDso().selectListByName(atrbtNm); for (CmTblAtrbtMIO outDao : cmTblAtrbtMIOList){ outTblAtrbt = new TblXtnAtrbtDtlIO(); outTblAtrbt.setTblNm(outDao.getTblNm()); out.add(outTblAtrbt); } List<CmTblXtnAtrDIO> cmTblXtnAtrDIOList = _getCmTblXtnAtrDDso().selectListByAtrbtNm(atrbtNm); for (CmTblXtnAtrDIO outDao : cmTblXtnAtrDIOList){ outTblAtrbt = new TblXtnAtrbtDtlIO(); outTblAtrbt.setTblNm(outDao.getTblNm()); out.add(outTblAtrbt); } return out; }
public List<CaKrRoadAddrOut> getAddrByAreaNbr(String cityPrvncAddr,String cityGunGuAddr, String emdongAddr, Integer nbrAddrNbr,Integer househldNbr) throws BizApplicationException { List<CaCmKrRoadAddrMIO> cmKrRoadAddrMList = _getCaCmKrRoadAddrMDso().selectByAreaNumber(CaAddrHrarcyEnum.KOREA_ROAD_NAME_ADDRESS_CODE.getValue(), cityPrvncAddr, cityGunGuAddr, emdongAddr, househldNbr, nbrAddrNbr); List<CaKrRoadAddrOut> out = new ArrayList<CaKrRoadAddrOut>(); if(cmKrRoadAddrMList.isEmpty()) { return out; } for(CaCmKrRoadAddrMIO cmKrRoadAddrMIO : cmKrRoadAddrMList) { CaKrRoadAddrOut krRoadAddrOut = new CaKrRoadAddrOut(); krRoadAddrOut = _getKrRoadAddrOut(cmKrRoadAddrMIO); if(krRoadAddrOut != null) { out.add(krRoadAddrOut); } } return out; }
public void saveSubInfo(IValueObject subInfo , StStlmntSIO stStlmntSIOIn) { logger.debug("##<ST-StlmntSubInfoBiz> saveSubInfo"); // null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {this.getClass().getSimpleName()}); } logger.debug("##<ST-StlmntSubInfoBiz> saveSubInfo null check ok"); // 1.create a new instance of DB IO IValueObject subInfoDBIO = new StStlmntSIO(); // 2.set primary key _setKey(subInfoDBIO, stStlmntSIOIn); // 3.convert IvalueObject to DBIO VO DtoUtils.setSubInfoIO(subInfo, subInfoDBIO); // 4.save subsidiary detail(보조명세) _insertSubInfo(subInfoDBIO); /* * settlement는 속성을 대부분 insert 하는 경우이므로 아래 로직을 막음 */ // IValueObject sqlOut = getSubInfo(stlmnt); // // // 해당 거래관련 보조명세 데이터가 없을 때 // if(sqlOut == null) { // _insertSubInfo(subInfoDBIO); // // 맴버변수 VO 값 설정 // Stlmnt.setStlmntSubInfo(subInfo); // // }else { // // 기 조회 된 값에 update되어할 필드 설정 // DtoUtils.setSubInfoIO(subInfo, sqlOut); // // DBIO IO에 내용필드 반영 // DtoUtils.setSubInfoIO(sqlOut, subInfoDBIO); // // _updateSubInfo(subInfoDBIO); // // 맴버변수 VO 값 설정(sqlOut은 기존 + 새로 update되어야 할 필드 모두 반영된 최신 보조명세IO) // stlmnt.setStlmntSubInfo(sqlOut); // } } // // /** // * set primary key of subsidiary table // * @param stlmntSIO // * @param Stlmnt // */ // private IValueObject _setKey(IValueObject stlmntSIO, String arrId, String txDt, int txSeqNbr, String amtTpCd, String prchsRtrnYn) { // stlmntSIO.set("instCd", _getCmnContext().getInstCode()); // stlmntSIO.set("arrId", arrId); // stlmntSIO.set("txDt", txDt); // stlmntSIO.set("txSeqNbr", txSeqNbr); // stlmntSIO.set("amtTpCd", amtTpCd); // stlmntSIO.set("prchsRtrnYn", prchsRtrnYn); // // return stlmntSIO; // // }
public CaDocSrchSvcGetDocClTreeOut clone(){ try{ CaDocSrchSvcGetDocClTreeOut object= (CaDocSrchSvcGetDocClTreeOut)super.clone(); if ( this.children== null ) object.children = null; else{ java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut>(children.size()); for( bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut item : children ){ clonedList.add( (bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut)item.clone()); } object.children = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public LnCapitalizationSvcListOut clone(){ try{ LnCapitalizationSvcListOut object= (LnCapitalizationSvcListOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<Dept> getChildDept(String deptOrgnztnRelCd) throws BizApplicationException { List<Dept> deptList = new ArrayList<Dept>(); List<DeptCore> deptCoreList = super.getChildDeptCore(deptOrgnztnRelCd); if(deptCoreList == null || deptCoreList.isEmpty()){ return deptList; } for(DeptCore deptCore : deptCoreList){ deptList.add((Dept) deptCore); } return deptList; }
public LnExctnSvcPymntRsltOut clone(){ try{ LnExctnSvcPymntRsltOut object= (LnExctnSvcPymntRsltOut)super.clone(); if ( this.arrCshflwSchdl== null ) object.arrCshflwSchdl = null; else{ java.util.List<bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut> clonedList = new java.util.ArrayList<bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut>(arrCshflwSchdl.size()); for( bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut item : arrCshflwSchdl ){ clonedList.add( (bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut)item.clone()); } object.arrCshflwSchdl = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void removeArrArrRelPdRule(CaArrArrRelPdRuleIO arrArrRelPdRuleIO) throws BizApplicationException { _checkInput(arrArrRelPdRuleIO); CaArArrArrRelPdRuleMIO arArrArrRelPdRuleMIO = _setArArrArrRelPdRuleMIO(arrArrRelPdRuleIO); _getArArrArrRelPdRuleMDso().delete(arArrArrRelPdRuleMIO); }
static boolean isValid(String value){ for (RtTrmDxtnctnCdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public Map<String, String> getMapSubInfo(ArrTxCore arrTx){ return _getArrTxSubInfoBiz().getMapSubInfo((ArrTxImpl)arrTx); }
public CaDstbCtvdMIO select(String dstbCtvdDt, int dstbCtvdSeqNbr) { return _getCaDstbCtvdM().select(dstbCtvdDt, dstbCtvdSeqNbr); }
public void saveMapSubInfo(Map<String, String> subInfoMap, String txDt, Integer txSeqNbr, AssetImpl assetImpl) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 자산보조명세의 종류 조회 AssetSubInfoKndEnum subInfoKnd = assetImpl.getAssetSubInfoKnd(); // 2. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 3. 보조원장 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(assetImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("assetId", assetImpl.getAssetBasicCache().getAssetId()); //PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(assetImpl, subInfoCache, txDt, txSeqNbr); // 입력된 map을 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 3-1. insert _insertSubInfo(subInfoKnd, subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(assetImpl, subInfoCache, txDt, txSeqNbr); // 입력된 map을 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 3-2. update _updateSubInfo(subInfoKnd, subInfoCache); } // 4. 캐시 저장 assetImpl.saveSubInfoCache(xtnTable, subInfoCache); }
public Integer getListDataCntForConsistency() throws BizApplicationException { return _getDstbCnstncySvScrnSrvcDDso().selectListCntForConsistency(); }
public String getPdNm() throws BizApplicationException { return pdPdM.getPdNm(); }
public String getSubInfo(String xtnAtrbtNm, StaffCore staffCore) throws BizApplicationException { return _getStaffSubInfoBiz().getSubInfo(xtnAtrbtNm, (StaffImpl)staffCore); }
public static boolean isValid(String stringValue){ for (CaAmOperandPrefix enumObject: values()){ if(enumObject.getStringValue().equals(stringValue)) { return true; } } return false; }
public List<ArrBal> getListArrBal(ArrReal arr, String amtTpCd, String balTpCd) throws BizApplicationException { List<ArrBal> out = new ArrayList<ArrBal>(); List<ArrBalCore> balList = super.getListArrBalCore((ArrRealCore)arr, amtTpCd, balTpCd); for(ArrBalCore arrBal : balList) { out.add((ArrBal)arrBal); } return out; }
public CustRgstSvcSimpleIndvIn clone(){ try{ CustRgstSvcSimpleIndvIn object= (CustRgstSvcSimpleIndvIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrStrctrSPlainForm getArrStructureForModification(ArrangementCoreImpl arrangement,String arrSrvcCd) throws BizApplicationException { if (arrSrvcCd == null){ throw new BizApplicationException("AAPCME0006", new Object[]{"@arrSrvcCd"}); } List<ArrCndCore> arrCndListToBeModified = _getArrCndListForModification(arrangement,arrSrvcCd); List<ArrCndCore> arrCndListToDoAction = _getArrCndListForModificationAction(arrangement,arrSrvcCd); ArrStrctrSPlainForm arrStrctr = new ArrStrctrSPlainForm(); arrStrctr.setArrStrctrBsic(_getBasicStructure(arrangement)); arrStrctr.setArrStrctrCndList(getCndStructure(arrCndListToBeModified, null)); arrStrctr.setArrStrctrRelList(_getRelStructure(arrCndListToBeModified)); arrStrctr.getArrStrctrRelList().addAll(_getRelStructure(arrCndListToDoAction)); return arrStrctr; }
public void saveSubInfo(AtDeptSIO subInfoIO, DeptImpl deptImpl) throws BizApplicationException{ // 1. 보조원장 캐시 조회결과에 따라 insert/update 판단 AtDeptSIO oldSubInfoIO = getSubInfoCache(deptImpl); if (oldSubInfoIO == null) { // PK setting subInfoIO.setDeptId(deptImpl.getDeptId()); // insert _getAtDeptSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoIO, oldSubInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(deptImpl, oldSubInfoIO); // PK setting subInfoIO.setDeptId(deptImpl.getDeptId()); // update _getAtDeptSDso().update(subInfoIO); } // 2. 캐시 저장 deptImpl.setSubInfoCache(subInfoIO); }
public CaExtrnlErrorCdTrnsfrmSvcIn clone(){ try{ CaExtrnlErrorCdTrnsfrmSvcIn object= (CaExtrnlErrorCdTrnsfrmSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ActorSrchOut> getListCustInfoByUniqueIdNbr(String custUnqIdNbr, String custUnqIdNbrTpCd, String actorTpCd, String paymentInstYn, Integer pageNum, Integer pageCount, String custStsCd) throws BizApplicationException { //check required inputs if (StringUtils.isEmpty(custUnqIdNbrTpCd)) { throw new BizApplicationException("AAPCME0006", new String[] {"@actorUnqIdNbrTpCd"}); } else if (pageNum == null || CCM01.ZERO.equals(pageNum)) { throw new BizApplicationException("AAPCME0006", new String[] {"@pgNbr"}); } else if (pageCount == null || CCM01.ZERO.equals(pageCount)) { throw new BizApplicationException("AAPCME0006", new String[] {"@pgCnt"}); } return _getActorUnqIdNbrXtn().getListCustByUniqueIdNbr(_getCmnContext().getInstCode(), custUnqIdNbr, custUnqIdNbrTpCd, actorTpCd, paymentInstYn, pageNum, pageCount, custStsCd); }
public boolean isTableAttributeValid(String xtnTblNm, String xtnAtrbtNm, String atrbtCntnt) throws BizApplicationException { if(!_checkAttributeBase(xtnTblNm, xtnAtrbtNm, atrbtCntnt)) { return false; } CaCmTblXtnAtrVrtnCmpsDIO cmTblXtnAtrVrtnCmpsDIO = _getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getInstCode(), xtnTblNm, xtnAtrbtNm); if(cmTblXtnAtrVrtnCmpsDIO == null || "".equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())) { // 기관에 데이터가 없을시 STDA 기관으로 재조회 하여 검증 한다. cmTblXtnAtrVrtnCmpsDIO = new CaCmTblXtnAtrVrtnCmpsDIO(); cmTblXtnAtrVrtnCmpsDIO = _getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getStandardInstCode(), xtnTblNm, xtnAtrbtNm); if(cmTblXtnAtrVrtnCmpsDIO != null && CaXtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())) { return true; } } else if(CaXtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())){ return true; } return true; }
public AmAsmXtnInfoDIO select(AmAsmXtnInfoDIO amAsmXtnInfoDIO){ _getCmnContextCore().setHeaderColumn(amAsmXtnInfoDIO); return _getAmAsmXtnInfoD().select(amAsmXtnInfoDIO); }
public CustCheckPwdOut login(CustRprsnImpl custRprsnImpl, AtCustRprsnLoinInfoDIO custRprsnLoinInfoIO, String pswd, String loinTpCd) throws BizApplicationException, ParseException { // 기관파라미터에 정의된 로그인비밀번호오류허용횟수 조회 String pswdErrAllwnCntInstParm = _getInstParmProvider().getInstParm(InstParamEnum.INST_PARAM_LOIN_PSWD_ALLWNC_CNT.getValue()); // password error allowance count if(StringUtils.isEmpty(pswdErrAllwnCntInstParm)) { throw new BizApplicationException("AAPCME0184", new Object[] {"@loinPswdErrAllwncCnt"}); } int pswdErrorAllwncCnt = Integer.parseInt(pswdErrAllwnCntInstParm); CustCheckPwdOut custCheckPwdOut = new CustCheckPwdOut(); AtCustRprsnLoinHIO atCustRprsnLoinHIO = new AtCustRprsnLoinHIO(); // Customer login history IO // get password error count excess yes/no Integer pswdErrCnt = custRprsnLoinInfoIO.getPswdErrCnt(); String pswdErrCntExcsYn = custRprsnLoinInfoIO.getPswdErrCntExcsYn(); String pswdLockExprtnDtm = custRprsnLoinInfoIO.getPswdLockExprtnDtm(); // 비밀번호 오류 관련 정보 변경 여부 판단 boolean isChanged = false; // 2020.07.09 비밀번호일치여부 추가 // 비밀번호가 잠금상태인 경우 로그인을 시도했을 때 비밀번호 일치여부에 따라 에러메세지를 구분하기 위함 if (pswd.equals(custRprsnLoinInfoIO.getEncrptnPswd())) { custCheckPwdOut.setPswdMatchYn(CCM01.YES); } // If password error count is large then password error allowance count // 0. 패스워드가 잠금상태인 경우 if (CCM01.YES.equals(pswdErrCntExcsYn)) { long rsdlTm = TimeCalculator.calculateResidualLockTime(pswdLockExprtnDtm); if (rsdlTm > 0) { custCheckPwdOut.setPswdErrCnt(pswdErrCnt); custCheckPwdOut.setPswdLockTmCd(TimeCalculator.setTimeFormat(rsdlTm)); custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt); custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_SCRTY_LOCK.getValue()); return custCheckPwdOut; } } // 1. 패스워드 정보가 없는 경우 if (custRprsnLoinInfoIO.getEncrptnPswd() == null) { custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue()); // set custLoinHstIO atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO); atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue()); // 2. 패스워드 정보가 존재하는 경우 } else { // 2-1. 패스워드가 일치하여 로그인에 성공하는 경우 if (pswd.equals(custRprsnLoinInfoIO.getEncrptnPswd())) { custCheckPwdOut.setPswdMatchYn(CCM01.YES); // Set password error count allowance excess true or not = "N" if(!CCM01.NO.equals(pswdErrCntExcsYn)) { isChanged = true; pswdErrCntExcsYn = CCM01.NO; } // clear password lock time if(!StringUtils.isEmpty(pswdLockExprtnDtm)) { isChanged = true; pswdLockExprtnDtm = ""; } // clear password error count if(pswdErrCnt != CCM01.ZERO) { isChanged = true; pswdErrCnt = CCM01.ZERO; } // check update cycle - if update password is necessary if (_isOutOfDate(custRprsnLoinInfoIO)) { custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.SUCCESS_OUT_OF_DATE.getValue()); // set custLoinHstIO atCustRprsnLoinHIO.setLoinRsltYn(CCM01.YES); atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.SUCCESS_OUT_OF_DATE.getValue()); } else { custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.SUCCESS.getValue()); // set custLoinHstIO atCustRprsnLoinHIO.setLoinRsltYn(CCM01.YES); atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.SUCCESS.getValue()); } // 2-2. 패스워드 오류로 로그인에 실패하는 경우 } else { isChanged = true; if (pswdErrCnt == null || pswdErrCnt == CCM01.ZERO) { pswdErrCnt = 1; } else { pswdErrCnt++; } if (pswdErrCnt > pswdErrorAllwncCnt) { String pswdLockTmTrmCntInstParm = _getInstParmProvider().getInstParm(InstParamEnum.INST_PARAM_LOIN_PSWD_LOCK_TIME.getValue()); if(StringUtils.isEmpty(pswdLockTmTrmCntInstParm)) { throw new BizApplicationException("AAPCME0184", new Object[] {"@loinPswdLockTmCd"}); } // Set password error count allowance excess true or not = "Y" pswdErrCntExcsYn = CCM01.YES; // Set password lock expired time pswdLockExprtnDtm = TimeCalculator.calculateLockExpirationDateTime(pswdLockTmTrmCntInstParm); // set output parameter custCheckPwdOut.setPswdLockTmCd(TimeCalculator.setTimeFormat(pswdLockTmTrmCntInstParm)); custCheckPwdOut.setPswdErrCnt(pswdErrCnt); custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt); custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue()); // set custLoinHstIO atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO); atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue()); } else { // set output parameter custCheckPwdOut.setPswdErrCnt(pswdErrCnt); custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt); custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue()); // set custLoinHstIO atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO); atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue()); } } } // if the information about password errors changes, update DB if(isChanged) { custRprsnLoinInfoIO.setPswdErrCnt(pswdErrCnt); custRprsnLoinInfoIO.setPswdErrCntExcsYn(pswdErrCntExcsYn); custRprsnLoinInfoIO.setPswdLockExprtnDtm(pswdLockExprtnDtm); _getAtCustRprsnLoinInfoDDso().update(custRprsnLoinInfoIO); } // Insert custRprsn Last Login history information atCustRprsnLoinHIO.setLoinIdNbr(custRprsnLoinInfoIO.getLoinIdNbr()); atCustRprsnLoinHIO.setLoinTpCd(loinTpCd); atCustRprsnLoinHIO.setLoinSeqNbr(custRprsnLoinInfoIO.getLoinSeqNbr()); atCustRprsnLoinHIO.setFnlLoinChnlDscd(_getCmnContext().getChannelDscd()); _getCustRprsnLoinHstBiz().register(custRprsnImpl, atCustRprsnLoinHIO); return custCheckPwdOut; }
public int delete(StTxWhdrwlOrderBalHIO stTxWhdrwlOrderBalHIO) { return _getStTxWhdrwlOrderBalH().delete(stTxWhdrwlOrderBalHIO); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if (!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(CCM01.YES))){ //This Arrangement could not extend the contract term throw new BizApplicationException("AAPLNE0050" , new Object[]{}); } //TODO additional coding to check this loan can be extended base on the current arrangement status // 회수순서변경계좌검증 - 계좌부가정보 // 고정연체등록여부검증 - 계좌부가정보 // 기한이익상실여부검증 - 계좌부가정보 // 대손상각 신청계좌여부 검증 - 상각신청원장 // 관리거래처-적색 - 은행연합회자료 }
public void saveSubInfo(CustTxImpl custTxImpl, AtCustTxSIO subInfoIO) throws BizApplicationException { // null check if(subInfoIO == null){ return; } if (logger.isDebugEnabled()) { logger.debug("## <AT> CustTx saveSubInfo -> subInfoIO = {} :: ", subInfoIO.getFieldValues()); } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustTxSIO oldSubInfoIO = getSubInfoCache(custTxImpl); if (oldSubInfoIO == null) { // PK setting subInfoIO.setCustId(custTxImpl.getCustId()); subInfoIO.setTxDt(custTxImpl.getCustTxDt()); subInfoIO.setTxSeqNbr(custTxImpl.getCustTxSeqNbr()); // insert _getAtCustTxSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoIO, oldSubInfoIO)) { return; } // PK setting subInfoIO.setCustId(custTxImpl.getCustId()); subInfoIO.setTxDt(custTxImpl.getCustTxDt()); subInfoIO.setTxSeqNbr(custTxImpl.getCustTxSeqNbr()); // update _getAtCustTxSDso().update(subInfoIO); } // 2. 캐시 저장 custTxImpl.setSubInfoCache(subInfoIO); }
public GlQuerySvcAcctgDpstWhdrwlIn clone(){ try{ GlQuerySvcAcctgDpstWhdrwlIn object= (GlQuerySvcAcctgDpstWhdrwlIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<PdNameDetailIO> getListPdNameDetail(String pdNmTpCd, String lngDscd, String baseDt) throws BizApplicationException { // Set input PdNameDetailIO inIO = new PdNameDetailIO(); inIO.setPdNameTypeCode(pdNmTpCd); inIO.setLanguageDscd(lngDscd); inIO.setAplyStartDt(baseDt); inIO.setAplyStartTm(aplyTm); // Return output return getListPdNameDetail(inIO); }
protected void register(CustImpl custImpl) throws BizApplicationException { AtCustMIO atCustMIO = custImpl.getCustBsicCache(); List<AtScrtyQstnrAnswerDIO> atScrtyQstnrAnswerDIOList = custImpl.getListQstnrAnswerCache(); if (atScrtyQstnrAnswerDIOList.isEmpty()) { return; } for (AtScrtyQstnrAnswerDIO item : atScrtyQstnrAnswerDIOList) { item.setInstCd(atCustMIO.getInstCd()); item.setAnswerTrgtId(atCustMIO.getCustId()); item.setAnswerTrgtTpCd(AnswerTrgtTpEnum.CUST.getValue()); } _getSecurityQuestionnaireAnswer().register(atScrtyQstnrAnswerDIOList); }
public CaArrSrvcTpMgmtSvcInqryListOut clone(){ try{ CaArrSrvcTpMgmtSvcInqryListOut object= (CaArrSrvcTpMgmtSvcInqryListOut)super.clone(); if ( this.srvcTpList== null ) object.srvcTpList = null; else{ java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrSrvcTpMgmtSvcInqryOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrSrvcTpMgmtSvcInqryOut>(srvcTpList.size()); for( bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrSrvcTpMgmtSvcInqryOut item : srvcTpList ){ clonedList.add( (bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrSrvcTpMgmtSvcInqryOut)item.clone()); } object.srvcTpList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArArrDpstSIO select(String arrId) throws BizApplicationException { return _getArArrDpstS().select(_getCmnContext().getInstCode(), arrId); }
static boolean isValid(String value) { for (PdTemplateCodeEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public void saveMapSubInfo(Map<String, String> subInfoMap, AprslImpl aprslImpl, Integer prfClaimSeqNbr) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsAprslPrfClaimSIO subInfoCache = getSubInfoCache(aprslImpl, prfClaimSeqNbr); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsAprslPrfClaimSIO(); subInfoCache.setAprslId(aprslImpl.getAprslBasicCache().getAprslId()); // PK setting subInfoCache.setPrfClaimSeqNbr(prfClaimSeqNbr); // PK setting // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-1. insert _getAsAprslPrfClaimSDso().insert(subInfoCache); // 3. 캐시 저장 _saveSubInfoCache(subInfoCache, aprslImpl, prfClaimSeqNbr); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-2. update _getAsAprslPrfClaimSDso().update(subInfoCache); } }
public void saveAprslThingXtnInfo(Integer aprslThingSeqNbr, AprslThingXtnInfoEnum aprslThingXtnInfoEnum, String xtnAtrbtCntnt) throws BizApplicationException { // 속성명 기준으로 확장정보관리방법 판단 // 1. 확장정보명세 if(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AS_APRSL_THING_D.getValue(), aprslThingXtnInfoEnum.getValue())) { super.saveAprslThingXtnInfoByEav(aprslThingSeqNbr, aprslThingXtnInfoEnum.getValue(), xtnAtrbtCntnt); } // 2. 보조명세 else { _getAprslThingSubInfoBiz().saveSubInfo(aprslThingXtnInfoEnum.getValue(), xtnAtrbtCntnt, this, aprslThingSeqNbr); } }
public List<ArrReal> getListChildArrByLastArrStsDt(String inqStartDt, String inqEndDt, ArrStsEnum arrStsEnum, String bizDscd, String pdTpCd, String pdTmpltCd, String pdCd ) throws BizApplicationException { return _getArrBasicQryXtnBiz().getListChildArrRealByLastArrStsDt(inqStartDt, inqEndDt, arrStsEnum.getValue(), bizDscd, pdTpCd, pdTmpltCd, pdCd, this); }
public String getSubInfo(String atrbtNm, AsmImpl asm) { // 해당 심사 관련 모든 보조명세정보 조회(캐시로부터) IValueObject subInfo = getSubInfoCache(asm); // 보조명세정보가 없으면 리턴 null if(subInfo == null) { return null; } // 특정 보조명세정보의 값 조회 Object atrbtVal = subInfo.get(atrbtNm); if(atrbtVal == null) { return null; } // 값에 대해 String 형식으로 리턴 return String.valueOf(atrbtVal); }
public CaStaffRgstSvcGetLoinIdNbrIO clone(){ try{ CaStaffRgstSvcGetLoinIdNbrIO object= (CaStaffRgstSvcGetLoinIdNbrIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getInstCd() { String tntInstId = null; if (pdPdCndM == null) { tntInstId = this.instCd; if (StringCoreUtils.isEmpty(tntInstId)) { return null; } } else { tntInstId = pdPdCndM.getInstCd(); } // Return 기관코드 return tntInstId; }
public Long getTimeoutScnd(){ return timeoutScnd; }
public String getNumbering(String nbrgAtrbtNm,Map<String, Object> inpParmMap) throws BizApplicationException { return getNumbering(_getCmnContext().getInstCode(), nbrgAtrbtNm, inpParmMap, false); }
public CaStdSrvcIoMgmtSvcGetInstSrvcOut clone(){ try{ CaStdSrvcIoMgmtSvcGetInstSrvcOut object= (CaStdSrvcIoMgmtSvcGetInstSrvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrBsicQrySvcGetAcctListByPd clone(){ try{ ArrBsicQrySvcGetAcctListByPd object= (ArrBsicQrySvcGetAcctListByPd)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
private BfCndTestSvcOut getAplyStartTm(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); String output = bfCnd.getAplyStartTm(); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public int delete(CaCmStdAtrVrtnMIO cmStdAtrVrtnMIO) { return _getCmStdAtrVrtnM().delete(cmStdAtrVrtnMIO); }
public CaDocInstIO getDocInst() throws BizApplicationException { return this.docInstIO; }
public List<ActorElctrncAddrOut> getListElctrncAddrInfo() throws BizApplicationException { return getActor().getListElctrncAddrInfo(); }
public List<AtNoticeDIO> selectList(AtNoticeDIO AtNoticeDIO, Integer pageOffset, Integer pageCount, String delYn, String infoStsCd, String ignoreInfoStsCd) throws BizApplicationException { switch( DbmsVendorNmEnum.getByValue(_getSysNonstopUtil().getDbmsVendorName(getClass())) ) { case ORACLE: return _getAtNoticeD().selectListOracle(AtNoticeDIO, pageOffset, pageCount, delYn, infoStsCd, ignoreInfoStsCd); case MYSQL: return _getAtNoticeD().selectListMySQL(AtNoticeDIO, pageOffset, pageCount, delYn, infoStsCd, ignoreInfoStsCd); default: throw new BizApplicationException("AAPCME0202", null); } }
public String getSubInfo(String xtnAtrbtNm, AssetCore assetImpl, Integer assetThingSeqNbr) throws BizApplicationException { return _getAssetThingSubInfoBiz().getSubInfo(xtnAtrbtNm, (AssetImpl)assetImpl, assetThingSeqNbr); }
public Map<String, String> getMapSubInfo(ArrRealCore arrReal) throws BizApplicationException { return _getArrSubInfoBiz().getMapSubInfo((ArrRealImpl) arrReal); }
public AssetScrtyIntTrmntMgmtSvcScrtyIntInfoOut clone(){ try{ AssetScrtyIntTrmntMgmtSvcScrtyIntInfoOut object= (AssetScrtyIntTrmntMgmtSvcScrtyIntInfoOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaDstbTblMIO clone(){ try{ CaDstbTblMIO object= (CaDstbTblMIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void rebuild(ArrCndRebuildRequiredValue arrCndRebuildRequiredValue) throws BizApplicationException{ //필요없음 }
public String getApplyDescription() { return aplyDesc; }
public String getNextRebuildDate(String baseDt, String arrIntRtTpCd, ArrRealCoreImpl arrReal) throws BizApplicationException { if(StringCoreUtils.isEmpty(baseDt)){ baseDt = ArrCmnCoreUtil.getRckngDt(_getCmnContextCore()); } arrReal.setArrIntRtCalcnDt(baseDt); String nextDtMin = CCM01.MAX_DATE; PdInterestRateStructure arrIntRtFormula = this._getArrIntRtGeneratorSuperImpl().getLastAplyFormula(arrReal, arrIntRtTpCd); if(arrIntRtFormula == null){return nextDtMin;} List<CndTmpltOut> cndTmpltOut = arrIntRtFormula.getListOperandPdCnd(); for(CndTmpltOut cndTmplt : cndTmpltOut){ ArrCndCore arrCnd = arrReal.getArrCndCore(cndTmplt.getCndCd(), baseDt); if (!ArrCndActionRebuild.class.isInstance(arrCnd)){ continue; } String nextDt = ((ArrCndActionRebuild)arrCnd).getNextRebuildDate(arrIntRtTpCd, baseDt); //기준금리 고정시 null 이 리턴될수 있음 if(StringCoreUtils.isEmpty(nextDt)){ continue; } if(nextDt.compareTo(nextDtMin) < 0){ nextDtMin = nextDt; } } //다음산출일자가 만기일과 같거나 크면 maxDate /* * #23634 - 2022.09.09. 주석처리 : ok요건 (만기가 지난 건에 대해서도 재산출 대상으로 추출해야 함 * - 만기 지난 건에 업무적으로 추가 반영 필요 시 사이트 베이스에서 재정의 하도록 */ // if(!StringCoreUtils.isEmpty(arrReal.getArrMtrtyDt())){ // if(arrReal.getArrMtrtyDt().compareTo(nextDtMin) <= 0){ // nextDtMin = CCM01.MAX_DATE; // } // } if(logger.isDebugEnabled()){ logger.debug("getNextRebuild nextDtMin is = {}",nextDtMin); } arrReal.setArrIntRtCalcnDt(null); return nextDtMin; }
public ArArrIssmdaSIO select(String arrIssmdaTpCd, String arrIssmdaInhrncId) throws BizApplicationException { return _getArArrIssmdaS().select(_getCmnContext().getInstCode(), arrIssmdaTpCd, arrIssmdaInhrncId); }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (CaCdNbrEnum item : CaCdNbrEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; } return false; }
public PntCndMltplVdlnOut getCndMltplVdln(PntCndMltplVdlnIn in) throws BizApplicationException { ValidateInputCndValIn validationIn = new ValidateInputCndValIn(); validationIn.setInstitutionId(getInstCd()); validationIn.setCndList(_convertToPdCndMultipleValidationCndListInList(in.getCndList())); validationIn.setPdCd(getPntCd()); validationIn.setBaseDate(PdUtil.parseStringToDate(in.getAplyDt())); ValidateInputCndValOut validateOut = _getPntCndCore().validateInputCndVal(validationIn); return _convertValidateInputCndValOutToPntCndMltplVdlnOut(validateOut); }
public void register(NoticeBsicInfoIO noticeBsicInfoIO) throws BizApplicationException { List<NoticeAtchmntDocIssueIO> atcmnetIOList = noticeBsicInfoIO.getActhmntDocIssueList(); if(atcmnetIOList != null && !atcmnetIOList.isEmpty()) { AtNoticeAtchmntDocIssueDIO atNoticeAtchmntDocIssueDIO = new AtNoticeAtchmntDocIssueDIO(); _getCmnContext().setHeaderColumn(atNoticeAtchmntDocIssueDIO); atNoticeAtchmntDocIssueDIO.setNoticeId(noticeBsicInfoIO.getNoticeId()); for(NoticeAtchmntDocIssueIO aoticeAtchmntDocIssueIOItem : atcmnetIOList) { atNoticeAtchmntDocIssueDIO.setDocIssueId(aoticeAtchmntDocIssueIOItem.getDocIssueId()); _getAtNoticeAtchmntDocIssueDDso().insert(atNoticeAtchmntDocIssueDIO); } } }
public ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut clone(){ try{ ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut object= (ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustInfoUseAgrmtnSvcAgrmntTpOut clone(){ try{ CustInfoUseAgrmtnSvcAgrmntTpOut object= (CustInfoUseAgrmtnSvcAgrmntTpOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbChrncAcCoaXtnInfoDDso().selectListForConsistency(pageOffSet, pgCnt); }
public void saveMapSubInfo(Map<String, String> assetTxSubInfoMap, AssetTxCore assetTx) throws BizApplicationException { _getAssetTxSubInfoBiz().saveMapSubInfo(assetTxSubInfoMap, (AssetTxImpl) assetTx); }
public AsAprslRqstStsHIO select(AsAprslRqstStsHIO asAprslRqstStsHIO){ return _getAsAprslRqstStsH().select(asAprslRqstStsHIO); }
public ArArrArrRStsHIO select(ArArrArrRStsHIO arArrArrRStsHIO) { return _getArArrArrRStsH().select(arArrArrRStsHIO); }
public void delete(String instCd, CaDocBsicIO docBsicIO, CaDocClIO docClIO) throws BizApplicationException { CaDcDocClMIO dcDocClIO = new CaDcDocClMIO(); _getCmnContext().setHeaderColumn(dcDocClIO); if(!StringUtils.isEmpty(instCd)) dcDocClIO.setInstCd(instCd); dcDocClIO.setDocId(docBsicIO.getDocId()); dcDocClIO.setClId(docClIO.getClId()); dcDocClIO.setClHrarcyId(docClIO.getClHrarcyId()); // get registered information List<CaDcDocClMIO> dcDocClIOList = _getInformationList(dcDocClIO.getInstCd(), null, null, dcDocClIO.getDocId(), null); boolean isRegistered = false; if(dcDocClIOList != null && !dcDocClIOList.isEmpty()) { for(CaDcDocClMIO dcDocClIOItem : dcDocClIOList) { if(dcDocClIOItem.getClId().equals(docClIO.getClId()) && dcDocClIOItem.getClHrarcyId().equals(docClIO.getClHrarcyId())) { isRegistered = true; break; } } } if(isRegistered) { // insert data _getDcDocClDso().delete(dcDocClIO); } }
public List<ArrCnd> getArrCnd(ArrangementCoreImpl arrangement,Class<?> clazz) throws BizApplicationException { List<ArrCnd> arrCndList = new ArrayList<ArrCnd>(); for (ArrCndCore arrCnd : arrangement.getListArrCndCoreAll()) { if (clazz.isInstance(arrCnd)) arrCndList.add((ArrCnd) arrCnd); } return arrCndList; }
public CaDstbTblMVO updateDstbTableInfo(CaDstbTblMVO in) throws BizApplicationException{ _getSvDstbTblMDso().update(_getDstbTblMIO(in)); return in; }
public static boolean isValid(String value){ for (InstParamTypeEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public StaffCashMgmtSvcCashCountDtlOut clone(){ try{ StaffCashMgmtSvcCashCountDtlOut object= (StaffCashMgmtSvcCashCountDtlOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
private BfMngrTestSvcOut getBfName(BfMngrTestSvcIn in) throws BizApplicationException { String output = _getBfMngr().getBfName(in.getInstCd(), in.getPdCd()); BfMngrTestSvcOut out = new BfMngrTestSvcOut(); if (StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); } return out; }
public List<ArrReal> getListArrBasedOnStsHistory(String custId, ArrCustRelEnum arrCustRelEnum, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt,String inqryEndDt) throws BizApplicationException { return _getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId, arrCustRelEnum, null, null, null, null, curArrSts, arrSts, inqryStartDt, inqryEndDt); }
protected AprslRqstCoreImpl getUniqueBusinessBean(String instCd, String aprslRqstId) throws BizApplicationException { return (AprslRqstCoreImpl) ApplicationContextCoreUtils.getUniqueBusinessBean(instCd + aprslRqstId, getAprslRqstImplClass()); }
public void doServiceAction(String arrSrvcTpCd, ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { ArrSrvcEnum arrSrvcEnum = ArrSrvcEnum.getEnum(arrSrvcTpCd); if( arrSrvcEnum == null ) { // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288", new Object[]{this.getCndCd(), this.getCndCdNm(), arrSrvcTpCd}); } switch(arrSrvcEnum) { // B/L인수 case ACCEPT_BL : _doServiceAction(arrSrvcTpCd, arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public BalTpDtlIO getBalType(String balTpCd) throws BizApplicationException { _checkBalTypeCode(balTpCd); StBalTpMIO stBalTpCdIO = _getStDataCacheManager().getCacheData(DataCacheCoreConfig.BALANCE_TYPE_CACHE, balTpCd); if(stBalTpCdIO == null){ stBalTpCdIO = _getStBalTpCdDso().select(balTpCd); if(stBalTpCdIO == null){ //Balance type code is not exist throw new BizApplicationException("AAPSTE0005", new Object[] {balTpCd}); } _getStDataCacheManager().saveCache(DataCacheCoreConfig.BALANCE_TYPE_CACHE,balTpCd,stBalTpCdIO); }else{ if (logger.isDebugEnabled()){ logger.debug("getBalanceType from memory : {}",stBalTpCdIO); } } return _setBalTpDtlIO(stBalTpCdIO); }
public AprvlRgstSvcAprvlLineRgstOut clone(){ try{ AprvlRgstSvcAprvlLineRgstOut object= (AprvlRgstSvcAprvlLineRgstOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaStaffSrchSvcGetStaffListIn clone(){ try{ CaStaffSrchSvcGetStaffListIn object= (CaStaffSrchSvcGetStaffListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public java.lang.String getPdTpCd(){ return pdTpCd; }
public StdCustMemoChngSvcRvctIn clone(){ try{ StdCustMemoChngSvcRvctIn object= (StdCustMemoChngSvcRvctIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrReal> getListCustOwnArrRealActiveOnBaseDt (String custId, String baseDt, String tdyLastStsYn) throws BizApplicationException { //return _getArrCustRelQryBizImpl().getArrRealListActiveByStsOnBaseDt(custId, ArrCustRelEnum.MAIN_CONTRACTOR.getValue(), null, null, null, null, baseDt, 0, 0, tdyLastStsYn); return _getArrCustRelQryBizImpl().getListArrRealActiveOnBaseDt(custId, ArrCustRelEnum.MAIN_CONTRACTOR.getValue(), null, null, null, null, baseDt, 0, 0, tdyLastStsYn); }
public String getEnglishAttributeName() throws BizApplicationException { return stdAtrbt.getAtrbtEngNm(); }
public DcDocMIO select(String docStsCd, String docId, String docTypeCd) { return _getDcDocM().select(docStsCd, docId, docTypeCd); }
public List<InterestCalculationSection> apply(ApplyInterestCalculationSectionExceptionIn in, List<InterestCalculationSection> intCalIntervals) throws BizApplicationException { String calBaseDt = in.getCalBaseDt(); // 계산기준일(거래일) // 마지막 구간 InterestCalculationSection lastInterval = intCalIntervals.get(intCalIntervals.size() - 1); List<CalculationType> calTps = lastInterval.getCalTps(); CalculationType lastType = calTps.get(calTps.size() - 1); // 만기일익일상환연체 CalculationType t1 = lastType.clone(); t1.setIntCalTpCd("311"); // 만기일익일상환연체 t1.setCalStartDt(calBaseDt); // 기산일 1일 t1.setCalEndDt(calBaseDt); t1.setIntCalTgt(true); calTps.add(t1); // 만기일익일상환약정 CalculationType t2 = lastType.clone(); t2.setIntCalTpCd("183"); // 만기일익일상환약정환출 t2.setCalStartDt(calBaseDt); // 기산일 1일 t2.setCalEndDt(calBaseDt); t2.setIntCalTgt(true); calTps.add(t2); return intCalIntervals; }
public String getSubInfo(String atrbtNm, AprslImpl aprslImpl, Integer aprslThingSeqNbr) throws BizApplicationException { // 1. 보조명세 캐시 조회 IValueObject aprslThingSubInfo = getSubInfoCache(aprslImpl, aprslThingSeqNbr); // 2. 보조원장 캐시가 null인 경우, null 리턴 if (aprslThingSubInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = aprslThingSubInfo.get(atrbtNm); // 속성값이 null인경우 null리턴 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public DocBsicIO getDocBasic() throws BizApplicationException { return docBsicIO; }
public IValueObject getSubInfo(StlmntCalcnSubInfoInqryIn stlmntCalcnSubInfoInqryIn) throws BizApplicationException { return _getStlmntCalcnSubInfoBiz().getSubInfo(_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn)); }
public void modifyPassword(StaffMdfctnIn staffMdfctnIn) throws BizApplicationException { super.modifyPassword(staffMdfctnIn); /** * clear password error count and excess YN */ StaffSubInfo staffSubInfo = new StaffSubInfo(); staffSubInfo = this.getStaffSubInfo(); staffSubInfo.setPswdErrCnt(CCM01.ZERO); staffSubInfo.setPswdErrCntExcsYn(CCM01.NO); staffSubInfo.setPswdLockExprtnDtm(null); this.saveStaffSubInfo(staffSubInfo); }
public AsInsrncCustRStsHIO select(AsInsrncCustRStsHIO asInsrncCustRStsHIO){ return _getAsInsrncCustRStsH().select(asInsrncCustRStsHIO); }
public String getSubInfo(String xtnAtrbtNm, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, ArrRealCore arrRealCore) throws BizApplicationException { return _getArrSrvcBlckngSubInfoBiz().getSubInfo(xtnAtrbtNm, arrSrvcBlckngSeqNbr, seqNbr, (ArrRealImpl)arrRealCore); }
public LnAplctnDtlInqrySvcIn clone(){ try{ LnAplctnDtlInqrySvcIn object= (LnAplctnDtlInqrySvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void modifyBal(ArrBalCore arrBal, String baseDt, EntryIn entry, ArrTxCore arrTx, BalUpdtIn balUpdtIn) throws BizApplicationException { // unused }
static boolean isValid(String value) throws BizApplicationException{ for (CaAtrbtVldtnWayEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public String getInstParm(String parmAtrbtNm ) throws BizApplicationException { String instCd = _getCmnContextCore().getInstCode(); String instParm = getInstitutionParameterValue(instCd, parmAtrbtNm); // 2020.11.02 // 기관파라미터값 조회 시 해당 기관의 값만을 조회하도록 수정 // 기존에는 해당 기관에 값이 정의되지 않은 경우 STDA의 값을 참조했음 return instParm; }
public PreScrnngRgstSvcOpenIn clone(){ try{ PreScrnngRgstSvcOpenIn object= (PreScrnngRgstSvcOpenIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int delete(CaAsLeasePrtctnCrtrMIO asLeasePrtctnCrtrMIO){ return _getAsLeasePrtctnCrtrM().delete(asLeasePrtctnCrtrMIO); }
public java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut> getChildren(){ return children; }
public AtSelfAuthXtnInfoDIO select(String selfAuthId, String xtnAtrbtNm) { return _getAtSelfAuthXtnInfoD().select(_getCmnContext().getInstCode(), selfAuthId, xtnAtrbtNm); }
public CoaDtlIO getCoa(String instCd,String acctgDscd,String acctgItmCd) throws BizApplicationException{ // _checkInstId(instCd); _checkAcctgDscd(acctgDscd); _checkAcctgItmCd(acctgItmCd); String key = _getKeyString(instCd, acctgDscd, acctgItmCd); // read from instance memory //AcCoaMIO out = _getAcDataCacheManager().getCacheData(DataCacheCoreConfig.CHART_OF_ACCOUNTS, key); AcCoaCacheIO out = _getAcDataCacheManager().getCacheData(DataCacheCoreConfig.CHART_OF_ACCOUNTS, key); if(out != null) { return _getCoaDtlIO(out); } AcCoaMIO inqryIn = _getAcCoaMIO(instCd,acctgDscd,acctgItmCd); // Inquiry CoA List from DB (coa 기본정보 조회) AcCoaMIO acCoaMIO = _getAcCoaMDso().select(inqryIn); if (acCoaMIO == null){ throw new BizApplicationException("AAPACE0010", new Object[] { acctgItmCd }); } // Inquiry coa extended information (coa확장정보 조회) List<AcCoaXtnInfoDIO> xtnInfoList = _getAcCoaXtnInfoDDso().selectList(inqryIn); //set basic information and extended information of coa to AcCoaCacheIO AcCoaCacheIO coaCache = _getAcCoaCacheIO(acCoaMIO, xtnInfoList); // save to instance memory _getAcDataCacheManager().saveCache(DataCacheCoreConfig.CHART_OF_ACCOUNTS, key, coaCache); return _getCoaDtlIO(coaCache); }
public String getCndValDefault() throws BizApplicationException { return null; }
public StlmntCrctnMgmtSvcItemOut clone(){ try{ StlmntCrctnMgmtSvcItemOut object= (StlmntCrctnMgmtSvcItemOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DummyIO modifyArrCndClass(CaArrCndCntrlClassSaveIn in) throws BizApplicationException { CaArrCndClassIn input = new CaArrCndClassIn(); input.setInstCd(in.getInstCd()); input.setCndCd(in.getCndCd()); input.setCndClassNm(in.getCndClassNm()); input.setBizDscd(in.getBizDscd()); input.setPdTpCd(in.getPdTpCd()); input.setPdTmpltCd(in.getPdTmpltCd()); input.setPdCd(in.getPdCd()); _getArrCndCntrlMgmt().modifyArrCndClass(input); return new DummyIO(); }
public void saveMapSubInfo(Map<String, String> subInfoMap, StStlmntSIO stStlmntSIOIn) { logger.debug("##<ST-StlmntSubInfoBiz> saveMapSubInfo"); if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1.create a new instance of I/F VO // IValueObject subInfoIfVo = new StlmntSubInfo(); // 2.create a new instance of DBIO VO StStlmntSIO stStlmntSIO = new StStlmntSIO(); // 3.set key to DBIO VO _setKey(stStlmntSIO, stStlmntSIOIn); // 3.convert map to DBIO VO DtoUtils.setSubInfoIO(subInfoMap, stStlmntSIO); // 4.insert subsidiary detail _insertSubInfo(stStlmntSIO); }
public boolean check(Map<String, String> atrbtCntnt) throws BizApplicationException { if(logger.isDebugEnabled()) { logger.debug("ArthmtcOprtnCmpxVldtnImpl : {}", atrbtCntnt); } int cnt = 0; BigDecimal lVal = BigDecimal.ZERO; BigDecimal sum = BigDecimal.ZERO; for(Map.Entry<String, String> atrbt: atrbtCntnt.entrySet()) { if(atrbt.getValue() == null || !DataCheckUtils.isNumeric(atrbt.getValue())) { // It is {0} error. Please check {0}. throw new BizApplicationException("AAPCME0002", new Object[] {"@inpCntnt"}, new Object[] {"ArthmtcOprtnCmpxVldtnImpl : " + atrbtCntnt.toString()}); } if(cnt == 0) { lVal = new BigDecimal(atrbt.getValue()); cnt++; continue; } sum = sum.add(new BigDecimal(atrbt.getValue())); cnt++; } if(lVal.compareTo(sum) != 0) { // There is mismatch between first item and sum of other items. {0} throw new BizApplicationException("AAPCME0171", new Object[] {atrbtCntnt.toString()}); } return true; }
public MenuMgmtSvcGetListMenuOut clone(){ try{ MenuMgmtSvcGetListMenuOut object= (MenuMgmtSvcGetListMenuOut)super.clone(); if ( this.menuItmList== null ) object.menuItmList = null; else{ java.util.List<bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetListMenuSubOut> clonedList = new java.util.ArrayList<bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetListMenuSubOut>(menuItmList.size()); for( bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetListMenuSubOut item : menuItmList ){ clonedList.add( (bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetListMenuSubOut)item.clone()); } object.menuItmList = clonedList; } if ( this.prtltDfltScrnIdList== null ) object.prtltDfltScrnIdList = null; else{ java.util.List<bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetprtltDfltScrnIdOut> clonedList = new java.util.ArrayList<bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetprtltDfltScrnIdOut>(prtltDfltScrnIdList.size()); for( bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetprtltDfltScrnIdOut item : prtltDfltScrnIdList ){ clonedList.add( (bankware.corebanking.common.menu.service.dto.MenuMgmtSvcGetprtltDfltScrnIdOut)item.clone()); } object.prtltDfltScrnIdList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveTelNbrInfo(List<ActorTelNbrRgstIn> actorTelNbrInList) throws BizApplicationException { if( actorTelNbrInList == null || actorTelNbrInList.isEmpty()) { return; } /** * 1. 기존 액터연락처목록 조회 */ List<AtActorTelNbrDXtnIO> rgstrnTelNbrIOList = _getActorCtcptXtn().getListRgstrnTelNbrAddrInfo(this); /** * 2. 연락처 정보 저장 */ for (ActorTelNbrRgstIn actorTelNbrIn : actorTelNbrInList) { /** * 2.1. 대표연락처여부 Y 중복 판단 - 중복 시 에러 */ if (CCM01.YES.equals(actorTelNbrIn.getCtcptRprsntvYn())) { _checkRepresentativeYnDuplication(actorTelNbrIn.getActorCtcptId(), actorTelNbrIn.getCntctMthdTpCd()); } /** * 2.2. 연락처 중복 판단 - 중복 시 스킵 */ boolean isDuplicated = _getActorCtcptXtn().checkTelNbrDplctn(this, actorTelNbrIn, rgstrnTelNbrIOList); if (logger.isDebugEnabled()) { logger.debug("## <AT> saveTelNbrInfo -> isDuplicated = {} :: ", isDuplicated); } if (isDuplicated) { continue; } /** * 2.3. 확장속성 EAV 요소 분리 - 확장정보명세/보조명세 분류 */ Map<String, String> subInfoCrtnMap = new HashMap<String, String>(); subInfoCrtnMap.putAll(_getActorCtcptSubInfoBiz().getMapSubInfoCrtn(actorTelNbrIn.getCtcptXtnInfoList())); /** * 2.4. 액터연락처식별자 존재유무에 따라 등록/변경 - 연락처 정보 및 EAV 확장정보명세 저장 */ if (StringUtils.isEmpty(actorTelNbrIn.getActorCtcptId())) { _registerCtcptAddrInfo(actorTelNbrIn); } else { _modifyCtcptAddrInfo(actorTelNbrIn, actorTelNbrIn.getActorCtcptId()); } /** * 2.5. CTI 보조명세 저장 */ _getActorCtcptSubInfoBiz().saveMapSubInfo(this, actorTelNbrIn.getActorCtcptId(), actorTelNbrIn.getActorCtcptChngSeqNbr(), subInfoCrtnMap); } }
public CmTodayMBatIO clone(){ try{ CmTodayMBatIO object= (CmTodayMBatIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isValidRoleServiceRelation(String instCd, List<String> roleIdList, String srvcCd) throws BizApplicationException { _checkStringValue(instCd, CCM03.INST_CD); if(roleIdList.isEmpty()) _checkStringValue("", CCM03.ROLE_ID); _checkStringValue(srvcCd, CCM03.SRVC_CD); CaCmRoleSrvcRByRoleIdListIO in = new CaCmRoleSrvcRByRoleIdListIO(); in.setInstCd(instCd); in.setSrvcCd(srvcCd); in.setRoleIdList(roleIdList); List<CaCmRoleSrvcRIO> cmRoleSrvcRIOList = _getCmRoleSrvcRDso().selectListByRoleList(in); if(cmRoleSrvcRIOList.isEmpty()) { return false; } return true; }
public ScrtyIntMngrSvcDelIn clone(){ try{ ScrtyIntMngrSvcDelIn object= (ScrtyIntMngrSvcDelIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int delete(StAmtTpRpymntSeqDIO stAmtTpRpymntSeqDIO) { return _getStAmtTpRpymntSeqD().delete(stAmtTpRpymntSeqDIO); }
public CaDocSrchSvcGetDocClTreeOut clone(){ try{ CaDocSrchSvcGetDocClTreeOut object= (CaDocSrchSvcGetDocClTreeOut)super.clone(); if ( this.children== null ) object.children = null; else{ java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut>(children.size()); for( bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut item : children ){ clonedList.add( (bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeDtlOut)item.clone()); } object.children = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<TblXtnAtrbtOut> getTableExtendAttribute(String instCd, String tblNm) throws BizApplicationException { return this.getTableExtendAttribute(instCd, tblNm, XtnAtrbtVrtnCmpsEnum.NA, null); }
public NoticeBsicInfoIO request(NoticeBsicInfoIO noticeBsicInfoIO, Map<String,Object> refObjectMap) throws BizApplicationException { return request(noticeBsicInfoIO, refObjectMap, null); }
public PdCndImpl getCnd(PdCndIn in) throws BizApplicationException { // 조건 오브젝트 생성 및 초기화 // Get Condition Bean and initialize PdCndImpl cnd = new PdCndImpl(this, in); cnd.initialize(); // Return condition return cnd; }
public void terminate(InsrncStsChngIn in) throws BizApplicationException { InsrncStsCoreEnum afStstCd = InsrncStsCoreEnum.TERMINATED; // 1. 입력값 검증 _checkStsChnginput(in, afStstCd); // 2. 보증기본 설정상태 변경 ("해지"상태로 변경) _getInsrncBsicBiz().changeInsrnStatus(this, in, afStstCd.getValue()); } /** * <div class='en'> * @description * <pre> * t change the status of insurance to cancel status * </pre> * @seealso * @note {@link InsrncStsChngIn} : required fields - all of them * </div> * * <div class='ko'> * @description * <pre> * 보험의 상태를 취소상태로 변경한다. * </pre> * @seealso * @note {@link InsrncStsChngIn}
public ArrStndngOrder getArrStndngOrder(String arrId) throws BizApplicationException { ArrRealImpl arrReal = (ArrRealImpl) super.getArrRealCore(arrId); return (ArrStndngOrder) _checkArrObjectByKind( arrReal, ArrKndEnum.STANDING_ORDER ); }
public boolean isPackagePd() { return CCM01.YES.equals(pdPdM.getPckgPdYn()); }
public String getSubInfo(String atrbtNm, ScrtyIntImpl scrtyIntImpl) throws BizApplicationException { // 1. 설정 객체에 저장된 보조명세 캐시 조회 AsScrtyIntSIO scrtyIntSubInfo = getSubInfoCache(scrtyIntImpl); // 2. 설정에 저장된 보조원장 캐시가 null인 경우, null 리턴 if (scrtyIntSubInfo == null) { return null; } // 3. 설정에 저장된 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = scrtyIntSubInfo.get(atrbtNm); // 속성값이 null인경우 null리턴 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public DpstIntCalculatorOut calculateInterestProvisionalSettlement(Arr arr, int txSeqNbr,String baseDt, Map<String, String> xtdInfo, boolean smltn) throws BizApplicationException { return _calculateInt(arr, txSeqNbr, null, baseDt, smltn, xtdInfo, InterestTransactionTypeEnum.PROVISIONAL_SETTLEMENT); }
public CaSrvcMgmtSvcChngListIn clone(){ try{ CaSrvcMgmtSvcChngListIn object= (CaSrvcMgmtSvcChngListIn)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>(tblNm.size()); for( bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn item : tblNm ){ clonedList.add( (bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn)item.clone()); } object.tblNm = clonedList; } if ( this.saveList== null ) object.saveList = null; else{ java.util.List<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>(saveList.size()); for( bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn item : saveList ){ clonedList.add( (bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn)item.clone()); } object.saveList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public static boolean isValid(String value){ for (DebitCrdtDscdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public CaDstbCtvdSrchDetailOut clone(){ try{ CaDstbCtvdSrchDetailOut object= (CaDstbCtvdSrchDetailOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveXtnInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr) throws BizApplicationException { _getArrActvtyBasic().saveXtnAtrbt(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, this); }
public Map<String, String> getMapSubInfo(CustRprsnImpl custRprsnImpl) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 AtCustRprsnSIO subInfo = getSubInfoCache(custRprsnImpl); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조명세 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public List<ArrIntRt> getCurrentArrIntRt() throws BizApplicationException { PdIntRtStrctrClCdEnum arrIntRtTp = _getNormalIntRtTpCdByPd(); return _getArrIntRtProvider().getListArrIntRt(this, arrIntRtTp, ArrCmnUtil.getRckngDt( _getCmnContext())); }
protected ArrGrpCoreImpl getUniqueBusinessBean(String arrGrpId ) throws BizApplicationException { return (ArrGrpCoreImpl) ApplicationContextCoreUtils.getUniqueBusinessBean(_getCmnContextCore().getInstCode() + arrGrpId, getArrGrpImplClass()); }
public String getArrStsHms(){ return arrStsHms; }
public String saveRelationXtnInfo(ArrRelInfoIn arrRelInfoIn,String xtnAtrbtNm, String xtnAtrbtCntnt,String txDt,Integer txSeqNbr,ArrRealCoreImpl arrReal) throws BizApplicationException { if (ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())){ return null; } _checkInput(arrRelInfoIn,xtnAtrbtNm,txDt,txSeqNbr); // Check Transaction Exist // 거래생성여부 검증 _getArrCmnUtil().validateArrTxExist(arrReal, txDt, txSeqNbr); return _saveArrRelExtendAttribute(arrRelInfoIn,xtnAtrbtNm, xtnAtrbtCntnt,txDt,txSeqNbr, arrReal); }
public Map<String, String> getMapSubInfo(AssetImpl asset, Integer assetThingSeqNbr){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 IValueObject subInfo = getSubInfoCache(asset, assetThingSeqNbr); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조원장 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(!_isSubInfoContainsField(asset.getAssetThingSubInfoKnd(assetThingSeqNbr), entry.getKey())) { continue; } // Casting 시 Null 방지 if (entry.getValue() != null ) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public void saveSubInfo (String xtnAtrbtNm, String xtnAtrbtCntnt, StlmntSubInfoInqryIn subInfoInqryIn) throws BizApplicationException { // validate input value StlmntXtnInfoEnum stlmntXtnInfo = StlmntXtnInfoEnum.getEnum(xtnAtrbtNm); if(stlmntXtnInfo == null){ //xtnAtrbtNm은 유효한 정산확장속성이 아닙니다. throw new BizApplicationException("AAPSTE0201", new String[] {xtnAtrbtNm}); } _getStlmntSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, _setStSTlmntSIO(subInfoInqryIn)); }
public CaMenuMgmtSvcGetUserMenuListOut clone(){ try{ CaMenuMgmtSvcGetUserMenuListOut object= (CaMenuMgmtSvcGetUserMenuListOut)super.clone(); if ( this.prtltDfltScrnIdList== null ) object.prtltDfltScrnIdList = null; else{ java.util.List<bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetprtltDfltScrnIdOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetprtltDfltScrnIdOut>(prtltDfltScrnIdList.size()); for( bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetprtltDfltScrnIdOut item : prtltDfltScrnIdList ){ clonedList.add( (bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetprtltDfltScrnIdOut)item.clone()); } object.prtltDfltScrnIdList = clonedList; } if ( this.menuItmList== null ) object.menuItmList = null; else{ java.util.List<bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetUserMenuOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetUserMenuOut>(menuItmList.size()); for( bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetUserMenuOut item : menuItmList ){ clonedList.add( (bankware.corebanking.configurationadmin.ui.service.dto.CaMenuMgmtSvcGetUserMenuOut)item.clone()); } object.menuItmList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public StlmntManualEntryMgmtSvcRegisterIn clone(){ try{ StlmntManualEntryMgmtSvcRegisterIn object= (StlmntManualEntryMgmtSvcRegisterIn)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcRegisterItemIn> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcRegisterItemIn>(tblNm.size()); for( bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcRegisterItemIn item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcRegisterItemIn)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean check(String nbr) throws BizApplicationException { if(!DataCheckUtils.checkSocialSecurityNbr(nbr)) { throw new BizApplicationException("AAPCME0160", null); } return true; }
public CaDocRgstSvcRgstTmpltIn clone(){ try{ CaDocRgstSvcRgstTmpltIn object= (CaDocRgstSvcRgstTmpltIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustRprsnInqrySvcGetLoinIdNbrIn clone(){ try{ CustRprsnInqrySvcGetLoinIdNbrIn object= (CustRprsnInqrySvcGetLoinIdNbrIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean check(String vldnTrgt) throws BizApplicationException { if (_getArrMngr().getArrReal(vldnTrgt) == null) { throw new BizApplicationException("AAPARE0696", new String[] {vldnTrgt}); } return true; }
public void saveMapSubInfo(Map<String, String> aprslThingSubInfoMap, AprslCore aprslCore, Integer aprslThingSeqNbr) throws BizApplicationException { _getAprslThingSubInfoBiz().saveMapSubInfo(aprslThingSubInfoMap, (AprslImpl) aprslCore, aprslThingSeqNbr); }
public java.lang.String getDstbTrgtScrnYn(){ return dstbTrgtScrnYn; }
public int delete(AcBillCtgryCashDIO acBillCtgryCashDIO) throws BizApplicationException { return _getAcBillCtgryCashD().delete(acBillCtgryCashDIO); }
public List<ArrCashFlowIO> getListArrDueDateAdvent(String instCd, String deptId, String inqryStartDt, String inqryEndDt) throws BizApplicationException { List<ArrCashFlowIO> arrIdList = new ArrayList<ArrCashFlowIO>(); ArrCashFlowIO arrIdIO = null; /** Check Input Argument */ _checkInputValue(instCd, "instCd"); _checkInputValue(deptId, "deptId"); _checkInputValue(inqryStartDt, "inqryStartDt"); _checkInputValue(inqryEndDt, "inqryEndDt"); if( DateUtils.isValidDate(inqryStartDt) == false ) { // [{0}] [{1}] 입력한 날짜형식이 유효하지 않습니다. 디폴트 날짜 포맷은 "YYYYMMDD" 입니다. throw new BizApplicationException("AAPCME0001", new Object[]{"@inqryStartDt",inqryStartDt}); } if( DateUtils.isValidDate(inqryEndDt) == false ) { // [{0}] [{1}] 입력한 날짜형식이 유효하지 않습니다. 디폴트 날짜 포맷은 "YYYYMMDD" 입니다. throw new BizApplicationException("AAPCME0001", new Object[]{"@inqryEndDt",inqryEndDt}); } if( inqryEndDt.compareTo(inqryStartDt) < 0 ) { // {0}는 {1} 보다 커야 합니다. 입력 값을 확인하십시요. throw new BizApplicationException("AAPCME0007", new Object[]{"@inqryEndDt","@inqryStartDt"}); } List<StArrCashFlowDIO> arrCashFlowDIOList = _getStArrCashFlowDDso().selectListDueDateAdvent(instCd, deptId, inqryStartDt, inqryEndDt); if(!arrCashFlowDIOList.isEmpty()) { for(StArrCashFlowDIO stArrCashFlowDIO : arrCashFlowDIOList) { arrIdIO = new ArrCashFlowIO(); arrIdIO.setArrId( stArrCashFlowDIO.getArrId() ); arrIdList.add(arrIdIO); } } return arrIdList; }
public WatchListFilterSvcOut executeWatchListFiltering(WatchListFilterSvcIn in) throws BizApplicationException { /** * 1. get customer object */ Cust cust = _getCustMngr().getCust(in.getCustId()); /** * 2. Open CustTx */ CustTxCrtnIn custTxCrtnIn = new CustTxCrtnIn(); custTxCrtnIn.setCustTxBsicInfo(_setCustTxBsicInfo(in.getCustId())); CustTx custTx = _getCustTxMngr().createCustTx(custTxCrtnIn); /** * 3. execute watch list filtering */ String dueDlgncDscd = cust.executeWatchListFiltering(custTx.getCustTxSeqNbr()); /** * 4. assemble output */ WatchListFilterSvcOut out = new WatchListFilterSvcOut(); out.setDueDlgncDscd(dueDlgncDscd); return out; }
static boolean isValid(String value) { for (DpstPdTemplateCdEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public TxQrySvcGetStlmntListIn clone(){ try{ TxQrySvcGetStlmntListIn object= (TxQrySvcGetStlmntListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, int pgNbr, int pgCnt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, null, null, null, null, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, pgNbr, pgCnt, false); }
public ToDoMgmtSvcGetToDoMgmtListTreeListNonActivitiOut clone(){ ToDoMgmtSvcGetToDoMgmtListTreeListNonActivitiOut object= (ToDoMgmtSvcGetToDoMgmtListTreeListNonActivitiOut)super.clone(); if ( this.children== null ) object.children = null; else{ java.util.List<bankware.corebanking.configurationadmin.todo.service.dto.ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.todo.service.dto.ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut>(children.size()); for( bankware.corebanking.configurationadmin.todo.service.dto.ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut item : children ){ clonedList.add( (bankware.corebanking.configurationadmin.todo.service.dto.ToDoMgmtSvcGetToDoMgmtListAprvlDtlTmpltNonActivitiOut)item.clone()); } object.children = clonedList; } return object; }
static boolean isValid(String value){ for (PsbkMsgIdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
static boolean isValid(String value){ for (MostUsedAcctTpEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (AprslRelStsCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@aprslRelStsCd"});//({0}) is invalid {1}. } return true; }
public DeptClsgPrsntStsinqrySvcListOut clone(){ try{ DeptClsgPrsntStsinqrySvcListOut object= (DeptClsgPrsntStsinqrySvcListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.DeptClsgPrsntStsinqrySvcOut> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.DeptClsgPrsntStsinqrySvcOut>(tblNm.size()); for( bankware.corebanking.accounting.cashaccounting.service.dto.DeptClsgPrsntStsinqrySvcOut item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.cashaccounting.service.dto.DeptClsgPrsntStsinqrySvcOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrRealCore> getChildren(ArrRealCoreImpl arrReal,String bizDscd, String pdTpCd,String pdTmpltCd,String pdCd,List<String> curArrStsList) throws BizApplicationException { ArArrMSelectChildByPdInfoAndStatusIO arArrMSelectChildByPdInfoAndStatusIO = new ArArrMSelectChildByPdInfoAndStatusIO(); arArrMSelectChildByPdInfoAndStatusIO.setInstCd(arrReal.getInstCd()); arArrMSelectChildByPdInfoAndStatusIO.setMthrArrId(arrReal.getArrId()); arArrMSelectChildByPdInfoAndStatusIO.setCurArrStsList(curArrStsList); arArrMSelectChildByPdInfoAndStatusIO.setBizDscd(bizDscd); arArrMSelectChildByPdInfoAndStatusIO.setPdTpCd(pdTpCd); arArrMSelectChildByPdInfoAndStatusIO.setPdTmpltCd(pdTmpltCd); arArrMSelectChildByPdInfoAndStatusIO.setPdCd(pdCd); List<ArrRealCore> arrList = new ArrayList<ArrRealCore>(); List<ArArrMIO> arArrMList = _getArArrMDso().selectChildrenByPdInfoAndStatus(arArrMSelectChildByPdInfoAndStatusIO); if(arArrMList == null || arArrMList.isEmpty()){ return arrList; } for (ArArrMIO arArrM : arArrMList) { ArrRealCore arrRealLocal = _getArrMngrAgent().getArrRealCore(arArrM); arrList.add(arrRealLocal); } return arrList; }
public FrgnCrncyChkPrchsSvcOut clone(){ try{ FrgnCrncyChkPrchsSvcOut object= (FrgnCrncyChkPrchsSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<StaffRoleInqryOut> getListStaffRoleInfo(String instCd, String deptId, String staffId) throws BizApplicationException { //check required inputs if (StringCoreUtils.isEmpty(instCd)) { throw new BizApplicationException("AAPCME0006", new String[] {"@instCd"}); }else if (StringCoreUtils.isEmpty(deptId)) { throw new BizApplicationException("AAPCME0006", new String[] {"@deptId"}); } return this.getListStaffRoleInfo(instCd, deptId, staffId, CCM01.NO); }
public void saveSubInfo(AtCustRprsnSIO subInfoIO, CustRprsnImpl custRprsnImpl) throws BizApplicationException { // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustRprsnSIO oldSubInfoIO = getSubInfoCache(custRprsnImpl); if (oldSubInfoIO == null) { // PK setting subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId()); // insert _getAtCustRprsnSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoIO, oldSubInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(custRprsnImpl, oldSubInfoIO); // PK setting subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId()); // update _getAtCustRprsnSDso().update(oldSubInfoIO); } // 2. 캐시 저장 custRprsnImpl.setSubInfoCache(oldSubInfoIO); }
public AssetInsrncMgmtSvcInqryIn clone(){ try{ AssetInsrncMgmtSvcInqryIn object= (AssetInsrncMgmtSvcInqryIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DummyIO deleteTableExtendAttribute(CaTblMgmtSvcTblXtnAtrbtListIn in) throws BizApplicationException { for (CaTblMgmtSvcSaveTblXtnAtrbtIn caTblMgmtSvcSaveTblXtnAtrbtIn : in.getTblNm()) { CaTblXtnAtrbtIO inBo = new CaTblXtnAtrbtIO(); inBo.setInstCd(caTblMgmtSvcSaveTblXtnAtrbtIn.getInstCd()); inBo.setTblNm(caTblMgmtSvcSaveTblXtnAtrbtIn.getTblNm()); inBo.setXtnAtrbtNm(caTblMgmtSvcSaveTblXtnAtrbtIn.getXtnAtrbtNm()); _getTblXtnAtrbt().deleteTableExtendAttribute(inBo); } return new DummyIO(); }
public CaDocRgstSvcRgstClIn clone(){ try{ CaDocRgstSvcRgstClIn object= (CaDocRgstSvcRgstClIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaScrnIO getScreen (String scrnId) throws BizApplicationException { if (StringUtils.isEmpty(scrnId)) { throw new BizApplicationException("AAPCME0006", new Object[]{"@srvcCd"}); } CaScrnIO scrn = _getScreen(scrnId); return scrn; }
public List<BfPdRelOut> getRelBtwnBfAndPd(BfPdRelIn in) { List<BfPdRelOut> outList = new ArrayList<>(); BfPdRelationListIn apiIn = new BfPdRelationListIn(); apiIn.setInstitutionId(bf.getInstCd()); apiIn.setBfCd(bf.getPdCd()); apiIn.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(), in.getAplyTm())); apiIn.setPdBetweenRelationCd(in.getPdBtwnRelCd()); apiIn.setRelationPdInfoDscd(in.getRelPdInfoDscd()); List<BfPdRelationOut> relations = _bfApi().getListBfPdRelation(apiIn); for (BfPdRelationOut relation : relations) { BfPdRelOut out = new BfPdRelOut(); out.setIndsDscd(relation.getIndustryDscd()); out.setBizDscd(relation.getBizDscd()); out.setPdTpCd(relation.getPdTypeCd()); out.setPdInfoDscd(relation.getPdInfoDscd()); out.setPdTmpltCd(relation.getPdTemplateCd()); out.setPdCd(relation.getPdCd()); out.setPdNm(relation.getPdName()); out.setPdBtwnRelCd(relation.getPdBetweenRelationCd()); out.setAplyStartDt(PdUtil.parseDateToHHMMSS(relation.getApplyStartDate())); out.setAplyStartTm(PdUtil.parseDateToYYYYMMDD(relation.getApplyStartDate())); out.setAplyEndDt(PdUtil.parseDateToHHMMSS(relation.getApplyEndDate())); out.setAplyEndTm(PdUtil.parseDateToYYYYMMDD(relation.getApplyEndDate())); outList.add(out); } return outList; }
public static boolean isValid(String value){ for (ArrExtrnlIdNbrTpEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public CustCustRelSvcGetOut clone(){ try{ CustCustRelSvcGetOut object= (CustCustRelSvcGetOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void validate(String arrSrvcCd,ArrRealCore arrReal, CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { if (_getCmnContext().isSelfChannel() && !cust.getCustId().equals(_getCmnContext().getCustId())){ //Customer to be accessed is not same with self-service channel's user. This service ({0}) could not performs properly //접근대상 고객정보의 고객과 본 셀프서비스 채널의 사용자가 동일하지 않습니다. 본서비스({0}) 실행이 불가 합니다 throw new BizApplicationException("AAPARE0336", new Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)}); } }
public Map<String, String> getMapSubInfo(DeptImpl dept){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 AtDeptSIO subInfo = getSubInfoCache(dept); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조명세 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (ScrtyIntMAtrbtCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@ScrtyIntMAtrbt"});//({0}) is invalid {1}. } return true; }
public List<XtnCdIO> getListCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { List<XtnCdIO> xtnCdList = new ArrayList<XtnCdIO>(); // query data DcDocMIO dcDocMIO = new DcDocMIO(); _getCmnContext().setHeaderColumn(dcDocMIO); List<DcDocMIO> dcDocIdList = _getDcDocMDso().selectIdList(null, null, null); if(dcDocIdList != null && !dcDocIdList.isEmpty()) { String lngCd = null; if(supplInfoVal.containsKey(InstParamEnum.LANGUAGE_CODE.getValue())) { lngCd = (String) supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue()); } else { lngCd = _getCmnContext().getLanguageCode(); } for(DcDocMIO dcDocMIOItem : dcDocIdList) { XtnCdIO xtnCdIO = new XtnCdIO(); xtnCdIO.setCd(dcDocMIOItem.getDocId()); xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_DOC, dcDocMIOItem.getDocId(), lngCd)); xtnCdIO.setLngCd(lngCd); xtnCdList.add(xtnCdIO); } } return xtnCdList; }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String bizDscd, String pdTpCd, String pdTmpltCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, int pgNbr, int pgCnt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, bizDscd, pdTpCd, pdTmpltCd, null, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, pgNbr, pgCnt, false); }
public CustSrchSvcGetCustListIn clone(){ try{ CustSrchSvcGetCustListIn object= (CustSrchSvcGetCustListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) { for (FeeTypeDscdCoreEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
static boolean isValid(String value) { for (InterestOverdueDscdEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public CashTransitSvcIn clone(){ try{ CashTransitSvcIn object= (CashTransitSvcIn)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn>(tblNm.size()); for( bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveMapSubInfo(ActorCore actorCore, String dueDlgncDscd, int dueDlgncSeqNbr, Map<String, String> xtnInfoMap) throws BizApplicationException { _getActorDueDlgncSubInfoBiz().saveMapSubInfo((ActorImpl) actorCore, dueDlgncDscd, dueDlgncSeqNbr, xtnInfoMap); }
public void modifyStatus(DocBsicIO docBsicIO) throws BizApplicationException { // Get document by same document id DcDocMIO rgstrnDcDocMIO = _getDcDocMDso().select(null, docBsicIO.getDocId(), null); if(rgstrnDcDocMIO == null) { throw new BizApplicationException("AAPATE0016", new String[] {"@doc", "@docId", docBsicIO.getDocId()}); } else { _getCmnContext().setHeaderColumn(rgstrnDcDocMIO); rgstrnDcDocMIO.setDocStsCd(docBsicIO.getDocStsCd()); _getDcDocMDso().update(rgstrnDcDocMIO); _getDcDataCacheManager().clearInstanceCache(DataCacheCoreConfig.DOC_BSIC_CACHE, docBsicIO.getDocId()); } }
public List<CaKrRoadAddrOut> getAddrByBuildingName(String cityPrvncAddr,String cityGunGuAddr, String bldgNm) throws BizApplicationException { List<CaCmKrRoadAddrMIO> cmKrRoadAddrMList = _getCaCmKrRoadAddrMDso().selectByBuildingName(CaAddrHrarcyEnum.KOREA_ROAD_NAME_ADDRESS_CODE.getValue(), cityPrvncAddr, cityGunGuAddr, bldgNm); List<CaKrRoadAddrOut> out = new ArrayList<CaKrRoadAddrOut>(); if(cmKrRoadAddrMList.isEmpty()) { return out; } for(CaCmKrRoadAddrMIO cmKrRoadAddrMIO : cmKrRoadAddrMList) { CaKrRoadAddrOut krRoadAddrOut = new CaKrRoadAddrOut(); krRoadAddrOut = _getKrRoadAddrOut(cmKrRoadAddrMIO); if(krRoadAddrOut != null) { out.add(krRoadAddrOut); } } return out; }
public static boolean isValid(String value){ for (IntCalcXtnInfoCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public String getSubInfo(String xtnAtrbtNm, DeptCore deptCore) throws BizApplicationException { return _getDeptSubInfoBiz().getSubInfo(xtnAtrbtNm, (DeptImpl)deptCore); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "AcquireCltrl": _doServiceAction(arrSrvcTpCd,arrCndActionRequiredValue); return; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public void saveControlCenterService(String instCd, String cntrlCntrId, List<CaCntrlCntrMngrSvcGetSvcIO> inList) throws BizApplicationException { StringUtils.checkStringParm(instCd, CCM03.INST_CD); StringUtils.checkStringParm(cntrlCntrId, CCM03.CNTRL_CNTR_ID); // 제어센터유형 조회 _checkControlCenterBasic(instCd, cntrlCntrId); CaSvCntrlCntrSrvcDIO param = new CaSvCntrlCntrSrvcDIO(); param.setInstCd(instCd); param.setCntrlCntrId(cntrlCntrId); List<CaSvCntrlCntrSrvcDIO> rtnList = _getSvCntrlCntrSrvcDDso().selectList(param); // 현재 테이블 조회 결과로 입력된 리스트를 처리함 for(CaSvCntrlCntrSrvcDIO item : rtnList) { CaCntrlCntrMngrSvcGetSvcIO extData = null; for(CaCntrlCntrMngrSvcGetSvcIO in : inList) { if(item.getInstCd().equals(in.getInstCd()) && item.getCntrlCntrId().equals(in.getCntrlCntrId()) && item.getSrvcCd().equals(in.getSrvcCd()) && item.getAplyStartDt().equals(in.getAplyStartDt()) ){ extData = in; break; } } if(extData == null){ _getSvCntrlCntrSrvcDDso().delete(item); } else { CaSvCntrlCntrSrvcDIO svCntrlCntrSrvcDIO = _setControlCenterServiceDto(extData); _getSvCntrlCntrSrvcDDso().update(svCntrlCntrSrvcDIO); } } // 입력된 리스트를 기준으로 조회된 테이블에 존재하지 않는 서비스 생성처리 for(CaCntrlCntrMngrSvcGetSvcIO in : inList) { boolean isData = false; for(CaSvCntrlCntrSrvcDIO item : rtnList) { if(item.getInstCd().equals(in.getInstCd()) && item.getCntrlCntrId().equals(in.getCntrlCntrId()) && item.getSrvcCd().equals(in.getSrvcCd()) && item.getAplyStartDt().equals(in.getAplyStartDt()) ){ isData = true; break; } } if(!isData){ CaSvCntrlCntrSrvcDIO svCntrlCntrSrvcDIO = _setControlCenterServiceDto(in); _getSvCntrlCntrSrvcDDso().insert(svCntrlCntrSrvcDIO); } } }
public String getSubInfo(CustTxImpl custTxImpl, String txDt, Integer txSeqNbr, String atrbtNm) throws BizApplicationException { // 1. 보조명세 캐시 조회 AtCustTxSIO subInfo = getSubInfoCache(custTxImpl); // 2. 보조명세 캐시가 null인 경우, null 리턴 if (subInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명 기준으로 속성값 조회 Object atrbtVal = subInfo.get(atrbtNm); // Casting 시 Null 방지 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public int delete(CaCmClassMIO cmClassMIO) { super.clearCache(DataCacheCoreConfig.CLASS_MASTER_CACHE); super.clearCache(DataCacheCoreConfig.CLASS_TYPE_CACHE); super.clearCache(DataCacheCoreConfig.COMMON_CLASS_SELECT_CACHE); return _getCmClassM().delete(cmClassMIO); }
public List<ArArrArrRXtnInfoDIO> selectListArrArrRXtnInfo(ArArrArrRXtnInfoDIO arArrArrRXtnInfoDIO) throws BizApplicationException { return super.selectListArrArrRXtnInfo(arArrArrRXtnInfoDIO); }
public CustRgstSvcCorpOut clone(){ try{ CustRgstSvcCorpOut object= (CustRgstSvcCorpOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (ThingKndCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@assetStsCd"});//({0}) is invalid {1}. } return true; }
public String getAprvlNbr() throws BizApplicationException { return _getArrRealCoreFundamentalAgent().getAprvlNbr(this); }
public void saveMapSubInfo(Map<String, String> subInfoMap, AprslImpl aprslImpl, Integer prfClaimSeqNbr) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsAprslPrfClaimSIO subInfoCache = getSubInfoCache(aprslImpl, prfClaimSeqNbr); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsAprslPrfClaimSIO(); subInfoCache.setAprslId(aprslImpl.getAprslBasicCache().getAprslId()); // PK setting subInfoCache.setPrfClaimSeqNbr(prfClaimSeqNbr); // PK setting // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-1. insert _getAsAprslPrfClaimSDso().insert(subInfoCache); // 3. 캐시 저장 _saveSubInfoCache(subInfoCache, aprslImpl, prfClaimSeqNbr); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-2. update _getAsAprslPrfClaimSDso().update(subInfoCache); } }
public boolean isValid(String type) { return ( "D".equalsIgnoreCase(type) || "M".equalsIgnoreCase(type) || "T".equalsIgnoreCase(type) ) ; //added by Roh(change to simplify) }
public int delete(String clHrarcyId) { return _getCmClHrarcyM().delete(clHrarcyId); }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { String cd = ""; if(supplInfoVal.get(CCM03.CD) != null) { cd = supplInfoVal.get(CCM03.CD).toString(); } CmKrStutDongCdMIO cmKrStutDongCdMIO = _getCmKrStutDongCdMDso().selectCheckCode(AddrHrarcyEnum.KOREA_STATUTORY_DONG_CODE.getValue(), cd); if(cmKrStutDongCdMIO == null) { return false; } return true; }
public void saveAssetCustRelXtnInfo(AssetCustRelXtnInfoSaveIn xtnInfoSaveIn) throws BizApplicationException{ _getAssetCustRelBiz().saveRelXtnInfo(this, xtnInfoSaveIn); }
public void terminateArrRprsnRelation(ArrRprsnRelTrmntnIn in, ArrRealCoreImpl arrReal) throws BizApplicationException { // 계약 관계 주제영역 미사용 시 skip if (!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.RELATED_PERSON_RELATION) || ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd()) ) { return; } // 입력검증 _checkInput(in,arrReal); // 거래생성여부 검증 _getArrCmnUtil().validateArrTxExist(arrReal, in.getTxDt(), in.getTxSeqNbr()); // 활동중인 계약관련인관계 조회 // 종료할 계약관련인관계가 없는 경우 에러처리 ArArrRprsnRIO arArrRprsnRIO = _getArArrRprsnRDso().selectEffective(arrReal.getInstCd(), arrReal.getArrId(), in.getRprsnId(), in.getArrRprsnRelCd(), _getInqBaseDt(null)); if (arArrRprsnRIO == null) { throw new BizApplicationException("AAPARE0056", null); } // 계약관련인관계 상태 갱신 // 1) '관계시작일 < 관계종료일'인 경우, '해지' 상태로 변경 // 2) '관계시작일 = 관계종료일'인 경우, '무시' 상태로 변경 // 3) '관계시작일 > 관계종료일'인 경우 에러처리 if (arArrRprsnRIO.getRelStartDt().compareTo(in.getRelEndDt()) < 0) { arArrRprsnRIO.setArrRprsnRelStsCd(ArrRelStsEnum.TERMINATED.getValue()); } else if (arArrRprsnRIO.getRelStartDt().compareTo(in.getRelEndDt()) == 0) { arArrRprsnRIO.setArrRprsnRelStsCd(ArrRelStsEnum.IGNORED.getValue()); } else { throw new BizApplicationException("AAPARE0046", null); } // 계약관련인관계 종료일 갱신 String bfChngRelEndDt = arArrRprsnRIO.getRelEndDt(); arArrRprsnRIO.setRelEndDt(in.getRelEndDt()); _getCmnContextCore().setHeaderColumn(arArrRprsnRIO); _getArArrRprsnRDso().updateStatus(arArrRprsnRIO); // 계약관련인관계 상태이력 저장 _insertArrRprsnRelStsHistory(arArrRprsnRIO, in.getRelEndDt(), bfChngRelEndDt, in.getArrRprsnRelStsChngRsnCd(), in.getTxDt(), in.getTxSeqNbr()); }
public CaSysIntrfcInfoInsertResultOut clone(){ try{ CaSysIntrfcInfoInsertResultOut object= (CaSysIntrfcInfoInsertResultOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public LnRpymntSvcRpymntInfoIn clone(){ try{ LnRpymntSvcRpymntInfoIn object= (LnRpymntSvcRpymntInfoIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Staff getStaffMngrInfo() throws BizApplicationException { Staff tempStaff = _getStaffMngr().getStaff(_getCmnContext().getStaffId()); return tempStaff; }
public AssetBsicInfoIO getBasicInfo() throws BizApplicationException { if(assetBasicCache == null) { return null; } AssetBsicInfoIO assetBsicInfoIO = new AssetBsicInfoIO(); DtoCoreUtils.setSubInfoIO(assetBasicCache, assetBsicInfoIO); return assetBsicInfoIO; }
public CaDataVldtnMgmtSvcGetDataVldtnInfoOut clone(){ try{ CaDataVldtnMgmtSvcGetDataVldtnInfoOut object= (CaDataVldtnMgmtSvcGetDataVldtnInfoOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustRprsnInqrySvcCtcptXtnOut clone(){ try{ CustRprsnInqrySvcCtcptXtnOut object= (CustRprsnInqrySvcCtcptXtnOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaRoleStaffOut clone(){ try{ CaRoleStaffOut object= (CaRoleStaffOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int saveExtendsAttribute(CaTblExtendAtrbtIO in) throws BizApplicationException { // 기관코드, 테이블명, 속성명은 필수로 입력 받아야 한다. _checkInputValue(in.getInstCd(), CCM03.INST_CD); _checkInputValue(in.getTblNm(), CCM03.TBL_NM); _checkInputValue(in.getAtrbtNm(), CCM03.ATRBT_NM); _checkInputValue(in.getXtnAtrbtVrtnCmpsCd(), CCM03.XTN_ATRBT_VRTN_CMPS_CD); _checkInputValue(in.getRmkCntnt(), CCM03.RMK_CNTNT); if(!StringUtils.isEmpty(in.getAtrbtVldtnXtnRuleCntnt())) { _checkSimpleExtendValidationRule(in.getAtrbtVldtnXtnRuleCntnt()); } // 검증방법코드와 규칙 검증 _getAtrbtChk().isValidByValidationWayCodeAndRule(in.getAtrbtVldtnWayCd(), in.getAtrbtVldtnRuleCntnt()); // 확장규칙 검증 _getAtrbtChk().isValidValidationExtendRule(in.getAtrbtVldtnXtnRuleCntnt()); // 기존 테이블확장속성명세 조회 CaCmTblXtnAtrDIO inquiryResult = _getCmTblXtnAtrDDso().select(in.getInstCd(), in.getTblNm(), in.getAtrbtNm()); if(inquiryResult == null){ // 없으면 에러처리 >> 표준속성검증이 없습니다. 표준속성검증을 등록 하십시오. throw new BizApplicationException("AAPCME0218", new Object[] {}); } String tempXtnAtrbtVrtnCmpsCd = ""; // 확장속성변형구성코드 tempXtnAtrbtVrtnCmpsCd = inquiryResult.getXtnAtrbtVrtnCmpsCd(); _getCaCmnContext().setHeaderColumn(inquiryResult); // 조회된값에 테이블확장속성 검증 정보 설정 inquiryResult.setAtrbtVldtnWayCd(in.getAtrbtVldtnWayCd()); // 속성검증방법코드 inquiryResult.setAtrbtVldtnRuleCntnt(in.getAtrbtVldtnRuleCntnt()); // 속성검증규칙 inquiryResult.setAtrbtVldtnXtnRuleCntnt(in.getAtrbtVldtnXtnRuleCntnt()); // 속성검증확장규칙 inquiryResult.setXtnAtrbtVrtnCmpsCd(in.getXtnAtrbtVrtnCmpsCd()); // 확장속성변형구성코드 inquiryResult.setRmkCntnt(in.getRmkCntnt()); // 비고내용 inquiryResult.setSiteLbrtryDscd(_getInstParmProvider().getInstParm(CaInstParamEnum.SITE_LABORATORY_DISTINCTION_CODE.getValue())); inquiryResult.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue()); int result = _getCmTblXtnAtrDDso().update(inquiryResult); // 기존 확장속성검증유형 코드 와 입력된 확장속성검증유형코드가 다르면 상세 값을 지운다. if(!in.getXtnAtrbtVrtnCmpsCd().equals(tempXtnAtrbtVrtnCmpsCd)) { // CM_TBL_XTN_ATR_VRTN_CMPS_D _deleteExtendAttributeVariationComposition(in.getInstCd(), in.getTblNm(), in.getAtrbtNm()); // CM_TBL_XTN_ATR_XTN_ATR_VAL_D _deleteExtendedAttributeExtendedAttributeValue(in.getInstCd(), in.getTblNm(), in.getAtrbtNm()); } return result; }
public void saveSubInfo(ActorImpl actorImpl, String ctcptId, Integer ctcptChngSeqNbr, AtActorCtcptSIO subInfoIO) throws BizApplicationException { // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 // ** 연락처 보조명세는 변경이력을 관리하지 않는다. AtActorCtcptSIO oldSubInfoIO = getSubInfoCache(actorImpl, ctcptId, ctcptChngSeqNbr); if (oldSubInfoIO == null) { // PK setting subInfoIO.setActorId(actorImpl.getActorId()); subInfoIO.setActorCtcptId(ctcptId); subInfoIO.setActorCtcptChngSeqNbr(ctcptChngSeqNbr); // insert _getAtActorCtcptSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoIO, oldSubInfoIO)) { return; } // PK setting subInfoIO.setActorId(actorImpl.getActorId()); subInfoIO.setActorCtcptId(ctcptId); subInfoIO.setActorCtcptChngSeqNbr(ctcptChngSeqNbr); // update _getAtActorCtcptSDso().update(subInfoIO); } // 2. 캐시 저장 _saveSubInfoCache(subInfoIO, actorImpl, ctcptId, ctcptChngSeqNbr); }
public Map<String, String> getMapSubInfo(StStlmntCalcnSIO stStlmntCalcnSIOIn){ logger.debug("##<ST-StlmntCalcnSubInfoBiz> getMapSubInfo"); Map<String, String> subInfoMap = new HashMap<String, String>(); // 1.I/F VO 생성 StlmntCalcnSubInfo subInfoIntrfcIO = new StlmntCalcnSubInfo (); // 2.DBIO VO 신규 StStlmntCalcnSIO stlmntCalcnSIO = new StStlmntCalcnSIO(); // 3.DB 조회 //selectList DSO의 Key: 계산근기의 상세일련번호까지의 키값을 이용하여 계산근기 보조명세를 검색시 사용 StStlmntCalcnSIO stStlmntCalcnS = _getStlmntCalcnSDso().select(stStlmntCalcnSIOIn); if(stStlmntCalcnS == null) { return null; } // 4.DBIO VO 를 I/F VO로 변환 DtoUtils.setSubInfoIO(stStlmntCalcnS, subInfoIntrfcIO); // 5.I/F VO를 MAP으로 변환 for(Entry<String,Object> entry : subInfoIntrfcIO.getFieldValues().entrySet()) { if(entry.getValue()!=null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AprslImpl aprslImpl, Integer prfClaimSeqNbr) { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)){ return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttribute(xtnAtrbtNm, xtnAtrbtCntnt); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsAprslPrfClaimSIO subInfoCache = getSubInfoCache(aprslImpl, prfClaimSeqNbr); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsAprslPrfClaimSIO(); subInfoCache.setAprslId(aprslImpl.getAprslBasicCache().getAprslId()); // PK setting subInfoCache.setPrfClaimSeqNbr(prfClaimSeqNbr); // PK setting // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 2-1. insert _getAsAprslPrfClaimSDso().insert(subInfoCache); // 3. 캐시 저장 _saveSubInfoCache(subInfoCache, aprslImpl, prfClaimSeqNbr); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache)) { return; } // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 2-2. update _getAsAprslPrfClaimSDso().update(subInfoCache); } }
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbCnstncySvCntrlCntrTrmnlDDso().selectListForConsistency(pageOffSet, pgCnt); }
public ArrRealCoreImpl getArrRealCore(ArrRealGetIn arrRealGetIn) throws BizApplicationException { return _getArrRealCore(arrRealGetIn, null); }
public boolean checkCode(CaCdNbrInfoIO in, String cd) throws BizApplicationException { String instCd = in.getInstCd(); if(StringUtils.isEmpty(instCd)) { instCd = _getCaCmnContext().getInstCode(); } CaCmInstSbstCdDIO daoIn = new CaCmInstSbstCdDIO(); daoIn.setInstCd(instCd); daoIn.setCdNbr(in.getCdNbr()); daoIn.setCd(cd); daoIn.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue()); List<CaCmInstSbstCdDIO> daoOutList = _getCmInstSbstCdDDso().selectListByCondition(daoIn); if(daoOutList == null || daoOutList.isEmpty()) { return false; } return true; }
static boolean isValid(String value){ for (PdIntRtStrctrClCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public String getDeptId() throws BizApplicationException { String deptId = (String)CbbApplicationContext.getCbbDataContainerItem(CbbDataContainerType.APP_CM, CmDataContainerDefinition.CM_DETP_ID); if(StringCoreUtils.isEmpty(deptId)) { deptId = _getContextHeader().getDeptId(); //2018.04.30 부서ID를 Application Container에 담아 둔다. CbbApplicationContext.setCbbDataContainerItem(CbbDataContainerType.APP_CM, CmDataContainerDefinition.CM_DETP_ID, deptId); } return deptId; }
public PreScrningInsrncSts clone(){ try{ PreScrningInsrncSts object= (PreScrningInsrncSts)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<XtnCdIO> getListCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { List<XtnCdIO> xtnCdIOs = new ArrayList<XtnCdIO>(); StBalTpMIO stBalTpMIO = new StBalTpMIO(); String lngCd = supplInfoVal == null ? null : String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue())); List<StBalTpMIO> balTpList = _getStBalTpCdDso().selectListStBalTpCd(stBalTpMIO); if(balTpList == null || balTpList.isEmpty()) { return xtnCdIOs; } for(StBalTpMIO out : balTpList) { XtnCdIO xtnCdIO = new XtnCdIO(); xtnCdIO.setCd(out.getBalTpCd()); if(StringUtils.isEmpty(lngCd)) { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CdNbrEnum.BALANCE_TYPE_CD.getValue()+out.getBalTpCd())); } else { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CdNbrEnum.BALANCE_TYPE_CD.getValue()+out.getBalTpCd(), lngCd)); } xtnCdIOs.add(xtnCdIO); } return xtnCdIOs; }
public CaExtrnlIntrfcMsgInfoMgmtListOut getListExtrnlInstMsgMapInfo(String instCd, String extrnlInstCd, String extrnlInstTxDscd, int pgNbr, int pgCnt) { logger.debug(" ============ getListExtrnlInstMsgMapInfo START =============="); CaExtrnlIntrfcMsgInfoMgmtOut extrnlIntrfcMsgInfoMgmtOut = null; List<CaExtrnlIntrfcMsgInfoMgmtOut> extrnlIntrfcMsgInfoOutList = new ArrayList<CaExtrnlIntrfcMsgInfoMgmtOut>(); CaExtrnlIntrfcMsgInfoMgmtListOut out = new CaExtrnlIntrfcMsgInfoMgmtListOut(); /** * pgCnt, pgNbr 처리 */ Integer pageOffset = PaginationUtils.getPgOffset(pgNbr, pgCnt); /** * 전문정보조회 */ List<CaXpExtrnlIntrfcMsgInfoDIO> xpExtrnlIntrfcMsgInfoDIOList = _getXpExtrnlMsgInfoDDso().selectListMsgInfo(instCd, extrnlInstCd, extrnlInstTxDscd, pageOffset, pgCnt); /** * 출력 조립 */ for(CaXpExtrnlIntrfcMsgInfoDIO xpExtrnlIntrfcMsgInfoDIOOut : xpExtrnlIntrfcMsgInfoDIOList) { extrnlIntrfcMsgInfoMgmtOut = new CaExtrnlIntrfcMsgInfoMgmtOut(); // Generated by code generator [[ extrnlIntrfcMsgInfoMgmtOut.setInstCd(xpExtrnlIntrfcMsgInfoDIOOut.getInstCd());// set [기관코드] extrnlIntrfcMsgInfoMgmtOut.setExtrnlInstCd(xpExtrnlIntrfcMsgInfoDIOOut.getExtrnlInstCd());// set [대외기관코드] extrnlIntrfcMsgInfoMgmtOut.setExtrnlInstTxDscd(xpExtrnlIntrfcMsgInfoDIOOut.getExtrnlInstTxDscd());// set [대외기관거래구분코드] extrnlIntrfcMsgInfoMgmtOut.setMsgInpOutpDscd(xpExtrnlIntrfcMsgInfoDIOOut.getMsgInpOutpDscd());// set [전문입력출력구분코드] extrnlIntrfcMsgInfoMgmtOut.setMsgFldLvlVal(xpExtrnlIntrfcMsgInfoDIOOut.getMsgFldLvlVal());// set [전문필드레벨값] extrnlIntrfcMsgInfoMgmtOut.setSrcFldKeyVal(xpExtrnlIntrfcMsgInfoDIOOut.getSrcFldKeyVal());// set [소스필드키값] extrnlIntrfcMsgInfoMgmtOut.setTrgtFldKeyVal(xpExtrnlIntrfcMsgInfoDIOOut.getTrgtFldKeyVal());// set [대상필드키값] extrnlIntrfcMsgInfoMgmtOut.setFldCnstntVal(xpExtrnlIntrfcMsgInfoDIOOut.getFldCnstntVal());// set [필드상수값] extrnlIntrfcMsgInfoMgmtOut.setFldValSettingDscd(xpExtrnlIntrfcMsgInfoDIOOut.getFldValSettingDscd());// set [필드값설정구분코드] extrnlIntrfcMsgInfoMgmtOut.setFldTpDscd(xpExtrnlIntrfcMsgInfoDIOOut.getFldTpDscd());// set [필드유형구분코드] extrnlIntrfcMsgInfoMgmtOut.setCdMappingDscd(xpExtrnlIntrfcMsgInfoDIOOut.getCdMappingDscd());// set [코드매핑구분코드] extrnlIntrfcMsgInfoMgmtOut.setCnvrsnMthdDscd(xpExtrnlIntrfcMsgInfoDIOOut.getCnvrsnMthdDscd());// set [변환방식구분코드] extrnlIntrfcMsgInfoMgmtOut.setCnvrsnDlmtrVal(xpExtrnlIntrfcMsgInfoDIOOut.getCnvrsnDlmtrVal());// set [변환구분자값] extrnlIntrfcMsgInfoMgmtOut.setCnvrsnStartVal(xpExtrnlIntrfcMsgInfoDIOOut.getCnvrsnStartVal());// set [변환시작값] extrnlIntrfcMsgInfoMgmtOut.setCnvrsnEndVal(xpExtrnlIntrfcMsgInfoDIOOut.getCnvrsnEndVal());// set [변환종료값] extrnlIntrfcMsgInfoMgmtOut.setHigherFldKeyVal(xpExtrnlIntrfcMsgInfoDIOOut.getHigherFldKeyVal());// set [상위필드키값] extrnlIntrfcMsgInfoMgmtOut.setMndtryYn(xpExtrnlIntrfcMsgInfoDIOOut.getMndtryYn());// set [필수여부] extrnlIntrfcMsgInfoMgmtOut.setUseYn(xpExtrnlIntrfcMsgInfoDIOOut.getUseYn());// set [사용여부] extrnlIntrfcMsgInfoMgmtOut.setMsgItmSeq(xpExtrnlIntrfcMsgInfoDIOOut.getMsgItmSeq());// set [전문항목순서] extrnlIntrfcMsgInfoMgmtOut.setMsgItmDtlsSeq(xpExtrnlIntrfcMsgInfoDIOOut.getMsgItmDtlsSeq());// set [전문항목세부순서] extrnlIntrfcMsgInfoMgmtOut.setLastChngTmstmp(xpExtrnlIntrfcMsgInfoDIOOut.getLastChngTmstmp());// set [최종변경타임스탬프] extrnlIntrfcMsgInfoMgmtOut.setLastChngGuid(xpExtrnlIntrfcMsgInfoDIOOut.getLastChngGuid());// set [최종변경GUID] // Generated by code generator ]] extrnlIntrfcMsgInfoOutList.add(extrnlIntrfcMsgInfoMgmtOut); } out.setExtrnlIntrfcMsgInfoMgmtOut(extrnlIntrfcMsgInfoOutList); return out; }
public DeptRoleChngSvcIn clone(){ try{ DeptRoleChngSvcIn object= (DeptRoleChngSvcIn)super.clone(); if ( this.deptRoleList== null ) object.deptRoleList = null; else{ java.util.List<bankware.corebanking.department.rolemanagement.service.dto.DeptRoleChngSvcInSub> clonedList = new java.util.ArrayList<bankware.corebanking.department.rolemanagement.service.dto.DeptRoleChngSvcInSub>(deptRoleList.size()); for( bankware.corebanking.department.rolemanagement.service.dto.DeptRoleChngSvcInSub item : deptRoleList ){ clonedList.add( (bankware.corebanking.department.rolemanagement.service.dto.DeptRoleChngSvcInSub)item.clone()); } object.deptRoleList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public LnArrCndChngInqryOut clone(){ try{ LnArrCndChngInqryOut object= (LnArrCndChngInqryOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<PdTxSrvcIO> getListPdTpCd(PdTxSrvcIO in) throws BizApplicationException { return _convertPdTxSvcIOList2PdTxSrvcIOList(_convertPdTypeOutListToPdTxSvcIOList(_getListPdTpCdCmb(in))); }
public DeptRoleChngSvcInSub clone(){ try{ DeptRoleChngSvcInSub object= (DeptRoleChngSvcInSub)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int registerAprslThing(AprslThingCrtnIn in) throws BizApplicationException { // 1. 확장정보와 보조명세 분리 Map<String, String> subInfoMap = _getAprslThingSubInfoBiz().getMapSubInfoCrtn(in.getAprslThingXtnList()); // 2. 감정물건 등록 int thingSeqNbr = super.registerAprslThing(in); // 3. 보조명세 저장 _getAprslThingSubInfoBiz().saveMapSubInfo(subInfoMap, this, thingSeqNbr); return thingSeqNbr; }
public List<ArrReal> getChildren() throws BizApplicationException { return _getArrXtnUtil().convertArrRealList(super.getChildrenCore()); }
public static boolean isValid(String value) { for (ExRtKndCdEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (CustLmtChngDsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("APATE0028", new Object[] {value, "@custLmtChngDscd"}); } return false; }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "TerminateDeposit": case "TerminationLoan": case "PartialWithdrawal": _doTerminationAction( ); return; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public CaDeptRoleTmpltSvcRgstIn clone(){ try{ CaDeptRoleTmpltSvcRgstIn object= (CaDeptRoleTmpltSvcRgstIn)super.clone(); if ( this.deptRoleTmpltList== null ) object.deptRoleTmpltList = null; else{ java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaDeptRoleTmpltSvcRgstDtlIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaDeptRoleTmpltSvcRgstDtlIn>(deptRoleTmpltList.size()); for( bankware.corebanking.configurationadmin.actor.service.dto.CaDeptRoleTmpltSvcRgstDtlIn item : deptRoleTmpltList ){ clonedList.add( (bankware.corebanking.configurationadmin.actor.service.dto.CaDeptRoleTmpltSvcRgstDtlIn)item.clone()); } object.deptRoleTmpltList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int getPdCnddBnftAplyInfoCount(PdCnddBnftAplyMIn in) throws BizApplicationException { int result = 0; PdCnddBnftAplyMIO pdCnddBnftAplyMIO = new PdCnddBnftAplyMIO(); pdCnddBnftAplyMIO.setTntInstId(_getCmnContext().getInstCode()); pdCnddBnftAplyMIO.setCustId(in.getCustId()); pdCnddBnftAplyMIO.setBnftCd(in.getBnftCd()); pdCnddBnftAplyMIO.setMrchntNbr(in.getMrchntNbr()); pdCnddBnftAplyMIO.setMrchntNbrList(in.getMrchntNbrList()); pdCnddBnftAplyMIO.setMrchntNbrListCount(in.getMrchntNbrList().size()); pdCnddBnftAplyMIO.setBaseDt( PdUtil.parseYyyyMMddHHmmssToDate(_getCmnContext().getTxDate(), _getCmnContext().getTxTime())); pdCnddBnftAplyMIO.setAplyStartDt(PdUtil.parseStringToDate(in.getAplyStartDt())); pdCnddBnftAplyMIO.setAplyEndDt(PdUtil.parseStringToDate(in.getAplyEndDt())); pdCnddBnftAplyMIO.setPdTmpltCdList(in.getPdTmpltCdList()); pdCnddBnftAplyMIO.setPdTmpltCdListCount(in.getPdTmpltCdList().size()); //본점에서 발급한것 무조건 포함한다. pdCnddBnftAplyMIO.setMrchntTpCd(PdMerchantTypeDscdCoreEnum.ALL_MERCHANT.getValue()); pdCnddBnftAplyMIO.setBrnchCd(in.getBrnchCd()); if (BaBnftIssmdaStsCdCoreEnum.UNUSED.getValue().equals(in.getCouponStsCd())) { List<PdCnddBnftAplyMIO> pdCnddBnftAplyMIOOutList = _getPdServiceDso() .selectBaCnddBnftAplyInfoUnused(pdCnddBnftAplyMIO); int listSize = pdCnddBnftAplyMIOOutList.size(); for (int i = 0; i < listSize; i++) { //혜택적용일련번호 = 0 -> 전가맹점 쿠폰 if (pdCnddBnftAplyMIOOutList.get(i).getBnftAplySeqNbr() == 0) { BfIn bfIn = new BfIn(); bfIn.setBfCd(pdCnddBnftAplyMIOOutList.get(i).getBnftCd()); bfIn.setAplyDt(PdUtil.parseDateToYYYYMMDD(pdCnddBnftAplyMIOOutList.get(i).getAplyStartDt())); bfIn.setAplyTm(PdUtil.parseDateToHHMMSS(pdCnddBnftAplyMIOOutList.get(i).getAplyStartDt())); Bf bf = _getBfMngr().getBf(bfIn); //쿠폰총수량(N0090) - 해당 쿠폰의 총 발급수량(적용원장에 들어가있는수) > 0 BfCnd bfCndN0090 = bf.getCnd(PdCndCoreEnum.COUPON_TOTAL_CNT.getValue()); if (bfCndN0090.isAvailable()) { SmplRngCndVal totCouponCnt = (SmplRngCndVal) bfCndN0090.getCndVal(); PdBnftAplyMIO pdBnftAplyMIO = new PdBnftAplyMIO(); pdBnftAplyMIO.setTntInstId(_getCmnContext().getInstCode()); //pdBnftAplyMIO.setCustId(in.getCustId()); pdBnftAplyMIO.setBnftCd(pdCnddBnftAplyMIOOutList.get(i).getBnftCd()); int usedCount = _getPdServiceDso().selectBnftAplyInfoCount(pdBnftAplyMIO); BigDecimal leftTotCnt = totCouponCnt.getMaxVal().subtract(new BigDecimal(usedCount)); if (leftTotCnt.compareTo(BigDecimal.ZERO) <= 0) { pdCnddBnftAplyMIOOutList.remove(i); listSize--; i--; continue; } } //인당발급가능쿠폰수(N0091) - 해당고객이 해당쿠폰을 발급받은 수량(적용원장에 들어가있는 해당 고객의 해당쿠폰의 수) >0 BfCnd bfCndN0091 = bf.getCnd(PdCndCoreEnum.ISSUABLE_COUPON_CNT_PER_PERSON.getValue()); if (bfCndN0091.isAvailable()) { SmplRngCndVal couponCntRerPerson = (SmplRngCndVal) bfCndN0091.getCndVal(); PdBnftAplyMIO pdBnftAplyMIO = new PdBnftAplyMIO(); pdBnftAplyMIO.setTntInstId(_getCmnContext().getInstCode()); pdBnftAplyMIO.setCustId(in.getCustId()); pdBnftAplyMIO.setBnftCd(pdCnddBnftAplyMIOOutList.get(i).getBnftCd()); int usedCount = _getPdServiceDso().selectBnftAplyInfoCount(pdBnftAplyMIO); BigDecimal leftTotCndPerPerson = couponCntRerPerson.getMaxVal() .subtract(new BigDecimal(usedCount)); if (leftTotCndPerPerson.compareTo(BigDecimal.ZERO) <= 0) { pdCnddBnftAplyMIOOutList.remove(i); listSize--; i--; continue; } } else { //조건이 정의되지 않았다면 1번만 사용가능 PdBnftAplyMIO pdBnftAplyMIO = new PdBnftAplyMIO(); pdBnftAplyMIO.setTntInstId(_getCmnContext().getInstCode()); pdBnftAplyMIO.setCustId(in.getCustId()); pdBnftAplyMIO.setBnftCd(pdCnddBnftAplyMIOOutList.get(i).getBnftCd()); int usedCount = _getPdServiceDso().selectBnftAplyInfoCount(pdBnftAplyMIO); if (usedCount > 0) { pdCnddBnftAplyMIOOutList.remove(i); listSize--; i--; continue; } } } } result = pdCnddBnftAplyMIOOutList.size(); } else if (BaBnftIssmdaStsCdCoreEnum.USED.getValue().equals(in.getCouponStsCd())) { result = _getPdServiceDso().selectBaCnddBnftAplyInfoUsedCount(pdCnddBnftAplyMIO); } else { result = _getPdServiceDso().selectBaCnddBnftAplyInfoCount(pdCnddBnftAplyMIO); } return result; }
public TermDpstPsblIntPymntCntSvcOut clone(){ try{ TermDpstPsblIntPymntCntSvcOut object= (TermDpstPsblIntPymntCntSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void registerArrTxXtnInfo(StTxXtnInfoDIO sqlIn, ArrRealCore arr) throws BizApplicationException{ switch(ArrTxKndCoreEnum.getEnum(getArrTxKnd(arr))) { case ARR_TX_INTERNAL: _getStTxIntrnlXtnInfoDDso().insert(sqlIn); break; case ARR_TX_TEMPRARY: _getStTxTmpryXtnInfoDDso().insert(sqlIn); break; case ARR_TX_NORMAL: _getStTxXtnInfoDDso().insert(sqlIn); break; default : throw new BizApplicationException("AAPSTE0212"); } }
public void validate(String arrSrvcCd, ArrRealCore arrReal, CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { if (_getLnOvrduInfoProvider().isOverdue((ArrReal)arrReal, ArrCmnUtil.getRckngDt(_getCmnContext()))){ //Arrangement is in overdue. This service ({0}) could not be finished properly //계약이 연체상태입니다. 본서비스({0}) 실행이 불가 합니다 throw new BizApplicationException("AAPARE0295", new Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)}); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if (StringUtils.isEmpty(xtnAtrbtNm)){ return; } // 1. 보조명세 종류 조회 ArrSubInfoKndEnum subInfoKnd = arrRealImpl.getSubInfoKnd(); // 2. 계약에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(arrRealImpl); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("arrId", arrRealImpl.getArrId()); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // insert _insertSubInfo(subInfoKnd, subInfoCache); // save cache arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(), subInfoCache); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache)) { return; } // 변경전 이력 저장 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // update _updateSubInfo(subInfoKnd, subInfoCache); } }
public CnsltnSrchSvcGetSts clone(){ try{ CnsltnSrchSvcGetSts object= (CnsltnSrchSvcGetSts)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapAsmXtnInfo(AsmCoreImpl asm)throws BizApplicationException { return _getMapXtnInfoCache(asm); } /** * 심사확장정보 등록 * <pre> * </pre> * @param asmId : (required) 심사식별자 * @param asmXtnInfoEnumCd : (required) 심사확장정보Enum * @param xtnAtrbtCntnt : 심사확장속성값 * @return * @throws BizApplicationException */ // public void registerAsmXtnInfo(AsmCoreImpl asm, String asmXtnInfoEnumCd, String xtnAtrbtCntnt, boolean isEavOnly)throws BizApplicationException { // //1.입력 필수입력 체크 - 심사식별자,확장속성명 // if ( asm.getBasicInfo().getAsmId() == null || StringCoreUtils.isEmpty(asm.getBasicInfo().getAsmId())) // { // // {0}은/는 필수 입력 항목입니다. // throw new BizApplicationException("AAPCME0006", new String[]{"심사식별자"}); // } // // if (asmXtnInfoEnumCd == null || asmXtnInfoEnumCd.isEmpty()) // { // // {0}은/는 필수 입력 항목입니다. // throw new BizApplicationException("AAPCME0006", new String[]{"심사확장속성명"}); // } // // if(isEavOnly) { // // //2.입력값 셋팅 // AmAsmXtnInfoDIO amAsmXtnInfoDIO = new AmAsmXtnInfoDIO(); // // amAsmXtnInfoDIO.setInstCd(_getCmnContextCore().getInstCode()); // amAsmXtnInfoDIO.setAsmId(asm.getBasicInfo().getAsmId()); // modify by mh 2020.02.25(method파라미터 수정 )->심사객체 받음으로 객체에서 ID조회함 // amAsmXtnInfoDIO.setXtnAtrbtNm( asmXtnInfoEnumCd ); // amAsmXtnInfoDIO.setXtnAtrbtCntnt( xtnAtrbtCntnt ); // // _getCmnContextCore().setHeaderColumn(amAsmXtnInfoDIO); // Institution Code, National Code, GUID, Last Change Timestamp // // //3-0.추가 입력값 삭제 (Due방지) // _getAmAsmXtnInfoDDso().delete(amAsmXtnInfoDIO); // // //3.입력값 등록실행 // _getAmAsmXtnInfoDDso().insert(amAsmXtnInfoDIO); // // }else { // _getAsmXtnInfoCustom().saveSubInfo(asmXtnInfoEnumCd, xtnAtrbtCntnt, asm); // } // }
public IntrnlArrOpnSvcArrCndOut clone(){ try{ IntrnlArrOpnSvcArrCndOut object= (IntrnlArrOpnSvcArrCndOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrTx getCancelableLastTx(ArrReal arr) throws BizApplicationException { return (ArrTx) super.getCancelableLastTxCore((ArrRealCore)arr); }
public static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (ScrtyIntStsCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@scrtyIntStsCd"});//({0}) is invalid {1}. } return true; }
public ArrBsicQrySvcGetArrRelInfoOut clone(){ try{ ArrBsicQrySvcGetArrRelInfoOut object= (ArrBsicQrySvcGetArrRelInfoOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public SimpleDpstAcctInqrySvcIn clone(){ try{ SimpleDpstAcctInqrySvcIn object= (SimpleDpstAcctInqrySvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaSrvcBlckngInfoMgmtSvcSaveBizDscdInfoIn clone(){ try{ CaSrvcBlckngInfoMgmtSvcSaveBizDscdInfoIn object= (CaSrvcBlckngInfoMgmtSvcSaveBizDscdInfoIn)super.clone(); if ( this.bizDscdInfoList== null ) object.bizDscdInfoList = null; else{ java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaSrvcBlckngInfoMgmtSvcBizDscd> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaSrvcBlckngInfoMgmtSvcBizDscd>(bizDscdInfoList.size()); for( bankware.corebanking.configurationadmin.arrangement.service.dto.CaSrvcBlckngInfoMgmtSvcBizDscd item : bizDscdInfoList ){ clonedList.add( (bankware.corebanking.configurationadmin.arrangement.service.dto.CaSrvcBlckngInfoMgmtSvcBizDscd)item.clone()); } object.bizDscdInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrIntRtHst> getListConfirmedIntRtHistory(ArrIntRtCoreIn in) throws BizApplicationException { List<ArrIntRtHst> arrRtList = _getArrIntRtGenerator().getListConfirmedIntRtHistory(in); if (logger.isDebugEnabled()) { logger.debug("## <ZZ> ArrIntRtProviderImpl > getListArrIntRtForIntCalculationHst {}", arrRtList); } return arrRtList; }
public void saveMapSubInfo(Map<String, String> subInfoMap, CustRprsnImpl custRprsnImpl) throws BizApplicationException { // 0. null check if (subInfoMap == null || subInfoMap.isEmpty()) { return; } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustRprsnSIO subInfoIO = getSubInfoCache(custRprsnImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtCustRprsnSIO(); subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId()); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _getAtCustRprsnSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(custRprsnImpl, subInfoIO); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _getAtCustRprsnSDso().update(subInfoIO); } // 2. 캐시 저장 custRprsnImpl.setSubInfoCache(subInfoIO); }
public PrtnrStaffRgstSvcXtnIn clone(){ try{ PrtnrStaffRgstSvcXtnIn object= (PrtnrStaffRgstSvcXtnIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CmStdAtrVrtnMIO> selectList(String instCd) { return _getCmStdAtrVrtnM().selectList(instCd); }
public AsmBsicInfoIO getBasicInfo() throws BizApplicationException { return asmBsicInfoIO; }
public void saveListXtnInfo(List<ActorXtnAtrbtRgstIn> actorXtnAtrbtIOList) throws BizApplicationException { // 확장정보명세/보조명세 분류 Map<String, String> subInfoCrtnMap = _getActorSubInfoBiz().getMapSubInfoCrtn(actorXtnAtrbtIOList); // 2022.04.01 CTI / EAV 판단이 끝나 EAV용으로만 호출함 // super.saveListXtnInfo(actorXtnAtrbtIOList); super.saveListXtnInfoByEav(actorXtnAtrbtIOList); // 보조명세 생성 _getActorSubInfoBiz().saveMapSubInfo(subInfoCrtnMap, this); }
public DepoBnkArrMgmtSvcInqryIn clone(){ try{ DepoBnkArrMgmtSvcInqryIn object= (DepoBnkArrMgmtSvcInqryIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isArrServiceBlocked(String arrSrvcCd) throws BizApplicationException { //외부식별자에 의한 서비스 blocking _getArrRealCoreFundamentalAgent().isArrExternalIdServiceBlocked(this.getArrExtrnlIdNbrTpCd(), arrSrvcCd); return _getArrSrvcBlckngBiz().isArrServiceBlocked(arrSrvcCd, this); }
public List<ClTreeIO> getListClassification(ClTreeIO in) throws BizApplicationException { List<ClTreeIO> out = new ArrayList<ClTreeIO>(); CmClTreeDIO inDao = _getInputClassification(in); inDao.setActvStsCd(ActiveStatusEnum.ACTIVE.getValue()); List<CmClTreeDIO> daoOtList = _getCmClTreeDDso().selectList(inDao); for (CmClTreeDIO daoOut : daoOtList) { ClTreeIO sub = _getOutputClassificationTree(daoOut); out.add(sub); } return out; }
public void saveMapSubInfo(Map<String, String> assetThingSubInfoMap, AssetCore assetImpl, Integer assetThingSeqNbr, String txDt, Integer txSeqNbr) throws BizApplicationException { _getAssetThingSubInfoBiz().saveMapSubInfo(assetThingSubInfoMap, txDt, txSeqNbr, (AssetImpl) assetImpl, assetThingSeqNbr); }
public InterOfficeClearSvcIn clone(){ try{ InterOfficeClearSvcIn object= (InterOfficeClearSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getDocIssueId() throws BizApplicationException { if(docIssueIO != null) return docIssueIO.getDocIssueId(); return null; }
public CustLoginSvcGetHstIn clone(){ try{ CustLoginSvcGetHstIn object= (CustLoginSvcGetHstIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { Cust mainCust = _getCustMngr().getCust(super.getArr().getMainArrCustId()); if (mainCust == null){ return; } // 2017.11.16 기업고객인 경우 가입가능연령 검증을 수행하지 않는다. // 개인고객 또는 개인사업자만 검증처리 // v5.9.2 #22580 2021.11.25 개인 고객만 검증하도록 수정함 ActorTpEnum actorType = ActorTpEnum.getByValue(mainCust.getActorTypeCode()); if(!ActorTpEnum.INDIVIDUAL.equals(actorType) ){ return ; } if (StringUtils.isEmpty(getListCd())) { //Customer gender type is not exist To make decision whether This product ({0},{1}) purchase is allowed or Not //본 상품({0},{1})의 판매가능 여부 확인을 위한 고객의 성별이 존재 하지 않습니다 throw new BizApplicationException("AAPARE0405" , new Object[]{getArrangementCore().getPd().getPdCd(),getArrangementCore().getPd().getPdNm()}); } if (!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){ //This product purchase is not allowed to customer gender type ({0},{1}) //본 상품의 판매는 고객성별유형 ({0},{1})에게 허용되지 않습니다 throw new BizApplicationException("AAPARE0389" , new Object[]{getListCd(),_getCd().getCode("40009",getListCd())}); } }
public void removeTailoredDtoClassAttribute(CaTailoredDtoClassDtlIn in) throws BizApplicationException{ _checkInputForRemove(in); CaCmDtoClassAtrVldVrtnDIO deleteItem = _selectDtoClassAtrbtVldtnVrtn(in.getInstCd(),in.getInpDtoNm(),in.getAtrbtNm()); if(deleteItem == null){ // 2018.04.02 keewoong.hong error 검출을 위해 메시지를 다양화 함 String errMsg = in.getInpDtoNm().concat(".").concat(in.getAtrbtNm()); throw new BizApplicationException("AAPCME0115", new Object[] { errMsg }); } _getCmDtoClassAtrVldVrtnDDso().delete(deleteItem); }
public PrtnrStaffChngSvcIn clone(){ try{ PrtnrStaffChngSvcIn object= (PrtnrStaffChngSvcIn)super.clone(); if ( this.staffXtnInfoList== null ) object.staffXtnInfoList = null; else{ java.util.List<bankware.corebanking.partner.change.service.dto.PrtnrStaffChngSvcXtnIO> clonedList = new java.util.ArrayList<bankware.corebanking.partner.change.service.dto.PrtnrStaffChngSvcXtnIO>(staffXtnInfoList.size()); for( bankware.corebanking.partner.change.service.dto.PrtnrStaffChngSvcXtnIO item : staffXtnInfoList ){ clonedList.add( (bankware.corebanking.partner.change.service.dto.PrtnrStaffChngSvcXtnIO)item.clone()); } object.staffXtnInfoList = clonedList; } if ( this.staffCtcptIO==null ) object.staffCtcptIO = null; else object.staffCtcptIO = (bankware.corebanking.partner.change.service.dto.PrtnrStaffChngSvcCtcptIO)this.staffCtcptIO.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void modifyArrExternalIdNbr(String arrExtrnlIdNbrTpCd, String arrExtrnlIdNbr, String txDt, Integer txSeqNbr) throws BizApplicationException { _getArrExtrnlIdNbrBiz().modifyArrExternalIdNbr(arrExtrnlIdNbrTpCd, arrExtrnlIdNbr, txDt, txSeqNbr, this); }
static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty(value)) { for (IpctTxStsCdEnum item : IpctTxStsCdEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; } return false; }
public BigDecimal getRngVal() throws BizApplicationException { if ( super.getRngVal() == null ){ super.setRngVal(_getAgreementPeriod()); } if(logger.isDebugEnabled()){ logger.debug("<z.g> ArrCndAgreementPeriod getRngVal={}",super.getRngVal()); } return super.getRngVal(); }
public List<ArrReal> getListCustOwnArrRealInitOrAppliedOnPeriod (String custId,String pdCd,String inqryStartDt,String inqryEndDt) throws BizApplicationException { //return _getArrCustRelQryBizImpl().getListCustOwnArrRealInitOrAppliedOnPeriod(custId,pdCd,inqryStartDt,inqryEndDt); return _getArrCustRelQryBizImpl().getListArrRealByArrStsWithInitOrAppliedOnPeroid(custId,ArrCustRelEnum.MAIN_CONTRACTOR.getValue(), null, null, null,pdCd,inqryStartDt, inqryEndDt); }
public CustCtcptChngSvcGetTelNbrOut clone(){ try{ CustCtcptChngSvcGetTelNbrOut object= (CustCtcptChngSvcGetTelNbrOut)super.clone(); if ( this.ctcptXtnInfoList== null ) object.ctcptXtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.change.service.dto.CustCtcptChngSvcGetXtnAtrbtOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustCtcptChngSvcGetXtnAtrbtOut>(ctcptXtnInfoList.size()); for( bankware.corebanking.customer.change.service.dto.CustCtcptChngSvcGetXtnAtrbtOut item : ctcptXtnInfoList ){ clonedList.add( (bankware.corebanking.customer.change.service.dto.CustCtcptChngSvcGetXtnAtrbtOut)item.clone()); } object.ctcptXtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrRealCore> getCustOwnLoanArrCoreListActive (String custId) throws BizApplicationException { // 해당 메소드는 ({0}) 클래스의 인스턴스로 사용할 수 없습니다. 계약담당자에게 문의바랍니다. // This method cannot be used by instance of ({0}) class. throw new BizApplicationException("AAPARE0678",new Object[]{this.getClass().getName()}); }
public String getSubInfo(String xtnAtrbtNm, AprslRqstCore aprslRqstCore) throws BizApplicationException { return _getAprslRqstSubInfoBiz().getSubInfo(xtnAtrbtNm, (AprslRqstImpl)aprslRqstCore); }
public boolean isDiscarded() throws BizApplicationException { return DocIssueStsEnum.CLOSED.getValue().equals(getDocIssueCore().getDocIssueStsCd()); }
public CaRoleMgmtSvcGetRoleScreenRelationOut clone(){ try{ CaRoleMgmtSvcGetRoleScreenRelationOut object= (CaRoleMgmtSvcGetRoleScreenRelationOut)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleOut clone(){ try{ CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleOut object= (CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "AcquireCltrl": _doServiceAction(arrSrvcTpCd,arrCndActionRequiredValue); return; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public String getApplyEndDateTime() { return PdUtil.parseDateToYYYYMMDDHHMMSS(_getAplyEndDt()); }
public Integer getListDataCntForConsistency() throws BizApplicationException { return _getDstbCnstncyCmInstPMDso().selectListCntForConsistency(); }
public String getAcctgDscd(){ return acctgDscd; }
public void isValid() throws BizApplicationException { // 서비스 존재여부 검증 SvInstSrvcRstrctnDIO daoIn = new SvInstSrvcRstrctnDIO(); _getCmnContext().setColumn(daoIn); daoIn.setInstCd(_getCmnContext().getInstCode()); daoIn.setSrvcCd(_getCmnContext().getServiceCode()); daoIn.setSrvcRstrctnTrgtCntnt(_getCmnContext().getChannelDscd()); List<SvInstSrvcRstrctnDIO> daoOut = _getSvInstSrvcRstrctnDDso().selectListBySrvcCd( daoIn ); if(!daoOut.isEmpty()) { boolean isRstrct = false; String txDateTime = _getCmnContext().getTxDate().concat(_getCmnContext().getTxTime()); for(SvInstSrvcRstrctnDIO entry : daoOut){ if(txDateTime.compareTo(entry.getSrvcRstrctnStartDtm()) >= 0 && txDateTime.compareTo(entry.getSrvcRstrctnEndDtm() ) <= 0 ) { isRstrct = true; } } if (isRstrct) { throw new BizApplicationException( "AAPSVE0009", new String[] { _getCmnContext().getServiceCode() } ); } } } /** * <div class='en'> * @description * <pre> * Check whether the service is restricted by the product code. * If restricted service, call the error message (AAPSVE0014). * </pre> * @seealso {@link #isValid()} : Check by the service code * @seealso {@link #isValidByChnlCode()} : Check by the channel code * </div> * * <div class='ko'> * @description * <pre> * 상품 코드를 통해 해당 서비스의 제한 여부를 확인 한다. * 제한된 서비스의 경우 에러메시지(AAPSVE0014)를 호출한다. * </pre> * @seealso {@link #isValid()} : Check by the service code * @seealso {@link #isValidByChnlCode()}
public void saveMapSubInfo(Map<String, String> subInfoMap, ArrTxCore arrTx) throws BizApplicationException{ _getArrTxSubInfoBiz().saveSubInfo(subInfoMap, (ArrTxImpl)arrTx); }
public CaArrRelRuleMgmtSvcGetArrRelRuleDtl clone(){ try{ CaArrRelRuleMgmtSvcGetArrRelRuleDtl object= (CaArrRelRuleMgmtSvcGetArrRelRuleDtl)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(InsrncSubInfo subInfo, String txDt, Integer txSeqNbr, InsrncImpl insrncImpl) throws BizApplicationException{ // 0. null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {InsrncSubInfo.class.getSimpleName()}); } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 for(Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(entry.getValue() != null) { _getAtrbtChk().checkStandardAttribute(entry.getKey(), String.valueOf(entry.getValue())); } } // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsInsrncSIO subInfoCache = getSubInfoCache(insrncImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsInsrncSIO(); subInfoCache.setInsrncId(insrncImpl.getInsrncBasicCache().getInsrncId()); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(insrncImpl, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 2-1. insert _getAsInsrncSDso().insert(subInfoCache); // 3. 캐시 저장 insrncImpl.setInsrncSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfo, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(insrncImpl, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 2-2. update _getAsInsrncSDso().update(subInfoCache); } }
public String getSaleStartDateTime() { return PdUtil.parseDateToYYYYMMDDHHMMSS(bf.getSaleStartDt()); }
public List<ArrPsbkBkgMsg> buildMsgFormat(ArrIssmdaCore arrIssmda, String arrId, String psbkSrvcTpCd, String psbkMsgId, Map<String, Object> psbkMsgParmMap) throws BizApplicationException { /** * get arrangement */ Arr arr = _getArrMngr().getArr(arrId); /** * get configuration */ int sideCnt = 2; int row = 5; int col = 1; int length = 84; String align = ""; String custName = String.format("%"+col+"s%"+align+length+"s"," " , _getCustMngr().getCust(arr.getMainArrCustId()).getName()); ArrPsbkBkgMsg psbkLine = new ArrPsbkBkgMsg(); psbkLine.setPsbkBkgSideCnt(sideCnt); psbkLine.setPsbkBkgRowCnt(row); psbkLine.setPsbkBkgCntnt(custName); List<ArrPsbkBkgMsg> psbkLineList = new ArrayList<>(); psbkLineList.add(psbkLine); return psbkLineList; }
public String getServiceClassName() { return srvcClassNm; }
static boolean isValid(String value){ for (AmountKindEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
private BfCndTestSvcOut getCndVal(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); CndVal output = bfCnd.getCndVal(_convertProvideCndSvcListToProvideCndList(in.getProvideCnd())); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (output == null) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public String calculateDate(String baseDt, int dtNum, CaDtDscdEnum dtType) throws BizApplicationException { if (StringUtils.isEmpty(baseDt)) { throw new BizApplicationException("AAPCME0001", new Object[] {baseDt, ""}); } // Validate input date type _checkDate(baseDt); // Date Computation return _calculateDate(baseDt, dtNum, dtType, DateUtils.EMPTY_DATE_TYPE); }
public boolean isValidType(AtrbtTpEnum atrbtTp, Integer dcmlPntLen, String atrbtCntnt) throws BizApplicationException { if (logger.isDebugEnabled()) { logger.debug("atrbtTpCd={}", atrbtTp); logger.debug("atrbtCntnt={}", atrbtCntnt); } if (atrbtTp == null) { throw new BizApplicationException("AAPCME0037", new Object[] { atrbtTp }); } // Validate attribute type switch (atrbtTp) { case TEXT: // text return (StringCoreUtils.isEmpty(atrbtCntnt)) ? false : true; case TEXT_DATE: // date return DateCoreUtils.isValidDate(atrbtCntnt); case TEXT_NUMBER: // number return DataCheckCoreUtils.isNumeric(atrbtCntnt); case NUMBER: // number boolean chkNbr = DataCheckCoreUtils.isNumeric(atrbtCntnt); if(logger.isDebugEnabled()) { logger.debug(" ########### isValidType NUMBER chkNbr : {}", chkNbr); } if(chkNbr) { // 소수점자리수 검증 return _isValidDecimalPoint(dcmlPntLen, atrbtCntnt); } else { return chkNbr; } case TEXT_ALPHA_NUMERIC: // Alpha-Number return DataCheckCoreUtils.isAlphaNumeric(atrbtCntnt); case YES_OR_NO: // yes or no return (CCM01.YES.equals(atrbtCntnt) || CCM01.NO.equals(atrbtCntnt)) ? true : false; case PASSWORD: // Password return DataCheckCoreUtils.isValidPassword(atrbtCntnt); case TIMESTAMP: // timestamp return true; case JSON: // json return DataCheckCoreUtils.isJson(atrbtCntnt); case EMPTY: return true; default: throw new BizApplicationException("AAPCME0037", new Object[] { atrbtTp }); } }
public void register(List<CaNoticeMsgDocRMgmtIO> docNoticeMsgRIOList) throws BizApplicationException { if(docNoticeMsgRIOList == null || docNoticeMsgRIOList.isEmpty()){ return; } for(CaNoticeMsgDocRMgmtIO docNoticeMsgRIOItem : docNoticeMsgRIOList){ //check required inputs if(StringUtils.isEmpty(docNoticeMsgRIOItem.getInstCd())){ throw new BizApplicationException("AAPCME0006", new String[] {"@instCd"}); }else if(StringUtils.isEmpty(docNoticeMsgRIOItem.getNoticeMsgCd())){ throw new BizApplicationException("AAPCME0006", new String[] {"@noticeMsgCd"}); } CaAtDocNoticeMsgRIO rgstrnDocNoticeMsgRMgmtIO = _getAtDocNoticeMsgRDso().select(docNoticeMsgRIOItem.getInstCd(), docNoticeMsgRIOItem.getNoticeMsgCd()); if(rgstrnDocNoticeMsgRMgmtIO == null){ if(!_isEmptyDocId(docNoticeMsgRIOItem.getDocId())){ CaAtDocNoticeMsgRIO atDocNoticeMsgRIO = new CaAtDocNoticeMsgRIO(); _getCaCmnContext().setHeaderColumn(atDocNoticeMsgRIO); atDocNoticeMsgRIO.setInstCd(docNoticeMsgRIOItem.getInstCd()); atDocNoticeMsgRIO.setNoticeMsgCd(docNoticeMsgRIOItem.getNoticeMsgCd()); atDocNoticeMsgRIO.setDocId(docNoticeMsgRIOItem.getDocId()); _getAtDocNoticeMsgRDso().insert(atDocNoticeMsgRIO); } }else{ //delete registered doc-notice message relation _getCaCmnContext().setHeaderColumn(rgstrnDocNoticeMsgRMgmtIO); rgstrnDocNoticeMsgRMgmtIO.setInstCd(docNoticeMsgRIOItem.getInstCd()); _getAtDocNoticeMsgRDso().delete(rgstrnDocNoticeMsgRMgmtIO); //insert new doc-notice message relation rgstrnDocNoticeMsgRMgmtIO.setDocId(StringUtils.isEmpty(docNoticeMsgRIOItem.getDocId()) ? CCM02.NO_OPINION : docNoticeMsgRIOItem.getDocId()); _getAtDocNoticeMsgRDso().insert(rgstrnDocNoticeMsgRMgmtIO); // clear cache _getCaDataCacheManager().clearInstanceCache(DataCacheCoreConfig.DOC_NOTICE_MSG_REL_CACHE, docNoticeMsgRIOItem.getInstCd().concat(docNoticeMsgRIOItem.getNoticeMsgCd())); } } }
public ArrPlanIO getArrPlan(Integer plnSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { if (plnSeqNbr == null) { throw new BizApplicationException("AAPCME0006", new Object[]{"@plnSeqNbr"}); } ArArrPlnMIO arArrPlnMIO; if(arrRealImpl.isArrKindTxal()){ arArrPlnMIO = _getArArrTmpryPlnMDso().select( _getCmnContext().getInstCode(), arrRealImpl.getArrId(), plnSeqNbr); }else{ arArrPlnMIO = _getArArrPlnMDso().select( _getCmnContext().getInstCode(), arrRealImpl.getArrId(), plnSeqNbr); } if (arArrPlnMIO == null) { throw new BizApplicationException("XXXXX", new Object[]{"@plnSeqNbr"}); } return _buildArrPlanIO(arArrPlnMIO); }
public void registerArrPlan(ArrPlanIO arrPlan, String txDt, Integer txSeqNbr, ArrRealCoreImpl arrRealImpl) throws BizApplicationException { // 계약 계획 주제영역 미사용 시 skip if (!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.PLAN)) { return; } _checkInput(arrPlan,txDt,txSeqNbr, arrRealImpl); // Check Transaction Exist // 거래생성여부 검증 _getArrCmnUtil().validateArrTxExist(arrRealImpl, txDt, txSeqNbr); List<ArArrPlnMIO> arArrPlnMIOList = _selectActivePlan(arrPlan.getArrSrvcCd(),arrRealImpl); if (arArrPlnMIOList != null && !arArrPlnMIOList.isEmpty()) { //The ({0})service is already registered on arrangement //동일한 서비스({0})의 계약계획이 이미 등록 되어 있습니다 throw new BizApplicationException("AAPARE0289", new Object[]{_getCdCore().getCode(ArrSrvcCoreEnum.cdNbr, arrPlan.getArrSrvcCd())}); } //Register Arrangement Plan ArArrPlnMIO arArrPlnMIO = new ArArrPlnMIO(); arArrPlnMIO.setInstCd(arrRealImpl.getInstCd()); arArrPlnMIO.setArrId(arrRealImpl.getArrId()); //거래계약분리처리 Integer seqNbr; if(ArrKndCoreEnum.TEMPORARY.getValue().equals(arrRealImpl.getArrKindCd())){ seqNbr = _getArArrTmpryPlnMDso().selectMax(arArrPlnMIO); }else{ seqNbr = _getArArrPlnMDso().selectMax(arArrPlnMIO); } seqNbr = seqNbr+CCM01.ONE; arArrPlnMIO.setPlnSeqNbr(seqNbr); arArrPlnMIO.setRltdCndCd(arrPlan.getRltdCndCd()); arArrPlnMIO.setEfctvEndDt(arrPlan.getEfctvEndDt()); arArrPlnMIO.setEfctvStartDt(arrPlan.getEfctvStartDt()); arArrPlnMIO.setNxtExctnPlnDayTpCd(arrPlan.getNxtExctnPlnDayTpCd()); arArrPlnMIO.setNxtExctnPlnDay(arrPlan.getNxtExctnPlnDay()); arArrPlnMIO.setNxtExctnPlnDt(arrPlan.getNxtExctnPlnDt()); arArrPlnMIO.setNxtExctnPlnHm(arrPlan.getNxtExctnPlnHm()); arArrPlnMIO.setArrSrvcTpCd(arrPlan.getArrSrvcCd()); arArrPlnMIO.setArrPlnStsCd(ArrPlnStsCoreEnum.ACTIVE.getValue()); _getCmnContextCore().setHeaderColumn(arArrPlnMIO); // Institution Code, National Code, GUID, Last Change Timestamp if(ArrKndCoreEnum.TEMPORARY.getValue().equals(arrRealImpl.getArrKindCd())){ _getArArrTmpryPlnMDso().insert(arArrPlnMIO); }else{ _getArArrPlnMDso().insert(arArrPlnMIO); } _makePlanStatusHistory(arArrPlnMIO, txDt, txSeqNbr, ArrPlnStsChngRsnCoreEnum.REGISTRATION.getValue()); }
public List<TaxRtIO> getListTaxRate(String isoNatCd, String taxRtCd, String aplyStartDt) throws BizApplicationException { return _getListTaxRate(isoNatCd, taxRtCd, "", aplyStartDt, ""); }
public void register(DstbCtvdMIO dstbCtvdMIO, DstbCtvdRsltErrRgstIn dstbCtvdRsltErrRgstIn) throws BizApplicationException{ // 1. convert insert data CaDstbCtvdRsltErrHIO caDstbCtvdRsltErrHIO = _setCaDstbCtvdRsltErrH(dstbCtvdMIO, dstbCtvdRsltErrRgstIn); // 2. check pk validation _PKValidateCaDstbCtvdRsltErrH(caDstbCtvdRsltErrHIO); // 3. data insert _getCaDstbCtvdRsltErrHDso().insert(caDstbCtvdRsltErrHIO); }
public void doServiceAction(String arrSrvcTpCd, ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if(logger.isDebugEnabled()){ logger.debug("doServiceAction start"); } ArrReal arrReal = (ArrReal) this.getArrangementCore(); if(!arrReal.isReal()) return; _doOpenAction(arrSrvcTpCd, arrCndActionRequiredValue, arrReal); // switch(arrSrvcTpCd) { // case "ArrangementConditionTest": // case "OpenDeposit": // break; // default: // // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 // throw new BizApplicationException("AAPARE0288", new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); // } }
static boolean isValid(String value) { for (CaExternalTableStatusCodeCoreEnum item : CaExternalTableStatusCodeCoreEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; }
public CaPdInfoInqrySvcTblOut clone(){ try{ CaPdInfoInqrySvcTblOut object= (CaPdInfoInqrySvcTblOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int delete(CaAmCrdtrtgGradeMIO AmCrdtrtgGradeMIO){ return _getAmCrdtrtgGradeM().delete(AmCrdtrtgGradeMIO); }
public DocCore getDocCore() throws BizApplicationException { return this.docCore; }
public AcctCltrlMgmtSvcSaveIn clone(){ try{ AcctCltrlMgmtSvcSaveIn object= (AcctCltrlMgmtSvcSaveIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getArrStsChngRsnCd(){ return arrStsChngRsnCd; }
public void saveSubInfo(Map<String, String> subInfoMap, ArrTxImpl arrTx) { // 1. 입력으로 받은 Map이 비여 있거나 null일 때 , null 체크하는 이유는 CTI, EAV분리하는 메소드에서 없으면 null return하고 있음. if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 속성값 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 거래관련 보조명세 조회(캐시로부터) IValueObject oldCache = getSubInfoCache(arrTx); // 4. DB 반영 if(oldCache == null) { // 4.1.1 DBIO VO 인스턴스 생성 oldCache = _newSubInfoDBIO(arrTx); // 4.1.2 primary key 조립 _setKey(oldCache,arrTx); // 4.1.3 보조정보Map-> DBIO VO값 채우기 DtoUtils.setSubInfoIO(subInfoMap, oldCache); // 4.1.4 캐싱된 보조명세 정보가 없으면 최초 저장, 즉 insert _insertSubInfo(arrTx, oldCache); // 4.1.5 arrTx.setArrTxSubInfoCache(oldCache); }else { // 4.2.1. 캐싱된 보조명세 정보가 있으면 변경 저장, 즉 update, update전 기존정보랑 동일 시 리턴 if (!DtoUtils.isValChanged(subInfoMap, oldCache)) { return; } // 4.2.4 update - 새로변경되어야 할 속성을 DBIO VO 반영 DtoUtils.setSubInfoIO(subInfoMap, oldCache); // 4.2.5 update - update 수행 _updateSubInfo(arrTx, oldCache); } // // 5. 캐시 처리 (DBIO VO->Interface VO) & 캐싱 // _saveSubInfoCache(subInfoDBIO,arrTx); }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String bizDscd, String pdTpCd, String pdTmpltCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, int pgNbr, int pgCnt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, bizDscd, pdTpCd, pdTmpltCd, null, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, pgNbr, pgCnt, false); }
public CustDocRelChngSvcSrchIn clone(){ try{ CustDocRelChngSvcSrchIn object= (CustDocRelChngSvcSrchIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CndVal getComplexCndValue(List<CmpsCnd> cmpsCndList) throws BizApplicationException { if (!isComplexCnd()) { throw new BizApplicationException("AAPPDE0003", null); } CndVal cndVal = null; // Set the composing condition value to input DTO // 입력된 구성조건값을 입력DTO에 set함 PdPdCndUnitComplexSearchIn inDaoS010 = _setPdPdCndUnitComplexSearchIn(); inDaoS010.setTierNbr(getComplexCndStructureInfo(cmpsCndList).getTierNbr()); if (isListCnd()) { // 복합목록조건값 조회 cndVal = _getComplexListCndValue(inDaoS010); } else if (isRngCnd()) { // 복합범위조건값 조회 cndVal = _getComplexRangeCndValue(inDaoS010); } /* * else if (isIntCnd()) { // 복합금리조건값 조회 cndVal = * _getComplexInterestCndValue(inDaoS010); * * } else if (isFeeCnd()) { // 복합수수료조건값 조회 cndVal = * _getComplexFeeCndValue(inDaoS010); } */ // Return output return cndVal; }
public static boolean isValid(String value){ for (AprvlRsltEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public boolean isValid(String type) { return ( "O".equalsIgnoreCase(type) || "B".equalsIgnoreCase(type) ) ; //added by Roh(change to simplify) }
public List<ArrReal> getListCustOwnArrRealActiveOnBaseDt(String custId,String baseDt) throws BizApplicationException { return _getArrXtnUtil().convertArrRealList(super.getCustOwnArrRealCoreListActiveOnBaseDt(custId, baseDt)); }
public List<XtnCdIO> getListCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { List<CaCaDstbSrvrMIO> svDstbSrvrMList = _getSvDstbSrvrMDso().selectSrvrCdList(); List<XtnCdIO> xtnCdIOs = new ArrayList<XtnCdIO>(); if( svDstbSrvrMList == null || svDstbSrvrMList.isEmpty() ) return xtnCdIOs; for(CaCaDstbSrvrMIO out : svDstbSrvrMList) { XtnCdIO xtnCdIO = new XtnCdIO(); xtnCdIO.setCd(out.getDstbSrvrId()); xtnCdIO.setCdNm(out.getDstbSrvrId() + " " + out.getDstbSrvrNm()); xtnCdIOs.add(xtnCdIO); } return xtnCdIOs; }
public ArrXtnSvcGetChngListOut clone(){ try{ ArrXtnSvcGetChngListOut object= (ArrXtnSvcGetChngListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcGetChngOut> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcGetChngOut>(tblNm.size()); for( bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcGetChngOut item : tblNm ){ clonedList.add( (bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcGetChngOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaTaxRtCdMgmtSvcGetTaxRateCodeListOut clone(){ try{ CaTaxRtCdMgmtSvcGetTaxRateCodeListOut object= (CaTaxRtCdMgmtSvcGetTaxRateCodeListOut)super.clone(); if ( this.taxRtList== null ) object.taxRtList = null; else{ java.util.List<bankware.corebanking.configurationadmin.code.service.dto.CaTaxRtCdMgmtSvcGetTaxRateCodeListSubOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.code.service.dto.CaTaxRtCdMgmtSvcGetTaxRateCodeListSubOut>(taxRtList.size()); for( bankware.corebanking.configurationadmin.code.service.dto.CaTaxRtCdMgmtSvcGetTaxRateCodeListSubOut item : taxRtList ){ clonedList.add( (bankware.corebanking.configurationadmin.code.service.dto.CaTaxRtCdMgmtSvcGetTaxRateCodeListSubOut)item.clone()); } object.taxRtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean deleteTransferLanguage(String trnsfrKnd, String lngCd, String trnsfrOriginKeyVal) throws BizApplicationException { if (_getCmMltLngTrnsltnDDso().getLanguageTable(trnsfrKnd, lngCd, trnsfrOriginKeyVal) == null) { return false; } CaCmMltLngTrnsltnDIO cmMltLngTrnsltnDIO = new CaCmMltLngTrnsltnDIO(); _getCmnContextCore().setHeaderColumn(cmMltLngTrnsltnDIO); cmMltLngTrnsltnDIO.setTrnsfrKndCd(trnsfrKnd); cmMltLngTrnsltnDIO.setTrnsfrOriginKeyVal(trnsfrOriginKeyVal); cmMltLngTrnsltnDIO.setLngCd(lngCd); cmMltLngTrnsltnDIO.setLastChngId(_getCmnContextCore().getStaffId()); cmMltLngTrnsltnDIO.setActvStsCd(CaActiveStatusEnum.INACTIVITY.getValue()); cmMltLngTrnsltnDIO.setSiteLbrtryDscd(_getInstParmProvider().getInstParm(CaInstParamEnum.SITE_LABORATORY_DISTINCTION_CODE.getValue() )); _getCmMltLngTrnsltnDDso().updateActvStsCd(cmMltLngTrnsltnDIO); return true; }
public String getSubInfo(PrtnrCore prtnrCore, String xtnAtrbtNm) throws BizApplicationException { return _getPrtnrSubInfoBiz().getSubInfo(xtnAtrbtNm, (PrtnrImpl) prtnrCore); }
static boolean isValid(String value){ for (ArrRelKndCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public void doServiceAction(String arrSrvcTpCd, ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { ArrSrvcEnum arrSrvcType = ArrSrvcEnum.getEnum(arrSrvcTpCd); if (arrSrvcType == null) { // It is an error of Arrangement Service Type Code // 계약서비스유형코드 오류입니다. throw new BizApplicationException("AAPARE0579"); } switch (arrSrvcType) { case GAIN_MISCELLANEOUS_REVENUE: _doServiceAction(arrSrvcTpCd, arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
static Object getBean(String arg0) throws NestedRuntimeException { return LApplicationContext.getCurrentApplicationContext().getBean(arg0); }
public CaArrArrRelPdRuleMgmtSvcGetArrArrRelPdRuleListOut getListArrArrRelPdRule(CaArrArrRelPdRuleMgmtSvcArrArrRelPdRuleIn in) throws BizApplicationException { CaArrArrRelPdRuleMgmtSvcGetArrArrRelPdRuleListOut out = new CaArrArrRelPdRuleMgmtSvcGetArrArrRelPdRuleListOut(); List<CaArrArrRelPdRuleMgmtSvcGetArrArrRelPdRuleDtl> arrArrRelPdRuleDtl = new ArrayList<CaArrArrRelPdRuleMgmtSvcGetArrArrRelPdRuleDtl>(); CaArrArrRelPdRuleIO arrArrRelPdRuleListSrchKeyIn = _setArrArrRelPdRuleListSearchKeyIn(in); List<CaArrArrRelPdRuleIO> ruleList = _getArrArrRelPdRuleMgmt().getListArrArrRelPdRule(arrArrRelPdRuleListSrchKeyIn); for (CaArrArrRelPdRuleIO rule : ruleList) { arrArrRelPdRuleDtl.add(_setArrArrRelPdRuleMgmtSvcArrArrRelPdRuleDtl(rule)); } out.setTblList(arrArrRelPdRuleDtl); return out; }
public void terminate(InsrncStsChngIn in) throws BizApplicationException { super.terminate(in); }
public static boolean isValid(String value) { for (BaseIntRtAplyTmCoreEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public void saveSubInfo(Map<String, String> subInfoMap, ArrTxImpl arrTx) { // 1. 입력으로 받은 Map이 비여 있거나 null일 때 , null 체크하는 이유는 CTI, EAV분리하는 메소드에서 없으면 null return하고 있음. if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 속성값 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 거래관련 보조명세 조회(캐시로부터) IValueObject oldCache = getSubInfoCache(arrTx); // 4. DB 반영 if(oldCache == null) { // 4.1.1 DBIO VO 인스턴스 생성 oldCache = _newSubInfoDBIO(arrTx); // 4.1.2 primary key 조립 _setKey(oldCache,arrTx); // 4.1.3 보조정보Map-> DBIO VO값 채우기 DtoUtils.setSubInfoIO(subInfoMap, oldCache); // 4.1.4 캐싱된 보조명세 정보가 없으면 최초 저장, 즉 insert _insertSubInfo(arrTx, oldCache); // 4.1.5 arrTx.setArrTxSubInfoCache(oldCache); }else { // 4.2.1. 캐싱된 보조명세 정보가 있으면 변경 저장, 즉 update, update전 기존정보랑 동일 시 리턴 if (!DtoUtils.isValChanged(subInfoMap, oldCache)) { return; } // 4.2.4 update - 새로변경되어야 할 속성을 DBIO VO 반영 DtoUtils.setSubInfoIO(subInfoMap, oldCache); // 4.2.5 update - update 수행 _updateSubInfo(arrTx, oldCache); } // // 5. 캐시 처리 (DBIO VO->Interface VO) & 캐싱 // _saveSubInfoCache(subInfoDBIO,arrTx); }
public void saveMapSubInfo(Map<String, String> subInfoMap, StStlmntCalcnSIO stStlmntCalcnSIOIn) { logger.debug("##<ST-StlmntCalcnSubInfoBiz> saveMapSubInfo"); if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1.create a new instance of I/F VO //IValueObject subInfoIfVo = new StlmntCalcnSubInfo(); // 2.create a new instance of DBIO VO StStlmntCalcnSIO stStlmntCalcnSIO = new StStlmntCalcnSIO(); // 3.set primary key _setKey(stStlmntCalcnSIO, stStlmntCalcnSIOIn); // 4.convert map to DBIO VO DtoUtils.setSubInfoIO(subInfoMap, stStlmntCalcnSIO); // 5.insert subsidiary detail _insertSubInfo(stStlmntCalcnSIO); }
public int delete(String instCd, String tblNm, String xtnAtrbtNm) { super.clearCache(DataCacheCoreConfig.COMMON_TABLE_XTN_ATTRIBUTE_SELECT_CACHE); return _getCmTblXtnAtrD().delete(instCd, tblNm, xtnAtrbtNm); }
public String getSubInfo(PrtnrCore prtnrCore, String xtnAtrbtNm) throws BizApplicationException { return _getPrtnrSubInfoBiz().getSubInfo(xtnAtrbtNm, (PrtnrImpl) prtnrCore); }
public List<XtnCdIO> getListCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { List<XtnCdIO> xtnCdIOs = new ArrayList<XtnCdIO>(); String lngCd = supplInfoVal == null ? null : String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue())); String instCd = supplInfoVal == null ? null : String.valueOf(supplInfoVal.get(InstParamEnum.INSTITUTION_CODE.getValue())); if (StringCoreUtils.isEmpty(cdNbr)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@cdNbr" }); } if (StringCoreUtils.isEmpty(lngCd)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@lngCd" }); } /* * 기관별로 통화코드를 조회 한다. * (AS-IS)통화코드 조회시 기관별통화코드가 존재 하면 해당 list return * (AS-IS)존재 하지 않으면 STDA return * (TO-BE)#20254 통화코드는 기관데이터만 참조(표준기관의 통화코드 참조하지 않는다.) 2020.11.16 */ List<CmCrncyCdMIO> cmCrncyCdIOs = _getCmCrncyCdDso().selectList(instCd); // //(TO-BE)#20254 통화코드는 기관데이터만 참조(표준기관의 통화코드 참조하지 않는다.) 2020.11.16 // if(cmCrncyCdIOs == null || cmCrncyCdIOs.isEmpty()) { // cmCrncyCdIOs = _getCmCrncyCdDso().selectList(_getCmnContext().getStandardInstCode()); // } for (int i = 0; i < cmCrncyCdIOs.size(); i++) { XtnCdIO xtnCdIO = new XtnCdIO(); xtnCdIO.setCd(cmCrncyCdIOs.get(i).getCrncyCd()); xtnCdIO.setLngCd(lngCd); if(StringCoreUtils.isEmpty(lngCd)) { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CdNbrCoreEnum.CURRENCY_CD.getValue().concat(cmCrncyCdIOs.get(i).getCrncyCd()))); } else { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CdNbrCoreEnum.CURRENCY_CD.getValue().concat(cmCrncyCdIOs.get(i).getCrncyCd()), lngCd)); } xtnCdIOs.add(xtnCdIO); } return xtnCdIOs; }
public ScrtyIntMngrSvcSaveOut openScrtyInt(ScrtyIntMngrSvcSaveIn in)throws BizApplicationException { /** * service validation */ _serviceValidate(in); if(_isScrtyIntOpnTx(in.getScrtyIntId())){ return _openScrtyInt(in); } else{ return _modifyScrtyInt(in); } } /** * <div class='en'> * @description * <pre> * This service supplies to inquire information of security interest. * </pre> * @flow * <pre> * 1. get security interest by security interest identification * 2. get basic information of security interest * 3. assemble output * 3.1 assemble basic information of security interest. * 3.2 assemble extended attributes of security interest. * 3.3 assemble information of relation between collateral and security interest. * </pre> * <div class='ko'> * @description * <pre> * 이 서비스는 담보물권의 정보를 조회하는 기능을 제공한다. * </pre> * @flow * <pre> * 1. 설정식별자에 의한 설정정보 조회 * 2. 설정의 기본정보 조회 * 3. 출력값 조립 * 3.1. 설정기본정보 조립 * 3.2. 설정의 확장속성 조립 * 3.3. 설정,담보 관계정보 조립 * </pre> * </div> * @param scrtyIntMngrSvcGetIn (required) : inquire security interest service input * @return ScrtyIntMngrSvcGetOut : inquire security interest service output * @since 3.0.0 * @example * <pre> * -Input JSON * ScrtyIntMngrSvcGetIn:{scrtyIntId: "000000000002193"} * -Output JSON * "ScrtyIntMngrSvcGetOut" : {"scrtyIntId" : "000000000002193","assetScrtyIntRelStsCd" : null,"assetKndCd" : null, * "assetId" : "400000000002716","scrtyIntTpCd" : "02","crdtrDscd" : "1","crdtrNm" : "뱅크웨어","scrtyIntDt" : "20171110", * "scrtyIntPrity" : 1,"scrtyIntRt" : 100.00,"crncyCd" : "KRW","scrtyIntAmt" : 10000.00,"scrtyIntStsCd" : "2",\ * "debtorCustId" : "00000017537C","debtorNm" : "조고객","thirdPartyCltrlYn" : "N","debtorOwnrRelCd" : "01", * "cltrlOprtngDscd" : null,"securedDebtCnfrmtnDscd" : null,"stlmntBaseDt" : null,"txDeptId" : "10000", * "txDeptNm" : "중앙지점","rgstrnAplctnNbr" : null,"arrId" : null}
public WorkflowRuleMgmtSvcIO clone(){ try{ WorkflowRuleMgmtSvcIO object= (WorkflowRuleMgmtSvcIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getArrExtrnlIdNbr(){ return arrExtrnlIdNbr; }
protected void saveUniqueBusinessBean(String arrIssmdaTpCd, String arrIssmdaInhrncId, ArrIssmdaCoreImpl arrIssmdaCoreImpl) throws BizApplicationException { ApplicationContextCoreUtils.saveUniqueBusinessBean(_getCmnContextCore().getInstCode().concat(arrIssmdaTpCd).concat(arrIssmdaInhrncId), arrIssmdaCoreImpl); }
public java.lang.String getTxStaffId(){ return txStaffId; }
public CustRprsnChngSvcDeleteLoinInfoIn clone(){ try{ CustRprsnChngSvcDeleteLoinInfoIn object= (CustRprsnChngSvcDeleteLoinInfoIn)super.clone(); if ( this.loinIdNbrList== null ) object.loinIdNbrList = null; else{ java.util.List<bankware.corebanking.customer.security.service.dto.CustRprsnChngSvcDeleteLoinInfoInSub> clonedList = new java.util.ArrayList<bankware.corebanking.customer.security.service.dto.CustRprsnChngSvcDeleteLoinInfoInSub>(loinIdNbrList.size()); for( bankware.corebanking.customer.security.service.dto.CustRprsnChngSvcDeleteLoinInfoInSub item : loinIdNbrList ){ clonedList.add( (bankware.corebanking.customer.security.service.dto.CustRprsnChngSvcDeleteLoinInfoInSub)item.clone()); } object.loinIdNbrList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int getBalanceVerificationTotalCount(BalVrfctnSrchIn in) throws BizApplicationException { if (BalVrfctnRsltQryDscdEnum.ALL.getValue().equals(in.getBalVrfctnInqryDscd())){ //return _getAcBalVrfctnSmtnDDso().selectBalVrfctnAllTotalCount(_setAcBalVrfctnSmtnDIO(in)); return _getAcBalVrfctnSmtnDDso().selectListBalVrfctnRsltTotalCnt(_setAcBalVrfctnSmtnDIO(in)); } else{ return _getAcBalVrfctnSmtnDDso().selectBalVrfctnWithDifferenceTotalCount(_setAcBalVrfctnSmtnDIO(in)); } }
public CaArrIssmdaTmpltMgmtSvcGetTmpltInfoOut clone(){ try{ CaArrIssmdaTmpltMgmtSvcGetTmpltInfoOut object= (CaArrIssmdaTmpltMgmtSvcGetTmpltInfoOut)super.clone(); if ( this.prflAtrbtList== null ) object.prflAtrbtList = null; else{ java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaPrflAtrbtInfo> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaPrflAtrbtInfo>(prflAtrbtList.size()); for( bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaPrflAtrbtInfo item : prflAtrbtList ){ clonedList.add( (bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaPrflAtrbtInfo)item.clone()); } object.prflAtrbtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(CustTxImpl custTxImpl) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 AtCustTxSIO subInfo = getSubInfoCache(custTxImpl); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조명세 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public List<CaTblXtnAtrbtOut> getTableExtendAttribute(String instCd, String tblNm) throws BizApplicationException { return this.getTableExtendAttribute(instCd, tblNm, CaXtnAtrbtVrtnCmpsEnum.NA, null); }
public static boolean isValid(String value){ for (ArrInternalKndEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public Long selectIncompletionNumberingCnt(String instCd, String acctgPrcsDt) { return _getAcAcctgLDfrdDso().selectIncompletionNumberingCnt(instCd, acctgPrcsDt); }
public void saveMapSubInfo(Map<String, String> assetTxSubInfoMap, AssetTxCore assetTx) throws BizApplicationException { _getAssetTxSubInfoBiz().saveMapSubInfo(assetTxSubInfoMap, (AssetTxImpl) assetTx); }
public List<TblXtnAtrbtOut> getTableExtendAttribute(String instCd, String tblNm, XtnAtrbtVrtnCmpsEnum xtnAtrbtVrtnCmpsCd, Map<String, String> mapCnd) throws BizApplicationException { // Check input if (StringCoreUtils.isEmpty(instCd)) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@instCd" }); } if (StringCoreUtils.isEmpty(tblNm)) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@tblNm" }); } if (xtnAtrbtVrtnCmpsCd == null || StringCoreUtils.isEmpty(xtnAtrbtVrtnCmpsCd.getValue())) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } if (!XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd) && !XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd) && (mapCnd == null || mapCnd.isEmpty())) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } List<TblXtnAtrbtOut> out = new ArrayList<TblXtnAtrbtOut>(); List<String> itmList = new ArrayList<String>(); // Set condition if (XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)) { // skip; } else if (XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)) { itmList.add(" "); } else if (XtnAtrbtVrtnCmpsEnum.PD_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb1 = new StringBuilder(); sb1.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb1.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb1.append("\"pdTmpltCd\":").append("\"").append(mapCnd.get("pdTmpltCd")).append("\","); sb1.append("\"pdCd\":").append("\"").append(mapCnd.get("pdCd")).append("\"}"); itmList.add(sb1.toString()); StringBuilder sb2 = new StringBuilder(); sb2.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb2.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb2.append("\"pdTmpltCd\":").append("\"").append(mapCnd.get("pdTmpltCd")).append("\","); sb2.append("\"pdCd\":\"\"}"); itmList.add(sb2.toString()); StringBuilder sb3 = new StringBuilder(); sb3.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb3.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb3.append("\"pdTmpltCd\":\"\",").append("\"pdCd\":\"\"}"); itmList.add(sb3.toString()); StringBuilder sb4 = new StringBuilder(); sb4.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb4.append("\"pdTpCd\":\"\",").append("\"pdTmpltCd\":\"\",").append("\"pdCd\":\"\"}"); itmList.add(sb4.toString()); } else if (XtnAtrbtVrtnCmpsEnum.ACTOR_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"actorTpCd\":").append("\"").append(mapCnd.get("actorTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.ARR_ARR_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrArrRelCd\":").append("\"").append(mapCnd.get("arrArrRelCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.ARR_CUST_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrCustRelCd\":").append("\"").append(mapCnd.get("arrCustRelCd")).append("\"}"); itmList.add(sb.toString()); /* 2016.03.29 hongun.song 추가*/ } else if(XtnAtrbtVrtnCmpsEnum.ARR_ACTVTY_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrActvtyTpCd\":").append("\"").append(mapCnd.get("arrActvtyTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.ARR_SRVC_BLCKNG_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrSrvcBlckngCd\":").append("\"").append(mapCnd.get("arrSrvcBlckngCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.ARR_ISSMDA_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrIssmdaTpCd\":").append("\"").append(mapCnd.get("arrIssmdaTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.DUE_DLGNC_DSCD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"dueDlgncDscd\":").append("\"").append(mapCnd.get("dueDlgncDscd")).append("\"}"); itmList.add(sb.toString()); if(mapCnd.get("actorTpCd") != null){ StringBuilder sbAct = new StringBuilder(); sbAct.append("{").append("\"actorTpCd\":").append("\"").append(mapCnd.get("actorTpCd")).append("\"}"); itmList.add(sbAct.toString()); } } else if(XtnAtrbtVrtnCmpsEnum.ARR_DOC_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrDocRelCd\":").append("\"").append(mapCnd.get("arrDocRelCd")).append("\"}"); itmList.add(sb.toString()); } else if(XtnAtrbtVrtnCmpsEnum.PRTNR_DTL_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"prtnrDtlTpCd\":").append("\"").append(mapCnd.get("prtnrDtlTpCd")).append("\"}"); itmList.add(sb.toString()); }else { // Input field is incorrect. Information for Checking : {0} throw new BizApplicationException("AAPSVE0001", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn inDao = new CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn(); inDao.setStdInstCd(_getCmnContextCore().getStandardInstCode()); inDao.setInstCd(instCd); inDao.setTblNm(tblNm); inDao.setJsonKeyValCntnt(itmList); if (XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)) { inDao.setXtnAtrbtVrtnCmpsCd(""); } else if (XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)) { inDao.setXtnAtrbtVrtnCmpsCd(XtnAtrbtVrtnCmpsEnum.NA.getValue()); } else { inDao.setXtnAtrbtVrtnCmpsCd(xtnAtrbtVrtnCmpsCd.getValue()); } /* // [AS-IS] 1. 개별+표준 기관 데이터 조회 // 2. 조회결과 검증처리(표준기관인 경우 표준기관의 확장속이 정의 여부 확인 // 3. (개별+표준 기관 데이터 미 존재시 )표준기관의 데이터 조회 // execute query List<CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut> xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); for(CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut xtnAtrbtOut : xtnAtrbtList) { if(_getCmnContextCore().getStandardInstCode().equals(xtnAtrbtOut.getInstCd())) { CmTblXtnAtrDIO cmTblXtnAtrDIO = _getCmTblXtnAtrDDso().select(_getCmnContextCore().getStandardInstCode(), tblNm, xtnAtrbtOut.getXtnAtrbtNm()); if(cmTblXtnAtrDIO != null && StringCoreUtils.isEmpty(cmTblXtnAtrDIO.getInstIndvDfntnMndtryYn()) && CCM01.YES.equals(_getCmTblXtnAtrDDso().select(_getCmnContextCore().getStandardInstCode(), tblNm, xtnAtrbtOut.getXtnAtrbtNm()).getInstIndvDfntnMndtryYn())) { throw new BizApplicationException("AAPCME0182", new Object[] { xtnAtrbtOut.getXtnAtrbtNm() }); } } } // one more try with standard institution if(xtnAtrbtList.isEmpty()) { inDao.setInstCd(_getCmnContextCore().getStandardInstCode()); xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); } */ // [TO-BE] 1. 개별+표준 기관 데이터 조회 // 2. 조회결과 검증처리(표준기관인 경우 표준기관의 확장속이 정의 여부 확인 // 3. (개별+표준 기관 데이터 미 존재시 )표준기관의 데이터 조회 // execute query List<CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut> xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); // //체크로직 제외함 (cm_tbl_xtn_atr_d.INST_INDV_DFNTN_MNDTRY_YN 기관개별정의필수여부) // for(CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut xtnAtrbtOut : xtnAtrbtList) { // } //개별 조회시 표준기관 데이터도 조회해 오므로 의미없는 쿼리라서 삭제함 // // one more try with standard institution // if(xtnAtrbtList.isEmpty()) { // inDao.setInstCd(_getCmnContextCore().getStandardInstCode()); // xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); // } // set output for (CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut xtnAtrbt : xtnAtrbtList) { TblXtnAtrbtOut outParm = new TblXtnAtrbtOut(); outParm.setTblNm(xtnAtrbt.getTblNm()); outParm.setXtnAtrbtNm(xtnAtrbt.getXtnAtrbtNm()); outParm.setMndtryYn(xtnAtrbt.getMndtryYn()); outParm.setScrnInpYn(xtnAtrbt.getScrnInpYn()); outParm.setScrnChngAblYn(xtnAtrbt.getScrnChngAblYn()); outParm.setCustInqryTrgtYn(xtnAtrbt.getCustInqryTrgtYn()); outParm.setIntrnlInqryTrgtYn(xtnAtrbt.getIntrnlInqryTrgtYn()); outParm.setAtrbtTpCd(xtnAtrbt.getAtrbtTpCd()); outParm.setCdNbr(xtnAtrbt.getCdNbr()); outParm.setClHrarcyId(xtnAtrbt.getClHrarcyId()); if(StringCoreUtils.isEmpty(xtnAtrbt.getAtrbtTpCd())) { StdAtrbtIO stdAtrbt = _getStdAtrbtProvider().getStandardAttribute(xtnAtrbt.getXtnAtrbtNm()); if(stdAtrbt != null && stdAtrbt.getAtrbtTpCd() != null) { outParm.setAtrbtTpCd(stdAtrbt.getAtrbtTpCd()); } } out.add(outParm); } return out; }
public Integer getCustCountOverview(String actorTpCd, String actorNm, String loinIdNbr, String actorUnqIdNbr, String actorNmTpCd, String actorUnqIdNbrTpCd) throws BizApplicationException { //check required inputs if (StringUtils.isEmpty(actorNmTpCd)) { throw new BizApplicationException("AAPCME0006", new String[] {"@actorNmTpCd"}); } else if (StringUtils.isEmpty(actorUnqIdNbrTpCd)) { throw new BizApplicationException("AAPCME0006", new String[] {"@actorUnqIdNbrTpCd"}); } return _getCustBsicXtnBiz().getCustOverviewCount(_getCmnContext().getInstCode(), actorTpCd, actorNm, loinIdNbr, actorUnqIdNbr, actorNmTpCd, actorUnqIdNbrTpCd); }
public void close() throws ItemStreamException { if (logger.isDebugEnabled()) logger.debug("ArrExtendAttributeReMakeTargetReader close"); DasUtils.disconnectDasExecutor(iterator); }
public Map<String, String> getMapSubInfo(InsrncCore insrncCore) throws BizApplicationException { return _getInsrncSubInfoBiz().getMapSubInfo((InsrncImpl)insrncCore); }
public SvcEntryIn clone(){ try{ SvcEntryIn object= (SvcEntryIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CaInstSrvcIO> getListInstService(String instCd, String cmpntCd) throws BizApplicationException { return getListInstService(instCd, cmpntCd, null); }
static boolean isValid(String value) { for (ProductPassbookTypeEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } // Return Output return false; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, InsrncCore insrncCore, String txDt, Integer txSeqNbr) throws BizApplicationException { _getInsrncSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, (InsrncImpl) insrncCore); }
public BfInfoCntntSvcIn clone(){ try{ BfInfoCntntSvcIn object= (BfInfoCntntSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public StaffTxMgmtSvcItemOut clone(){ try{ StaffTxMgmtSvcItemOut object= (StaffTxMgmtSvcItemOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(ActorCore actorCore, String ctcptId, int ctcptChngSeqNbr) throws BizApplicationException { return _getActorCtcptSubInfoBiz().getMapSubInfo((ActorImpl) actorCore, ctcptId, ctcptChngSeqNbr); }
public boolean isActive() throws BizApplicationException { if (ArrStsEnum.ACTIVE_TERMINATED.getValue().equals(getArrStsCd()) && !StringUtils.isEmpty(getArrMtrtyDt())) { return getArrMtrtyDt().compareTo(_getCmnContext().getTxDate()) > 0; } return this.getArrStsCd().equals(ArrStsEnum.ACTIVE.getValue()); }
public String getScrtyIntXtnInfo(ScrtyIntXtnInfoEnum scrtyIntXtnInfoEnum) throws BizApplicationException { // 속성명 기준으로 확장정보관리방법 판단 // 1. 확장정보명세 if(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AS_SCRTYINT_M.getValue(), scrtyIntXtnInfoEnum.getValue())) { return super.getScrtyIntXtnInfoByEav(scrtyIntXtnInfoEnum.getValue()); } // 2. 보조명세 else { return _getScrtyIntSubInfoBiz().getSubInfo(scrtyIntXtnInfoEnum.getValue(), this); } }
public void saveAssetTxXtnInfo(String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { _getAssetTxXtnInfoBiz().saveAssetTxXtnInfo(xtnAtrbtNm, xtnAtrbtCntnt, this, false); }
public CaStaffInqrySvcGetStaffTreeListOut clone(){ try{ CaStaffInqrySvcGetStaffTreeListOut object= (CaStaffInqrySvcGetStaffTreeListOut)super.clone(); if ( this.staffTree== null ) object.staffTree = null; else{ java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffTreeOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffTreeOut>(staffTree.size()); for( bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffTreeOut item : staffTree ){ clonedList.add( (bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffTreeOut)item.clone()); } object.staffTree = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaSrvcMgmtSvcChngListIn clone(){ try{ CaSrvcMgmtSvcChngListIn object= (CaSrvcMgmtSvcChngListIn)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>(tblNm.size()); for( bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn item : tblNm ){ clonedList.add( (bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn)item.clone()); } object.tblNm = clonedList; } if ( this.saveList== null ) object.saveList = null; else{ java.util.List<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn>(saveList.size()); for( bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn item : saveList ){ clonedList.add( (bankware.corebanking.configurationadmin.service.service.dto.CaSrvcMgmtSvcChngIn)item.clone()); } object.saveList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrPlanIO> getArrPlans(String arrSrvcCd, String exctnPlnDt) throws BizApplicationException { return _getArrRealCoreFundamentalAgent().getArrPlans(arrSrvcCd, exctnPlnDt, this); }
public Map<String, String> getMapSubInfo(StStlmntCalcnSIO stStlmntCalcnSIOIn){ logger.debug("##<ST-StlmntCalcnSubInfoBiz> getMapSubInfo"); Map<String, String> subInfoMap = new HashMap<String, String>(); // 1.I/F VO 생성 StlmntCalcnSubInfo subInfoIntrfcIO = new StlmntCalcnSubInfo (); // 2.DBIO VO 신규 StStlmntCalcnSIO stlmntCalcnSIO = new StStlmntCalcnSIO(); // 3.DB 조회 //selectList DSO의 Key: 계산근기의 상세일련번호까지의 키값을 이용하여 계산근기 보조명세를 검색시 사용 StStlmntCalcnSIO stStlmntCalcnS = _getStlmntCalcnSDso().select(stStlmntCalcnSIOIn); if(stStlmntCalcnS == null) { return null; } // 4.DBIO VO 를 I/F VO로 변환 DtoUtils.setSubInfoIO(stStlmntCalcnS, subInfoIntrfcIO); // 5.I/F VO를 MAP으로 변환 for(Entry<String,Object> entry : subInfoIntrfcIO.getFieldValues().entrySet()) { if(entry.getValue()!=null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public List<ArrPlanIO> getArrPlans(String arrSrvcCd,String nxtExctnPlnDt, ArrRealCoreImpl arrReal) throws BizApplicationException { return _getArrPlanImpl().getArrPlans(arrSrvcCd,nxtExctnPlnDt,ArrPlnStsCoreEnum.ACTIVE.getValue(),arrReal); }
public LnAplctnInfoQrySvcDocInfoOut clone(){ try{ LnAplctnInfoQrySvcDocInfoOut object= (LnAplctnInfoQrySvcDocInfoOut)super.clone(); if ( this.xtnAtrbtList== null ) object.xtnAtrbtList = null; else{ java.util.List<bankware.corebanking.underexamination.consultationapplication.service.dto.LnAplctnDocInfoQrySvcDocXtnAtrbtIO> clonedList = new java.util.ArrayList<bankware.corebanking.underexamination.consultationapplication.service.dto.LnAplctnDocInfoQrySvcDocXtnAtrbtIO>(xtnAtrbtList.size()); for( bankware.corebanking.underexamination.consultationapplication.service.dto.LnAplctnDocInfoQrySvcDocXtnAtrbtIO item : xtnAtrbtList ){ clonedList.add( (bankware.corebanking.underexamination.consultationapplication.service.dto.LnAplctnDocInfoQrySvcDocXtnAtrbtIO)item.clone()); } object.xtnAtrbtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean checkCode(CdNbrInfoIO in, String cd) throws BizApplicationException { CdD cdDImpl = _getCdDImpl(in); return cdDImpl.checkCode(in, cd); }
public List<StStlmntXtnInfoDIO> getListStlmntXtnInfo(StStlmntXtnInfoDIO stStlmntXtnInfoDIO) throws BizApplicationException { logger.debug("StlmntCoreImpl==>getListStlmntXtnInfo : stStlmntXtnInfoDIO: {}", stStlmntXtnInfoDIO); return _getStlmntXtnInfoBiz().getListStlmntXtnInfo(stStlmntXtnInfoDIO); }
public List<StaffSrchOut> getListPrtnrStaffInfoByName(String instCd, String actorName, String actorNmTpCd, String prtnrActorId, String prtnrDtlTpCd) throws BizApplicationException { //check required inputs if (StringUtils.isEmpty(instCd)) { throw new BizApplicationException("AAPCME0006", new String[] {"@instCd"}); } if (StringUtils.isEmpty(actorNmTpCd)) { throw new BizApplicationException("AAPCME0006", new String[] {"@actorNmTpCd"}); } if (CCM01.NO.equals(_getInstParmProvider().getInstParm(instCd, InstParamEnum.STAFF_PARAM_ACTOR_INFORM_USE_YN.getValue()))) { return _getStaffBsicXtnBiz().getListPartnerStaffByName(instCd, actorName, prtnrActorId, prtnrDtlTpCd); } return _setStaffSrchOutList(_getActorNmXtn().getListPartnerStaffByName(instCd, actorName, actorNmTpCd, prtnrActorId, prtnrDtlTpCd)); }
public boolean isTableAttributeValid(String xtnTblNm, String xtnAtrbtNm, String atrbtCntnt) throws BizApplicationException { if(!_checkAttributeBase(xtnTblNm, xtnAtrbtNm, atrbtCntnt)) { return false; } CaCmTblXtnAtrVrtnCmpsDIO cmTblXtnAtrVrtnCmpsDIO = _getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getInstCode(), xtnTblNm, xtnAtrbtNm); if(cmTblXtnAtrVrtnCmpsDIO == null || "".equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())) { // 기관에 데이터가 없을시 STDA 기관으로 재조회 하여 검증 한다. cmTblXtnAtrVrtnCmpsDIO = new CaCmTblXtnAtrVrtnCmpsDIO(); cmTblXtnAtrVrtnCmpsDIO = _getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getStandardInstCode(), xtnTblNm, xtnAtrbtNm); if(cmTblXtnAtrVrtnCmpsDIO != null && CaXtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())) { return true; } } else if(CaXtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())){ return true; } return true; }
public List<ArrInternal> getListArrInternal(String pdCd) throws BizApplicationException { return _getArrPdRelImpl().getInternalArr(pdCd); }
public List<CaTblXtnAtrbtOut> getTableExtendAttribute(String instCd, String tblNm) throws BizApplicationException { return this.getTableExtendAttribute(instCd, tblNm, CaXtnAtrbtVrtnCmpsEnum.NA, null); }
private BfCndTestSvcOut getInstCd(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); String output = bfCnd.getInstCd(); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public Map<String, String> getMapSubInfo(AssetCore asset) throws BizApplicationException { return _getAssetSubInfoBiz().getMapSubInfo((AssetImpl)asset); }
public CndVal getComplexCndValue(List<CmpsCnd> cmpsCndList) throws BizApplicationException { if (!isComplexCnd()) { throw new BizApplicationException("AAPPDE0003", null); } CndVal cndVal = null; // Set the composing condition value to input DTO // 입력된 구성조건값을 입력DTO에 set함 PdPdCndUnitComplexSearchIn inDaoS010 = _setPdPdCndUnitComplexSearchIn(); inDaoS010.setTierNbr(getComplexCndStructureInfo(cmpsCndList).getTierNbr()); if (isListCnd()) { // 복합목록조건값 조회 cndVal = _getComplexListCndValue(inDaoS010); } else if (isRngCnd()) { // 복합범위조건값 조회 cndVal = _getComplexRangeCndValue(inDaoS010); } else if (isIntCnd()) { // 복합금리조건값 조회 cndVal = _getComplexInterestCndValue(inDaoS010); } else if (isFeeCnd()) { // 복합수수료조건값 조회 cndVal = _getComplexFeeCndValue(inDaoS010); } // Return output return cndVal; }
public List<CaAssetRegionClIO> getListAssetRegionClassification(String instCd) throws BizApplicationException{ List<CaAssetRegionClIO> outList = new ArrayList<CaAssetRegionClIO>(); List<CaAsAssetRegionClMIO> asAssetRegionClList = new ArrayList<>(); Integer total = _AsAssetRegionClMDso().selectListCount(instCd);//82000 Integer startNbr=0; Integer pgCnt=5000; while(startNbr<total){ asAssetRegionClList.addAll(_AsAssetRegionClMDso().selectList(instCd,startNbr,pgCnt)); startNbr+=pgCnt; } for(CaAsAssetRegionClMIO item :asAssetRegionClList) { CaAssetRegionClIO assetRegionClIO = new CaAssetRegionClIO(); // Generated by code generator [[ assetRegionClIO.setAddrHrarcyCd(item.getAddrHrarcyCd()); assetRegionClIO.setAddrId(item.getAddrId()); assetRegionClIO.setAssetAddrRegionClCrtrCd(item.getAssetAddrRegionClCrtrCd()); assetRegionClIO.setAplyStartDt(item.getAplyStartDt()); assetRegionClIO.setAplyEndDt(item.getAplyEndDt()); assetRegionClIO.setAssetAddrRegionClCd(item.getAssetAddrRegionClCd()); // Generated by code generator ]] outList.add(assetRegionClIO); } return outList; } /** * <div class='en'> * @description * <pre> * It registers asset region classification for new institution. * </pre> * @seealso * @note {@link CaAssetRegionClIO} : required fields - all of them * </div> * * <div class='ko'> * @description * <pre> * 신규기관을 위해 자산 지역분류를 생성한다. * </pre> * @seealso * @note {@link CaAssetRegionClIO}
public String getNbrgArrExternalId(String arrExtrnlIdNbrTpCd, Map<String,String> hashMap) throws BizApplicationException { return super.getNbrgArrExternalId(arrExtrnlIdNbrTpCd, hashMap); }
public CaStyleSvcTextStyleTree clone(){ try{ CaStyleSvcTextStyleTree object= (CaStyleSvcTextStyleTree)super.clone(); if ( this.children== null ) object.children = null; else{ java.util.List<bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcTextStyleTree> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcTextStyleTree>(children.size()); for( bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcTextStyleTree item : children ){ clonedList.add( (bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcTextStyleTree)item.clone()); } object.children = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isValidType(CaAtrbtTpEnum atrbtTp, String atrbtCntnt) throws BizApplicationException { if (logger.isDebugEnabled()) { logger.debug("atrbtTpCd={}", atrbtTp); logger.debug("atrbtCntnt={}", atrbtCntnt); } if (atrbtTp == null) { throw new BizApplicationException("AAPCME0037", new Object[] { atrbtTp }); } // Validate attribute type switch (atrbtTp) { case TEXT: // text return (StringUtils.isEmpty(atrbtCntnt)) ? false : true; case TEXT_DATE: // date return DateUtils.isValidDate(atrbtCntnt); case TEXT_NUMBER: // number return DataCheckUtils.isNumeric(atrbtCntnt); case NUMBER: // number return DataCheckUtils.isNumeric(atrbtCntnt); case TEXT_ALPHA_NUMERIC: // Alpha-Number return DataCheckUtils.isAlphaNumeric(atrbtCntnt); case YES_OR_NO: // yes or no return (CCM01.YES.equals(atrbtCntnt) || CCM01.NO.equals(atrbtCntnt)) ? true : false; case PASSWORD: // Password return DataCheckUtils.isValidPassword(atrbtCntnt); case TIMESTAMP: // timestamp return true; case JSON: // json return DataCheckUtils.isJson(atrbtCntnt); default: throw new BizApplicationException("AAPCME0037", new Object[] { atrbtTp }); } }
private BfCndTestSvcOut getListAllCmpsCndValue(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); List<CmpsCndOut> output = bfCnd.getListAllCmpsCndValue(); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (CollectionUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public CashSndRcvMgmtSvcCashSndRcvListIn clone(){ try{ CashSndRcvMgmtSvcCashSndRcvListIn object= (CashSndRcvMgmtSvcCashSndRcvListIn)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.CashSndRcvMgmtSvcCashSndRcvIn> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.CashSndRcvMgmtSvcCashSndRcvIn>(tblNm.size()); for( bankware.corebanking.accounting.cashaccounting.service.dto.CashSndRcvMgmtSvcCashSndRcvIn item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.cashaccounting.service.dto.CashSndRcvMgmtSvcCashSndRcvIn)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustRprsnChngSvcListTerminateListIn clone(){ try{ CustRprsnChngSvcListTerminateListIn object= (CustRprsnChngSvcListTerminateListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AsmCore asm) { _getAsmSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AsmImpl)asm); }
public PdTxSrvcMgmtSvcPdInfoByCndVal clone(){ try{ PdTxSrvcMgmtSvcPdInfoByCndVal object= (PdTxSrvcMgmtSvcPdInfoByCndVal)super.clone(); if ( this.cndList== null ) object.cndList = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdTxSrcMgmtSvcPdInfoByCndValSub> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdTxSrcMgmtSvcPdInfoByCndValSub>(cndList.size()); for( bankware.corebanking.product.service.dto.PdTxSrcMgmtSvcPdInfoByCndValSub item : cndList ){ clonedList.add( (bankware.corebanking.product.service.dto.PdTxSrcMgmtSvcPdInfoByCndValSub)item.clone()); } object.cndList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getXtnInfo(ArrGrpXtnInfoEnum arrGrpXtnInfoEnum) throws BizApplicationException { return super.getXtnInfo(arrGrpXtnInfoEnum.getValue()); }
public List<PdCnd> getCndMultiple(List<String> cndCdList) throws BizApplicationException { // 조건코드만 입력된 경우, 상품조회기준일자를 입력하여 유효조건조회 // if the apply date was not inputed, use the product input date to // inquiry condition PdCndMltplIn in = new PdCndMltplIn(); in.setAplyStartDt(aplyDt); in.setAplyStartTm(aplyTm); in.setAplyEndDt(aplyDt); in.setAplyEndTm(aplyTm); in.setCndCdList(cndCdList); return getCndMultiple(in); }
public String getArrTxKnd(ArrRealCore arr) { logger.debug("=================== ArrTxCustomImpl getArrTxKnd Start=========="); if(((ArrReal)arr).isArrKindInternal()) { return ArrTxKndEnum.ARR_TX_INTERNAL.getValue(); }else if(((ArrReal)arr).isArrKindTemporary()) { return ArrTxKndEnum.ARR_TX_TEMPRARY.getValue(); }else if(arr.getPdTmpltCd().equals(PdTemplateCodeEnum.ON_DEMAND_DPST.getValue())) { return ArrTxKndEnum.ARR_TX_DEMAND.getValue(); }else { return ArrTxKndEnum.ARR_TX_NORMAL.getValue(); } }
public String getArrXtnInfo(ArrXtnInfoEnum arrXtnInfoEnum) throws BizApplicationException { // 속성명 기준으로 확장정보관리방법 판단 // 1. 확장정보명세 if (_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AR_ARR_M.getValue(), arrXtnInfoEnum.getValue())) { return super.getArrXtnInfoByEav(arrXtnInfoEnum.getValue()); } // 2. 보조명세 else { return _getArrSubInfoBiz().getSubInfo(arrXtnInfoEnum.getValue(), this); } }
public List<ArrIntRt> getArrDepositInterestRate(Arrangement arr,String procsDt) throws BizApplicationException{ return getArrDepositInterestRate(arr, null, procsDt); }
public List<ArrPsbkBkgMsg> buildMsgFormat(ArrIssmdaCore arrIssmda, String arrId, String psbkSrvcTpCd, String psbkMsgId, Map<String, Object> psbkMsgParmMap) throws BizApplicationException { /** * get arrangement */ Arr arr = _getArrMngr().getArr(arrId); /** * get configuration */ int sideCnt = 2; int row = 15; int col = 10; int length = 75; String align = "-"; Dept mgmtDept = _getDeptMngr().getDept(arr.getMgmtDeptId()); String bkgText = String.format("%-20s%-15s%-15s", mgmtDept.getDeptName(), arr.getArrOpnDt(), mgmtDept.getTelNbr()); String custName = String.format("%"+col+"s%"+align+length+"s", " ", bkgText); ArrPsbkBkgMsg psbkLine = new ArrPsbkBkgMsg(); psbkLine.setPsbkBkgSideCnt(sideCnt); psbkLine.setPsbkBkgRowCnt(row); psbkLine.setPsbkBkgCntnt(custName); List<ArrPsbkBkgMsg> psbkLineList = new ArrayList<>(); psbkLineList.add(psbkLine); return psbkLineList; }
public CaClTreeMgmtSvcDtlRoleIO clone(){ try{ CaClTreeMgmtSvcDtlRoleIO object= (CaClTreeMgmtSvcDtlRoleIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); if ( this.children== null ) object.children = null; else{ java.util.List<bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaClTreeMgmtSvcDtlRoleIO> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaClTreeMgmtSvcDtlRoleIO>(children.size()); for( bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaClTreeMgmtSvcDtlRoleIO item : children ){ clonedList.add( (bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaClTreeMgmtSvcDtlRoleIO)item.clone()); } object.children = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut clone(){ try{ PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut object= (PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public InstMgmtSvcGetInstListOut clone(){ try{ InstMgmtSvcGetInstListOut object= (InstMgmtSvcGetInstListOut)super.clone(); if ( this.instList== null ) object.instList = null; else{ java.util.List<bankware.corebanking.common.institution.service.dto.InstMgmtSvcGetInstOut> clonedList = new java.util.ArrayList<bankware.corebanking.common.institution.service.dto.InstMgmtSvcGetInstOut>(instList.size()); for( bankware.corebanking.common.institution.service.dto.InstMgmtSvcGetInstOut item : instList ){ clonedList.add( (bankware.corebanking.common.institution.service.dto.InstMgmtSvcGetInstOut)item.clone()); } object.instList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public MkngMsgRprtngO clone(){ try{ MkngMsgRprtngO object= (MkngMsgRprtngO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ActorSrchOut> getListCustInfoOverview(String actorTpCd, String actorNm, String loinIdNbr, String actorUnqIdNbr, String actorNmTpCd, String actorUnqIdNbrTpCd, Integer pageNum, Integer pageCount) throws BizApplicationException { //check required inputs if (StringUtils.isEmpty(actorNmTpCd)) { throw new BizApplicationException("AAPCME0006", new String[] {"@actorNmTpCd"}); } else if (StringUtils.isEmpty(actorUnqIdNbrTpCd)) { throw new BizApplicationException("AAPCME0006", new String[] {"@actorUnqIdNbrTpCd"}); } else if (pageNum == null || CCM01.ZERO.equals(pageNum)) { throw new BizApplicationException("AAPCME0006", new String[] {"@pgNbr"}); } else if (pageCount == null || CCM01.ZERO.equals(pageCount)) { throw new BizApplicationException("AAPCME0006", new String[] {"@pgCnt"}); } return _getCustBsicXtnBiz().getListCustOverview(_getCmnContext().getInstCode(), actorTpCd, actorNm, loinIdNbr, actorUnqIdNbr, actorNmTpCd, actorUnqIdNbrTpCd, pageNum, pageCount); }
public ArrBalAcmltAmtOut getAccumulatedAmount(String startDt, String endDt, List<BigDecimal> amtList, boolean isMinusSkip, boolean isPlusSkip) throws BizApplicationException { boolean parttnYn = false; /* * Checking partition */ if(amtList != null && !amtList.isEmpty() ) parttnYn = true; /* * Basic Input Data Validation */ if (StringCoreUtils.isEmpty(startDt)) { throw new BizApplicationException("AAPCME0006", new Object[] {"@startDt"}); } if (StringCoreUtils.isEmpty(endDt)) { throw new BizApplicationException("AAPCME0006", new Object[] {"@endDt"}); } if (startDt.compareTo(endDt) > 0) { throw new BizApplicationException("AAPSTE0180", null); // error (start date > end date) } /* * Check for avoid that (+) value and (-) value, both are exist. */ int plusCnt = 0; int mnsCnt = 0; if(parttnYn == true) { for(int i = 0; i < amtList.size() -1; i++) { if(amtList.get(i).compareTo(amtList.get(i+1)) >= 0) throw new BizApplicationException("AAPSTE0181", null); // disorder or duplication if(amtList.get(i).compareTo(BigDecimal.ZERO) > 0) { plusCnt++; }else if(amtList.get(i).compareTo(BigDecimal.ZERO) < 0) { mnsCnt++; } } if(amtList.get(amtList.size() -1).compareTo(BigDecimal.ZERO) > 0) { plusCnt++; }else if(amtList.get(amtList.size() -1).compareTo(BigDecimal.ZERO) < 0) { mnsCnt++; } } if(plusCnt > 0 && mnsCnt > 0) throw new BizApplicationException("AAPSTE0182", null); ArrBalAcmltAmtOut out = new ArrBalAcmltAmtOut(); // Initialization out.setAcmltdAmt(BigDecimal.ZERO); out.setLowLmtAcmltdAmt(BigDecimal.ZERO); out.setOverUpLmtAcmltdAmt(BigDecimal.ZERO); if(parttnYn == true) { for(int i = 0; i < amtList.size() -1; i++) { out.getAmtList().add(BigDecimal.ZERO); } } /* * Calculate accumulated amount */ if(balDt.compareTo(startDt) <= 0) { // just use MAX Data (balance wasn't changed in term) if(sctnStartDt.compareTo(startDt) <= 0 && endDt.compareTo(sctnEndDt) < 0) { _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, startDt, endDt, balDtBal, amtList, out); } }else { // balance was changed in term (daily balance's history is exist) StArrDailyBalHIO inParam = new StArrDailyBalHIO(); inParam.setInstCd(arr.getInstCd()); inParam.setArrId(arr.getArrId()); inParam.setAmtTpCd(this.amtTpDtlIO.getAmtTpCd()); inParam.setBalTpCd(this.balTpDtlIO.getBalTpCd()); inParam.setCrncyCd(crncyCd); // data in term List<StArrDailyBalHIO> outParams = _getStArrDailyBalHDso().selectList(inParam, startDt, endDt); if(startDt.compareTo((outParams != null && !outParams.isEmpty()) ? outParams.get(0).getBalDt() : balDt) == 0) { // do nothing }else { inParam.setBalDt(startDt); // Condition for finding data before this term // data before this term StArrDailyBalHIO bfParam = _getStArrDailyBalHDso().selectPreviousBalDt(inParam); if(bfParam != null) { _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, startDt, (outParams != null && !outParams.isEmpty()) ? outParams.get(0).getBalDt() : (endDt.compareTo(balDt) < 0 ? endDt : balDt), bfParam.getDayClsgBal(), amtList, out); } } if(outParams != null && !outParams.isEmpty()) { while(outParams.size() > 1) { _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, outParams.get(0).getBalDt(), outParams.get(1).getBalDt(), outParams.get(0).getDayClsgBal(), amtList, out); outParams.remove(0); } try { // must be : Daily Balance's Last Data < Last Balance Data // daily balance's last date + 1 = end date of inquiry term >> don't need last balance master DB // End date of inquiry period <= date in last balance table, then don't need master Information if (!outParams.get(0).getBalDt().equals(endDt)) { if(endDt.compareTo(balDt) <= 0) { _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, outParams.get(0).getBalDt(), endDt, outParams.get(0).getDayClsgBal(), amtList, out); // Daily Balance Last Date < Last Balance Date <= end date of inquiry term }else { _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, outParams.get(0).getBalDt(), balDt, outParams.get(0).getDayClsgBal(), amtList, out); _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, balDt, endDt, balDtBal, amtList, out); } } }catch(Exception e) { logger.info("ERROR : {}", e); throw e; } } else { if (balDt.compareTo(endDt) < 0) _calculateAccumulatedAmt(parttnYn, isMinusSkip, isPlusSkip, balDt, endDt, balDtBal, amtList, out); } } if (logger.isDebugEnabled()){ logger.debug("getAccumulatedAmount is called. start date : {}, end date : {}",startDt,endDt ); logger.debug("getAccumulatedAmount is called. arrBal : {} ", this.toString()); logger.debug("getAccumulatedAmount is called. out : {} ", out.getFieldValues()); } return out; }
public CaCoaMgmtSvcGetCoaListIn clone(){ try{ CaCoaMgmtSvcGetCoaListIn object= (CaCoaMgmtSvcGetCoaListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String calculateDateWeek(String baseDt) throws BizApplicationException { // Validate date _checkDate(baseDt); // Inquiry calendar CmClndrMIO inCmClndrM = new CmClndrMIO(); inCmClndrM.setBaseDt(baseDt); _getCmnContext().setHeaderColumn(inCmClndrM); CmClndrMIO outCmClndrM = _getCmClndrMDso().select(inCmClndrM); if (outCmClndrM == null) { throw new BizApplicationException("AAPCME0004", null); } // Set result value return outCmClndrM.getDtWeekDscd(); }
public Integer getTxSeqNbr(){ return txSeqNbr; }
static boolean isValid(String value){ for (AmtKndDscdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public CaArrCndCntrlSrvcSaveItmIn clone(){ try{ CaArrCndCntrlSrvcSaveItmIn object= (CaArrCndCntrlSrvcSaveItmIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public UeCupldRgstSvcRgstCmpltnIn clone(){ try{ UeCupldRgstSvcRgstCmpltnIn object= (UeCupldRgstSvcRgstCmpltnIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public BfSvcIn clone(){ try{ BfSvcIn object= (BfSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrTx getCancelableLastTx(ArrReal arrReal, String baseDt) throws BizApplicationException { return (ArrTx) super.getCancelableLastTxCore((ArrRealCore)arrReal, baseDt); }
protected void register(CustImpl custImpl, AtCustLoinInfoDIO atCustLoinInfoDIO) throws BizApplicationException { AtCustMIO atCustMIO = custImpl.getCustBsicCache(); if (atCustLoinInfoDIO == null) { return; } AtCustLoinInfoDIO bfCustLoinInfoDIO = _getAtCustLoinInfoDDso().select( _getCmnContext().getInstCode(), atCustLoinInfoDIO.getLoinIdNbr(), InfoStsEnum.NORMAL.getValue(), null, _getCmnContext().getTxDate()); if (bfCustLoinInfoDIO != null) { throw new BizApplicationException("AAPATE0075", new Object[] { "@loinIdNbr" }); } int seqNbr = _getAtCustLoinInfoDDso().selectNextSeqNbr(atCustMIO.getInstCd(), atCustMIO.getCustId()); _register(atCustMIO, atCustLoinInfoDIO, seqNbr); }
public DpstIntCalculatorOut calculateInterestDailyAccrual(Arr arr, String baseDt, Map<String,String> xtdInfo) throws BizApplicationException { return _calculateInt(arr,0, null, baseDt, true, xtdInfo, InterestTransactionTypeEnum.DAILY_ACCRUAL); }
public void validate(String arrSrvcCd, ArrRealCore arrReal, CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { if (_getLnOvrduInfoProvider().isOverdue((ArrReal)arrReal, ArrCmnUtil.getRckngDt(_getCmnContext()))){ //Arrangement is in overdue. This service ({0}) could not be finished properly //계약이 연체상태입니다. 본서비스({0}) 실행이 불가 합니다 throw new BizApplicationException("AAPARE0295", new Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)}); } }
public List<ArrStsChngHst> getArrStatusChangeHistory(ArrRealCoreImpl arrReal) throws BizApplicationException { return _getArrBasicBiz().getArrStatusChangeHistory(arrReal); }
public java.lang.String getCndValDcsnLvlCd(){ return cndValDcsnLvlCd; }
public static boolean isValid(String value){ for (ArrIssmdaRelStsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public AprslRqstAddrOut getAddress(String aprslRqstId, int aprslRqstSeqNbr)throws BizApplicationException { AsAprslRqstAddrDIO input = new AsAprslRqstAddrDIO(); input.setInstCd(_getCmnContextCore().getInstCode()); input.setAprslRqstId(aprslRqstId); input.setAprslRqstSeqNbr(aprslRqstSeqNbr); List<AsAprslRqstAddrDIO> result = _getAsAprslRqstAddrDDso().selectByAprslRqstSeqNbr(_getCmnContextCore().getInstCode(), aprslRqstId, aprslRqstSeqNbr); //출력부조립 AprslRqstAddrOut out = new AprslRqstAddrOut(); if(!result.isEmpty()) { out.setInstCd(result.get(0).getInstCd()); out.setAprslRqstId(result.get(0).getAprslRqstId()); out.setAprslRqstSeqNbr(result.get(0).getAprslRqstSeqNbr()); out.setAssetAddrTpCd(result.get(0).getAssetAddrTpCd()); out.setAddrSeqNbr(result.get(0).getAddrSeqNbr()); out.setAddrHrarcyCd(result.get(0).getAddrHrarcyCd()); out.setAddrId(result.get(0).getAddrId()); out.setBsicAddrCntnt(result.get(0).getBsicAddrCntnt()); out.setDtlAddrCntnt(result.get(0).getDtlAddrCntnt()); } return out; }
public List<TblXtnAtrbtOut> getTableExtendAttribute(String tblNm) throws BizApplicationException { return this.getTableExtendAttribute(_getCmnContextCore().getInstCode(), tblNm, XtnAtrbtVrtnCmpsEnum.NA, null); }
static boolean isValid(String value) { for (VarIntRtCyclCalcnBaseCoreEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public List<XtnCdIO> getListCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { List<XtnCdIO> xtnCdIOs = new ArrayList<XtnCdIO>(); ClTreeIO clIn = new ClTreeIO(); String lngCd = supplInfoVal == null ? null : String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue())); if (StringUtils.isEmpty(cdNbr)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@cdNbr" }); } clIn.setClHrarcyId(CCM01.IPCT); clIn.setMostLowrLvlYn(CCM01.YES); List<ClTreeIO> clList = _getCltree().getListClassification(clIn); for(ClTreeIO clTree : clList ){ XtnCdIO xtnCdIO = new XtnCdIO(); xtnCdIO.setCd(clTree.getClId()); xtnCdIO.setLngCd(lngCd); if(StringUtils.isEmpty(lngCd)) { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CL, CCM01.IPCT.concat(clTree.getClId()))); } else { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CL, CCM01.IPCT.concat(clTree.getClId()), lngCd)); } xtnCdIOs.add(xtnCdIO); } return xtnCdIOs; }
public BigDecimal getBlockedPrincipal(String crncyCd, String baseDt, ArrRealCoreImpl arrRealCoreImpl) throws BizApplicationException { _checkInput(crncyCd, baseDt); ArArrSrvcBlckngDSelectSumEffectiveAmtOnDateIO sqlOut = _getArArrSrvcBlckngDDso().selectSumEffectiveBlckgAmtOnDate(arrRealCoreImpl.getInstCd(), arrRealCoreImpl.getArrId(), baseDt, crncyCd); if(sqlOut == null) { return BigDecimal.ZERO; } if(sqlOut.getArrSrvcBlckngAmt() == null) { sqlOut.setArrSrvcBlckngAmt(BigDecimal.ZERO); } if(CCM01.YES.equals(sqlOut.getWhdrwlAblBalInitzYn())){ sqlOut.setArrSrvcBlckngAmt(new BigDecimal("999999999999999")); } return sqlOut.getArrSrvcBlckngAmt(); }
public Map<String, String> getMapSubInfo(CustImpl custImpl) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 AtCustSIO subInfo = getSubInfoCache(custImpl); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조명세 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public TxQrySvcGetXtnOut clone(){ try{ TxQrySvcGetXtnOut object= (TxQrySvcGetXtnOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(PrtnrCore prtnrCore, String xtnAtrbtNm) throws BizApplicationException { return _getPrtnrSubInfoBiz().getSubInfo(xtnAtrbtNm, (PrtnrImpl) prtnrCore); }
public boolean isActive() { return this.arrGrpStsCd.equals(ArrGrpStsCoreEnum.ACTIVE.getValue()); }
public CustRgstSvcAnswerListIn clone(){ try{ CustRgstSvcAnswerListIn object= (CustRgstSvcAnswerListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CdMgmtSvcGetCdListByCdNbrIn clone(){ try{ CdMgmtSvcGetCdListByCdNbrIn object= (CdMgmtSvcGetCdListByCdNbrIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AssetCore assetImpl, Integer assetThingSeqNbr, String txDt, Integer txSeqNbr) throws BizApplicationException { _getAssetThingSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, (AssetImpl) assetImpl, assetThingSeqNbr); }
public boolean check(Map<String, String> atrbtCntnt) throws BizApplicationException { if(logger.isDebugEnabled()) { logger.debug("YnMndtryCmpxVldtnImpl : {}", atrbtCntnt); } int cnt = 0; String ynAtrbt = null; String ynVal = null; for(Map.Entry<String, String> atrbt: atrbtCntnt.entrySet()) { if(cnt == 0) { String [] pair = atrbt.getValue().split("="); if(pair.length != 2) { // It is {0} error. Please check {0}. throw new BizApplicationException("AAPCME0002", new Object[] {"@inpCntnt"}, new Object[] {"YnMndtryCmpxVldtnImpl : " + atrbtCntnt.toString()}); } ynAtrbt = pair[0]; ynVal = pair[1]; cnt++; if(logger.isDebugEnabled()) { logger.debug("ynAtrbt, ynVal : {}, {}", ynAtrbt, ynVal); } if(ynAtrbt == null || ynVal == null) { throw new BizApplicationException("AAPCME0002", new Object[] {"@inpCntnt"}, new Object[] {"YnMndtryCmpxVldtnImpl : " + atrbtCntnt.toString()}); } continue; } if(CCM01.YES.equals(ynVal) && ynVal.equals(atrbtCntnt.get(ynAtrbt)) && !ynAtrbt.equals(atrbt.getKey()) && StringUtils.isEmpty(atrbt.getValue())) { // {1} is mandatory input item when inputting {0}. throw new BizApplicationException("AAPCME0076", new Object[] {ynAtrbt + "=" + ynVal, "@" + atrbt.getKey()}); } if(CCM01.NO.equals(ynVal) && ynVal.equals(atrbtCntnt.get(ynAtrbt)) && !ynAtrbt.equals(atrbt.getKey()) && !StringUtils.isEmpty(atrbt.getValue())) { // If {0}, it cannot be {1}. throw new BizApplicationException("AAPCME0012", new Object[] {ynAtrbt + "=" + ynVal, atrbt.getKey() + "=" + atrbt.getValue()}); } cnt++; } return true; }
public CaCustAgrmntCdSvcDeleteListIn clone(){ try{ CaCustAgrmntCdSvcDeleteListIn object= (CaCustAgrmntCdSvcDeleteListIn)super.clone(); if ( this.deleteList== null ) object.deleteList = null; else{ java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaCustAgrmntCdSvcDeleteIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaCustAgrmntCdSvcDeleteIn>(deleteList.size()); for( bankware.corebanking.configurationadmin.actor.service.dto.CaCustAgrmntCdSvcDeleteIn item : deleteList ){ clonedList.add( (bankware.corebanking.configurationadmin.actor.service.dto.CaCustAgrmntCdSvcDeleteIn)item.clone()); } object.deleteList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public LnArr360IntRt clone(){ try{ LnArr360IntRt object= (LnArr360IntRt)super.clone(); if ( this.tierElmntList== null ) object.tierElmntList = null; else{ java.util.List<bankware.corebanking.loan.query.service.dto.LnArrIntRtTierElmnt> clonedList = new java.util.ArrayList<bankware.corebanking.loan.query.service.dto.LnArrIntRtTierElmnt>(tierElmntList.size()); for( bankware.corebanking.loan.query.service.dto.LnArrIntRtTierElmnt item : tierElmntList ){ clonedList.add( (bankware.corebanking.loan.query.service.dto.LnArrIntRtTierElmnt)item.clone()); } object.tierElmntList = clonedList; } if ( this.rtElmntList== null ) object.rtElmntList = null; else{ java.util.List<bankware.corebanking.loan.query.service.dto.LnArrIntRtCmpsElmnt> clonedList = new java.util.ArrayList<bankware.corebanking.loan.query.service.dto.LnArrIntRtCmpsElmnt>(rtElmntList.size()); for( bankware.corebanking.loan.query.service.dto.LnArrIntRtCmpsElmnt item : rtElmntList ){ clonedList.add( (bankware.corebanking.loan.query.service.dto.LnArrIntRtCmpsElmnt)item.clone()); } object.rtElmntList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaDstbChrncDataRqstIn clone(){ try{ CaDstbChrncDataRqstIn object= (CaDstbChrncDataRqstIn)super.clone(); if ( this.tblList==null ) object.tblList = null; else object.tblList = (bankware.corebanking.configurationadmin.distribution.service.dto.CaDstbChrncDataRqstTblInfoIn)this.tblList.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getNumbering(String instCd, String nbrgAtrbtNm, Map<String, Object> inpParmMap, Boolean isReUseSameTxNbrg) throws BizApplicationException { // 기관코드와 채번속성명이 있는지 검증 한다. _checkNumberingInput(instCd, nbrgAtrbtNm); // Query numbering rule NumberingGetIn inParm = new NumberingGetIn(); inParm.setInstCd(instCd); inParm.setNbrgAtrbtNm(nbrgAtrbtNm); // 채번규칙 조회 NumberingGetListOut numbering02Out = this._getNumberingRule(inParm); if(logger.isDebugEnabled()) { logger.debug("numbering02Out ::: {}", numbering02Out.getFieldValues()); } CmNbrgRuleMIO cmNbrgRuleMIO = _setCommonNumberingRuleMasterParameter(numbering02Out); List<CmNbrgRuleCmpsDIO> listCmNbrgRuleCmpsDIO = new ArrayList<CmNbrgRuleCmpsDIO>(); for (NumberingGetOut numbering02OutSub1 : numbering02Out.getTblNm()) { listCmNbrgRuleCmpsDIO.add(_setNumberingRuleCompositionDetailParameter(numbering02OutSub1)); } // Assemble numbering layer value String jsonCntnt = ""; Map<String, Object> tierValMap = new LinkedHashMap<String, Object>(); for (CmNbrgRuleCmpsDIO cmNbrgRuleCmpsDIO : listCmNbrgRuleCmpsDIO) { // 채번계층여부가 Y 이면 채번계층값을 가져 온다. if (CCM01.YES.equals(cmNbrgRuleCmpsDIO.getNbrgTierYn())) { Entry<String, String> entry = _getNbrgTierVal(instCd, cmNbrgRuleMIO, cmNbrgRuleCmpsDIO, jsonCntnt, inpParmMap, isReUseSameTxNbrg, ""); tierValMap.put(entry.getKey().toString(), entry.getValue().toString()); } } if (tierValMap.isEmpty()) { // Fail to query Assemble numbering layer value throw new BizApplicationException("AAPCME0084", new Object[] {"@nbrgTierYn", "@nbrgAtrbtNm", nbrgAtrbtNm}); } jsonCntnt = _getJsonString(tierValMap); // Numbering and assemble number String nbrgVal = ""; for (CmNbrgRuleCmpsDIO cmNbrgRuleCmpsDIO : listCmNbrgRuleCmpsDIO) { if (cmNbrgRuleCmpsDIO.getCmpsStartPstnCnt() > 0 && cmNbrgRuleCmpsDIO.getCmpsFgrsCnt() > 0) { nbrgVal = nbrgVal + _getNumberingCompositionValue(instCd, cmNbrgRuleMIO, cmNbrgRuleCmpsDIO, jsonCntnt, inpParmMap, isReUseSameTxNbrg, nbrgVal); } } String orgNbrgVal = nbrgVal; if(!StringUtils.isEmpty(cmNbrgRuleMIO.getEncrptnDscd())){ try { if(EncryptDstnctnEnum.ONE_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){ nbrgVal = CryptUtils.encryptSHA1(orgNbrgVal); } else if(EncryptDstnctnEnum.TWO_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){ nbrgVal = CryptUtils.encryptAES(orgNbrgVal); } } catch (Exception e) { if (logger.isDebugEnabled()) { logger.debug("Exception : {}", e); } //logger.debug("#### NbrgImpl.getNumbering modify source:{0} , Error:{1}", new Object[]{orgNbrgVal,e}); throw new BizApplicationException("AAPCME0000", new String[] {"getNumbering", "Encrypt getNumber" }); } } return nbrgVal; }
public boolean isBatchMode() throws BizApplicationException { SystemOnlineModeEnum vender = SystemOnlineModeEnum.getByValue(getSystemOnlineMode()); if (vender == SystemOnlineModeEnum.BF_DAY_SNAPSHOT) return true; else return false; }
public static boolean isValid(String value){ for (CaDstbProcStatusCdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
static boolean isValid(String value){ for (TxCnclRsnEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public Map<String, String> getMapSubInfo(ActorCore actorCore, String dueDlgncDscd, int dueDlgncSeqNbr) throws BizApplicationException { return _getActorDueDlgncSubInfoBiz().getMapSubInfo((ActorImpl) actorCore, dueDlgncDscd, dueDlgncSeqNbr); }
public LnRpymntSvcRpymntInfoListIn clone(){ try{ LnRpymntSvcRpymntInfoListIn object= (LnRpymntSvcRpymntInfoListIn)super.clone(); if ( this.rpymntInfoList== null ) object.rpymntInfoList = null; else{ java.util.List<bankware.corebanking.loan.financialtransaction.service.dto.LnRpymntSvcRpymntInfoIn> clonedList = new java.util.ArrayList<bankware.corebanking.loan.financialtransaction.service.dto.LnRpymntSvcRpymntInfoIn>(rpymntInfoList.size()); for( bankware.corebanking.loan.financialtransaction.service.dto.LnRpymntSvcRpymntInfoIn item : rpymntInfoList ){ clonedList.add( (bankware.corebanking.loan.financialtransaction.service.dto.LnRpymntSvcRpymntInfoIn)item.clone()); } object.rpymntInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value){ for (LmtChkRsltCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public CaArrPdRuleCntntCdNbrListOut clone(){ try{ CaArrPdRuleCntntCdNbrListOut object= (CaArrPdRuleCntntCdNbrListOut)super.clone(); if ( this.list== null ) object.list = null; else{ java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList>(list.size()); for( bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList item : list ){ clonedList.add( (bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList)item.clone()); } object.list = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveMapSubInfo(Map<String, String> arrXtnInfoMap, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, String txDt, Integer txSeqNbr, ArrRealCore arrRealCore) throws BizApplicationException { _getArrSrvcBlckngSubInfoBiz().saveMapSubInfo(arrXtnInfoMap, arrSrvcBlckngSeqNbr, seqNbr, txDt, txSeqNbr, (ArrRealImpl)arrRealCore); }
public CaScrnMgmtSvcRemoveScrnInfoIn clone(){ try{ CaScrnMgmtSvcRemoveScrnInfoIn object= (CaScrnMgmtSvcRemoveScrnInfoIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ActorAddrOut getAddrInfo(String cntctPntLctnTpCd, String cntctMthdTpCd) throws BizApplicationException { List<ActorAddrOut> addrInfoList = getListAddrInfo(); for (ActorAddrOut addrInfo : addrInfoList) { if (cntctPntLctnTpCd.equals(addrInfo.getCtcptTpCd()) && cntctMthdTpCd.equals(addrInfo.getCntctMthdTpCd())) { return addrInfo; } } return null; }
public ArrPlnSvcGetExctnHstIn clone(){ try{ ArrPlnSvcGetExctnHstIn object= (ArrPlnSvcGetExctnHstIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public BigDecimal getPdCmpxCndTierNbr(){ return pdCmpxCndTierNbr; }
public void saveSubInfo(ActorCore actorCore, String ctcptId, int ctcptChngSeqNbr, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { _getActorCtcptSubInfoBiz().saveSubInfo((ActorImpl) actorCore, ctcptId, ctcptChngSeqNbr, xtnAtrbtNm, xtnAtrbtCntnt); }
public MkngMsgBsicO clone(){ try{ MkngMsgBsicO object= (MkngMsgBsicO)super.clone(); if ( this.mkngMsgRprtngLst== null ) object.mkngMsgRprtngLst = null; else{ java.util.List<bankware.corebanking.foreignexchange.importservice.service.dto.MkngMsgRprtngO> clonedList = new java.util.ArrayList<bankware.corebanking.foreignexchange.importservice.service.dto.MkngMsgRprtngO>(mkngMsgRprtngLst.size()); for( bankware.corebanking.foreignexchange.importservice.service.dto.MkngMsgRprtngO item : mkngMsgRprtngLst ){ clonedList.add( (bankware.corebanking.foreignexchange.importservice.service.dto.MkngMsgRprtngO)item.clone()); } object.mkngMsgRprtngLst = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public IpctMgmtSvcGetIpctTxEntryFullOut clone(){ try{ IpctMgmtSvcGetIpctTxEntryFullOut object= (IpctMgmtSvcGetIpctTxEntryFullOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int delete(CaArArrSrvcClassRIO arArrSrvcClassRIO) { int cnt = _getArArrSrvcClassR().delete(arArrSrvcClassRIO); _getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_SRVC_VLDTN_RULE_CACHE, null); return cnt; }
static boolean isValid(String value) { for (LevyCrncyDscdEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public CustRgstSvcAgrmntTpListIn clone(){ try{ CustRgstSvcAgrmntTpListIn object= (CustRgstSvcAgrmntTpListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public StStlmntXtnInfoDIO getStlmntXtnInfo(StStlmntXtnInfoDIO stStlmntXtnInfoDIO) throws BizApplicationException { logger.debug("StlmntCoreImpl==>getStlmntXtnInfo : stStlmntXtnInfoDIO: {}", stStlmntXtnInfoDIO); return _getStlmntXtnInfoBiz().getStlmntXtnInfo(stStlmntXtnInfoDIO); }
public Map<String, String> getMapSubInfo(AssetImpl asset, Integer assetThingSeqNbr){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 IValueObject subInfo = getSubInfoCache(asset, assetThingSeqNbr); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조원장 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(!_isSubInfoContainsField(asset.getAssetThingSubInfoKnd(assetThingSeqNbr), entry.getKey())) { continue; } // Casting 시 Null 방지 if (entry.getValue() != null ) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public CaCdMgmtSvcReoveCodeListIn clone(){ try{ CaCdMgmtSvcReoveCodeListIn object= (CaCdMgmtSvcReoveCodeListIn)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcCdInfoListIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcCdInfoListIn>(tblNm.size()); for( bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcCdInfoListIn item : tblNm ){ clonedList.add( (bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcCdInfoListIn)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DummyIO saveArrXtnAtrbtClass(CaArrXtnAtrbtCntrlClassSaveIn in) throws BizApplicationException { CaArrXtnAtrbtClassIn input = new CaArrXtnAtrbtClassIn(); input.setInstCd(in.getInstCd()); input.setXtnAtrbtNm(in.getXtnAtrbtNm()); input.setXtnAtrbtClassNm(in.getXtnAtrbtClassNm()); input.setBizDscd(in.getBizDscd()); input.setPdTpCd(in.getPdTpCd()); input.setPdTmpltCd(in.getPdTmpltCd()); input.setPdCd(in.getPdCd()); _getArrXtnAtrbtCntrlMgmt().saveArrXtnAtrbtClass(input); return new DummyIO(); }
public void saveSubInfo(AtCustRprsnSIO subInfoIO, CustRprsnImpl custRprsnImpl) throws BizApplicationException { // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustRprsnSIO oldSubInfoIO = getSubInfoCache(custRprsnImpl); if (oldSubInfoIO == null) { // PK setting subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId()); // insert _getAtCustRprsnSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoIO, oldSubInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(custRprsnImpl, oldSubInfoIO); // PK setting subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId()); // update _getAtCustRprsnSDso().update(oldSubInfoIO); } // 2. 캐시 저장 custRprsnImpl.setSubInfoCache(oldSubInfoIO); }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty( value)) { for (AssetTpEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@AssetXtnAtrbtNm"});//({0}) is invalid {1}. } return true; }
static boolean isValid(String value) { for (PdServiceTypeEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public int delete(CaAmAsmItmMIO amAsmItmMIO){ return _getAmAsmItmM().delete(amAsmItmMIO); }
public BfCardInfoPopUpSvcIn clone(){ try{ BfCardInfoPopUpSvcIn object= (BfCardInfoPopUpSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaBnkMgmtSvcGetBankCodeListOut clone(){ try{ CaBnkMgmtSvcGetBankCodeListOut object= (CaBnkMgmtSvcGetBankCodeListOut)super.clone(); if ( this.bnkList== null ) object.bnkList = null; else{ java.util.List<bankware.corebanking.configurationadmin.code.service.dto.CaBnkMgmtSvcGetBankCodeOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.code.service.dto.CaBnkMgmtSvcGetBankCodeOut>(bnkList.size()); for( bankware.corebanking.configurationadmin.code.service.dto.CaBnkMgmtSvcGetBankCodeOut item : bnkList ){ clonedList.add( (bankware.corebanking.configurationadmin.code.service.dto.CaBnkMgmtSvcGetBankCodeOut)item.clone()); } object.bnkList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CmRefAtrbtMIO> selectList(CmRefAtrbtMIO cmRefAtrbtMIO) { return _getCmRefAtrbtM().selectList(cmRefAtrbtMIO); }
public Map<String, String> getMapSubInfo(AssetTxCore assetTx) throws BizApplicationException { return _getAssetTxSubInfoBiz().getMapSubInfo((AssetTxImpl)assetTx); }
public boolean isCancelled() { return this.getArrSts().equals(ArrStsEnum.CANCELED); }
public CalculateInterestOut calculate(CalculateInterestIn in) { logger.debug("### CustomBalloonCalculationStrategy start"); logger.debug("### CustomBalloonCalculationStrategy #4-1 input: {}", in); CalculationIntervalsOut calIntervalsOut = _makeCalculationIntervals(in); CalculateInterestOut out = new CalculateInterestOut(); out.setIntCalIntervals(calIntervalsOut.getInterestCalculationSections()); out.setFeeCalTgtAmt(calIntervalsOut.getFeeCalTargetAmount()); return out; }
public List<ActorAddrOut> getListAddrInfo() throws BizApplicationException { return getActor().getListAddrInfo(); }
public CaLogInSvcGetLoginUserOut clone(){ try{ CaLogInSvcGetLoginUserOut object= (CaLogInSvcGetLoginUserOut)super.clone(); if ( this.roleList== null ) object.roleList = null; else{ java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaLogInSvcGetLoginUserRoleOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaLogInSvcGetLoginUserRoleOut>(roleList.size()); for( bankware.corebanking.configurationadmin.actor.service.dto.CaLogInSvcGetLoginUserRoleOut item : roleList ){ clonedList.add( (bankware.corebanking.configurationadmin.actor.service.dto.CaLogInSvcGetLoginUserRoleOut)item.clone()); } object.roleList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CaTblXtnAtrbtOut> getTableExtendAttribute(String instCd, String tblNm) throws BizApplicationException { return this.getTableExtendAttribute(instCd, tblNm, CaXtnAtrbtVrtnCmpsEnum.NA, null); }
public LnAplctnInfo clone(){ try{ LnAplctnInfo object= (LnAplctnInfo)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void apply(ArrStsChngIn arrStsChngIn) throws BizApplicationException { _setArrStatus( ArrStsEnum.APPLIED, arrStsChngIn ); _changeStatus( arrStsChngIn, null); }
public List<CaDocInqryIO> getCaDoc(CaDocInqryIO docInqryIn) throws BizApplicationException { List<CaDocInqryIO> docInqryList = null; List<CaDocBsicIO> docBsicList = _getDocBsic().searchDoc(docInqryIn); if(docBsicList != null && !docBsicList.isEmpty()) { docInqryList = new ArrayList<CaDocInqryIO>(); for(CaDocBsicIO docBsicIO : docBsicList) { CaDocInqryIO docInqryIO = new CaDocInqryIO(); docInqryIO.setInstCd(docInqryIn.getInstCd()); docInqryIO.setCmpntCd(docBsicIO.getCmpntCd()); docInqryIO.setDocId(docBsicIO.getDocId()); docInqryIO.setDocNm(docBsicIO.getDocNm()); docInqryIO.setDocStsCd(docBsicIO.getDocStsCd()); docInqryIO.setDocTpCd(docBsicIO.getDocTpCd()); docInqryIO.setRgstrnDocTmpltYn(docBsicIO.getRgstrnDocTmpltYn()); docInqryIO.setDocMkngTpCd(docBsicIO.getDocMkngTpCd()); docInqryList.add(docInqryIO); } } return docInqryList; }
public CaBizRuleInqrySvcBySrvcIn clone(){ try{ CaBizRuleInqrySvcBySrvcIn object= (CaBizRuleInqrySvcBySrvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public PreScrnngRslt clone(){ try{ PreScrnngRslt object= (PreScrnngRslt)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isValid(String type) { return ( "F".equalsIgnoreCase(type) || "L".equalsIgnoreCase(type) ) ; //added by Roh(change to simplify) }
public void saveSubInfo(ScrtyIntSubInfo subInfo, String txDt, Integer txSeqNbr, ScrtyIntImpl scrtyIntImpl) throws BizApplicationException{ // 0. null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {ScrtyIntSubInfo.class.getSimpleName()}); } logger.debug("## <AS> saveSubInfo -> subInfo = {} :: ", subInfo.getFieldValues()); // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 for(Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(entry.getValue() != null) { _getAtrbtChk().checkStandardAttribute(entry.getKey(), String.valueOf(entry.getValue())); } } // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsScrtyIntSIO subInfoCache = getSubInfoCache(scrtyIntImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsScrtyIntSIO(); subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId()); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 2-1. insert _getAsScrtyIntSDso().insert(subInfoCache); // 3. 캐시 저장 scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfo, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 2-2. update _getAsScrtyIntSDso().update(subInfoCache); } }
public CalculateInterestOut calculate(CalculateInterestIn in) { logger.debug("### CustomAmortizedCalculationStrategy start"); logger.debug("### CustomAmortizedCalculationStrategy #4-1 input: {}", in); CalculationIntervalsOut calIntervalsOut = _makeCalculationIntervals((CustomCalculateInterestIn) in); CalculateInterestOut out = new CalculateInterestOut(); out.setIntCalIntervals(calIntervalsOut.getInterestCalculationSections()); out.setPartialRepymntNotClearAmt(calIntervalsOut.getPartialRepaymentNotClearAmt()); out.setFeeCalTgtAmt(calIntervalsOut.getFeeCalTargetAmount()); out.setInstallmntAmt(calIntervalsOut.getInstallmentAmount()); out.setInstallmntAmtReCalHistory(calIntervalsOut.getInstallmentAmountReCalHistory()); return out; }
public PdCndQueryBizProcGetCndDetailRngCndValOut clone(){ try{ PdCndQueryBizProcGetCndDetailRngCndValOut object= (PdCndQueryBizProcGetCndDetailRngCndValOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr, AssetImpl assetImpl, Integer assetThingSeqNbr) { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)){ return; } // 1. 자산물건보조명세의 종류 조회 AssetThingSubInfoKndEnum subInfoKnd = assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr); // 2. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttribute(xtnAtrbtNm, xtnAtrbtCntnt); // 3. 보조원장 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(assetImpl, assetThingSeqNbr); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("assetId", assetImpl.getAssetBasicCache().getAssetId()); // PK setting subInfoCache.set("assetThingSeqNbr", assetThingSeqNbr); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(assetImpl, assetThingSeqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 3-1. insert _insertSubInfo(subInfoKnd, subInfoCache); // 4. 캐시 저장 _saveSubInfoCache(subInfoKnd, subInfoCache, assetImpl, assetThingSeqNbr); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(assetImpl, assetThingSeqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 3-2. update _updateSubInfo(subInfoKnd, subInfoCache); } }
public void deleteArrCustRXtnInfo(ArArrCustRXtnInfoDIO arArrCustRXtnInfoDIO, String txDt, Integer txSeqNbr) throws BizApplicationException { // 기존 확장속성 조회 ArArrCustRXtnInfoDIO arArrCustRXtnInfoOld = selectArrCustRXtnInfo(arArrCustRXtnInfoDIO); // 조회결과가 존재하지 않는 경우 에러처리 if (arArrCustRXtnInfoOld == null) { throw new BizApplicationException("AAPARE0064", new Object[] { arArrCustRXtnInfoDIO.getXtnAtrbtNm() }); } // 확장속성 update arArrCustRXtnInfoOld.setXtnAtrbtCntnt(null); updateArrCustRXtnInfo(arArrCustRXtnInfoOld, txDt, txSeqNbr); }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty( value)) { for (AssetScrtyIntRelStsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@assetScrtyIntRelStsCd"});//({0}) is invalid {1}. } return true; }
public Map<String, String> getMapSubInfo(StlmntCalcnSubInfoInqryIn stlmntCalcnSubInfoInqryIn) throws BizApplicationException { return _getStlmntCalcnSubInfoBiz().getMapSubInfo(_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn)); }
public CaOnlyDstbSendOut clone(){ try{ CaOnlyDstbSendOut object= (CaOnlyDstbSendOut)super.clone(); if ( this.dstbRqstSqlList== null ) object.dstbRqstSqlList = null; else{ java.util.List<java.lang.String> clonedList = new java.util.ArrayList<java.lang.String>(dstbRqstSqlList.size()); for( java.lang.String item : dstbRqstSqlList ){ clonedList.add(item); } object.dstbRqstSqlList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value){ for (ArrVldtnRequiredValEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public AprvlCndMgmtGetAprvlCondXtnInfoIO clone(){ try{ AprvlCndMgmtGetAprvlCondXtnInfoIO object= (AprvlCndMgmtGetAprvlCondXtnInfoIO)super.clone(); if ( this.listVal== null ) object.listVal = null; else{ java.util.List<java.lang.String> clonedList = new java.util.ArrayList<java.lang.String>(listVal.size()); for( java.lang.String item : listVal ){ clonedList.add(item); } object.listVal = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrReal> getListCustOwnArrBasedOnArrBasic(String custId, ArrStsEnum arrStsEnum, String bizDscd,String pdTpCd, String pdTmpltCd, String pdCd) throws BizApplicationException { return _getArrCustRelQryBizImpl().getArrRealListBasedOnArrBasic(custId, arrStsEnum, ArrCustRelEnum.MAIN_CONTRACTOR, bizDscd, pdTpCd, pdTmpltCd, pdCd, 0, 0, false); }
public String getArrKindCd(){ return arrKndCd; }
public CaActorRolePSvcSrchOut clone(){ try{ CaActorRolePSvcSrchOut object= (CaActorRolePSvcSrchOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(AsmImpl asm) { // 1. 보조명세 저장 할 Map 생성 Map<String, String> subInfoMap = new HashMap<String, String>(); // 2. 보조명세정보 조회(캐시로부터) IValueObject subInfo = getSubInfoCache(asm); // 3. 조회된 보조명세정보가 없으면 빈 Map 리턴 if(subInfo == null) { return subInfoMap; } // 4. 값이 null이 아닌 정보를 Map에 저장 for(Entry<String,Object> entry : subInfo.getFieldValues().entrySet()) { if(AsmSubInfo.FIELDS.get(entry.getKey())==null) { continue; } if(entry.getValue()!=null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public void terminateArrCustRelation(ArrCustRelTrmntnIn in) throws BizApplicationException { if(ArrCustRelEnum.MAIN_CONTRACTOR.getValue().equals(in.getArrCustRelCd())){ throw new BizApplicationException("AAPDPE0104"); } super.terminateArrCustRelation(in); }
public CrncyGetOut getCurrency(String crncyCd) throws BizApplicationException { _checkQueryInputArgument(crncyCd); CmCrncyCdMIO outParm = _selectCurrencyInformation(crncyCd, _getCmnContext().getStandardInstCode()); if (outParm == null) { return null; } return _setCurrencyInformationToOutput(outParm); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, ArrIssmdaImpl arrIssmdaImpl, String txDt, Integer txSeqNbr) throws BizApplicationException { // null check if (StringUtils.isEmpty(xtnAtrbtNm)){ return; } ArArrIssmdaSIO sqlIO = null; // 1.기존 보조명세 캐시 조회결과에 따라 insert/update 판단 ArrIssmdaSubInfo oldCache = (ArrIssmdaSubInfo) getSubInfoCache(arrIssmdaImpl); if (oldCache == null) { sqlIO = new ArArrIssmdaSIO(); sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd()); sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId()); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveArArrIssmdaSubHEmpty(arrIssmdaImpl, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, sqlIO); _getArArrIssmdaSDso().insert(sqlIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, oldCache)) { return; } sqlIO = new ArArrIssmdaSIO(); sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd()); sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId()); // 변경전 이력 저장 _saveArArrIssmdaSubH(arrIssmdaImpl, oldCache, txDt, txSeqNbr); // 기존 보조명세 캐시 VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(oldCache, sqlIO); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, sqlIO); // update _getArArrIssmdaSDso().update(sqlIO); } // 2. 캐시 저장 _saveSubInfoCache( sqlIO, arrIssmdaImpl); }
public void saveMapSubInfo(Map<String, String> subInfoMap, ArrTxCore arrTx) throws BizApplicationException{ _getArrTxSubInfoBiz().saveSubInfo(subInfoMap, (ArrTxImpl)arrTx); }
public AssetTxBsicInfoIO getBasicInfo() throws BizApplicationException { if(assetTxBasicCache == null) { return null; } AssetTxBsicInfoIO assetTxBsicInfoIO = new AssetTxBsicInfoIO(); DtoCoreUtils.setSubInfoIO(assetTxBasicCache, assetTxBsicInfoIO); return assetTxBsicInfoIO; }
public BfCndCndRelSvcIn clone(){ try{ BfCndCndRelSvcIn object= (BfCndCndRelSvcIn)super.clone(); object.aplyDt = (bxm.omm.format.wrapper.DateFormattedWrapper)this.aplyDt.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public RoleMgmtSvcGetRoleScrnRelListOut clone(){ try{ RoleMgmtSvcGetRoleScrnRelListOut object= (RoleMgmtSvcGetRoleScrnRelListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.common.role.service.dto.RoleMgmtSvcGetRoleScrnRelOut> clonedList = new java.util.ArrayList<bankware.corebanking.common.role.service.dto.RoleMgmtSvcGetRoleScrnRelOut>(tblNm.size()); for( bankware.corebanking.common.role.service.dto.RoleMgmtSvcGetRoleScrnRelOut item : tblNm ){ clonedList.add( (bankware.corebanking.common.role.service.dto.RoleMgmtSvcGetRoleScrnRelOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public PymntArrOpnSvcOut clone(){ try{ PymntArrOpnSvcOut object= (PymntArrOpnSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public PntCndImpl getCnd(PntCndIn in) throws BizApplicationException { // 조건 오브젝트 생성 및 초기화 // Get condition bean and initialize PntCndImpl cnd = new PntCndImpl(this, in); cnd.initialize(); // Return condition return cnd; }
public boolean checkDtoAttribute(Object obj) throws BizApplicationException { return _getDtoValidation().checkDtoAttribute(obj, 'I'); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, ArrIssmdaImpl arrIssmdaImpl, String txDt, Integer txSeqNbr) throws BizApplicationException { // null check if (StringUtils.isEmpty(xtnAtrbtNm)){ return; } ArArrIssmdaSIO sqlIO = null; // 1.기존 보조명세 캐시 조회결과에 따라 insert/update 판단 ArrIssmdaSubInfo oldCache = (ArrIssmdaSubInfo) getSubInfoCache(arrIssmdaImpl); if (oldCache == null) { sqlIO = new ArArrIssmdaSIO(); sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd()); sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId()); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveArArrIssmdaSubHEmpty(arrIssmdaImpl, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, sqlIO); _getArArrIssmdaSDso().insert(sqlIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, oldCache)) { return; } sqlIO = new ArArrIssmdaSIO(); sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd()); sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId()); // 변경전 이력 저장 _saveArArrIssmdaSubH(arrIssmdaImpl, oldCache, txDt, txSeqNbr); // 기존 보조명세 캐시 VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(oldCache, sqlIO); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, sqlIO); // update _getArArrIssmdaSDso().update(sqlIO); } // 2. 캐시 저장 _saveSubInfoCache( sqlIO, arrIssmdaImpl); }
public BigDecimal getTimeoutScnd(){ return timeoutScnd; }
public boolean isValid(String type) { return ( "B".equalsIgnoreCase(type) || "C".equalsIgnoreCase(type) ) ; //added by Roh(change to simplify) }
public AsmBsicInfoIO changeAsmStatus(String asmId,String asmStsCoreEnum, String rjctdRsnCoreEnum, String rjctdRsnCntnt) throws BizApplicationException { //1.조회 AsmBsicInfoIO in = getBasicInformation(asmId); //2.변경. AmAsmMIO amAsmMIO = _setAmAsmMIO(in, asmStsCoreEnum, rjctdRsnCoreEnum, rjctdRsnCntnt); _getAmAsmMDso().updateTerminate(amAsmMIO); //3.상태이력등록 _insertStsHistory(amAsmMIO); return _getBasicInfomation(amAsmMIO); } /** * 심사기본 상태변경 * <pre> * </pre> * @param in : (required) 심사식별자 * @param asmStsCd : (required) 심사상태코드 * @return AsmBsicInfoIO : {@link AsmBsicInfoIO}
public boolean isExistArrScrtyIntRelation(String arrScrtyIntRelCd, String scrtyIntId, String baseDt) throws BizApplicationException { return _getArrScrtyIntRelBiz().isExistArrScrtyIntRelation(arrScrtyIntRelCd, scrtyIntId, baseDt, this); } /** * <div class='en'> * @description * <pre> * Register arrangement-security interest relation. * </pre> * @note {@link ArrScrtyIntRelRgstrnIn} - required fields : scrtyIntId, arrScrtyIntRelCd, relStartDt, txDt, txSeqNbr, arrScrtyIntRelStsRsnCd * </div> * * <div class='ko'> * @description * <pre> * 계약설정관계를 등록한다. * </pre> * @note {@link ArrScrtyIntRelRgstrnIn}
public PdTemplateQuerySvcGetCndGrpTmpltDSubOut clone(){ try{ PdTemplateQuerySvcGetCndGrpTmpltDSubOut object= (PdTemplateQuerySvcGetCndGrpTmpltDSubOut)super.clone(); if ( this.rngCndBaseVal==null ) object.rngCndBaseVal = null; else object.rngCndBaseVal = (bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDRngBaseValOut)this.rngCndBaseVal.clone(); if ( this.listCndBaseVal== null ) object.listCndBaseVal = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDListBaseValOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDListBaseValOut>(listCndBaseVal.size()); for( bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDListBaseValOut item : listCndBaseVal ){ clonedList.add( (bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDListBaseValOut)item.clone()); } object.listCndBaseVal = clonedList; } if ( this.cndBtwnRel== null ) object.cndBtwnRel = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndRelOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndRelOut>(cndBtwnRel.size()); for( bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndRelOut item : cndBtwnRel ){ clonedList.add( (bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndRelOut)item.clone()); } object.cndBtwnRel = clonedList; } if ( this.cndValBtwnRel== null ) object.cndValBtwnRel = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndValRelOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndValRelOut>(cndValBtwnRel.size()); for( bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndValRelOut item : cndValBtwnRel ){ clonedList.add( (bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltDCndValRelOut)item.clone()); } object.cndValBtwnRel = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, ScrtyIntCore scrtyInt, String txDt, Integer txSeqNbr) throws BizApplicationException { _getScrtyIntSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, txDt, txSeqNbr, (ScrtyIntImpl) scrtyInt); }
public List<InterestCalculationSection> apply(ApplyInterestCalculationSectionExceptionIn in, List<InterestCalculationSection> intCalIntervals) throws BizApplicationException { final String balOvrduBaseDt = in.getBalOvrduBaseDt(); final String balOvrduStartDt = in.getBalOvrduStartDt(); final String holidyDfrdBalOvrduBaseDt = in.getHolidyDfrdBalOvrduBaseDt(); for (InterestCalculationSection interval : intCalIntervals) { List<CalculationType> typeList = new ArrayList<>(); for (CalculationType type : interval.getCalTps()) { typeList.add(type); // 이자계산유형구분 = 315 // AND 계산시작년월일 = 잔액연체시작일 if ("315".equals(type.getIntCalTpCd()) && type.getCalStartDt().equals(balOvrduStartDt)) { CalculationType t1 = type.clone(); t1.setIntCalTpCd("101"); // 약정이자 t1.setCalStartDt(balOvrduBaseDt); // 잔액연체기준일 t1.setCalEndDt(holidyDfrdBalOvrduBaseDt); // 휴일이연잔액연체기준일 typeList.add(t1); } } // 변경된 유형 반영 interval.setCalTps(typeList); } return intCalIntervals; }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty( value)) { for (ScrtyIntStsChngRsnEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@scrtyIntStsCd"});//({0}) is invalid {1}. } return true; }
public void remove(String instCd, String agrmntTpCd) throws BizApplicationException { //check required inputs if(StringUtils.isEmpty(instCd)){ throw new BizApplicationException("AAPCME0006", new String[] {"@instCd"}); }else if(StringUtils.isEmpty(agrmntTpCd)){ throw new BizApplicationException("AAPCME0006", new String[] {"@agrmntTpCd"}); } CaAtCustAgrmntMIO atCustAgrmntMIO = _getAtCustAgrmntMDso().select(instCd, agrmntTpCd); if(atCustAgrmntMIO == null){ throw new BizApplicationException("AAPATE0120"); } _getCaCmnContext().setHeaderColumn(atCustAgrmntMIO); atCustAgrmntMIO.setInstCd(instCd); _getAtCustAgrmntMDso().delete(atCustAgrmntMIO); }
public List<StlmntDtlIO> calculate(IntCalculatorIO intCalculatorIO) throws BizApplicationException { /* * check interest calculation condition */ _validateCommonInfo(intCalculatorIO); // For interest return StlmntDtlIO rtnStlmntDtlIO = new StlmntDtlIO(); /* * Make the target list of interest calculation */ List<StlmntCalcnDtlIO> stlmntCalcnDList = _makeSettlement(intCalculatorIO, rtnStlmntDtlIO); /* * Make the list of settlement result and return it */ List<StlmntDtlIO> stlmntDtlIOList = super.makeInterestSettlementInformation(intCalculatorIO, stlmntCalcnDList, CalcnBaseAmtTpEnum.ACMLTD_AMT.getValue(), rtnStlmntDtlIO); return stlmntDtlIOList; }
public ArArrAplyIntRtDIO select(ArArrAplyIntRtDIO arArrAplyIntRtDIO) { return _getArArrAplyIntRtD().select(arArrAplyIntRtDIO); }
public CaXpExtrnlIntrfcMsgInfoDIO select(CaXpExtrnlIntrfcMsgInfoDIO xpExtrnlIntrfcMsgInfoDIO) { return _getCaXpExtrnlMsgInfoD().select(xpExtrnlIntrfcMsgInfoDIO); }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { String cd = ""; if(supplInfoVal.get(CCM03.CD) != null) { cd = supplInfoVal.get(CCM03.CD).toString(); } AmtTpDtlIO amtTpDtlIO = _getAmtTpXtn().getAmountType(cd); if(amtTpDtlIO == null || !amtTpDtlIO.getMostUpAmtTpCd().equals(AmtTpEnum.FEE.getValue())) { return false; } return true; }
public CaLeasePrtctnMgmtSvcRemoveLeasePrtctnIn clone(){ try{ CaLeasePrtctnMgmtSvcRemoveLeasePrtctnIn object= (CaLeasePrtctnMgmtSvcRemoveLeasePrtctnIn)super.clone(); if ( this.leasePrtctnList== null ) object.leasePrtctnList = null; else{ java.util.List<bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn>(leasePrtctnList.size()); for( bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn item : leasePrtctnList ){ clonedList.add( (bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn)item.clone()); } object.leasePrtctnList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void registerAssetCustRel(AssetCustRelRgstrnIn rgstrnIn) throws BizApplicationException{ // 등록할 고객의 상태 검증 _checkCustAlive(rgstrnIn.getCustId()); super.registerAssetCustRel(rgstrnIn); }
public CashChargeSvcOut clone(){ try{ CashChargeSvcOut object= (CashChargeSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<StlmntDtlIO> calculate(IntCalculatorIO intCalculatorIO) throws BizApplicationException { /* * Get lists of target of interest calculation */ List<StlmntCalcnDtlIO> stlmntCalcnDList = _calculateInterest(intCalculatorIO); if(logger.isDebugEnabled()) { logger.debug("##j stlmntDtlIOList: {} ", stlmntCalcnDList); } /* * Make settlement result of the interest */ List<StlmntDtlIO> stlmntDtlIOList = super.makeInterestSettlementInformation(intCalculatorIO, stlmntCalcnDList, CalcnBaseAmtTpEnum.BALANCE.getValue(), null); return stlmntDtlIOList; }
public List<ArrIntRt> getListArrIntRt(Arrangement arr, PdIntRtStrctrClCdEnum pdIntRtStrctr, String baseDt) throws BizApplicationException { if (StringUtils.isEmpty(baseDt)) { baseDt = ArrCmnUtil.getRckngDt(_getCmnContext()); } ArrIntRtIn arrIntRtIn = new ArrIntRtIn(); arrIntRtIn.setArr(arr); arrIntRtIn.setPdIntRtStrctr(pdIntRtStrctr); arrIntRtIn.setPrcsDt(baseDt); arrIntRtIn.setCrncyCd(arr.getCrncyCd()); arrIntRtIn.setStartDt(baseDt); arrIntRtIn.setEndDt(DateUtils.getDateDayAfter(CCM01.ONE,baseDt)); arrIntRtIn.setIntClcltYn(CCM01.NO); arrIntRtIn.setIsGenerate(false); return getListArrIntRt(arrIntRtIn); }
static boolean isValid(String value){ for (SndRcvTrgtDscdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public Pd getPd() { return pd; }
public ActorRgstSvcCtcptXtnIn clone(){ try{ ActorRgstSvcCtcptXtnIn object= (ActorRgstSvcCtcptXtnIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void removeExtrnlIntrfcMsgAuthInfo(CaExtrnlIntrfcMsgAuthInfoIO msgAuthInfo) throws BizApplicationException { _checkInputValidation(msgAuthInfo); int result = _getXpExtrnlAuthInfoDDso().delete(_setInputValidation(msgAuthInfo)); if(result == 0) throw new BizApplicationException("AAPSTE0047", null); // Failed to change the information. }
public void saveMapSubInfo(Map<String, String> assetTxSubInfoMap, AssetTxCore assetTx) throws BizApplicationException { _getAssetTxSubInfoBiz().saveMapSubInfo(assetTxSubInfoMap, (AssetTxImpl) assetTx); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, CustRprsnImpl custRprsnImpl) throws BizApplicationException { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustRprsnSIO subInfoIO = getSubInfoCache(custRprsnImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtCustRprsnSIO(); subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId()); // 입력된 속성명과 속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // insert _getAtCustRprsnSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(custRprsnImpl, subInfoIO); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // update _getAtCustRprsnSDso().update(subInfoIO); } // 2. 캐시 저장 custRprsnImpl.setSubInfoCache(subInfoIO); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, CustImpl custImpl) throws BizApplicationException { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustSIO subInfoIO = getSubInfoCache(custImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtCustSIO(); subInfoIO.setCustId(custImpl.getCustId()); // 입력된 속성명과 속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // insert _getAtCustSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(custImpl, subInfoIO); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // update _getAtCustSDso().update(subInfoIO); } // 2. 캐시 저장 custImpl.setSubInfoCache(subInfoIO); }
public String getSubInfo(String xtnAtrbtNm, AprslCore aprslCore, Integer aprslThingSeqNbr) throws BizApplicationException { return _getAprslThingSubInfoBiz().getSubInfo(xtnAtrbtNm, (AprslImpl)aprslCore, aprslThingSeqNbr); }
public void changeArrStatus(ArrStsChngIn arrStsChngIn, ArrStsChngAdtnlIn arrStsChngAdtnlIn) throws BizApplicationException { _getArrRealCoreFundamentalAgent().changeArrStatus(arrStsChngIn, arrStsChngAdtnlIn, false, this); }
public Map<String, String> getMapSubInfo(ActorImpl actorImpl) throws BizApplicationException { Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보조명세 캐시 조회 IValueObject subInfo = getSubInfoCache(actorImpl); // 2. 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보조명세 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public int deleteServiceProfileAttribute(CaSrvcPrflAtrbtInfoIO in) throws BizApplicationException { _checkServiceProfileAttributeName(in); // status update for SrvcPrflAtrbtD this._deleteSvSrvcPrflAtrbtD(in); // status update for SvInstSrvcPrflD this._deleteSvInstSrvcPrflD(in); return 0; }
public AplctnRgstSvcGetOut clone(){ try{ AplctnRgstSvcGetOut object= (AplctnRgstSvcGetOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<InsrncRltdAssetOut> getListRelatedAsset(String insrncId) throws BizApplicationException { List<AsAssetInsrncRIO> asAssetInsrncRList = _getAsAssetInsrncRDso().selectAsset(_getCmnContextCore().getInstCode(), insrncId); List<InsrncRltdAssetOut> rltdAssetList = new ArrayList<InsrncRltdAssetOut>(); for(AsAssetInsrncRIO item : asAssetInsrncRList) { InsrncRltdAssetOut rltdAsset = new InsrncRltdAssetOut(); rltdAsset.setAssetId(item.getAssetId()); rltdAsset.setAssetInsrncRelStsCd(item.getAssetInsrncRelStsCd()); rltdAsset.setRelStartDt(item.getRelStartDt()); rltdAsset.setRelEndDt(item.getRelEndDt()); rltdAssetList.add(rltdAsset); } return rltdAssetList; }
public GlQuerySvcAcctgDtOut clone(){ try{ GlQuerySvcAcctgDtOut object= (GlQuerySvcAcctgDtOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if (!this.getArrangementCore().isReal()) return; switch (arrSrvcTpCd) { case "OpenDeposit": _doOpenValidation(); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public void getLogSeqNbr(CmnJrnzArea cmnJrnzArea, String chnlCd) throws BizApplicationException { logger.debug("<AC> AcctgJrnlCmnCustomImpl _getLogSeqNbr CmnJrnzArea logSeqNbr : {}", cmnJrnzArea.getLogSeqNbr()); //20210121 CmnJrnzArea의 로그일련번호가 이미 외부에서 채번된 상태이면 채번하지 않음. if(cmnJrnzArea.getLogSeqNbr()!=null && cmnJrnzArea.getLogSeqNbr().compareTo(BigDecimal.ZERO)!=0) { return; } String logSeqNbr = null; // 로그일련번호 셋팅 if(!_getCmnContext().isChannelAtm() && !_getCmnContext().isChannelTellerWindow()) { // if (!ChannelEnum.CD_ATM.getValue().equals(chnlCd) && // !ChannelEnum.TELLER_WINDOW.getValue().equals(chnlCd)) { //Double d = Math.random() * Double.parseDouble("999999999999999") + 1; Double d = new SecureRandom().nextDouble()*Double.parseDouble("999999999999999") + 1; logSeqNbr = String.valueOf(d.longValue()); } else { // 로그일련번호 채번 logSeqNbr = _getNbrg().getNumbering(NumberingCoreEnum.LOG_SEQUENCE_NUMBER.getValue()); //log sequence number } cmnJrnzArea.setLogSeqNbr(new BigDecimal(logSeqNbr)); if(logger.isDebugEnabled()){ logger.debug("## AcctgJrnlCmnCustomImpl > logSeqNbr : {}", logSeqNbr); }
public CaClSysIO saveClassificationHierarchy(CaClSysIO in) throws BizApplicationException { CaCmClHrarcyMIO daoIn = _getInputClassificationHierarchy(in); CaCmClHrarcyMIO cmClHrarcyMIO = _getCmClHrarcyMDso().selectWithStatusAll(daoIn.getClHrarcyId()); if (cmClHrarcyMIO == null) { _getCmClHrarcyMDso().insert(daoIn); } else { _getCmClHrarcyMDso().update(daoIn); } // save multi language CaTrnsfrLngSaveListIn mltLngIn = new CaTrnsfrLngSaveListIn(); List<CaTrnsfrLngSaveIn> mltLngListIn = new ArrayList<CaTrnsfrLngSaveIn>(); CaTrnsfrLngSaveIn mltUseLng = new CaTrnsfrLngSaveIn(); mltUseLng.setTrnsfrKndCd(CCM01.TRANS_CL_HRARCY); mltUseLng.setTrnsfrOriginKeyVal(in.getClHrarcyId()); mltUseLng.setQryUnitCd(in.getClHrarcyId()); mltUseLng.setLngCd(_getCmnContext().getLanguageCode()); mltUseLng.setTrnsfrRsltVal(in.getClHrarcyNm()); mltLngListIn.add(mltUseLng); if(!CCM01.LNG_ENG.equals(_getCmnContext().getLanguageCode())) { CaTrnsfrLngSaveIn mltEngLng = new CaTrnsfrLngSaveIn(); mltEngLng.setTrnsfrKndCd(CCM01.TRANS_CL_HRARCY); mltEngLng.setTrnsfrOriginKeyVal(daoIn.getClHrarcyId()); mltEngLng.setQryUnitCd(daoIn.getClHrarcyId()); mltEngLng.setLngCd(CCM01.LNG_ENG); mltEngLng.setTrnsfrRsltVal(in.getClHrarcyEngNm()); mltLngListIn.add(mltEngLng); } mltLngIn.setTrnsfrLngList(mltLngListIn); _getTrnsfrLng().saveTransferLanguage(mltLngIn); CaClSysIO out = _getOutputClassificationHierarchy(daoIn); return out; }
public List<ActorRoleActorRoleRIO> getListActorRoleActorRoleRelation() throws BizApplicationException { return getActor().getListActorRoleActorRoleRelation(); }
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbCnstncyCmNbrgRuleMDso().selectListForConsistency(pageOffSet, pgCnt); }
public String getUnmaskId() throws BizApplicationException { return _getContextHeader().getUnmaskId(); }
public void deleteDocClassificationInfo(String instCd, CaDocClIO docClIO) throws BizApplicationException { _getDocCl().delete(instCd, docBsicIO, docClIO); }
public List<ArrCashFlowIO> simulateArrCashFlowScheduleForEarlyRpymnt(ArrReal arr, String baseDt, BigDecimal rpymntAmt, IntCalcnLnRsltOut intCalcRsltOut) throws BizApplicationException { if(StringUtils.isEmpty(baseDt)) { baseDt = _getCmnContext().getTxDate(); } BigDecimal lnInstlmntAmt = intCalcRsltOut.getLnInstlmntAmt(); if (logger.isDebugEnabled()) { logger.debug("## simulateArrCashFlowScheduleForEarlyRpymnt -> intCalcRsltOut = {} :: ", intCalcRsltOut.getFieldValues()); logger.debug("## simulateArrCashFlowScheduleForEarlyRpymnt -> rpymntAmt = {} :: ", rpymntAmt); logger.debug("## simulateArrCashFlowScheduleForEarlyRpymnt -> lnInstlmntAmt = {} :: ", lnInstlmntAmt); logger.debug("## simulateArrCashFlowScheduleForEarlyRpymnt -> earlyRepaymentTgtAmt = {} :: ", intCalcRsltOut.getEarlyRepaymentTgtAmt()); } //조기상환금액 Row 추가 BigDecimal earlyRepaymentTgtAmt = intCalcRsltOut.getEarlyRepaymentTgtAmt(); // 조기상환대상금액 BigDecimal calcnBaseAmt = earlyRepaymentTgtAmt; if (intCalcRsltOut.getLnInstlmntAmtCalcnBal() != null) { calcnBaseAmt = calcnBaseAmt.add(intCalcRsltOut.getLnInstlmntAmtCalcnBal()); // 할부금계산잔액 } ArrCashFlowIO arrCashFlow = new ArrCashFlowIO(); arrCashFlow.setInstCd(arr.getInstCd()); arrCashFlow.setArrId(arr.getArrId()); arrCashFlow.setSctnSeqNbr(0); arrCashFlow.setSeqNbr(0); /** Amount Type Code(Early Repayment Fee) */ arrCashFlow.setAmtTpCd(AmtTpEnum.PRNCPL.getValue()); //원금 arrCashFlow.setCrncyCd(arr.getCrncyCd()); arrCashFlow.setCalcnBaseAmt(calcnBaseAmt); /** calculation from date --> early repayment date */ arrCashFlow.setSctnStartDt(baseDt); /** calculation to date --> early repayment date */ arrCashFlow.setSctnEndDt(baseDt); /** scheduled repayment date --> early repayment date */ arrCashFlow.setRpymntSchdldDt(baseDt); arrCashFlow.setAplyIntRt(BigDecimal.ZERO); arrCashFlow.setTdyRpymntAmt(earlyRepaymentTgtAmt); arrCashFlow.setRpymntSchdldAmt(earlyRepaymentTgtAmt); arrCashFlow.setRpymntAmt(earlyRepaymentTgtAmt); /** repayment status as Unpaid */ arrCashFlow.setRpymntStsCd(RpymntStsEnum.FULL_PAID.getValue()); arrCashFlow.setCrtnBaseDt(arrCashFlow.getSctnStartDt()); List<ArrCashFlowIO> arrCashFlowValList = new ArrayList<ArrCashFlowIO>(); arrCashFlowValList.add(arrCashFlow); /** * 확장정보 세팅 */ Map<String, Object> xtdInfo = new HashMap<String, Object>(); xtdInfo.put("arrOpnDt", arr.getArrOpnDt()); xtdInfo.put("arrMtrtyDt", arr.getArrMtrtyDt()); xtdInfo = _getLnIntCalculatorCmnBiz().setXtnInfo(arr, xtdInfo); xtdInfo.put(IntCalcXtnInfoEnum.LN_TX_TP_DSCD.getValue() , TxTpDscdEnum.DEPOSIT.getCode()); // 상환유형 11:입금 xtdInfo.put(IntCalcXtnInfoEnum.CRNCY_CD.getValue() , arr.getCrncyCd() ); // 통화코드 xtdInfo.put(IntCalcXtnInfoEnum.RPYMNT_AMT.getValue() , rpymntAmt ); // 상환원금 xtdInfo.put(IntCalcXtnInfoEnum.PAYMENT_DATE.getValue() , baseDt ); // 상환일자 xtdInfo.put(IntCalcXtnInfoEnum.CASH_TRNSFR.getValue() , CashTrnsfrEnum.TRNSFR ); // 상환자금유형코드(2:대체) xtdInfo.put(IntCalcXtnInfoEnum.CASH_TRNSFR_AMT.getValue() , BigDecimal.ZERO ); // 상환자금금액 xtdInfo.put(IntCalcXtnInfoEnum.IS_SMLTN.getValue() , Boolean.TRUE ); // 시뮬레이션여부 xtdInfo.put(IntCalcXtnInfoEnum.ARR_TX_SEQ_NBR.getValue() , 0 ); // 거래번호 xtdInfo.put(IntCalcXtnInfoEnum.RPYMNT_CNT.getValue() , 0 ); // 상환회차 xtdInfo.put(IntCalcXtnInfoEnum.INT_PYMNT_DT.getValue() , arr.getArrMtrtyDt() ); // 이자납입기한 xtdInfo.put(IntCalcXtnInfoEnum.PRTL_RPYMNT_AF_RPYMNT_DSCD.getValue() , PrtlRpymntAfRpymntEnum.RECALCULATION.getValue()); //일부상환후상환코드 (2:재계산) xtdInfo.put(ArrXtnInfoEnum.LOAN_INSTALLMENT_AMOUNT.getValue() , lnInstlmntAmt ); //변경 후 할부금 // xtdInfo.put(IntCalcXtnInfoEnum.INT_CAL_DTL_TP_DSCD.getValue() , IntCalDtlTpEnum.PARTIAL_REPAYMENT.getCode()); //01:신규, 02:납입일변경, 03:조기상환, 04:금리변경, 09:일결산 // xtdInfo.put("ovrduBaseDtForEarlyRepay" , intCalcRsltOut.getOvrduBaseDt() ); // xtdInfo.put("lastPymntDtForEarlyRepay" , intCalcRsltOut.getLastIntCalcnDt()); // xtdInfo.put("nxtPymntDtForEarlyRepay" , intCalcRsltOut.getNxtPymntDt() ); // xtdInfo.put("lastPymntNthForEarlyRepay" , intCalcRsltOut.getLastPymntNth() ); if (_getLnIntCalculatorCmnBiz().isBalloonPayment(arr)) { BigDecimal lastBal = _getArrBalMngr().getArrPrincipalBal(arr, arr.getCrncyCd()).getLastBal(); xtdInfo.put("loanBalForEarlyRepay" , lastBal.subtract(intCalcRsltOut.getEarlyRepaymentTgtAmt())); } else { xtdInfo.put("loanBalForEarlyRepay" , intCalcRsltOut.getLnInstlmntAmtCalcnBal()); } StlmntRsltVal stlmntRsltVal = calculateInterestRepayment(arr, xtdInfo); List<ArrCashFlowIO> arrCashFlowList = stlmntRsltVal.getIntCalcnLnRslt().getArrCashFlowList(); arrCashFlowValList.addAll(arrCashFlowList); // CashFlow 할부금 추가 logger.debug("## _setModifiedInstlmntAmt -> BF arrCashFlowValList.size() = {} :: ", arrCashFlowValList.size()); List<ArrCashFlowIO> instlmntAmtList = intCalcRsltOut.getArrCashFlowListInslmntAmtMdfctn(); arrCashFlowValList.addAll(instlmntAmtList); logger.debug("## _setModifiedInstlmntAmt -> AF arrCashFlowValList.size() = {} :: ", arrCashFlowValList.size()); return _getArrCashFlowProvider().getListMergedArrCashFlow(arr, baseDt, arrCashFlowValList, CashFlwChngRsnCdEnum.REPAYMENT.getValue()); }
public List<CaInstSrvcIO> getListInstService(String instCd, String cmpntCd, String baseDt) throws BizApplicationException { String sInstCd = instCd; if (StringUtils.isEmpty(instCd)) sInstCd = _getCaCmnContext().getInstCode(); List<CaSvInstSrvcMIO> svInstSrvcMIOList; List<CaInstSrvcIO> instSrvcList = new ArrayList<CaInstSrvcIO>(); if (baseDt == null) baseDt = CCM01.MIN_DATE; if (StringUtils.isEmpty(cmpntCd)) { svInstSrvcMIOList = _getSvInstSrvcMDso().selectListByInstCdAndBaseDt(sInstCd, baseDt); } else { CaSvInstSrvcMIO svInstSrvcMIO = new CaSvInstSrvcMIO(); svInstSrvcMIO.setInstCd(sInstCd); svInstSrvcMIO.setCmpntCd(cmpntCd); svInstSrvcMIO.setAplyStartDt(baseDt); svInstSrvcMIOList = _getSvInstSrvcMDso().selectListByCmpntCd(svInstSrvcMIO); } for (CaSvInstSrvcMIO svInstSrvcMIO : svInstSrvcMIOList) { CaInstSrvcIO instSrvc = _setInstitutionService(svInstSrvcMIO); instSrvcList.add(instSrvc); } return instSrvcList; }
private BfCndTestSvcOut getCndGrpCd(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); String output = bfCnd.getCndGrpCd(); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public Integer getCustCountByLoginIdNbr(String loginIdNbr, String paymentInstYn) throws BizApplicationException { return _getCustBsicXtnBiz().getCustCountCustByLoginIdentificationNumber(_getCmnContext().getInstCode(), loginIdNbr, paymentInstYn); }
public List<ArrCashFlowIO> getListArrDueDateAdvent(String instCd, String deptId, String inqryStartDt, String inqryEndDt) throws BizApplicationException { return _getArrCashFlowBiz().getListArrDueDateAdvent(instCd, deptId, inqryStartDt, inqryEndDt); }
public LnArrCndChngDtlInqryIn clone(){ try{ LnArrCndChngDtlInqryIn object= (LnArrCndChngDtlInqryIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CashTransitSvcAprvCashTransit clone(){ try{ CashTransitSvcAprvCashTransit object= (CashTransitSvcAprvCashTransit)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<StlmntDtlIO> calculate(IntCalculatorIO intCalculatorIO) throws BizApplicationException { if(logger.isDebugEnabled()) { logger.debug("##목표금액방식 intCalculatorIO: {} ", intCalculatorIO); } /* * Make the target list of interest calculation */ List<StlmntCalcnDtlIO> stlmntCalcnDList = _makeDemandDepositStlmnt(intCalculatorIO); /* * Calculate interest by accumulated amount */ super.calculateIntByAcmltd(intCalculatorIO.getArr(), intCalculatorIO.getCrncyCd(), stlmntCalcnDList); /** * 2018.04.30 (2018.06.19 적용) * 예보용 보험금지급공고일 이전 최종 결산기준일 구간에 적수 금액 변경 * 원금 -> 원리금 */ setInterestByDepositerInfoExtraction(intCalculatorIO, stlmntCalcnDList); /* * Make the list of settlement result and return it */ return super.makeInterestSettlementInformation(intCalculatorIO, stlmntCalcnDList, CalcnBaseAmtTpEnum.ACMLTD_AMT.getValue(), null); }
public PswdChngMgmtSvcOut clone(){ try{ PswdChngMgmtSvcOut object= (PswdChngMgmtSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrReal> getListArrBasedOnStsHistory(String custId, ArrCustRelEnum arrCustRelEnum, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt,String inqryEndDt) throws BizApplicationException { return _getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId, arrCustRelEnum, null, null, null, null, curArrSts, arrSts, inqryStartDt, inqryEndDt); }
public ActorDueDlgncInfo getDueDiligenceInfoDetail(String dueDlgncDscd, int dueDlgncSeqNbr) throws BizApplicationException { // due diligence information + extend information ActorDueDlgncInfo dueDlgncInfo = super.getDueDiligenceInfoDetailByEav(dueDlgncDscd, dueDlgncSeqNbr); // subsidiary information Map<String, String> subInfoMap = _getActorDueDlgncSubInfoBiz().getMapSubInfo(this, dueDlgncDscd, dueDlgncSeqNbr); if (dueDlgncInfo != null) { dueDlgncInfo.getDueDlgncXtnInfoMap().putAll(subInfoMap); } return dueDlgncInfo; }
public String checkPassword(String pswd) throws BizApplicationException{ //check required inputs if (StringUtils.isEmpty(pswd)) { throw new BizApplicationException("AAPCME0006", new String[] {"@pswd"}); } return _getStaffLoginBiz().checkPassword(getStaffBasicInfo(), pswd); }
public ArrCnd getArrCnd(PdCndEnum arrCndEnum) throws BizApplicationException { return (ArrCnd) super.getArrCndCore(arrCndEnum.getValue()); }
public List<StlmntDtlIO> simulate(Arrangement arr, InterestTransactionTypeEnum intTxTp, List<StlmntDtlIO> intStlmntDtlList, Map<String, String> xtdInfo) throws BizApplicationException { if(logger.isDebugEnabled()) { logger.debug("HHH TaxCalculator : simulate"); } return super.simulate((ArrangementCore)arr, intTxTp.getValue(), intStlmntDtlList, xtdInfo); } // 비사용로직 주석처리 // private void _checkInputParameter(InterestTransactionTypeEnum intTxTp, int txSeqNbr, boolean smltn) throws BizApplicationException { // // if(!smltn && !InterestTransactionTypeEnum.DEPOSITOR_INFO_EXTRACTION.equals(intTxTp)) { // // 거래일련번호 필수입력 검증 // if (txSeqNbr == 0){ // // this transaction sequence number is not numbered in this transaction // throw new BizApplicationException("AAPSTE0117", null); // } // } // }
public PdRqstIntCalcnSmltnIn clone(){ try{ PdRqstIntCalcnSmltnIn object= (PdRqstIntCalcnSmltnIn)super.clone(); if ( this.schdlCntnt== null ) object.schdlCntnt = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnschdlList> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnschdlList>(schdlCntnt.size()); for( bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnschdlList item : schdlCntnt ){ clonedList.add( (bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnschdlList)item.clone()); } object.schdlCntnt = clonedList; } if ( this.ovrduRt== null ) object.ovrduRt = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntOvrduRtList> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntOvrduRtList>(ovrduRt.size()); for( bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntOvrduRtList item : ovrduRt ){ clonedList.add( (bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntOvrduRtList)item.clone()); } object.ovrduRt = clonedList; } if ( this.agrmntRt== null ) object.agrmntRt = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntRtList> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntRtList>(agrmntRt.size()); for( bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntRtList item : agrmntRt ){ clonedList.add( (bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnAgrmntRtList)item.clone()); } object.agrmntRt = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String executeWatchListFiltering(int txSeqNbr) throws BizApplicationException { if(txSeqNbr == CCM01.ZERO){ throw new BizApplicationException("AAPCME0006", new String[] {"@txSeqNbr"}); } //assemble watch list filtering input WatchListFilterIn watchListFilterIn = _assembleWatchListFilterIn(); //execute watch list filtering WatchListFilterRule watchListFilterRule = (WatchListFilterRule) CbbApplicationContext.getBean("WatchListFilterRuleSampleImpl"); //FIXME ActorDueDlgncRgstIn dueDlgncRgstIn = watchListFilterRule.executeWatchListFiltering(watchListFilterIn); String dueDlgncDscd = dueDlgncRgstIn.getDueDlgncDscd(); if(dueDlgncRgstIn == null || !DueDlgncDsEnum.EDD.getValue().equals(dueDlgncDscd)){ return null; } // separate subsidiary information from extend information Map<String, String> subInfoMap = _getActorDueDlgncSubInfoBiz().getMapSubInfoCrtn(dueDlgncRgstIn.getDueDlgncXtnInfoList()); Integer dueDlgncSeqNbr = null; //set transaction sequence number dueDlgncRgstIn.setStsChngTxSeqNbr(txSeqNbr); if (this.isDueDiligenceExist(dueDlgncDscd, DueDlgncStsEnum.NORMAL.getValue())) { //modify due diligence status(normal -> target) ActorDueDlgncMdfyIn dueDlgncMdfyIn = _convertDueDlgncRgstToMdfyIn(dueDlgncRgstIn); super.modifyDueDiligenceInfoByEav(dueDlgncMdfyIn, false); dueDlgncSeqNbr = dueDlgncMdfyIn.getDueDlgncSeqNbr(); } else if (this.isDueDiligenceExist(dueDlgncDscd, DueDlgncStsEnum.TARGET.getValue())) { //modify due diligence target information ActorDueDlgncMdfyIn dueDlgncMdfyIn = _convertDueDlgncRgstToMdfyIn(dueDlgncRgstIn); super.modifyDueDiligenceInfoByEav(dueDlgncMdfyIn, true); dueDlgncSeqNbr = dueDlgncMdfyIn.getDueDlgncSeqNbr(); } else { // create due diligence information and register information change history super.registerDueDiligenceInfoByEav(dueDlgncRgstIn); dueDlgncSeqNbr = dueDlgncRgstIn.getDueDlgncSeqNbr(); } // save subsidiary information _getActorDueDlgncSubInfoBiz().saveMapSubInfo(this, dueDlgncDscd, dueDlgncSeqNbr, subInfoMap); return dueDlgncDscd; }
public List<XtnCdIO> getListCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { List<AmtTpDtlIO> amtTpList = _getAmtTpXtn().getListLowerAmountType(AmtTpEnum.FEE.getValue()); List<XtnCdIO> xtnCdIOs = new ArrayList<XtnCdIO>(); String lngCd = supplInfoVal == null ? null : String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue())); if( amtTpList == null || amtTpList.isEmpty() ) return xtnCdIOs; for(AmtTpDtlIO out : amtTpList) { if (!out.getUpAmtTpCd().equals(AmtTpEnum.FEE.getValue())) { XtnCdIO xtnCdIO = new XtnCdIO(); xtnCdIO.setCd(out.getAmtTpCd()); if(StringUtils.isEmpty(lngCd)) { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CdNbrEnum.AMOUNT_TYPE_CD.getValue() + out.getAmtTpCd())); } else { xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL, CdNbrEnum.AMOUNT_TYPE_CD.getValue() + out.getAmtTpCd(), lngCd)); } xtnCdIOs.add(xtnCdIO); } } return xtnCdIOs; }
public void saveSubInfo(AprslRqstSubInfo subInfo, AprslRqstImpl aprslRqstImpl) throws BizApplicationException{ // 0. null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {AprslRqstSubInfo.class.getSimpleName()}); } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 for(Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(entry.getValue() != null) { _getAtrbtChk().checkStandardAttribute(entry.getKey(), String.valueOf(entry.getValue())); } } // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsAprslRqstSIO subInfoCache = getSubInfoCache(aprslRqstImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsAprslRqstSIO(); subInfoCache.setAprslRqstId(aprslRqstImpl.getAprslRqstBasicCache().getAprslRqstId()); //PK setting // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 2-1. insert _getAsAprslRqstSDso().insert(subInfoCache); // 3. 캐시 저장 aprslRqstImpl.setAprslRqstSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfo, subInfoCache)) { return; } // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 2-2. update _getAsAprslRqstSDso().update(subInfoCache); } }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (CaDocMakingTpEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] { value, "@docMkngTpCd" }); } return true; }
public static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (QuestionnaireIdEnum enumObject: values()) { if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] { value, "@qstnrId" }); } return true; }
public List<PdPdRelOut> getRelBtwnPdsBackward(PdPdRelIn in) { /** * DataCache START */ String uKey = PdUtil.concatenateKeys(Arrays.asList(pdPdM.getInstCd(), getPdInfoDscd() + "Backward", pdPdM.getPdCd() + "Backward", in.getPdBtwnRelCd())); // Get cache data List<PdPdRelOut> list = _getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_PD_RELATION_LIST_CACHE, uKey); if (CollectionCoreUtils.isEmpty(list)) { PdPdRelationBackwardListIn inDao = new PdPdRelationBackwardListIn(); inDao.setInstitutionId(pdPdM.getInstCd()); inDao.setPdCd(pdPdM.getPdCd()); inDao.setPdBetweenRelationCd(in.getPdBtwnRelCd()); inDao.setRelationPdInfoDscd(in.getRelPdInfoDscd()); inDao.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(), _getAplyTmString(in.getAplyTm()))); list = _convertToPdPdRelOut(_getPdCore().getListPdPdRelationBackward(inDao)); // 값이 없으면 Dummy 저장 if (CollectionCoreUtils.isEmpty(list)) { PdPdRelOut dummy = new PdPdRelOut(); dummy.setPdCd(CPD01.DUMMY); List<PdPdRelOut> dummyList = new ArrayList<>(); dummyList.add(dummy); _getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_PD_RELATION_LIST_CACHE, uKey, dummyList); } else { _getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_PD_RELATION_LIST_CACHE, uKey, list); } } // Cache에 저장되어 있는게 Dummy이면 null로 변환 if (!CollectionUtils.isEmpty(list) && CPD01.DUMMY.equals(list.get(0).getPdCd())) { list = Collections.emptyList(); } /** * DataCache END */ return list; }
public List<CaCntrlCntrMngrSvcGetTreeO> getControlCenterTree(String instCd) throws BizApplicationException { List<CaCntrlCntrMngrSvcGetTreeO> outList = new ArrayList<CaCntrlCntrMngrSvcGetTreeO>(); // 부점별 제어센터 노드 조회 _addParentNode(instCd, outList, CaCntrlCntrTpEnum.BRNCH_UNIT.getValue()); _addParentNode(instCd, outList, CaCntrlCntrTpEnum.TRMNL_UNIT.getValue()); return outList; }
public Arr getArr() { return arr; }
public static boolean isValid(String value) throws BizApplicationException { for (ClHrarcyCoreEnum item : ClHrarcyCoreEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; }
public String getSubInfo(String xtnAtrbtNm, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { IValueObject subInfo = _getSubInfoCache(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); if (subInfo == null) { return null; } Object xtnAtrbtCntnt = subInfo.get(xtnAtrbtNm); if (xtnAtrbtCntnt == null) { return null; } return String.valueOf(xtnAtrbtCntnt); }
public Integer getListDataCntForConsistency() throws BizApplicationException { return _getDstbCnstncyCmCdInstDDso().selectListCntForConsistency(); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "Disbursement": _doDisbursementAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "Repayment" : _doRepaymentAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "ReduceLimit" : _doReduceLoanLimtAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "IncreaseLimit" : _doIncreaseLoanLimitAction(arrSrvcTpCd, arrCndActionRequiredValue); break; case "IncreaseTermExtension" : _doIncreaseLoanLimitAction(arrSrvcTpCd, arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public BfCndMltplVdlnOut getCndMltplVdln(BfCndMltplVdlnIn in) throws BizApplicationException { ValidateInputCndValIn validationIn = new ValidateInputCndValIn(); validationIn.setInstitutionId(getInstCd()); validationIn.setCndList(_convertToPdCndMultipleValidationCndListInList(in.getCndList())); validationIn.setPdCd(bf.getPdCd()); validationIn.setBaseDate(PdUtil.parseStringToDate(in.getAplyDt())); ValidateInputCndValOut validateOut = _bfCndApi().validateInputCndVal(validationIn); return _convertValidateInputCndValOutToPdCndMltplVdlnOut(validateOut); }
public String getSubInfo(String atrbtNm, DeptImpl deptImpl) throws BizApplicationException { // 1. 보조명세 캐시 조회 AtDeptSIO subInfo = getSubInfoCache(deptImpl); // 2. 보조명세 캐시가 null인 경우, null 리턴 if (subInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = subInfo.get(atrbtNm); // Casting 시 Null 방지 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public void doServiceAction(String arrSrvcTpCd, ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { switch (arrSrvcTpCd) { case "ArrangementConditionTest": case "IncludeMiscellaneousRevenue": _doIncludeMiscellaneousRevenueAction(); return; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public void registerTxPassword(String pswd) throws BizApplicationException { _getArrPswdXtnBiz().registerArrPassword(pswd, this, ArrPswdTpEnum.TX_PASSWORD); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { // switch (arrSrvcTpCd) { // // // case "Application": // case "ApplyMembership": // case "ApplyLinkingAccount": // case "OpenDeposit": // case "OpenLoan": // case "OpenMembership": // _doOpenAction(arrSrvcTpCd, arrCndActionRequiredValue); // return; // // // default: // // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 // throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); // } List<ArrRelDocInfoOut> arrRltdDocList = ((ArrRealImpl)getArrangementCore()).getListArrDocRelation(ArrDocRelEnum.RECEIVE.getValue(), null, null); if(logger.isDebugEnabled()){ logger.debug("## <AR> ArrCndRequireDocTpImpl > arrRltdDocList : {} ", arrRltdDocList ); logger.debug("## <AR> ArrCndRequireDocTpImpl > getListCdList : {} ", getListCdList() ); } List<String> requriedDocumentTpList = new ArrayList<String>(); for (String listCd : getListCdList()) { if (!_isReceivedRequiredDoc(listCd,arrRltdDocList)) requriedDocumentTpList.add(listCd); } if (!requriedDocumentTpList.isEmpty()){ if(logger.isDebugEnabled()){ logger.debug("## <AR> ArrCndRequireDocTpImpl > _doOpenAction : {} ", requriedDocumentTpList ); } //필요서류가 등록되지 않았습니다. throw new BizApplicationException("AAPARE0414"); } } // // private void _doOpenAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { // // List<ArrRelDocInfoOut> arrRltdDocList = ((ArrRealImpl)getArrangementCore()).getListArrDocRelation(ArrDocRelEnum.RECEIVE.getValue(), null, null); // if(logger.isDebugEnabled()){ // logger.debug("## <AR> ArrCndRequireDocTpImpl > arrRltdDocList : {} ", arrRltdDocList ); // logger.debug("## <AR> ArrCndRequireDocTpImpl > getListCdList : {} ", getListCdList() ); // } // // // List<String> requriedDocumentTpList = new ArrayList<String>(); // for (String listCd : getListCdList()) { // if (!_isReceivedRequiredDoc(listCd,arrRltdDocList)) requriedDocumentTpList.add(listCd); // } // // // if (!requriedDocumentTpList.isEmpty()){ // if(logger.isDebugEnabled()){ // logger.debug("## <AR> ArrCndRequireDocTpImpl > _doOpenAction : {} ", requriedDocumentTpList ); // } // // // //필요서류가 등록되지 않았습니다. // throw new BizApplicationException("AAPARE0414"); // } // // // }
public CaStaffChngSvcIndvIn clone(){ try{ CaStaffChngSvcIndvIn object= (CaStaffChngSvcIndvIn)super.clone(); if ( this.staffXtnInfoList== null ) object.staffXtnInfoList = null; else{ java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcXtnInfoListIO> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcXtnInfoListIO>(staffXtnInfoList.size()); for( bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcXtnInfoListIO item : staffXtnInfoList ){ clonedList.add( (bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcXtnInfoListIO)item.clone()); } object.staffXtnInfoList = clonedList; } if ( this.staffCtcptIO==null ) object.staffCtcptIO = null; else object.staffCtcptIO = (bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcCtcptIO)this.staffCtcptIO.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getCmpxCndYn(){ return cmpxCndYn; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AsmCore asm) { _getAsmSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AsmImpl)asm); }
public int delete(AmAsmArrRIO amAsmArrRIO){ return _getAmAsmArrR().delete(amAsmArrRIO); }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { // query data return !(_getDcDocMDso().select(DocStsEnum.NORMAL.getValue(), String.valueOf(supplInfoVal.get(CCM03.CD)), DocTypEnum.NOTICE_MSG.getValue()) == null); }
public int delete(CaSvInstScrnMIO svInstScrnMIO) { return _getSvInstScrnM().delete(svInstScrnMIO); }
public StaffCashBxBalSvcCashCountDtlOut clone(){ try{ StaffCashBxBalSvcCashCountDtlOut object= (StaffCashBxBalSvcCashCountDtlOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<TaxRtIO> getListTaxRate(String isoNatCd, String taxRtCd, String taxTpCd, String aplyStartDt, String aplyEndDt) throws BizApplicationException { return _getListTaxRate(isoNatCd, taxRtCd, taxTpCd, aplyStartDt, aplyEndDt); }
public void saveXtnInfo(ArrGrpXtnInfoEnum arrGrpXtnInfoEnum, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr) throws BizApplicationException { super.saveXtnInfo(arrGrpXtnInfoEnum.getValue(), xtnAtrbtCntnt, txDt, txSeqNbr); }
public void saveSubInfo (String xtnAtrbtNm, String xtnAtrbtCntnt, StStlmntSIO stStlmntSIOIn) { logger.debug("##<ST-StlmntSubInfoBiz> saveSubInfo"); if(xtnAtrbtNm==null || xtnAtrbtNm.isEmpty()) { return; } // 1.create a new instance of I/F VO (불필요) // IValueObject subInfoIntrfcVO = new StlmntSubInfo(); // 2.create a new instance of DBIO VO StStlmntSIO stStlmntSIO = new StStlmntSIO(); // 3.set key to DBIO VO _setKey(stStlmntSIO, stStlmntSIOIn); // 4.set subsidiary detail to DBIO VO DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, stStlmntSIO); // 5.insert subsidiary detail _insertSubInfo(stStlmntSIO); }
static boolean isValid(String value){ for (TrmntnDscdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public static boolean isValid(String value){ for (ArrCustRelStsChngRsnCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public CaCmnCdSvcGetCdMListIn clone(){ try{ CaCmnCdSvcGetCdMListIn object= (CaCmnCdSvcGetCdMListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArArrDeptRIO select(ArArrDeptRIO arArrDeptRIO) { return _getArArrDeptR().select(arArrDeptRIO); }
public LcNegtnSvcIn clone(){ try{ LcNegtnSvcIn object= (LcNegtnSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) { for (CaDtDscdEnum item : CaDtDscdEnum.values()) { if (value.equals(item.getValue())) { return "99".equalsIgnoreCase(value) ? false : true; } } return false; }
public int delete(CaAmAsmItmMIO amAsmItmMIO){ return _getAmAsmItmM().delete(amAsmItmMIO); }
public void saveSubInfo(CustTxImpl custTxImpl, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustTxSIO subInfoIO = getSubInfoCache(custTxImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtCustTxSIO(); subInfoIO.setCustId(custTxImpl.getCustId()); subInfoIO.setTxDt(custTxImpl.getCustTxDt()); subInfoIO.setTxSeqNbr(custTxImpl.getCustTxSeqNbr()); // 입력된 속성명과 속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // insert _getAtCustTxSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO)) { return; } // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // update _getAtCustTxSDso().update(subInfoIO); } // 2. 캐시 저장 custTxImpl.setSubInfoCache(subInfoIO); }
public void saveMapSubInfo(ActorCore actorCore, String ctcptId, int ctcptChngSeqNbr, Map<String, String> xtnInfoMap) throws BizApplicationException { _getActorCtcptSubInfoBiz().saveMapSubInfo((ActorImpl) actorCore, ctcptId, ctcptChngSeqNbr, xtnInfoMap); }
public void modifyAssetRegionClassification(String instCd, CaAssetRegionClIO in) throws BizApplicationException { if(in.getAplyEndDt().equals(CCM01.MAX_DATE)) { CaAsAssetRegionClMIO asAssetRegionClMIO = _setInputData(instCd, in); _AsAssetRegionClMDso().update(asAssetRegionClMIO); } else { // TODO throws } }
public Integer getListArrBasedOnStsHistoryCount(String deptId, ArrDeptRelEnum arrDeptRel, String bizDscd, String pdTpCd, String pdTmpltCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistoryCount(deptId, bizDscd, pdTpCd, pdTmpltCd, null, arrDeptRel, curArrSts, arrSts, inqryStartDt, inqryEndDt, false); }
public CaCmRoleClRIO select(String instCd, String roleId, String clHrarcyId, String clId) { return _getCmRoleClR().select(instCd, roleId, clHrarcyId, clId); }
public String getPdTmpltCd() { return pdPdM.getPdTmpltCd(); }
public Map<String, String> getMapAssetXtnInfoAsStr() throws BizApplicationException { return _getAssetXtnInfoBiz().getMapAssetXtnInfo(this); }
public void saveSubInfo(ArrSrvcBlckngSubInfo arrSrvcBlckngSubInfo, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if(arrSrvcBlckngSubInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {ArrSrvcBlckngSubInfo.class.getSimpleName()}); } // 1. 기존 보조명세 캐시 조회결과에 따라 insert/update 판단 ArArrSrvcBlckngSIO subInfoCache = _getSubInfoCache(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = new ArArrSrvcBlckngSIO(); subInfoCache.setArrId(arrRealImpl.getArrId()); subInfoCache.setArrSrvcBlckngSeqNbr(arrSrvcBlckngSeqNbr); subInfoCache.setSeqNbr(seqNbr); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveArArrSrvcBlckngSubH(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(arrSrvcBlckngSubInfo, subInfoCache); // insert _getArArrSrvcBlckngSDso().insert(subInfoCache); // save cache _saveSubInfoCache(subInfoCache, arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(arrSrvcBlckngSubInfo, subInfoCache)) { return; } // 변경전 이력 저장 _saveArArrSrvcBlckngSubH(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(arrSrvcBlckngSubInfo, subInfoCache); // update _getArArrSrvcBlckngSDso().update(subInfoCache); } }
public CaAsmItmMgmtSvcRegisterAsmItmOut registerAsmItm(CaAsmItmMgmtSvcRegisterAsmItmIn in) throws BizApplicationException { CaAsmItmMgmtSvcRegisterAsmItmOut out = new CaAsmItmMgmtSvcRegisterAsmItmOut(); if( logger.isDebugEnabled() ){ logger.debug("## <ASM> registerAsmItm : {}", in.toString()); } CaAsmItmIO asmItm = _getCaAsmItmMgnt().getAsmItm(in.getInstCd(), in.getAsmItmId()); // 기등록건이 있으면 수정 if (asmItm != null) { CaAsmItmIO caAsmItmIO = _updateAsmItm(asmItm, in); out.setAsmItmId(caAsmItmIO.getAsmItmId()); } // 기등록건이 없으면 등록 else { CaAsmItmIO caAsmItmIO = _insertAsmItm(in); out.setAsmItmId(caAsmItmIO.getAsmItmId()); } if( logger.isDebugEnabled() ){ logger.debug("## <ASM> CaAsmItmMgmtSvcRegisterAsmItmOut : {}", out.toString()); } return out; }
public ArrXtnSvcDeleteXtnList clone(){ try{ ArrXtnSvcDeleteXtnList object= (ArrXtnSvcDeleteXtnList)super.clone(); if ( this.tblList== null ) object.tblList = null; else{ java.util.List<bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcIn> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcIn>(tblList.size()); for( bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcIn item : tblList ){ clonedList.add( (bankware.corebanking.arrangementservice.amend.service.dto.ArrXtnSvcIn)item.clone()); } object.tblList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void registerSettlement(StlmntDtlIO stlmntDtl) throws BizApplicationException { // 1.정산기본의 확장속성을 CTI방식과 EAV방식으로 분리 추출 // CTI방식은 subInfoMap으로 보관하며 마지막에 saveSubInfo통해 보조명세에 적재됨 // EAV방식은 stlmntDtl안의 xtninfoList에 남아 (only EAV속성만 잔존) 코어소스(registerSettlement)에서 적재됨 Map<String,String> stlmntSubInfoMap = new HashMap<String, String>(); stlmntSubInfoMap = _getStlmntSubInfoBiz().getMapSubInfoCrtn(stlmntDtl.getStlmntXtnInfoList()); // 2.정산계산근기의 확장속성을 CTI방식과 EAV방식으로 분리 추출 Map<String, Map<String, String>> stlmntCalcnSubInfoMap = new HashMap<String, Map<String, String>>(); Map<String,String> calcnSubInfoMap = null; if (stlmntDtl.getStlmntCalcnDList() != null) { int dtlSeqNbr = 0; for(StlmntCalcnDtlIO stlmntCalcnD : stlmntDtl.getStlmntCalcnDList()) { dtlSeqNbr = dtlSeqNbr + 1; calcnSubInfoMap = new HashMap<String, String>(); if (stlmntCalcnD.getStlmntXtnInfoList() != null) { //stlmntCalcnD.stlmntXtnInfo는 EAV속성만 남고 CTI속성은 stlmntCalcSubInfoMap으로 분리됨 calcnSubInfoMap = _getStlmntCalcnSubInfoBiz().getMapSubInfoCrtn(stlmntCalcnD.getStlmntXtnInfoList()); stlmntCalcnSubInfoMap.put(String.valueOf(dtlSeqNbr), calcnSubInfoMap ); } } } // 3.정산기본, 정산계산근기, EAV방식의 정산기본확장속성, 정산계산근기확장속성 적재 super.registerSettlement(stlmntDtl); // 4.[정산보조명세] // 4-1.정산보조명세DBIO Instance 생성 StStlmntSIO stStlmntSIOIn = new StStlmntSIO(); // 4-2.정산보조명세DBIO에 키값 set _setStlmntSKey(stStlmntSIOIn, stlmntDtl); // 4-3.정산보조명세 적재 _getStlmntSubInfoBiz().saveMapSubInfo(stlmntSubInfoMap, stStlmntSIOIn); // 5.[정산계산근기보조명세] for (Map.Entry<String, Map<String, String>> stlmntCalcnSubInfo : stlmntCalcnSubInfoMap.entrySet()) { // 5-1.정산계산근기보조명세DBIO Instance 생성 StStlmntCalcnSIO stStlmntCalcnSIOIn = new StStlmntCalcnSIO(); // 5-2.정산계산근기보조명세DBIO에 키값 set _setStlmntCalcnSKey(stStlmntCalcnSIOIn, stlmntDtl, Integer.valueOf(stlmntCalcnSubInfo.getKey())); // 5-3.정산계산근기보조명세 적재 _getStlmntCalcnSubInfoBiz().saveMapSubInfo(stlmntCalcnSubInfo.getValue(), stStlmntCalcnSIOIn); } }
public boolean check(String vldnTrgt) throws BizApplicationException { // Implement logic for validate Account Number // 계좌번호 검증 로직 구현 ArrRealGetIn arrRealGetIn = new ArrRealGetIn(); arrRealGetIn.setArrExtrnlIdNbrTpCd(ArrExtrnlIdNbrTpEnum.ACCOUNT_NUMBER.getValue()); arrRealGetIn.setArrIdNbr(vldnTrgt); arrRealGetIn.setNthNbr(CCM01.ZERO); if( _getArrMngr().getArrReal(arrRealGetIn)==null) throw new BizApplicationException("AAPARE0007", new String[]{vldnTrgt}); return true; }
public int updateJournalDeferredDfrdSeqNbr(JrnzPrcsAcctgItm jrnzPrcsAcctgItm) { return _getAcAcctgLDfrd().updateJournalDeferredDfrdSeqNbr(jrnzPrcsAcctgItm); }
public int delete(AmAsmCrdtChkRsltDIO amAsmCrdtChkRsltDIO){ return _getAmAsmCrdtChkRsltD().delete(amAsmCrdtChkRsltDIO); }
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbCnstncyCmRefAtrbtMDso().selectListForConsistency(pageOffSet, pgCnt); }
public AsmBsicInfoIO changeAsmStatus(String asmId,String asmStsCoreEnum, String rjctdRsnCoreEnum, String rjctdRsnCntnt) throws BizApplicationException { //1.조회 AsmBsicInfoIO in = getBasicInformation(asmId); //2.변경. AmAsmMIO amAsmMIO = _setAmAsmMIO(in, asmStsCoreEnum, rjctdRsnCoreEnum, rjctdRsnCntnt); _getAmAsmMDso().updateTerminate(amAsmMIO); //3.상태이력등록 _insertStsHistory(amAsmMIO); return _getBasicInfomation(amAsmMIO); } /** * 심사기본 상태변경 * <pre> * </pre> * @param in : (required) 심사식별자 * @param asmStsCd : (required) 심사상태코드 * @return AsmBsicInfoIO : {@link AsmBsicInfoIO}
public int delete(ArArrXtnInfoDIO arArrXtnInfoDIO) { _getCmnContextCore().setHeaderColumn(arArrXtnInfoDIO); return _getArArrXtnInfoD().delete(arArrXtnInfoDIO); }
public BigDecimal getTaxRate(String isoNatCd, String taxRtCd, String taxTpCd, String baseDt) throws BizApplicationException { return _getTaxRate(isoNatCd, taxRtCd, taxTpCd, baseDt); }
public DpstIntCalculatorOut calculateInterestTermination(Arr arr, int txSeqNbr, String paymentDate, String arrTrmntnDscd, Map<String, String> xtdInfo, boolean smltn) throws BizApplicationException { if( smltn == false ) { arr.setLockBasic(); } if( xtdInfo == null ) { xtdInfo = new HashMap<String, String>(); } xtdInfo.put(ArrTxXtnInfoEnum.TERMINATION_DSCD.getValue(), arrTrmntnDscd); return _calculateInt(arr, txSeqNbr, null, paymentDate, smltn, xtdInfo, InterestTransactionTypeEnum.TERMINATION); }
public CaNoticeMsgCdSvcGetListIn clone(){ try{ CaNoticeMsgCdSvcGetListIn object= (CaNoticeMsgCdSvcGetListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void activate(ScrtyIntStsChngIn scrtyIntStsChngIn) throws BizApplicationException { throw new BizApplicationException("AAPASE0064",null); }
public CaDstbChrncDataRqstOut clone(){ try{ CaDstbChrncDataRqstOut object= (CaDstbChrncDataRqstOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CdMgmtSvcGetCdListByCdNbrListOut clone(){ try{ CdMgmtSvcGetCdListByCdNbrListOut object= (CdMgmtSvcGetCdListByCdNbrListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.common.code.service.dto.CdMgmtSvcGetCdListByCdNbrListDtlOut> clonedList = new java.util.ArrayList<bankware.corebanking.common.code.service.dto.CdMgmtSvcGetCdListByCdNbrListDtlOut>(tblNm.size()); for( bankware.corebanking.common.code.service.dto.CdMgmtSvcGetCdListByCdNbrListDtlOut item : tblNm ){ clonedList.add( (bankware.corebanking.common.code.service.dto.CdMgmtSvcGetCdListByCdNbrListDtlOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void deleteArrIssmdaRXtnInfo(ArArrIssmdaRXtnInfoDIO arArrIssmdaRXtnInfoDIO, String txDt, Integer txSeqNbr) throws BizApplicationException { // 기존 확장속성 조회 ArArrIssmdaRXtnInfoDIO arArrIssmdaRXtnInfoOld = selectArrIssmdaRXtnInfo(arArrIssmdaRXtnInfoDIO); // 조회결과가 존재하지 않는 경우 에러처리 if (arArrIssmdaRXtnInfoOld == null) { throw new BizApplicationException("AAPARE0064", new Object[] { arArrIssmdaRXtnInfoDIO.getXtnAtrbtNm() }); } // 확장속성 update arArrIssmdaRXtnInfoOld.setXtnAtrbtCntnt(null); updateArrIssmdaRXtnInfo(arArrIssmdaRXtnInfoOld, txDt, txSeqNbr); }
public BigDecimal getAccumulatedAmount(String startDt, String endDt) throws BizApplicationException { return getAccumulatedAmount(startDt, endDt, null, true, false).getAcmltdAmt(); }
public DueDiligenceInqryTrgtSvcOut clone(){ try{ DueDiligenceInqryTrgtSvcOut object= (DueDiligenceInqryTrgtSvcOut)super.clone(); if ( this.eddTrgtList== null ) object.eddTrgtList = null; else{ java.util.List<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqryTrgtSvcListOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqryTrgtSvcListOut>(eddTrgtList.size()); for( bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqryTrgtSvcListOut item : eddTrgtList ){ clonedList.add( (bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqryTrgtSvcListOut)item.clone()); } object.eddTrgtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaSrvcMgmtSvcSaveServiceInfoListIn clone(){ try{ CaSrvcMgmtSvcSaveServiceInfoListIn object= (CaSrvcMgmtSvcSaveServiceInfoListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void terminate(InsrncStsChngIn in) throws BizApplicationException { InsrncStsCoreEnum afStstCd = InsrncStsCoreEnum.TERMINATED; // 1. 입력값 검증 _checkStsChnginput(in, afStstCd); // 2. 보증기본 설정상태 변경 ("해지"상태로 변경) _getInsrncBsicBiz().changeInsrnStatus(this, in, afStstCd.getValue()); } /** * <div class='en'> * @description * <pre> * t change the status of insurance to cancel status * </pre> * @seealso * @note {@link InsrncStsChngIn} : required fields - all of them * </div> * * <div class='ko'> * @description * <pre> * 보험의 상태를 취소상태로 변경한다. * </pre> * @seealso * @note {@link InsrncStsChngIn}
public ArrInternal getInternalArr(String arrId) throws BizApplicationException { ArrRealImpl arrReal = (ArrRealImpl) super.getArrRealCore(arrId); return (ArrInternal) _checkArrObjectByKind( arrReal, ArrKndEnum.INTERNAL ); }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, int pgNbr, int pgCnt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, null, null, null, null, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, pgNbr, pgCnt, false); }
public CaDataVldtnMgmtSvcGetPrsntIn clone(){ try{ CaDataVldtnMgmtSvcGetPrsntIn object= (CaDataVldtnMgmtSvcGetPrsntIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getDstbTrgtScrnYn() { return dstbTrgtScrnYn; }
public CaDstbCtvdRsltErrSrchCndIn clone(){ try{ CaDstbCtvdRsltErrSrchCndIn object= (CaDstbCtvdRsltErrSrchCndIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (ScrtyIntMAtrbtCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@ScrtyIntMAtrbt"});//({0}) is invalid {1}. } return true; }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if( logger.isDebugEnabled() ) { logger.debug( "## <TWD> =ArrCndLoanInstallmentDisbursementPossibleYNImpl{}",arrSrvcTpCd); } switch (arrSrvcTpCd) { case "Disbursement": _doDisbursementAction(arrSrvcTpCd, arrCndActionRequiredValue); return; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public List<CaTblXtnAtrbtOut> getTableExtendAttribute(String instCd, String tblNm, CaXtnAtrbtVrtnCmpsEnum xtnAtrbtVrtnCmpsCd, Map<String, String> mapCnd) throws BizApplicationException { // Check input if (StringUtils.isEmpty(instCd)) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@instCd" }); } if (StringUtils.isEmpty(tblNm)) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@tblNm" }); } if (xtnAtrbtVrtnCmpsCd == null || StringUtils.isEmpty(xtnAtrbtVrtnCmpsCd.getValue())) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } if (!CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd) && !CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd) && (mapCnd == null || mapCnd.isEmpty())) { // {0} is mandatory input item. throw new BizApplicationException("AAPCME0006", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } List<CaTblXtnAtrbtOut> out = new ArrayList<CaTblXtnAtrbtOut>(); List<String> itmList = new ArrayList<String>(); // Set condition if (CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)) { // skip; } else if (CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)) { itmList.add(" "); } else if (CaXtnAtrbtVrtnCmpsEnum.PD_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb1 = new StringBuilder(); sb1.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb1.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb1.append("\"pdTmpltCd\":").append("\"").append(mapCnd.get("pdTmpltCd")).append("\","); sb1.append("\"pdCd\":").append("\"").append(mapCnd.get("pdCd")).append("\"}"); itmList.add(sb1.toString()); StringBuilder sb2 = new StringBuilder(); sb2.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb2.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb2.append("\"pdTmpltCd\":").append("\"").append(mapCnd.get("pdTmpltCd")).append("\","); sb2.append("\"pdCd\":\"\"}"); itmList.add(sb2.toString()); StringBuilder sb3 = new StringBuilder(); sb3.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb3.append("\"pdTpCd\":").append("\"").append(mapCnd.get("pdTpCd")).append("\","); sb3.append("\"pdTmpltCd\":\"\",").append("\"pdCd\":\"\"}"); itmList.add(sb3.toString()); StringBuilder sb4 = new StringBuilder(); sb4.append("{").append("\"bizDscd\":").append("\"").append(mapCnd.get("bizDscd")).append("\","); sb4.append("\"pdTpCd\":\"\",").append("\"pdTmpltCd\":\"\",").append("\"pdCd\":\"\"}"); itmList.add(sb4.toString()); } else if (CaXtnAtrbtVrtnCmpsEnum.ACTOR_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"actorTpCd\":").append("\"").append(mapCnd.get("actorTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_ARR_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrArrRelCd\":").append("\"").append(mapCnd.get("arrArrRelCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_CUST_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrCustRelCd\":").append("\"").append(mapCnd.get("arrCustRelCd")).append("\"}"); itmList.add(sb.toString()); /* 2016.03.29 hongun.song 추가*/ } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_ACTVTY_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrActvtyTpCd\":").append("\"").append(mapCnd.get("arrActvtyTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_SRVC_BLCKNG_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrSrvcBlckngCd\":").append("\"").append(mapCnd.get("arrSrvcBlckngCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_ISSMDA_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrIssmdaTpCd\":").append("\"").append(mapCnd.get("arrIssmdaTpCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.DUE_DLGNC_DSCD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"dueDlgncDscd\":").append("\"").append(mapCnd.get("dueDlgncDscd")).append("\"}"); itmList.add(sb.toString()); if(mapCnd.get("actorTpCd") != null){ StringBuilder sbAct = new StringBuilder(); sbAct.append("{").append("\"actorTpCd\":").append("\"").append(mapCnd.get("actorTpCd")).append("\"}"); itmList.add(sbAct.toString()); } } else if(CaXtnAtrbtVrtnCmpsEnum.ARR_DOC_REL_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"arrDocRelCd\":").append("\"").append(mapCnd.get("arrDocRelCd")).append("\"}"); itmList.add(sb.toString()); } else if(CaXtnAtrbtVrtnCmpsEnum.PRTNR_DTL_TP_CD.equals(xtnAtrbtVrtnCmpsCd)) { StringBuilder sb = new StringBuilder(); sb.append("{").append("\"prtnrDtlTpCd\":").append("\"").append(mapCnd.get("prtnrDtlTpCd")).append("\"}"); itmList.add(sb.toString()); }else { // Input field is incorrect. Information for Checking : {0} throw new BizApplicationException("AAPSVE0001", new Object[] { "@xtnAtrbtVrtnCmpsCd" }); } CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn inDao = new CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn(); inDao.setStdInstCd(_getCaCmnContext().getStandardInstCode()); inDao.setInstCd(instCd); inDao.setTblNm(tblNm); inDao.setJsonKeyValCntnt(itmList); if (CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)) { inDao.setXtnAtrbtVrtnCmpsCd(""); } else if (CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)) { inDao.setXtnAtrbtVrtnCmpsCd(CaXtnAtrbtVrtnCmpsEnum.NA.getValue()); } else { inDao.setXtnAtrbtVrtnCmpsCd(xtnAtrbtVrtnCmpsCd.getValue()); } // execute query List<CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut> xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); for(CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut xtnAtrbtOut : xtnAtrbtList) { if(_getCaCmnContext().getStandardInstCode().equals(xtnAtrbtOut.getInstCd())) { CaCmTblXtnAtrDIO cmTblXtnAtrDIO = _getCmTblXtnAtrDDso().select(_getCaCmnContext().getStandardInstCode(), tblNm, xtnAtrbtOut.getXtnAtrbtNm()); if(cmTblXtnAtrDIO != null && StringUtils.isEmpty(cmTblXtnAtrDIO.getInstIndvDfntnMndtryYn()) && CCM01.YES.equals(_getCmTblXtnAtrDDso().select(_getCaCmnContext().getStandardInstCode(), tblNm, xtnAtrbtOut.getXtnAtrbtNm()).getInstIndvDfntnMndtryYn())) { throw new BizApplicationException("AAPCME0182", new Object[] { xtnAtrbtOut.getXtnAtrbtNm() }); } } } // one more try with standard institution if(xtnAtrbtList.isEmpty()) { inDao.setInstCd(_getCaCmnContext().getStandardInstCode()); xtnAtrbtList = _getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao); } // set output for (CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut xtnAtrbt : xtnAtrbtList) { CaTblXtnAtrbtOut outParm = new CaTblXtnAtrbtOut(); outParm.setTblNm(xtnAtrbt.getTblNm()); outParm.setXtnAtrbtNm(xtnAtrbt.getXtnAtrbtNm()); outParm.setMndtryYn(xtnAtrbt.getMndtryYn()); outParm.setScrnInpYn(xtnAtrbt.getScrnInpYn()); outParm.setScrnChngAblYn(xtnAtrbt.getScrnChngAblYn()); outParm.setCustInqryTrgtYn(xtnAtrbt.getCustInqryTrgtYn()); outParm.setIntrnlInqryTrgtYn(xtnAtrbt.getIntrnlInqryTrgtYn()); outParm.setAtrbtTpCd(xtnAtrbt.getAtrbtTpCd()); outParm.setCdNbr(xtnAtrbt.getCdNbr()); outParm.setClHrarcyId(xtnAtrbt.getClHrarcyId()); if(StringUtils.isEmpty(xtnAtrbt.getAtrbtTpCd())) { CaStdAtrbtIO stdAtrbt = _getStdAtrbtMgmt().getStandardAttribute(xtnAtrbt.getXtnAtrbtNm()); if(stdAtrbt != null && stdAtrbt.getAtrbtTpCd() != null) { outParm.setAtrbtTpCd(stdAtrbt.getAtrbtTpCd()); } } out.add(outParm); } return out; }
public void removeArrCndClass(CaArrCndClassIn in) throws BizApplicationException { _checkInput(in); CaArArrCndClassMIO arArrCndClassMIO = new CaArArrCndClassMIO(); arArrCndClassMIO.setInstCd(in.getInstCd()); arArrCndClassMIO.setCndCd(in.getCndCd()); arArrCndClassMIO.setCndClassNm(in.getCndClassNm()); arArrCndClassMIO.setBizDscd(StringUtils.isEmpty(in.getBizDscd()) ? CCM01.CHAR_AT : in.getBizDscd() ); arArrCndClassMIO.setPdTpCd(StringUtils.isEmpty(in.getPdTpCd()) ? CCM01.CHAR_AT : in.getPdTpCd() ); arArrCndClassMIO.setPdTmpltCd(StringUtils.isEmpty(in.getPdTmpltCd()) ? CCM01.CHAR_AT : in.getPdTmpltCd() ); arArrCndClassMIO.setPdCd(StringUtils.isEmpty(in.getPdCd()) ? CCM01.CHAR_AT : in.getPdCd() ); _getArArrCndClassMDso().delete(arArrCndClassMIO); List<CaArArrSrvcCndRIO> sqlOutList = _getArArrSrvcCndRDso().selectListByCndCd(CCM01.CHAR_AT, in.getCndCd()); for ( CaArArrSrvcCndRIO sqlOut : sqlOutList ) { _getCaCmnContext().setHeaderColumn(sqlOut); _getArArrSrvcCndRDso().delete(sqlOut); } }
public PrtnrListQrySvcIn clone(){ try{ PrtnrListQrySvcIn object= (PrtnrListQrySvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(InsrncImpl insrnc){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 보험에 저장된 보조명세 캐시 조회 AsInsrncSIO subInfo = getSubInfoCache(insrnc); // 2. 보험에 저장된 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 보험에 저장된 보조원장 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(InsrncSubInfo.FIELDS.get(entry.getKey()) == null) { continue; } // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public static boolean isValid(String value) { for (PdCndDetailTypeCoreEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } // Return Output return false; }
public String getCrncyCd() { return crncyCd; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AsmImpl asm) { //0. 저장하려는 속성값의 유효성 검증(코드관련 속성일 경우 유효한 코드값인지 검증한다.) _getAtrbtChk().checkStandardAttribute(xtnAtrbtNm, xtnAtrbtCntnt); //1. 심사보조명세 조회(캐시로부터) IValueObject oldCache = getSubInfoCache(asm); //2. DB 반영 if(oldCache == null) { // 2.1.1 DBIO VO 생성 oldCache = new AmAsmSIO(); // 2.1.2 set primary key oldCache.set("instCd",_getCmnContext().getInstCode()); oldCache.set("asmId",asm.getBasicInfo().getAsmId()); // 2.1.3 저장하려는 속성값을 DBIO VO에 반영 DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, oldCache); // 2.1.4 insert _getAmAsmSDso().insert((AmAsmSIO)oldCache); asm.setAsmSubInfoCache(oldCache); }else { // 2.2.1 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, oldCache)) { return; } // 2.2.2 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, oldCache); // 2.2.3 update _getAmAsmSDso().update((AmAsmSIO)oldCache); } }
public static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty(value)) { for (ActiveStatusEnum item : ActiveStatusEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; } return false; }
public void saveSubInfo(ActorImpl actorImpl, String ctcptId, Integer ctcptChngSeqNbr, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 // ** 연락처 보조명세는 변경이력을 관리하지 않는다. AtActorCtcptSIO subInfoIO = getSubInfoCache(actorImpl, ctcptId, ctcptChngSeqNbr); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtActorCtcptSIO(); subInfoIO.setActorId(actorImpl.getActorId()); subInfoIO.setActorCtcptId(ctcptId); subInfoIO.setActorCtcptChngSeqNbr(ctcptChngSeqNbr); // 입력된 속성명과 속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // insert _getAtActorCtcptSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO)) { return; } // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // update _getAtActorCtcptSDso().update(subInfoIO); } // 2. 캐시 저장 _saveSubInfoCache(subInfoIO, actorImpl, ctcptId, ctcptChngSeqNbr); }
public AssetOwnerList clone(){ try{ AssetOwnerList object= (AssetOwnerList)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public int delete(CaSvInstSrvcMIO svInstSrvcMIO) { return _getSvInstSrvcM().delete(svInstSrvcMIO); }
public CaArrPdRuleMgmtTestSvcIn clone(){ try{ CaArrPdRuleMgmtTestSvcIn object= (CaArrPdRuleMgmtTestSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getInstCd(){ return instCd; }
public AssetLTVQrySvcIn clone(){ try{ AssetLTVQrySvcIn object= (AssetLTVQrySvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrRelArrInfoOut> getListArrArrHistoryAsMain(String arrArrRelCd, String rltdArrId) throws BizApplicationException { return _getArrArrRelBiz().getListArrArrHistoryAsMain(arrArrRelCd, rltdArrId, this); }
public void saveSubInfo(CustCore custCore, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { _getCustSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (CustImpl) custCore); }
public void saveSubInfo(IValueObject subInfo, ActorImpl actorImpl) throws BizApplicationException { // 1. 보조명세 종류 조회 ActorSubInfoKndEnum subInfoKnd = actorImpl.getSubInfoKnd(); // 2. 보조명세 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoIO = getSubInfoCache(actorImpl); if (subInfoIO == null) { // PK setting subInfoIO = _getNewSubInfoSqlIO(subInfoKnd); subInfoIO.set("actorId", actorImpl.getActorId()); // insert _insertSubInfo(subInfoKnd, subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfo, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(actorImpl, subInfoIO); // PK setting subInfoIO.set("actorId", actorImpl.getActorId()); // update _updateSubInfo(subInfoKnd, subInfoIO); } // 3. 캐시 저장 String cacheKey = XtnTableEnum.AT_ACTOR_M.getValue().concat(actorImpl.getActorId()); actorImpl.saveSubInfoCache(cacheKey, subInfoIO); }
public DateMngrCheckDateOut calculateDate(String baseDt) throws BizApplicationException { // Validate date _checkDate(baseDt); // New result object DateMngrCheckDateOut out = new DateMngrCheckDateOut(); // Next date out.setNxtDt(_getCalculationDate(baseDt, 1)); // Next next date out.setNxtNxtDt(_getCalculationDate(baseDt, 2)); // Before date out.setBfDt(_getCalculationDate(baseDt, -1)); // Before before date out.setBfBfDt(_getCalculationDate(baseDt, -2)); return out; }
public String getTxInpHms(){ return txInpHms; }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String bizDscd, String pdTpCd, String pdTmpltCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, int pgNbr, int pgCnt, boolean hasVrtnArr) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, bizDscd, pdTpCd, pdTmpltCd, null, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, pgNbr, pgCnt, hasVrtnArr); }
public StlmntDataRcvDBatIO clone(){ try{ StlmntDataRcvDBatIO object= (StlmntDataRcvDBatIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public LnAgrmntOpenSvcPdCndIn clone(){ try{ LnAgrmntOpenSvcPdCndIn object= (LnAgrmntOpenSvcPdCndIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void undoSubInfo(ScrtyIntImpl scrtyInt, String txDt, Integer txSeqNbr) throws BizApplicationException { // 1. 설정에 저장된 보조명세이력 캐시 조회결과가 없는 경우 리턴 AsScrtyIntSubHIO hstSqlIO = _getSubInfoHstCache(scrtyInt, txDt, txSeqNbr); if(hstSqlIO == null){ return; } // 3. 보조명세이력의 취소여부를 'Y'로 갱신 hstSqlIO.setCnclYn(CCM01.YES); _getAsScrtyIntSubHDso().update(hstSqlIO); // 4. 보조명세이력 DBIO VO를 보조명세 DBIO VO로 convert AsScrtyIntSIO sqlIO = new AsScrtyIntSIO(); DtoUtils.setSubInfoIO(hstSqlIO, sqlIO); // set PK & business column // 5. 보조명세 값 원복 _getAsScrtyIntSDso().update(sqlIO); }
public void validate(String arrSrvcCd,ArrRealCore arrReal, CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { List<Arr> arrList = _getArrCustMngr().getListCustOwnLoanArrActive(cust.getCustId()); if (arrList == null || arrList.isEmpty()) return; for (Arr custArr : arrList) { if (_getLnOvrduInfoProvider().isOverdue(custArr, ArrCmnUtil.getRckngDt(_getCmnContext()))){ //Customer Own Arrangement ({1}) is in overdue. This service ({0}) could not be finished properly //고객소유 계약({1})이 연체상태입니다. 본서비스({0}) 실행이 불가 합니다 //-TWD throw new BizApplicationException("APARE0304", new Object[]{dataMngr.getCmnCd(arrSrv.cdNbr,arrSrv.getValue()),arr.getAcctNbr()}); throw new BizApplicationException("AAPARE0304", new Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd),custArr.getAcctNbr()}); } } }
public void saveSubInfo(Map<String, String> subInfoMap, ArrTxImpl arrTx) { // 1. 입력으로 받은 Map이 비여 있거나 null일 때 , null 체크하는 이유는 CTI, EAV분리하는 메소드에서 없으면 null return하고 있음. if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 속성값 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 거래관련 보조명세 조회(캐시로부터) IValueObject oldCache = getSubInfoCache(arrTx); // 4. DB 반영 if(oldCache == null) { // 4.1.1 DBIO VO 인스턴스 생성 oldCache = _newSubInfoDBIO(arrTx); // 4.1.2 primary key 조립 _setKey(oldCache,arrTx); // 4.1.3 보조정보Map-> DBIO VO값 채우기 DtoUtils.setSubInfoIO(subInfoMap, oldCache); // 4.1.4 캐싱된 보조명세 정보가 없으면 최초 저장, 즉 insert _insertSubInfo(arrTx, oldCache); // 4.1.5 arrTx.setArrTxSubInfoCache(oldCache); }else { // 4.2.1. 캐싱된 보조명세 정보가 있으면 변경 저장, 즉 update, update전 기존정보랑 동일 시 리턴 if (!DtoUtils.isValChanged(subInfoMap, oldCache)) { return; } // 4.2.4 update - 새로변경되어야 할 속성을 DBIO VO 반영 DtoUtils.setSubInfoIO(subInfoMap, oldCache); // 4.2.5 update - update 수행 _updateSubInfo(arrTx, oldCache); } // // 5. 캐시 처리 (DBIO VO->Interface VO) & 캐싱 // _saveSubInfoCache(subInfoDBIO,arrTx); }
public String getDayCloseWay() throws BizApplicationException { //FIXME: jungwooyung 160122 - 추후 시스템파라미터화 return DayCloseWayEnum.APPLICATION.getValue(); }
public CustEtcReportSvcGetOut clone(){ try{ CustEtcReportSvcGetOut object= (CustEtcReportSvcGetOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String pdCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, null, null, null, pdCd, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, 0, 0, false); }
public java.lang.String getIssueDt(){ return issueDt; }
public String getSubInfo(String atrbtNm, AssetImpl assetImpl) throws BizApplicationException { // 1. 보조명세 캐시 조회 IValueObject assetSubInfo = getSubInfoCache(assetImpl); // 2. 보조원장 캐시가 null인 경우, null 리턴 if (assetSubInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = assetSubInfo.get(atrbtNm); // 속성값이 null인경우 null리턴 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public String getAttributeName() { return stdDtoClassAtrbt.getAttributeName(); }
public TestBatchDIO clone(){ try{ TestBatchDIO object= (TestBatchDIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public LnAgrmntOpenSvcSmltnRsltIO clone(){ try{ LnAgrmntOpenSvcSmltnRsltIO object= (LnAgrmntOpenSvcSmltnRsltIO)super.clone(); if ( this.rpymntPlnList== null ) object.rpymntPlnList = null; else{ java.util.List<bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut> clonedList = new java.util.ArrayList<bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut>(rpymntPlnList.size()); for( bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut item : rpymntPlnList ){ clonedList.add( (bankware.corebanking.loan.query.service.dto.ArrCashFlowScheduleSvcListOut)item.clone()); } object.rpymntPlnList = clonedList; } if ( this.intRtList== null ) object.intRtList = null; else{ java.util.List<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvc360IntRt> clonedList = new java.util.ArrayList<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvc360IntRt>(intRtList.size()); for( bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvc360IntRt item : intRtList ){ clonedList.add( (bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvc360IntRt)item.clone()); } object.intRtList = clonedList; } if ( this.feeList== null ) object.feeList = null; else{ java.util.List<bankware.corebanking.deposit.simulation.service.dto.FeeSmltnSvcOutSub> clonedList = new java.util.ArrayList<bankware.corebanking.deposit.simulation.service.dto.FeeSmltnSvcOutSub>(feeList.size()); for( bankware.corebanking.deposit.simulation.service.dto.FeeSmltnSvcOutSub item : feeList ){ clonedList.add( (bankware.corebanking.deposit.simulation.service.dto.FeeSmltnSvcOutSub)item.clone()); } object.feeList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapXtnInfo() throws BizApplicationException { // 액터 확장정보 및 보조명세 조회 Map<String, String> xtnInfoMap = getActor().getMapXtnInfo(); // 고객 확장정보 조회 xtnInfoMap.putAll(super.getMapXtnInfoByEav()); // 고객 보조명세 조회 xtnInfoMap.putAll(_getCustSubInfoBiz().getMapSubInfo(this)); return xtnInfoMap; }
public SellTcSvcIn clone(){ try{ SellTcSvcIn object= (SellTcSvcIn)super.clone(); if ( this.sellList== null ) object.sellList = null; else{ java.util.List<bankware.corebanking.foreignexchange.currencyexchange.service.dto.SellTcInfoList> clonedList = new java.util.ArrayList<bankware.corebanking.foreignexchange.currencyexchange.service.dto.SellTcInfoList>(sellList.size()); for( bankware.corebanking.foreignexchange.currencyexchange.service.dto.SellTcInfoList item : sellList ){ clonedList.add( (bankware.corebanking.foreignexchange.currencyexchange.service.dto.SellTcInfoList)item.clone()); } object.sellList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getNumbering(String instCd, String nbrgAtrbtNm, Map<String, Object> inpParmMap, Boolean isReUseSameTxNbrg) throws BizApplicationException { // 기관코드와 채번속성명이 있는지 검증 한다. _checkNumberingInput(instCd, nbrgAtrbtNm); // Query numbering rule CaNumberingGetIn inParm = new CaNumberingGetIn(); inParm.setInstCd(instCd); inParm.setNbrgAtrbtNm(nbrgAtrbtNm); // 채번규칙 조회 CaNumberingGetListOut numbering02Out = this.getNumberingRule(inParm); CaCmNbrgRuleMIO cmNbrgRuleMIO = _setCommonNumberingRuleMasterParameter(numbering02Out); List<CaCmNbrgRuleCmpsDIO> listCmNbrgRuleCmpsDIO = new ArrayList<CaCmNbrgRuleCmpsDIO>(); for (CaNumberingGetOut numbering02OutSub1 : numbering02Out.getTblNm()) { listCmNbrgRuleCmpsDIO.add(_setNumberingRuleCompositionDetailParameter(numbering02OutSub1)); } // Assemble numbering layer value String jsonCntnt = ""; Map<String, Object> tierValMap = new LinkedHashMap<String, Object>(); for (CaCmNbrgRuleCmpsDIO cmNbrgRuleCmpsDIO : listCmNbrgRuleCmpsDIO) { // 채번계층여부가 Y 이면 채번계층값을 가져 온다. if (CCM01.YES.equals(cmNbrgRuleCmpsDIO.getNbrgTierYn())) { Entry<String, String> entry = _getNbrgTierVal(instCd, cmNbrgRuleMIO, cmNbrgRuleCmpsDIO, jsonCntnt, inpParmMap, isReUseSameTxNbrg, ""); tierValMap.put(entry.getKey().toString(), entry.getValue().toString()); } } if (tierValMap.isEmpty()) { // Fail to query Assemble numbering layer value throw new BizApplicationException("AAPCME0084", new Object[] {"@nbrgTierYn", "@nbrgAtrbtNm", nbrgAtrbtNm}); } jsonCntnt = _getJsonString(tierValMap); // Numbering and assemble number String nbrgVal = ""; for (CaCmNbrgRuleCmpsDIO cmNbrgRuleCmpsDIO : listCmNbrgRuleCmpsDIO) { if (cmNbrgRuleCmpsDIO.getCmpsStartPstnCnt() > 0 && cmNbrgRuleCmpsDIO.getCmpsFgrsCnt() > 0) { nbrgVal = nbrgVal + _getNumberingCompositionValue(instCd, cmNbrgRuleMIO, cmNbrgRuleCmpsDIO, jsonCntnt, inpParmMap, isReUseSameTxNbrg, nbrgVal); } } String orgNbrgVal = nbrgVal; if(!StringUtils.isEmpty(cmNbrgRuleMIO.getEncrptnDscd())){ try { if(CaEncryptDstnctnEnum.ONE_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){ nbrgVal = CryptUtils.encryptSHA1(orgNbrgVal); } else if(CaEncryptDstnctnEnum.TWO_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){ nbrgVal = CryptUtils.encryptAES(orgNbrgVal); } } catch (Exception e) { if (logger.isDebugEnabled()) { logger.debug("Exception : {}", e); } //logger.debug("#### NbrgImpl.getNumbering modify source:{0} , Error:{1}", new Object[]{orgNbrgVal,e}); throw new BizApplicationException("AAPCME0000", new String[] {"getNumbering", "Encrypt getNumber" }); } } return nbrgVal; }
public boolean check(String in) throws BizApplicationException { if (!StringUtils.isEmpty(in) && in.compareTo(_getCmnContext().getTxDate()) >= 0) { // {0} must be smaller than {1}. throw new BizApplicationException("AAPCME0007", new Object[] { "@txDt", "@rckngDt" }); } return true; }
public void modifyDoc(CaDocBsicIO modifyDocBsicIO) throws BizApplicationException { _getDocBsic().modify(modifyDocBsicIO); setDocBasic(modifyDocBsicIO); }
public List<StTxMIO> getListCounterpartArrTx(StTxMIO in) throws BizApplicationException { return _getStTxMByArrDso().selectCounterpartArrTxList(in); }
public void modifyCndValue(String baseDt, List<ArrCndCrtn> ArrCndCrtnList, String txDt, Integer txSeqNbr) throws BizApplicationException { _getArrRealCoreFundamentalAgent().changeCndValue(baseDt, ArrCndCrtnList, txDt, txSeqNbr, this); }
public String getSubInfo(ActorCore actorCore, String ctcptId, int ctcptChngSeqNbr, String xtnAtrbtNm) throws BizApplicationException { return _getActorCtcptSubInfoBiz().getSubInfo((ActorImpl) actorCore, ctcptId, ctcptChngSeqNbr, xtnAtrbtNm); }
public CndVal getCndVal(List<ProvideCnd> prvdCndList) throws BizApplicationException { if (isComplexCnd()) { // Error if complex condition throw new BizApplicationException("AAPPDE0004", null); } CndVal cndVal = null; // Set input PdPdCndSimpleSearchIn inDao = new PdPdCndSimpleSearchIn(); inDao.setTntInstId(getInstCd()); inDao.setAplyStartDt(_getAplyStartDt()); inDao.setCndCd(getCndCd()); inDao.setCndGrpCd(getCndGrpCd()); inDao.setCndGrpTmpltCd(getCndGrpTmpltCd()); if (isListCnd()) { // 목록조건값 조회 cndVal = _getListCndValue(inDao); } else if (isRngCnd()) { // 범위조건값 조회 cndVal = _getRangeCndValue(inDao); } else if (isIntCnd()) { // 우대금리일 경우 제공조건에따른 규칙을 계산하여 아래 로직을 태울지말지 결정 if (isPreferentialInterestCnd() && !isPreferentialInterestProvideCndApplyRulePass(prvdCndList)) { return null; } // 금리조건값 조회 cndVal = _getInterestCndValue(inDao); } else if (isFeeCnd()) { // 수수료조건값 조회 cndVal = _getFeeCndValue(inDao); } // Return CndVal return cndVal; }
public void saveSubInfo(ActorCore actorCore, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { _getActorSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (ActorImpl) actorCore); }
public CaArrPsbkMsgMgmtSvcGetListPsbkMsgOut clone(){ try{ CaArrPsbkMsgMgmtSvcGetListPsbkMsgOut object= (CaArrPsbkMsgMgmtSvcGetListPsbkMsgOut)super.clone(); if ( this.psbkMsgList== null ) object.psbkMsgList = null; else{ java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg>(psbkMsgList.size()); for( bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg item : psbkMsgList ){ clonedList.add( (bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg)item.clone()); } object.psbkMsgList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public IValueObject getSubInfo(StlmntCalcnSubInfoInqryIn stlmntCalcnSubInfoInqryIn) throws BizApplicationException { return _getStlmntCalcnSubInfoBiz().getSubInfo(_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn)); }
public CustChngSvcDeleteLoginInfoIn clone(){ try{ CustChngSvcDeleteLoginInfoIn object= (CustChngSvcDeleteLoginInfoIn)super.clone(); if ( this.loinIdNbrList== null ) object.loinIdNbrList = null; else{ java.util.List<bankware.corebanking.customer.security.service.dto.CustChngSvcDeleteLoginInfoInSub> clonedList = new java.util.ArrayList<bankware.corebanking.customer.security.service.dto.CustChngSvcDeleteLoginInfoInSub>(loinIdNbrList.size()); for( bankware.corebanking.customer.security.service.dto.CustChngSvcDeleteLoginInfoInSub item : loinIdNbrList ){ clonedList.add( (bankware.corebanking.customer.security.service.dto.CustChngSvcDeleteLoginInfoInSub)item.clone()); } object.loinIdNbrList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrCndChngDtlInqryOutList clone(){ try{ ArrCndChngDtlInqryOutList object= (ArrCndChngDtlInqryOutList)super.clone(); if ( this.dtlList== null ) object.dtlList = null; else{ java.util.List<bankware.corebanking.deposit.query.service.dto.ArrCndChngDtlInqryOut> clonedList = new java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.ArrCndChngDtlInqryOut>(dtlList.size()); for( bankware.corebanking.deposit.query.service.dto.ArrCndChngDtlInqryOut item : dtlList ){ clonedList.add( (bankware.corebanking.deposit.query.service.dto.ArrCndChngDtlInqryOut)item.clone()); } object.dtlList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
private BfCndTestSvcOut getPrfIntRtAplyTmCd(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); String output = bfCnd.getPrfIntRtAplyTmCd(); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public CmAprvlMIO select(CmAprvlMIO cmApprvMIO) { return _getCmAprvlM().select(cmApprvMIO); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if (!this.getArrangementCore().isReal()) return; // if( !super.isIntRtRegisterTarget(arrSrvc)) return; // // super.registerArrIntRt(arrSrvc, this.getArr().getArrOpnDt(), arrCndActionRequiredValue.getTxDt(), arrCndActionRequiredValue.getTxSeqNbr() ); }
public CndVal getListCndValueWithName(List<CmpsCnd> cmpsCndList) throws BizApplicationException { if (!isListCnd()) { // 목록코드가 아니면 오류 throw new BizApplicationException("AAPPDE0042", null); } if (isComplexCnd()) { if (CollectionCoreUtils.isEmpty(cmpsCndList)) { // 복합조건인 경우 구성조건이 없으면 오류 throw new BizApplicationException("AAPPDE0007", null); } PdComplexCndStructureInfoOut outDao = getComplexCndStructureInfo(cmpsCndList); PdPdCndUnitComplexSearchIn inDao = new PdPdCndUnitComplexSearchIn(); inDao.setTntInstId(getInstCd()); inDao.setAplyStartDt(_getAplyStartDt()); inDao.setCndCd(getCndCd()); inDao.setCndGrpCd(getCndGrpCd()); inDao.setCmpxStrctrId(getCmpxStrctrId()); inDao.setCndGrpTmpltCd(getCndGrpTmpltCd()); inDao.setTierNbr(outDao.getTierNbr()); // Return Output return _getComplexListCndValueWithName(inDao); } else { // Set input PdPdCndSimpleSearchIn inDao = new PdPdCndSimpleSearchIn(); inDao.setTntInstId(getInstCd()); inDao.setAplyStartDt(_getAplyStartDt()); inDao.setCndCd(getCndCd()); inDao.setCndGrpCd(getCndGrpCd()); inDao.setCndGrpTmpltCd(getCndGrpTmpltCd()); // Return Output return _getListCndValueWithName(inDao); } }
public String getSubInfo(String xtnAtrbtNm, ArrIssmdaCore arrIssmda) throws BizApplicationException { return _getArrIssmdaSubInfoBiz().getSubInfo(xtnAtrbtNm, (ArrIssmdaImpl) arrIssmda); }
public boolean isTableAttributeValid(String xtnTblNm, String xtnAtrbtNm, String atrbtCntnt, AtrbtCheckPdInfo pd) throws BizApplicationException { if(!_checkAttributeBase(xtnTblNm, xtnAtrbtNm, atrbtCntnt)) { return false; } CmTblXtnAtrVrtnCmpsDIO cmTblXtnAtrVrtnCmpsDIO = _getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getInstCode(), xtnTblNm, xtnAtrbtNm); if(cmTblXtnAtrVrtnCmpsDIO == null || "".equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())) { // 기관에 데이터가 없을시 STDA 기관으로 재조회 하여 검증 한다. cmTblXtnAtrVrtnCmpsDIO = new CmTblXtnAtrVrtnCmpsDIO(); cmTblXtnAtrVrtnCmpsDIO = _getCmTblXtnAtrVrtnCmpsDDso().selectXtnAtrbtVrtnCmpsCd(_getCmnContextCore().getStandardInstCode(), xtnTblNm, xtnAtrbtNm); if(cmTblXtnAtrVrtnCmpsDIO != null && XtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())) { return true; } } else if(XtnAtrbtVrtnCmpsEnum.NA.getValue().equals(cmTblXtnAtrVrtnCmpsDIO.getXtnAtrbtVrtnCmpsCd())){ return true; } // Check for the possibility of registering the extended attribute inton // the product that contains the corresponding arrangement // 해당 계약이 속한 상품에 등록 가능한 확장속성인지 검증 if (pd != null) { return _checkAttributeNameInPd(xtnTblNm, xtnAtrbtNm, pd); } return true; }
public boolean checkCode(CdNbrInfoIO in, String cd) throws BizApplicationException { String xtnCdClassNm = in.getXtnCdClassNm(); String lngCd = in.getLngCd(); if (StringCoreUtils.isEmpty(xtnCdClassNm)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@xtnCdClassNm" }); } // 해당 클래스의 빈명 추출 해야 된다. CbbClass cbpClass = _getCbpClass().getClassInfo(xtnCdClassNm); String beanName = cbpClass.getBeanName(); if(logger.isDebugEnabled()) { logger.debug("lyj beanName : {}", beanName); } if(!CCM01.CHAR_AT.equals(beanName)) { xtnCdClassNm = beanName; } if (StringCoreUtils.isEmpty(lngCd)) { lngCd = _getCmnContextCore().getLanguageCode(); } String cdNbr = in.getCdNbr(); String instCd = in.getInstCd(); if(StringCoreUtils.isEmpty(in.getInstCd())) { instCd = _getCmnContextCore().getInstCode(); } // Get the login user's language code name Map<String, Object> supplInfoVal = new HashMap<String, Object>(); supplInfoVal.put(InstParamEnum.LANGUAGE_CODE.getValue(), lngCd); supplInfoVal.put(InstParamEnum.INSTITUTION_CODE.getValue(), instCd); supplInfoVal.put(CCM03.CD, cd); XtnCdCore xtdCd = (XtnCdCore) CbbApplicationContext.getBean(xtnCdClassNm); return xtdCd.checkCode(cdNbr, supplInfoVal); }
public CustCmphInqrySvcGetCustIdIn clone(){ try{ CustCmphInqrySvcGetCustIdIn object= (CustCmphInqrySvcGetCustIdIn)super.clone(); if ( this.xtnInfoList== null ) object.xtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustXtnInfoListIn> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustXtnInfoListIn>(xtnInfoList.size()); for( bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustXtnInfoListIn item : xtnInfoList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustXtnInfoListIn)item.clone()); } object.xtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public TxHstQrySvcInquiryLinkTransactionOut clone(){ try{ TxHstQrySvcInquiryLinkTransactionOut object= (TxHstQrySvcInquiryLinkTransactionOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Integer getAcctgLogCount(String guid, String deptId, String acctgPrcsngDt) throws BizApplicationException{ // 변경 Integer result = 0; List<JrnzPrcsAcctgItm> jrnzPrcsAcctgItmList = null; // guid 목록을 선 조회후 coa 에서 각주계정 제외하여 조회 한다. jrnzPrcsAcctgItmList = _getAcAcctgLDso().selectListByGuid(guid, _getCmnContextCore().getInstCode(), deptId, acctgPrcsngDt); for(JrnzPrcsAcctgItm jrnzPrcsAcctgItm : jrnzPrcsAcctgItmList) { result += _getAcCoaMDso().selectListDistr(jrnzPrcsAcctgItm.getInstCd(), null, jrnzPrcsAcctgItm.getAcctgItmCd(), null, TitlAcctgClcdEnum.FOOT_NOTE.getValue(), CCM01.NO).size(); } if(logger.isDebugEnabled()) { logger.debug(" ################### getAcctgLogCount result: {}", result); } return result; }
public List<CaRoleScrnRIO> getListRoleScrennRelation(String instCd) throws BizApplicationException { _checkStringValue(instCd, CCM03.INST_CD); List<CaCmRoleScrnRIO> cmRoleScrnList = _getCmRoleScrnRDso().selectListForRoleId(instCd); List<CaRoleScrnRIO> roleScrnList = new ArrayList<CaRoleScrnRIO>(); for(CaCmRoleScrnRIO cmRoleScrnRIO : cmRoleScrnList) { roleScrnList.add(_getRoleScrnRIO(cmRoleScrnRIO)); } return roleScrnList; }
public String checkPassword(StaffBsicInfoIO staffBsicInfo, String pswd) throws BizApplicationException { String securityCheckRsltTpCd = null; if (staffBsicInfo == null) { return SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue(); } if (staffBsicInfo.getPswd() == null) { securityCheckRsltTpCd = SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue(); } else { if (staffBsicInfo.getPswd().equals(pswd)) { securityCheckRsltTpCd = SecurityCheckRsltTpEnum.SUCCESS.getValue(); } else { securityCheckRsltTpCd = SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue(); } } return securityCheckRsltTpCd; }
public List<CaInstScrnInfoIO> getListInstScreen(String instCd) throws BizApplicationException { CaSvInstScrnMIO svInstScrnMIO = new CaSvInstScrnMIO(); List<CaInstScrnInfoIO> out = new ArrayList<CaInstScrnInfoIO>(); CaInstScrnInfoIO scrnInfoIO = null; svInstScrnMIO.setInstCd(instCd); List<CaSvInstScrnMIO> outDaoList = _getSvInstScrnMDso().selectList(svInstScrnMIO); for( CaSvInstScrnMIO outDao: outDaoList ){ scrnInfoIO = new CaInstScrnInfoIO(); // Generated by code generator [[ scrnInfoIO.setScrnId(outDao.getScrnId());// set [Screen id] scrnInfoIO.setAplyStartDt(outDao.getAplyStartDt()); scrnInfoIO.setInstCd(outDao.getInstCd()); scrnInfoIO.setScrnUrlAddr(outDao.getScrnUrlAddr());// set [Screen URL address] // Generated by code generator ]] out.add(scrnInfoIO); } return out; }
public int delete(CmNbrgRuleMIO cmNbrgRuleMIO) { super.clearCache(DataCacheCoreConfig.COMMON_NUMBER_RULE_SELECT_CACHE); return _getCmNbrgRuleM().delete(cmNbrgRuleMIO); }
public RlsttCltrlMgmtSvcDelIn clone(){ try{ RlsttCltrlMgmtSvcDelIn object= (RlsttCltrlMgmtSvcDelIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DepoBnkArrMgmtSvcClsOut clone(){ try{ DepoBnkArrMgmtSvcClsOut object= (DepoBnkArrMgmtSvcClsOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getInstCd() { String tntInstId = null; if (pdPdCndM == null) { tntInstId = this.instCd; if (StringCoreUtils.isEmpty(tntInstId)) { return null; } } else { tntInstId = pdPdCndM.getInstCd(); } // Return 기관코드 return tntInstId; }
public List<CaCmnCdCheckOut> getListCode(String cdNbr) throws BizApplicationException { // Check the code number _checkCodeNumber(cdNbr); List<CaCmnCdCheckOut> out = new ArrayList<CaCmnCdCheckOut>(); // Get the code master information CaCdNbrInfoIO cdMstOut = _getCodeMasterInformation(cdNbr); // Get the code detail information List<CaCdDtlIO> cdDtlOutList = _getCdDtl().getCodeDetail(cdMstOut); for (CaCdDtlIO cdDtlIO : cdDtlOutList) { CaCmnCdCheckOut cmnCdCheckOut = _setCodeCheckOut(cdDtlIO, cdMstOut.getCdNbrTpCd()); out.add(cmnCdCheckOut); } return out; }
public AplyDstbTgtDtlIO clone(){ try{ AplyDstbTgtDtlIO object= (AplyDstbTgtDtlIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustRgstSvcCntctPntListIn clone(){ try{ CustRgstSvcCntctPntListIn object= (CustRgstSvcCntctPntListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public PswdVldtnSvcCheckPswdOut clone(){ try{ PswdVldtnSvcCheckPswdOut object= (PswdVldtnSvcCheckPswdOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrBsicQrySvcGetChildrenArrItmOut clone(){ try{ ArrBsicQrySvcGetChildrenArrItmOut object= (ArrBsicQrySvcGetChildrenArrItmOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getApplyDateString(String applyDate) throws BizApplicationException { String out = ""; if (StringCoreUtils.isEmpty(applyDate)) { throw new BizApplicationException("AAPATE0067", new String[] { "Apply Date" }); } else if (applyDate.length() > 8) { out = applyDate.replace("-", ""); // YYYY-MM-DD -> YYYYMMDD } else if (applyDate.length() == 8) { out = applyDate; } if (out.length() > 8 || out.isEmpty()) { throw new BizApplicationException("AAPCME0006", new Object[]{"@aplyStartDt"}); } // Return output return out; }
public WorkflowVariableSvcIO clone(){ try{ WorkflowVariableSvcIO object= (WorkflowVariableSvcIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CmpsCnd> getCmpsCnd() throws BizApplicationException { if (!isComplexCnd()) { throw new BizApplicationException("AAPPDE0003", null); // 단순조건 simple condition } // Return output return getCmpsCnd(getCmpxStrctrId()); }
public int delete(CaArArrCndClassMIO CaArArrCndClassMIO) { int cnt = _getArArrCndClassM().delete(CaArArrCndClassMIO); _getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_CND_CLASS_NAME_CACHE, null); return cnt; }
public GrntCltrlMgmtSvcSaveOut clone(){ try{ GrntCltrlMgmtSvcSaveOut object= (GrntCltrlMgmtSvcSaveOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void updateArrDocRXtnInfo(ArArrDocRXtnInfoDIO arArrDocRXtnInfoDIO, String txDt, Integer txSeqNbr) throws BizApplicationException { // 속성값변경이력 저장 if(!StringCoreUtils.isEmpty(txDt) && txSeqNbr != null) { _saveArrRelAtrbtValChangeHistory(arArrDocRXtnInfoDIO.getArrId(), ArrRelKndCoreEnum.DOCUMENT.getValue(), arArrDocRXtnInfoDIO.getArrDocRelCd(), arArrDocRXtnInfoDIO.getDocIssueId(), CCM01.ZERO, arArrDocRXtnInfoDIO.getXtnAtrbtNm(),arArrDocRXtnInfoDIO.getXtnAtrbtCntnt(), txDt, txSeqNbr); } // 확장속성 update _getCmnContextCore().setHeaderColumn(arArrDocRXtnInfoDIO); _getArArrDocRXtnInfoDDso().update(arArrDocRXtnInfoDIO); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr, ScrtyIntImpl scrtyIntImpl) { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)){ return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttribute(xtnAtrbtNm, xtnAtrbtCntnt); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsScrtyIntSIO subInfoCache = getSubInfoCache(scrtyIntImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsScrtyIntSIO(); subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId()); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 2-1. insert _getAsScrtyIntSDso().insert(subInfoCache); // 3. 캐시 저장 scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(scrtyIntImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 2-2. update _getAsScrtyIntSDso().update(subInfoCache); } }
public CaAtrbtVldtnWayEnum getAttributeValidationWayCode() { return (isValidationTailored)? atrbtVldtnWayCd: CaAtrbtVldtnWayEnum.getEnum(stdDtoClassAtrbt.getAtrbtVldtnWayCd()); }
public CaRoleMgmtSvcSaveRoleServiceRelationListIn clone(){ try{ CaRoleMgmtSvcSaveRoleServiceRelationListIn object= (CaRoleMgmtSvcSaveRoleServiceRelationListIn)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcSaveRoleServiceRelationIn> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcSaveRoleServiceRelationIn>(tblNm.size()); for( bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcSaveRoleServiceRelationIn item : tblNm ){ clonedList.add( (bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcSaveRoleServiceRelationIn)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public DateMngrCalDayHmsOut calculateDateByDayHourMinuteSecond(String endTmstmp) throws BizApplicationException { String startTmstmp = _getCmnContext().getTxDate()+_getCmnContext().getTxTime(); // 현재시간 if (!DateCoreUtils.isValidDate(startTmstmp, DATE_FORMAT_YYYYMMDD.concat(TIME_FORMAT_HHMMSS))) { throw new BizApplicationException("AAPCME0001", new Object[] { startTmstmp, "" }); } if (!DateCoreUtils.isValidDate(endTmstmp, DATE_FORMAT_YYYYMMDD.concat(TIME_FORMAT_HHMMSS))) { throw new BizApplicationException("AAPCME0001", new Object[] { endTmstmp, "" }); } return _calculateDateByDayHourMinuteSecond(startTmstmp, endTmstmp); }
public void terminate(ArrActvtyChngIn arrActvtyChngIn) throws BizApplicationException { super.changeStatus(ArrActvtyStsEnum.TERMINATED.getValue(), arrActvtyChngIn); }
public String getSubInfo(String xtnAtrbtNm, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { IValueObject subInfo = _getSubInfoCache(arrRealImpl, arrSrvcBlckngSeqNbr, seqNbr); if (subInfo == null) { return null; } Object xtnAtrbtCntnt = subInfo.get(xtnAtrbtNm); if (xtnAtrbtCntnt == null) { return null; } return String.valueOf(xtnAtrbtCntnt); }
public void modifyArrPrtnrRelation(ArrPrtnrRelChngIn in) throws BizApplicationException { _getArrPrtnrRelBiz().modifyArrPrtnrRelation(in, this); }
public PrtnrRgstSvcIn clone(){ try{ PrtnrRgstSvcIn object= (PrtnrRgstSvcIn)super.clone(); if ( this.xtnInfoList== null ) object.xtnInfoList = null; else{ java.util.List<bankware.corebanking.partner.open.service.dto.PrtnrRgstSvcXtnInfoIn> clonedList = new java.util.ArrayList<bankware.corebanking.partner.open.service.dto.PrtnrRgstSvcXtnInfoIn>(xtnInfoList.size()); for( bankware.corebanking.partner.open.service.dto.PrtnrRgstSvcXtnInfoIn item : xtnInfoList ){ clonedList.add( (bankware.corebanking.partner.open.service.dto.PrtnrRgstSvcXtnInfoIn)item.clone()); } object.xtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaErrMsgMgmtSvcGetErrMsgListOut clone(){ try{ CaErrMsgMgmtSvcGetErrMsgListOut object= (CaErrMsgMgmtSvcGetErrMsgListOut)super.clone(); if ( this.errMsgList== null ) object.errMsgList = null; else{ java.util.List<bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaErrMsgMgmtSvcGetErrMsgOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaErrMsgMgmtSvcGetErrMsgOut>(errMsgList.size()); for( bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaErrMsgMgmtSvcGetErrMsgOut item : errMsgList ){ clonedList.add( (bankware.corebanking.configurationadmin.applicationcommon.service.dto.CaErrMsgMgmtSvcGetErrMsgOut)item.clone()); } object.errMsgList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isTableAttributeValid(String xtnTblNm, String xtnAtrbtNm, String xtnAtrbtCntnt, AtrbtCheckPdInfo pd) throws BizApplicationException { return _getAtrbt().isTableAttributeValid(xtnTblNm, xtnAtrbtNm, xtnAtrbtCntnt, pd); }
public void modifyBasicInformation(InsrncCoreImpl insrncImpl, InsrncBsicMdfctnIn mdfctnIn) throws BizApplicationException { // 0. 속성값 변경이력 저장 if(StringCoreUtils.isEmpty(mdfctnIn.getMgmtDeptId())) { mdfctnIn.setMgmtDeptId(_getCmnContextCore().getDeptId()); } _insertInsrncAtrbtChngHst(insrncImpl.getInsrncBasicCache(), mdfctnIn); // 1. 캐시 반영 AsInsrncMIO asInsrncMIO = insrncImpl.getInsrncBasicCache(); DtoCoreUtils.setSubInfoIO(mdfctnIn, asInsrncMIO); // 2. 보험 기본 update _getAsInsrncMDso().update(asInsrncMIO); } /** * 보험기본정보 등록 * <pre> * 자산식별자를 생성한다. * 입력된 정보로 자산정보를 등록한다. * 자산의 상태이력을 등록한다. * 자산의 속성이력을 등록한다. * </pre> * @param in : {@link InsrncBsicInfoIO} 보험기본정보 * @param chngTxDt : (required) 변경년월일 * @param chngTxSeqNbr : (required) 변경일련번호 * @return InsrncBsicInfoIO : {@link InsrncBsicInfoIO}
public CaCntrlCntrMgmtSvcGetCntrlCntrDtlIn clone(){ try{ CaCntrlCntrMgmtSvcGetCntrlCntrDtlIn object= (CaCntrlCntrMgmtSvcGetCntrlCntrDtlIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CaStdAtrbtIO> getListPrflAttributeName(String prflDscd) throws BizApplicationException { if( StringUtils.isEmpty(prflDscd) ){ throw new BizApplicationException("AAPCME0441", new Object[] {}); } List<CaCmStdAtrMIO> outCmStdAtrList = _getCmStdAtrMDso().selectListPrflAtrbtNmByPrflDscd(prflDscd); return _setStdAtrbtIO(outCmStdAtrList); }
public String getSubInfo(String atrbtNm, ArrTxImpl arrTx) throws BizApplicationException { // 1. 캐시기준으로 거래관련 보조명세 조회(캐싱 되지 않았으면 DB조회 후 캐싱 & return) IValueObject subInfo = getSubInfoCache(arrTx); // 2. 보조명세 정보가 없으면 return null if (subInfo == null) { return null; } // 3. 조회된 보조명세에서 특정보조명세 값 조회, 있으면 string값 return, 없으면 return null. Object atrbtVal = subInfo.get(atrbtNm); if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public java.lang.String getAssetId(){ return assetId; }
public String calculateMaturityDate(ArrangementCore arr, ArrCndRngCore contractTerm) throws BizApplicationException { String arrMtrtyDt = calculateMaturityDate(arr, arr.getArrOpnDt(), contractTerm); return adjustMtrtyDt( arr, arrMtrtyDt ); } /** * <div class='en'> * @description * <pre> * Calculation of the expiration date from the new date to the contract period * </pre> * @seealso {@link #calculateMaturityDate(ArrangementCore, String)} : Calculate maturity date with contract term * </div> * * <div class='ko'> * @description * <pre> * 신규일로 부터 계약기간 해당일까지의 만기일 산출 * </pre> * @seealso {@link #calculateMaturityDate(ArrangementCore, String)}
public void saveSubInfo(IValueObject subInfo , StStlmntSIO stStlmntSIOIn) { logger.debug("##<ST-StlmntSubInfoBiz> saveSubInfo"); // null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {this.getClass().getSimpleName()}); } logger.debug("##<ST-StlmntSubInfoBiz> saveSubInfo null check ok"); // 1.create a new instance of DB IO IValueObject subInfoDBIO = new StStlmntSIO(); // 2.set primary key _setKey(subInfoDBIO, stStlmntSIOIn); // 3.convert IvalueObject to DBIO VO DtoUtils.setSubInfoIO(subInfo, subInfoDBIO); // 4.save subsidiary detail(보조명세) _insertSubInfo(subInfoDBIO); /* * settlement는 속성을 대부분 insert 하는 경우이므로 아래 로직을 막음 */ // IValueObject sqlOut = getSubInfo(stlmnt); // // // 해당 거래관련 보조명세 데이터가 없을 때 // if(sqlOut == null) { // _insertSubInfo(subInfoDBIO); // // 맴버변수 VO 값 설정 // Stlmnt.setStlmntSubInfo(subInfo); // // }else { // // 기 조회 된 값에 update되어할 필드 설정 // DtoUtils.setSubInfoIO(subInfo, sqlOut); // // DBIO IO에 내용필드 반영 // DtoUtils.setSubInfoIO(sqlOut, subInfoDBIO); // // _updateSubInfo(subInfoDBIO); // // 맴버변수 VO 값 설정(sqlOut은 기존 + 새로 update되어야 할 필드 모두 반영된 최신 보조명세IO) // stlmnt.setStlmntSubInfo(sqlOut); // } } // // /** // * set primary key of subsidiary table // * @param stlmntSIO // * @param Stlmnt // */ // private IValueObject _setKey(IValueObject stlmntSIO, String arrId, String txDt, int txSeqNbr, String amtTpCd, String prchsRtrnYn) { // stlmntSIO.set("instCd", _getCmnContext().getInstCode()); // stlmntSIO.set("arrId", arrId); // stlmntSIO.set("txDt", txDt); // stlmntSIO.set("txSeqNbr", txSeqNbr); // stlmntSIO.set("amtTpCd", amtTpCd); // stlmntSIO.set("prchsRtrnYn", prchsRtrnYn); // // return stlmntSIO; // // }
static boolean isValid(String value) { for (DtDscdEnum item : DtDscdEnum.values()) { if (value.equals(item.getValue())) { return "99".equalsIgnoreCase(value) ? false : true; } } return false; }
public List<CmpsCndOut> getAllCmpsCndValueList(String cmpxStrctrId) throws BizApplicationException { // Return output return getListCmpsCndValue(null, cmpxStrctrId); }
public List<CrIntCalDtrmnCndOut> getListInterestCalculationDetermineCondition(String instCd) throws BizApplicationException { // 필수 입력 값 체크 _getCrCalculatorUtil().checkInputStringData("AAPCME0006", instCd, "instCd"); CrIntCalDtrmnCndMIO in = new CrIntCalDtrmnCndMIO(); in.setTntInstId(instCd); return _getCrIntCalDtrmnCndMDso().selectListCondition(in); }
public void registerAprvRsltRslt(List<AmAsmAprvRsltIO> amAsmAprvRsltIO) throws BizApplicationException{ _getAsmAprvRsltBiz().registerAprvRsltRslt(amAsmAprvRsltIO); }
protected void register(StaffImpl staffImpl, StaffStsIO staffStsIO) throws BizApplicationException { if(staffStsIO != null) { AtStaffStsDXtnIO atStaffStsDIO = new AtStaffStsDXtnIO(); _getCmnContext().setHeaderColumn(atStaffStsDIO); atStaffStsDIO.setInstCd(staffImpl.getInstCd()); atStaffStsDIO.setStaffId(staffImpl.getStaffId()); atStaffStsDIO.setStaffStsCd(staffStsIO.getStaffStsCd()); atStaffStsDIO.setStaffStsChngRsnCd(staffStsIO.getStaffStsChngRsnCd()); atStaffStsDIO.setStaffStsChngRsnCntnt(staffStsIO.getStaffStsChngRsnCntnt()); atStaffStsDIO.setEfctvEndDt(staffStsIO.getEfctvEndDt() == null ? CCM01.MAX_DATE : staffStsIO.getEfctvEndDt()); atStaffStsDIO.setEfctvStartDt(staffStsIO.getEfctvStartDt() == null ? _getCmnContext().getTxDate() : staffStsIO.getEfctvStartDt()); // 2020.03.09 직원상태명세 테이블에 상태변경년월일/상태변경시분초 컬럼 추가 atStaffStsDIO.setStsChngDt(_getCmnContext().getTxDate()); atStaffStsDIO.setStsChngHms(_getCmnContext().getTxTime()); AtStaffStsDXtnIO lastAtStaffStsDIO = _getAtStaffStsDXtnDso().select(atStaffStsDIO.getInstCd(), atStaffStsDIO.getStaffId(), atStaffStsDIO.getEfctvStartDt()); if(lastAtStaffStsDIO == null) { _getAtStaffStsDXtnDso().insert(atStaffStsDIO); } // 유효시작일이 다른 경우 else if(!lastAtStaffStsDIO.getEfctvStartDt().equals(atStaffStsDIO.getEfctvStartDt())) { _getCmnContext().setHeaderColumn(lastAtStaffStsDIO); lastAtStaffStsDIO.setInstCd(staffImpl.getInstCd()); lastAtStaffStsDIO.setEfctvEndDt(DateUtils.getDateDayBefore(1, atStaffStsDIO.getEfctvStartDt())); _getAtStaffStsDXtnDso().updateEfctvEndDt(lastAtStaffStsDIO); _getAtStaffStsDXtnDso().insert(atStaffStsDIO); // 2020.03.15 직원기본에 직원상태코드/직원상태변경사유코드/상태변경년월일/상태변경시분초가 추가됨 _getAtStaffMXtnDso().updateSts(atStaffStsDIO); } // 유효시작일이 동일한 경우 else { _getCmnContext().setHeaderColumn(lastAtStaffStsDIO); lastAtStaffStsDIO.setInstCd(staffImpl.getInstCd()); lastAtStaffStsDIO.setStaffStsCd(staffStsIO.getStaffStsCd()); lastAtStaffStsDIO.setStaffStsChngRsnCd(staffStsIO.getStaffStsChngRsnCd()); lastAtStaffStsDIO.setStaffStsChngRsnCntnt(staffStsIO.getStaffStsChngRsnCntnt()); lastAtStaffStsDIO.setEfctvEndDt(staffStsIO.getEfctvEndDt() == null ? CCM01.MAX_DATE : staffStsIO.getEfctvEndDt()); _getAtStaffStsDXtnDso().update(lastAtStaffStsDIO); // 2020.03.15 직원기본에 직원상태코드/직원상태변경사유코드/상태변경년월일/상태변경시분초가 추가됨 _getAtStaffMXtnDso().updateSts(lastAtStaffStsDIO); } staffImpl.appendActorInfoChngHst(atStaffStsDIO, lastAtStaffStsDIO, TableNmEnum.AT_STAFF_STS_D.getValue(), staffStsIO.getChngRsnCntnt()); } }
public StlmntGlQuerySvcItemOut clone(){ try{ StlmntGlQuerySvcItemOut object= (StlmntGlQuerySvcItemOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public LnArr360Cnd clone(){ try{ LnArr360Cnd object= (LnArr360Cnd)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void validateTxPassword(ArrMbrshp arrMbrshp, String txPswd) throws BizApplicationException { if(null == txPswd || txPswd.isEmpty()) { throw new BizApplicationException("AAPDPE0029", null); } /* * Get customer's membership arrangement * */ if(arrMbrshp == null) { throw new BizApplicationException("AAPDPE0028", null); } arrMbrshp.validateTxPassword(txPswd); }
public CndVal getComplexCndValue(int tierNbr) throws BizApplicationException { // If isCmpxCnd is false if (!isComplexCnd()) { // Simple condition throw new BizApplicationException("AAPPDE0003", null); } // Set Input PdPdCndUnitComplexSearchIn inDao = _setPdPdCndUnitComplexSearchIn(tierNbr); if (isListCnd()) { return _getComplexListCndValue(inDao); } else if (isRngCnd()) { return _getComplexRangeCndValue(inDao); } /*else if (isIntCnd()) { return _getComplexInterestCndValue(inDao); } else if (isFeeCnd()) { return _getComplexFeeCndValue(inDao); }*/ else { return null; } }
public StlmntRsltVal calculateInterestProvisionalSettlement(ArrReal arr, String crncyCd, String paymentDate, Integer arrTxSeqNbr, String intPymntDt, String acProcDt, Boolean isAccrual, String accrualBasisYn, String lnRpymntTpCd) throws BizApplicationException { // TODO Auto-generated method stub return null; } // /** // * Calculate Interest covering "balance-based Interest calculation" // * 2016.03.28 대출잔액에 대한 이자계산(가결산용) // * // * @param arr // * - (required)arrangement interface // * @param crncyCd // * - (required)currency code // * @param paymentDate // * - (required)transaction date // * @return StlmntRsltVal - Settlement Result Value 정산 결과값 // * @throws BizApplicationException // */ // @Override // @BxmCategory(logicalName = "Calculate Interest about balance-based for ProvisionalSettlement") // public StlmntRsltVal calculateInterestProvisionalSettlement(ArrReal arr, String crncyCd, String paymentDate, Integer arrTxSeqNbr, String intPymntDt, String acProcDt, Boolean isAccrual) throws BizApplicationException { // // StlmntRsltVal stlmntRsltVal = (StlmntRsltVal)super.calculateInterestProvisionalSettlement((ArrRealCore)arr, crncyCd, paymentDate, arrTxSeqNbr, intPymntDt, acProcDt, isAccrual); // // return stlmntRsltVal; // } // @Override // @BxmCategory(logicalName = "Calculate Interest about balance-based for ProvisionalSettlement") // public StlmntRsltVal calculateInterestProvisionalSettlement(ArrReal arr, String crncyCd, String paymentDate, Integer arrTxSeqNbr, String intPymntDt, String acProcDt, Boolean isAccrual, String accrualBasisYn) throws BizApplicationException { // // StlmntRsltVal stlmntRsltVal = (StlmntRsltVal)super.calculateInterestProvisionalSettlement((ArrRealCore)arr, crncyCd, paymentDate, arrTxSeqNbr, intPymntDt, acProcDt, isAccrual, accrualBasisYn); // // return stlmntRsltVal; // } // @Override // @BxmCategory(logicalName = "Calculate Interest about balance-based for ProvisionalSettlement") // public StlmntRsltVal calculateInterestProvisionalSettlement(ArrReal arr, String crncyCd, String paymentDate, Integer arrTxSeqNbr, String intPymntDt, String acProcDt, Boolean isAccrual, String accrualBasisYn, String lnRpymntTpCd) throws BizApplicationException { // // StlmntRsltVal stlmntRsltVal = (StlmntRsltVal)super.calculateInterestProvisionalSettlement((ArrRealCore)arr, crncyCd, paymentDate, arrTxSeqNbr, intPymntDt, acProcDt, isAccrual, accrualBasisYn, lnRpymntTpCd); // // return stlmntRsltVal; // } // /* // * (non-Javadoc) // * // * @see tw.linebank.corebanking.settlement.interestcalculationloan.interfaces. // * IntCalculatorLnMngr // * #IntCalculatorLnArrIntRtReFixRpymnt(bankware.corebanking // * .arrangement.arrangement.interfaces.Arr, java.lang.String, // * java.lang.String, tw.linebank.corebanking.settlement.enums.CashTrnsfrEnum, // * java.math.BigDecimal, boolean) // */ // @Override // @BxmCategory(logicalName = "Calculate Loan whole Early Repayment & Termination") // public StlmntRsltVal calculateInterestLoanArrInterestRatetReFixRpymnt(ArrReal arr, String crncyCd, String paymentDate, String cashTrnsfr, BigDecimal cashTrnsfrAmt, boolean smltn) throws BizApplicationException { // // StlmntRsltVal stlmntRsltVal = (StlmntRsltVal)super.calculateInterestLoanArrInterestRatetReFixRpymnt((ArrRealCore)arr, crncyCd, paymentDate, cashTrnsfr, cashTrnsfrAmt, smltn); // // return stlmntRsltVal; // } // @BxmCategory(logicalName = "Get Accumulated Amount") // public List<GetIntCalculatorLnDailyBalanceOut> getListAccumulatedAmount(ArrReal arr, String calcStartDt, String calcEndDt) throws BizApplicationException { // return super.getListAccumulatedAmount((ArrRealCore)arr, calcStartDt, calcEndDt); // } // /** // * calculate the Principal Amount from Payable Amount(Principal + Interest + // * Early Repayment Fee Amount) - applied only for 'Full Pay at Maturity' // * Loan Arrangement with interest paid at enddate oth the loan - applied // * only for both 'Interest Advance' and 'Interest Arrear' // * // * @param arr // * - (required)Arrangement information // * @param crncyCd // * - (optional)currency Code // * @param toDate // * - (required)date of Repayment // * @param pyablAmt // * - (required)Amount to pay(Principal + Interest + Early // * Repayment Fee Amount) // * @param smltn // * - (required)simulation Yes or No ( only 'true' is allowed) // * // * @return PrnCalcOut - the result of the calculation(1.calculated principal // * Amount , 2.overdue Yes or No // * @throws BizApplicationException // */ // /* // * (non-Javadoc) // * // * @see tw.linebank.corebanking.settlement.interestcalculationloan.interfaces. // * IntCalculatorLnMngr // * #calculatePrincipalFromRepaymentAmount(bankware.corebanking // * .arrangement.arrangement.interfaces.Arr, java.lang.String, // * java.lang.String, java.math.BigDecimal, boolean) // */ // @BxmCategory(logicalName = "calculate the Principal Amount from Payable Amount") // public PrnCalcOut calculatePrincipalFromRepaymentAmount(ArrReal arr, String crncyCd, String toDate, BigDecimal pyablAmt, boolean smltn) throws BizApplicationException { // // PrnCalcOut prnCalcOut = super.calculatePrincipalFromRepaymentAmount((ArrRealCore)arr, crncyCd, toDate, pyablAmt, smltn); // // return prnCalcOut; // } // /** // * get the list of loan interest by customer's death information 고객사망정보로 // * 대출이자계산 조회 // * // * @param arr // * - (required)arrangement interface // * @param xtdInfo // * - (required)interest calculation extend information // * @return List<ArrCashFlowDDtlIO> - - cashflow list // * @throws BizApplicationException // */ // @BxmCategory(logicalName = "Get Loan Interest Amount by Death Information") // public List<ArrCashFlowIO> getListLoanInterestAmountByDeathInfo(ArrReal arr, Map<String, Object> xtdInfo) throws BizApplicationException { // return super.getListLoanInterestAmountByDeathInfo((ArrRealCore)arr, xtdInfo); // } // /** // * Get Settlement Unrepaid Arrangement Cash Flow For Purchase Loan Interest // * Amount 미수이자 환입을 위한 미수현금내역 조회 // * // * @param arr // * - (required)arrangement interface // * @param xtdInfo // * - (required)interest calculation extend information // * @return List<ArrCashFlowIO> - - cashflow list // * @throws BizApplicationException // */ // @BxmCategory(logicalName = "Get Settlement Unrepaid Arrangement Cash Flow For Purchase Loan Interest Amount") // public List<ArrCashFlowIO> getListStUnrpdArrCashFlowForPurchaseInterest(ArrReal arr, Map<String, Object> xtdInfo) throws BizApplicationException { // // List<ArrCashFlowIO> arrCashFlowIO = super.getListStUnrpdArrCashFlowForPurchaseInterest((ArrRealCore)arr, xtdInfo); // // return arrCashFlowIO; // } // // /** // * get the list of arrangement's scheduled Interest Amount that a repayment // * date is due for specific period By CUST_ID 고객ID로 특정기간의 이자예상조회 // * // * @param instCd // * - (required)institute code // * @param custId // * - (required)Customer ID // * @param sctnStartDt // * - (required)section start date // * @return List<ArrCashFlowDDtlIO> - - cashflow list // * @throws BizApplicationException // */ // @BxmCategory(logicalName = "get the list of scheduled Interest Amoun with custId") // public List<ArrDuedateAdventListOut> getCustOwnArrListBasedOnArrBasic(String custId, String sctnStartDt) throws BizApplicationException { // // List<ArrDuedateAdventListOut> arrDuedateAdventList = super.getListCustOwnArrBasedOnArrBasic(custId, sctnStartDt); // // return arrDuedateAdventList; // } // // // /** // * @return the arrCashFlow // */ // private LnIntCalcnMinusImpl _getLnIntCalcnMinusImpl() { // if (lnIntCalcnMinusImpl == null) { // lnIntCalcnMinusImpl = (LnIntCalcnMinusImpl) CbbApplicationContext.getBean( // LnIntCalcnMinusImpl.class, lnIntCalcnMinusImpl); // } // return lnIntCalcnMinusImpl; // } // /* // * (non-Javadoc) // * // * @see // * tw.linebank.corebanking.settlement.settlement.interfaces.IntCalculatorLnMngr // * #calculateInterestTermination( // * tw.linebank.corebanking.arrangement.arrangement.interfaces.Arr, // * java.lang.String, java.lang.String, java.lang.String, // * tw.linebank.corebanking.settlement.enums.CashTrnsfrEnum, // * java.math.BigDecimal, boolean) // */ // @Override // @BxmCategory(logicalName = "Calculate Loan whole Early Repayment & Termination") // public StlmntRsltVal calculateInterestTermination( ArrReal arr, String crncyCd, String paymentDate, String arrTrmntnDscd, String cashTrnsfr, BigDecimal cashTrnsfrAmt, boolean smltn) throws BizApplicationException { // // if (logger.isDebugEnabled()) { // logger.debug("## <SHW> IntCalculatorMngrImpl.calculateIntTrmntn START"); // } // StlmntRsltVal stlmntRsltVal = (StlmntRsltVal)super.calculateInterestTerminationCore((ArrRealCore)arr, crncyCd, paymentDate, arrTrmntnDscd, cashTrnsfr, cashTrnsfrAmt, smltn); // // return stlmntRsltVal; // } // /* // * (non-Javadoc) // * // * @see // * tw.linebank.corebanking.settlement.settlement.interfaces.IntCalculatorLnMngr // * #calculateInterestPartialTermination // * (tw.linebank.corebanking.arrangement.arrangement.interfaces.Arr, // * java.lang.String, java.math.BigDecimal, java.lang.String, // * java.lang.String, tw.linebank.corebanking.settlement.enums.CashTrnsfrEnum, // * java.math.BigDecimal, boolean) // */ // /** // * (To Do) 2015.10.28일 조기상환후 상환스케쥴 재조정 방법 파라미터 삭제 및 확정정보 저장 불필요.. * // * prncplDcrsWay 파라미터 삭제 에정 ... // */ // @Override // @BxmCategory(logicalName = "Calculate Loan Partial Early Repayment") // public StlmntRsltVal calculateInterestPartialTermination(ArrReal arr, String crncyCd, BigDecimal prncplAmt, String paymentDate, String cashTrnsfr, BigDecimal cashTrnsfrAmt, boolean smltn) throws BizApplicationException { // return (StlmntRsltVal)super.calculateInterestPartialTermination((ArrRealCore)arr, crncyCd, prncplAmt, paymentDate, cashTrnsfr, cashTrnsfrAmt, smltn); // } // // @Override // @BxmCategory(logicalName = "Calculate Loan Partial Early Repayment") // public StlmntRsltVal calculateInterestPartialTermination(ArrReal arr, String crncyCd, BigDecimal prncplAmt, String paymentDate, String cashTrnsfr, BigDecimal cashTrnsfrAmt, boolean smltn, Integer arrTxSeqNbr, String prtlRpymntAfRpymntDscd, Integer rpymntCnt) throws BizApplicationException { // // StlmntRsltVal stlmntRsltVal = (StlmntRsltVal)super.calculateInterestPartialTermination((ArrRealCore) arr, crncyCd, prncplAmt, paymentDate, cashTrnsfr, cashTrnsfrAmt, smltn, arrTxSeqNbr, prtlRpymntAfRpymntDscd, rpymntCnt); // // return stlmntRsltVal; // } // /** // * Calculate Interest & process repayment of the "CYCLE REPAYMENT..." // * interest & principal to be repaid until a date 2016.04.21 여신상환 이자 계산 // * // * @deprecated method name [calculateInterestEtcRepayment] changed to // * [calculateInterestRepayment] // * @param arr // * - (required)arrangement interface // * @param xtdInfo // * - (required)currency code // * @return StlmntRsltVal - Settlement Result Value // * @throws BizApplicationException // */ // @Deprecated // public StlmntRsltVal calculateInterestEtcRepayment(ArrReal arr, Map<String, Object> xtdInfo) throws BizApplicationException { // return calculateInterestRepayment(arr, xtdInfo); // }
public void saveMapSubInfo(Map<String, String> assetTxSubInfoMap, AssetTxCore assetTx) throws BizApplicationException { _getAssetTxSubInfoBiz().saveMapSubInfo(assetTxSubInfoMap, (AssetTxImpl) assetTx); }
public java.lang.String getAssetStsCd(){ return assetStsCd; }
public String getUpAcctgItmNm(CaCoaDtlIO in) throws BizApplicationException { CaCoaDtlIO coaDtlIO = getCoa(in.getInstCd(),in.getAcctgDscd(),in.getAcctgItmCd()); if (!StringUtils.isEmpty(coaDtlIO.getUpAcctgItmCd())){ CaAcCoaMIO acCoaMIO = _getAcCoaMDso().select(_getAcCoaMIO(coaDtlIO.getInstCd(),coaDtlIO.getAcctgDscd(),coaDtlIO.getUpAcctgItmCd())); if (acCoaMIO == null){ return null; }else{ return acCoaMIO.getAcctgTitlAcctgAbrvtnNm(); } }else{ return null; } }
public ArrCndSvcQryIn clone(){ try{ ArrCndSvcQryIn object= (ArrCndSvcQryIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String xtnAtrbtNm, AprslCore aprslCore, Integer prfClaimSeqNbr) throws BizApplicationException { return _getAprslPrfClaimSubInfoBiz().getSubInfo(xtnAtrbtNm, (AprslImpl)aprslCore, prfClaimSeqNbr); }
public String getSubInfo(String atrbtNm, ActorImpl actorImpl) throws BizApplicationException { // 1. 보조명세 캐시 조회 IValueObject subInfo = getSubInfoCache(actorImpl); // 2. 보조명세 캐시가 null인 경우, null 리턴 if (subInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명 기준으로 속성값 조회 Object atrbtVal = subInfo.get(atrbtNm); // Casting 시 Null 방지 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public Map<AssetXtnInfoEnum, String> getMapAssetXtnInfo() throws BizApplicationException { Map<AssetXtnInfoEnum, String> xtnInfoHash = new HashMap<AssetXtnInfoEnum, String>(); // 확장정보명세 Map<String, String> xtnInfoStrMap = super.getMapAssetXtnInfoAsStrByEav(); for(Entry<String, String> entry : xtnInfoStrMap.entrySet()){ xtnInfoHash.put(AssetXtnInfoEnum.getEnum(entry.getKey()), entry.getValue()); } // 보조명세 Map<String, String> subInfoMap = _getAssetSubInfoBiz().getMapSubInfo(this); for(Entry<String, String> entry : subInfoMap.entrySet()){ xtnInfoHash.put(AssetXtnInfoEnum.getEnum(entry.getKey()), entry.getValue()); } return xtnInfoHash; }
public String getNextRebuildDate(String arg0, String arg1) throws BizApplicationException { return "20220215"; }
public CustDocOvrvwInqrySvcGetIn clone(){ try{ CustDocOvrvwInqrySvcGetIn object= (CustDocOvrvwInqrySvcGetIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public BigDecimal getRoleLImitMax(String instCd, String crncyCd, List<String> roleList) throws BizApplicationException { instCd = StringUtils.isEmpty(instCd) ? _getCmnContext().getInstCode() : instCd; _checkStringValue(crncyCd, CCM03.CRNCY_CD); if(roleList == null || roleList.isEmpty()) { throw new BizApplicationException("AAPCME0006", new Object[] { "@".concat("roleList") }); } return _getCmRoleMDso().selectRoleLimitMax(instCd, crncyCd, roleList); }
public List<PdLstCtMOut> getListListConditionInfo(String instId, String cndCd) throws BizApplicationException { String mTntInstId = _getInstitution().getMotherInstitutionId(instId); // 조건기본 조회 CndTmpltIn inCnd = new CndTmpltIn(); inCnd.setInstCd(instId); inCnd.setCndCd(cndCd); CndTmpltOut cndTmpltOut = this.getCndTmpltInfo(inCnd); if (cndTmpltOut == null) { return new ArrayList<PdLstCtMOut>(); } List<PdLstCtMIO> outIOList = new ArrayList<PdLstCtMIO>(); // listRefTpCd null이면 목록코드로 본다. if (StringCoreUtils.isEmpty(cndTmpltOut.getListRefTpCd()) || ListReferenceTypeCoreEnum.LIST_CD.getValue().equals(cndTmpltOut.getListRefTpCd())) { /** * DataCache START */ // Make unique key String uKey = PdUtil.concatenateKeys(Arrays.asList(mTntInstId, cndCd)); // 목록조건정보 목록조회 // Get cache data outIOList = _getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_LIST_CND_LIST_CACHE, uKey); if (outIOList == null) { // 목록조건정보 목록조회 outIOList = _convertToPdLstCtMOutList(_getTemplate().getListListCndTemplateBase(instId, cndCd)); // Put cache data _getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_LIST_CND_LIST_CACHE, uKey, outIOList); } /** * DataCache END */ } else if (ListReferenceTypeCoreEnum.CMN_CD.getValue().equals(cndTmpltOut.getListRefTpCd())) { List<CmnCdCheckOut> cmnCdList = _getCd().getListCode(cndTmpltOut.getRefTrgtNm()); if (!CollectionCoreUtils.isEmpty(cmnCdList)) { for (CmnCdCheckOut cmnCd : cmnCdList) { PdLstCtMIO outIO = new PdLstCtMIO(); outIO.setListCd(cmnCd.getCd()); outIO.setListCdNm(cmnCd.getCdNm()); outIO.setActvYn(CPD01.YES); outIOList.add(outIO); } } } // Return output return _setOutput4GettListConditionInfoList(outIOList, mTntInstId, cndCd); }
public PdCalculationJudgmentCndDetailInqryListCdSvcOut clone(){ try{ PdCalculationJudgmentCndDetailInqryListCdSvcOut object= (PdCalculationJudgmentCndDetailInqryListCdSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isArrKindStandingOrder() { return super.getArrKindCd().equals(ArrKndEnum.STANDING_ORDER.getValue()); }
public List<AssetCore> getListAssetCore(String assetCustRelCd, String custId, String actvStsCd) throws BizApplicationException { List<AssetCore> assetList = new ArrayList<AssetCore>(); List<String> assetIdList = new ArrayList<String>(); switch (AssetCustRelCoreEnum.getEnum(assetCustRelCd)) { case DEBTOR : assetIdList = _getAssetBasicBiz().getListAssetByDebtorId(custId, actvStsCd); break; case OWNER : assetIdList = _getAssetBasicBiz().getListAssetByOwnerId(custId, actvStsCd); break; case ISSUER : assetIdList = _getAssetBasicBiz().getListAssetByIssuerId(custId, actvStsCd); break; default: throw new BizApplicationException("AAPCME0006", new Object[] {"@assetCustRelCd"}); } for(String assetId : assetIdList){ AssetCore asset = getAssetCore(assetId); assetList.add(asset); } return assetList; }
public int delete(CaDcDocRefAtrbtMIO dcDocRefAtrbtMIO) { return _getDcDocRefAtrbtM().delete(dcDocRefAtrbtMIO); }
static boolean isValid(String value){ for (ArrSyncKndEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public List<ArrPlanIO> getArrPlans(String arrSrvcCd,String exctnPlnDt,String arrPlnStsCd, ArrRealCoreImpl arrReal) throws BizApplicationException { // 계약 계획 주제영역 미사용 시 skip if (!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.PLAN)) { return new ArrayList<ArrPlanIO>(); } _checkInput(arrSrvcCd,exctnPlnDt,arrReal); List<ArrPlanIO> arrPlanIOList = new ArrayList<ArrPlanIO>(); for (ArArrPlnMIO arArrPlnMIO :_selectListPlan(arrSrvcCd, exctnPlnDt, arrPlnStsCd, arrReal)) { arrPlanIOList.add(_buildArrPlanIO(arArrPlnMIO)); } return arrPlanIOList; }
public String getPntStsCd() { return pdPdM.getPdStsCd(); }
public List<CaInstSrvcIO> getListInstService(String instCd, String cmpntCd, String baseDt) throws BizApplicationException { String sInstCd = instCd; if (StringUtils.isEmpty(instCd)) sInstCd = _getCaCmnContext().getInstCode(); List<CaSvInstSrvcMIO> svInstSrvcMIOList; List<CaInstSrvcIO> instSrvcList = new ArrayList<CaInstSrvcIO>(); if (baseDt == null) baseDt = CCM01.MIN_DATE; if (StringUtils.isEmpty(cmpntCd)) { svInstSrvcMIOList = _getSvInstSrvcMDso().selectListByInstCdAndBaseDt(sInstCd, baseDt); } else { CaSvInstSrvcMIO svInstSrvcMIO = new CaSvInstSrvcMIO(); svInstSrvcMIO.setInstCd(sInstCd); svInstSrvcMIO.setCmpntCd(cmpntCd); svInstSrvcMIO.setAplyStartDt(baseDt); svInstSrvcMIOList = _getSvInstSrvcMDso().selectListByCmpntCd(svInstSrvcMIO); } for (CaSvInstSrvcMIO svInstSrvcMIO : svInstSrvcMIOList) { CaInstSrvcIO instSrvc = _setInstitutionService(svInstSrvcMIO); instSrvcList.add(instSrvc); } return instSrvcList; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, ArrIssmdaCore arrIssmda, String txDt, Integer txSeqNbr) throws BizApplicationException { _getArrIssmdaSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (ArrIssmdaImpl) arrIssmda, txDt, txSeqNbr); }
public LnIntSmltnSvcCndValListIn clone(){ try{ LnIntSmltnSvcCndValListIn object= (LnIntSmltnSvcCndValListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public java.lang.String getArrLastAgrmntHms(){ return arrLastAgrmntHms; }
public void saveMapSubInfo(Map<String, String> subInfoMap, StStlmntCalcnSIO stStlmntCalcnSIOIn) { logger.debug("##<ST-StlmntCalcnSubInfoBiz> saveMapSubInfo"); if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1.create a new instance of I/F VO //IValueObject subInfoIfVo = new StlmntCalcnSubInfo(); // 2.create a new instance of DBIO VO StStlmntCalcnSIO stStlmntCalcnSIO = new StStlmntCalcnSIO(); // 3.set primary key _setKey(stStlmntCalcnSIO, stStlmntCalcnSIOIn); // 4.convert map to DBIO VO DtoUtils.setSubInfoIO(subInfoMap, stStlmntCalcnSIO); // 5.insert subsidiary detail _insertSubInfo(stStlmntCalcnSIO); }
public CaCrdtrtgMgmtSvcGetCrdtrtg clone(){ try{ CaCrdtrtgMgmtSvcGetCrdtrtg object= (CaCrdtrtgMgmtSvcGetCrdtrtg)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<InterestCalculationSection> apply(ApplyInterestCalculationSectionExceptionIn in, List<InterestCalculationSection> intCalIntervals) throws BizApplicationException { String partialRepymntTxDt = in.getPartialRepymntTxDt(); // 일부상환거래일 BigDecimal partialRepymntTotalPrncpl = in.getPartialRepymntTotalPrncpl(); // 일부상환 원금 합계 // 신규 계산구간 (회분계산구분 = 4-일부상환 미수이자 정리) InterestCalculationSection interval = new InterestCalculationSection(); interval.setPymntNth(in.getDesiredPymntNth()); interval.setNthCalTgtDscd(NthCalculationTargetDscdEnum.PARTIAL_REPAYMENT_NOT_LEVY_INTEREST.getCode()); // 계산유형 추가 173-일부상환미수이자, 최종이수일 ~ 일부상환거래일, 일부상환원금합계 CalculationType type = new CalculationType(); type.setInstCd(in.getInstCd()); type.setIntCalTpCd("173"); type.setCalTgtAmt(partialRepymntTotalPrncpl); type.setCalStartDt(in.getLastPymntDt()); type.setCalEndDt(partialRepymntTxDt); type.setCalBaseTrmCnt(365); type.setIntCalTgt(false); interval.setCalTps(Arrays.asList(new CalculationType[] { type })); // 계산구간 가장 앞에 추가 intCalIntervals.add(0, interval); return intCalIntervals; }
public Map<String, String> getMapSubInfo(StaffCore staffCore) throws BizApplicationException { return _getStaffSubInfoBiz().getMapSubInfo((StaffImpl)staffCore); }
public List<SvCntrlCntrBrnchDIO> selectList(String instCd, String cntrlCntrId, String txDt) { return _getSvCntrlCntrBrnchD().selectList(instCd, cntrlCntrId, txDt); }
public void validate() throws BizApplicationException { // 해당 메소드는 ({0}) 클래스의 인스턴스로 사용할 수 없습니다. 계약담당자에게 문의바랍니다. // This method cannot be used by instance of ({0}) class. throw new BizApplicationException("AAPARE0678",new Object[]{this.getClass().getName()}); }
public List<CustCrtfctAplctnIO> getListCertificateApplicationFromTo(CustCrtfctAplctnInqryIn custCrtfctAplctnInqryIn) throws BizApplicationException { if (custCrtfctAplctnInqryIn == null) { return null; } //check required inputs if (StringUtils.isEmpty(custCrtfctAplctnInqryIn.getInqryStartDt())) { throw new BizApplicationException("AAPCME0006", new String[] {"@inqryStartDt"}); } else if (StringUtils.isEmpty(custCrtfctAplctnInqryIn.getInqryEndDt())) { throw new BizApplicationException("AAPCME0006", new String[] {"@inqryEndDt"}); } return _getCustCrtfctAplctnXtn().getListCertificateApplication(custCrtfctAplctnInqryIn); }
public void modifyExtrnlInstMsgMetaInfo(CaExtrnlIntrfcMsgMgmtIn in) throws BizApplicationException { /** * check required items */ _checkParam(in); /** * 수정하려는 매타정보가 존재하는 지 검증 */ CaXpExtrnlIntrfcMsgMIO xpExtrnlIntrfcMsgMIO = _getXpExtrnlMsgMDso().select(_setSelectIn(in)); if(xpExtrnlIntrfcMsgMIO == null) { throw new BizApplicationException("CAPXPE0010"); } CaXpExtrnlMsgMIn xpExtrnlIntrfcMsgMIn = new CaXpExtrnlMsgMIn(); _getCaCmnContext().setColumn(xpExtrnlIntrfcMsgMIn); xpExtrnlIntrfcMsgMIn.setInstCd(xpExtrnlIntrfcMsgMIO.getInstCd()); xpExtrnlIntrfcMsgMIn.setExtrnlInstCd(xpExtrnlIntrfcMsgMIO.getExtrnlInstCd()); xpExtrnlIntrfcMsgMIn.setExtrnlInstTxDscd(xpExtrnlIntrfcMsgMIO.getExtrnlInstTxDscd()); /** * set modifiable items */ xpExtrnlIntrfcMsgMIn.setExtrnlMsgFormatDscd(in.getExtrnlMsgFormatDscd());// set [대외전문형식구분코드] xpExtrnlIntrfcMsgMIn.setBizSrvcCd(in.getBizSrvcCd());// set [업무서비스코드] xpExtrnlIntrfcMsgMIn.setRsltRcvSrvcCd(in.getRsltRcvSrvcCd());// set [결과수신서비스코드] xpExtrnlIntrfcMsgMIn.setSysIntrfcId(in.getSysIntrfcId());// set [시스템인터페이스식별자] xpExtrnlIntrfcMsgMIn.setExtrnlIntrfcMthdDscd(in.getExtrnlIntrfcMthdDscd());// set [대외인터페이스방식구분코드] xpExtrnlIntrfcMsgMIn.setExtrnlIntrfcCallWayDscd(in.getExtrnlIntrfcCallWayDscd());// set [대외인터페이스호출방법구분코드] xpExtrnlIntrfcMsgMIn.setExtrnlIntrfcAuthWayDscd(in.getExtrnlIntrfcAuthWayDscd());// set [대외인터페이스인증방법구분코드] xpExtrnlIntrfcMsgMIn.setExtrnlIntrfcMsgMthdDscd(in.getExtrnlIntrfcMsgMthdDscd());// set [대외인터페이스전문방식구분코드] //xpExtrnlIntrfcMsgMIO.setExtrnlInstUrlVal(in.getExtrnlInstUrlVal());// set [대외기관URL값] xpExtrnlIntrfcMsgMIn.setDvlpSrvrExtrnlInstUrlVal(in.getDvlpSrvrExtrnlInstUrlVal()); xpExtrnlIntrfcMsgMIn.setTstSrvrExtrnlInstUrlVal(in.getTstSrvrExtrnlInstUrlVal()); xpExtrnlIntrfcMsgMIn.setOprtnSrvrExtrnlInstUrlVal(in.getOprtnSrvrExtrnlInstUrlVal()); xpExtrnlIntrfcMsgMIn.setExtrnlInstUrlPrfxVal(in.getExtrnlInstUrlPrfxVal());// set [대외기관URL접두사값] xpExtrnlIntrfcMsgMIn.setUrlParmNmDscd(in.getUrlParmNmDscd());// set [URL파라미터명구분코드] xpExtrnlIntrfcMsgMIn.setParmNm(in.getParmNm());// set [파라미터명] xpExtrnlIntrfcMsgMIn.setExtrnlInstUrlSuffixVal(in.getExtrnlInstUrlSuffixVal());// set [대외기관URL접미사값] xpExtrnlIntrfcMsgMIn.setAdtnlParmNm(in.getAdtnlParmNm());// set [추가파라미터명] xpExtrnlIntrfcMsgMIn.setTimeoutScnd(in.getTimeoutScnd());// set [타임아웃초] xpExtrnlIntrfcMsgMIn.setInpDtoNm(in.getInpDtoNm());// set [입력DTO명] xpExtrnlIntrfcMsgMIn.setOutpDtoNm(in.getOutpDtoNm());// set [출력DTO명] xpExtrnlIntrfcMsgMIn.setRelRmkCntnt(in.getRelRmkCntnt());// set [관련비고내용] _getXpExtrnlMsgMDso().update(xpExtrnlIntrfcMsgMIn); } /* (non-Javadoc) * @see bankware.corebanking.externalproxy.extrnlInstInfo.business.ExtrnlIntrfcMsgMgmt#delete(bankware.corebanking.externalproxy.extrnlInstInfo.dao.dto.CaXpExtrnlIntrfcMsgMIO) */ // @Override // public int delete(CaExtrnlIntrfcMsgMgmtIn in) { // // CaXpExtrnlIntrfcMsgMIO xpExtrnlIntrfcMsgMIO = new CaXpExtrnlIntrfcMsgMIO(); // int out; // // // Generated by code generator [[ // xpExtrnlIntrfcMsgMIO.setInstCd(in.getInstCd());// set [기관코드] // xpExtrnlIntrfcMsgMIO.setExtrnlInstCd(in.getExtrnlInstCd());// set [대외기관코드] // xpExtrnlIntrfcMsgMIO.setExtrnlInstTxDscd(in.getExtrnlInstTxDscd());// set [대외기관거래구분코드] // xpExtrnlIntrfcMsgMIO.setExtrnlMsgFormatDscd(in.getExtrnlMsgFormatDscd());// set [대외전문형식구분코드] // // Generated by code generator ]] // // out = _getXpExtrnlIntrfcMsgMDso().delete(xpExtrnlIntrfcMsgMIO); // // return out; // }
public boolean check(String vldnTrgt) throws BizApplicationException { return Pattern.matches("^[a-zA-Z0-9\\@\\.]*$", vldnTrgt); }
public String getSubInfo(String xtnAtrbtNm, ArrTxCore arrTx) { return _getArrTxSubInfoBiz().getSubInfo(xtnAtrbtNm,(ArrTxImpl)arrTx); }
public CustTotalInqrySvcGetCustOvrvwOut clone(){ try{ CustTotalInqrySvcGetCustOvrvwOut object= (CustTotalInqrySvcGetCustOvrvwOut)super.clone(); if ( this.xtnInfoList== null ) object.xtnInfoList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustXtnInfoOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustXtnInfoOut>(xtnInfoList.size()); for( bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustXtnInfoOut item : xtnInfoList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustXtnInfoOut)item.clone()); } object.xtnInfoList = clonedList; } if ( this.ctcptList== null ) object.ctcptList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustCntctPntOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustCntctPntOut>(ctcptList.size()); for( bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustCntctPntOut item : ctcptList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustCntctPntOut)item.clone()); } object.ctcptList = clonedList; } if ( this.unqNbrList== null ) object.unqNbrList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustUnqIdNbrOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustUnqIdNbrOut>(unqNbrList.size()); for( bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustUnqIdNbrOut item : unqNbrList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustUnqIdNbrOut)item.clone()); } object.unqNbrList = clonedList; } if ( this.actorNmList== null ) object.actorNmList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustNameInfoOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustNameInfoOut>(actorNmList.size()); for( bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustNameInfoOut item : actorNmList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustNameInfoOut)item.clone()); } object.actorNmList = clonedList; } if ( this.actorRelList== null ) object.actorRelList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustRelInfoOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustRelInfoOut>(actorRelList.size()); for( bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustRelInfoOut item : actorRelList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetCustRelInfoOut)item.clone()); } object.actorRelList = clonedList; } if ( this.addrList== null ) object.addrList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetAddrOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetAddrOut>(addrList.size()); for( bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetAddrOut item : addrList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetAddrOut)item.clone()); } object.addrList = clonedList; } if ( this.telNbrList== null ) object.telNbrList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetTelNbrOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetTelNbrOut>(telNbrList.size()); for( bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetTelNbrOut item : telNbrList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetTelNbrOut)item.clone()); } object.telNbrList = clonedList; } if ( this.elctrncAddrList== null ) object.elctrncAddrList = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetElctrncAddrOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetElctrncAddrOut>(elctrncAddrList.size()); for( bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetElctrncAddrOut item : elctrncAddrList ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.CustTotalInqrySvcGetElctrncAddrOut)item.clone()); } object.elctrncAddrList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public PdBaseIntRtInqrySvcBaseRt clone(){ try{ PdBaseIntRtInqrySvcBaseRt object= (PdBaseIntRtInqrySvcBaseRt)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveSubInfo(ActorImpl actorImpl, String ctcptId, Integer ctcptChngSeqNbr, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)) { return; } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 // ** 연락처 보조명세는 변경이력을 관리하지 않는다. AtActorCtcptSIO subInfoIO = getSubInfoCache(actorImpl, ctcptId, ctcptChngSeqNbr); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtActorCtcptSIO(); subInfoIO.setActorId(actorImpl.getActorId()); subInfoIO.setActorCtcptId(ctcptId); subInfoIO.setActorCtcptChngSeqNbr(ctcptChngSeqNbr); // 입력된 속성명과 속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // insert _getAtActorCtcptSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO)) { return; } // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoIO); // update _getAtActorCtcptSDso().update(subInfoIO); } // 2. 캐시 저장 _saveSubInfoCache(subInfoIO, actorImpl, ctcptId, ctcptChngSeqNbr); }
public void delete(CaArArrSrvcBlckngRgstPIO CaArArrSrvcBlckngRgstPIO) { _getArArrSrvcBlckngRgstP().delete(CaArArrSrvcBlckngRgstPIO); }
public void modifyCndValue(String baseDt, String cndVal, String txDt, int txSeqNbr) throws BizApplicationException { _isInstallmentDateChange(); _changePlan(); }
public Integer getFrctnAplyCnt() throws BizApplicationException{ if (isComplexAndTierIsNotDecided()) { return null; } if (isComplex()) { return _getCmpxIntCndValSub1().getFrctnAplyCnt(); } return _getSmplIntCndVal().getFrctnAplyCnt(); }
public CaSrvcBlckngInfoMgmtSvcGetSrvcBlckngInfoIn clone(){ try{ CaSrvcBlckngInfoMgmtSvcGetSrvcBlckngInfoIn object= (CaSrvcBlckngInfoMgmtSvcGetSrvcBlckngInfoIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(AsmCore asm){ return _getAsmSubInfoBiz().getMapSubInfo((AsmImpl)asm); }
public boolean isExtendAttribute() { return stdDtoClassAtrbt.isXtnAtrbtYn(); }
public String getSubInfo(ActorImpl actorImpl, String ctcptId, Integer ctcptChngSeqNbr, String atrbtNm) throws BizApplicationException { // 1. 보조명세 캐시 조회 AtActorCtcptSIO subInfo = getSubInfoCache(actorImpl, ctcptId, ctcptChngSeqNbr); // 2. 보조명세 캐시가 null인 경우, null 리턴 if (subInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명 기준으로 속성값 조회 Object atrbtVal = subInfo.get(atrbtNm); // Casting 시 Null 방지 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public List<CaClTreeIO> getListClassification(CaClTreeIO in) throws BizApplicationException { List<CaClTreeIO> out = new ArrayList<CaClTreeIO>(); CaCmClTreeDIO inDao = _getInputClassification(in); inDao.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue()); List<CaCmClTreeDIO> daoOtList = _getCmClTreeDDso().selectList(inDao); for (CaCmClTreeDIO daoOut : daoOtList) { CaClTreeIO sub = _getOutputClassificationTree(daoOut); out.add(sub); } return out; }
public String getTransferLanguage(String trnsfrKnd, String trnsfrKeyVal, String lngCd) throws BizApplicationException { if(StringCoreUtils.isEmpty(trnsfrKnd)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@trnsfrKnd" }); } if(StringCoreUtils.isEmpty(trnsfrKeyVal)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@trnsfrKeyVal" }); } if(StringCoreUtils.isEmpty(lngCd)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@lngCd" }); } return _getCmMltLngTrnsltnDDso().getTransferLanguage(trnsfrKnd, trnsfrKeyVal, lngCd); }
public boolean isTerminated() { return this.arrGrpStsCd.equals(ArrGrpStsCoreEnum.TERMINATED.getValue()); }
public String getNumbering(String nbrgAtrbtNm,Map<String, Object> inpParmMap) throws BizApplicationException { return getNumbering(_getCmnContext().getInstCode(), nbrgAtrbtNm, inpParmMap, false); }
public CustCheckPwdOut login(String loinIdNbr, String pswd, String loinTpCd) throws BizApplicationException, ParseException { //check required inputs if (StringUtils.isEmpty(pswd)) { throw new BizApplicationException("AAPCME0006", new Object[] {"@pswd"}); } //check input code _getCd().validateCode(ActorBaseCdNbrCoreEnum.LOIN_TP_CD.getValue(), loinTpCd); if (StringUtils.isEmpty(loinIdNbr)) { return _getCustLoinInfoBiz().login(this, getCustLoinInfoCache(getLoginIdNbr()), pswd, loinTpCd); } else { return _getCustLoinInfoBiz().login(this, getCustLoinInfoCache(loinIdNbr), pswd, loinTpCd); } }
public PrtnrshpArrOpnSvcArrIn clone(){ try{ PrtnrshpArrOpnSvcArrIn object= (PrtnrshpArrOpnSvcArrIn)super.clone(); if ( this.cndList== null ) object.cndList = null; else{ java.util.List<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrCndIn> clonedList = new java.util.ArrayList<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrCndIn>(cndList.size()); for( bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrCndIn item : cndList ){ clonedList.add( (bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrCndIn)item.clone()); } object.cndList = clonedList; } if ( this.xtnList== null ) object.xtnList = null; else{ java.util.List<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrXtnIn> clonedList = new java.util.ArrayList<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrXtnIn>(xtnList.size()); for( bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrXtnIn item : xtnList ){ clonedList.add( (bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrXtnIn)item.clone()); } object.xtnList = clonedList; } if ( this.relList== null ) object.relList = null; else{ java.util.List<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrRelIn> clonedList = new java.util.ArrayList<bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrRelIn>(relList.size()); for( bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrRelIn item : relList ){ clonedList.add( (bankware.corebanking.partner.open.service.dto.PrtnrshpArrOpnSvcArrRelIn)item.clone()); } object.relList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public java.math.BigDecimal getLastBal(){ return lastBal; }
public boolean isCancelled() { return this.getArrSts().equals(ArrStsEnum.CANCELED); }
public AcManualEntryTxDIO select(AcManualEntryTxDIO acManualEntryTxDIO) { acManualEntryTxD = (AcManualEntryTxD) CbbApplicationContext.getBean(AcManualEntryTxD.class, acManualEntryTxD); return acManualEntryTxD.select(acManualEntryTxDIO); }
public LnAgrmntOpenCcutTrgtIO clone(){ try{ LnAgrmntOpenCcutTrgtIO object= (LnAgrmntOpenCcutTrgtIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Pd getPd(String instCd,String arrCrtnDt,String arrCrtnTm, String pdCd) throws BizApplicationException { PdIn pdIn = new PdIn(); pdIn.setInstCd(instCd); // Product Code pdIn.setPdCd(pdCd); // Product Code pdIn.setAplyDt(arrCrtnDt); // Apply Date pdIn.setAplyTm(arrCrtnTm); // Product Code Pd pd = _getPdMngr().getPd(pdIn); if (pd == null || !pd.isAvailable() ) { throw new BizApplicationException("AAPARE0000", new Object[]{instCd+":"+pdCd+":"+arrCrtnDt+":"+arrCrtnTm}); } return pd; }
public TlrClsMgmtSvcSaveTlrClsIn clone(){ try{ TlrClsMgmtSvcSaveTlrClsIn object= (TlrClsMgmtSvcSaveTlrClsIn)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.BillCtgryCashMgmtSvcBillCtgryIn> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.BillCtgryCashMgmtSvcBillCtgryIn>(tblNm.size()); for( bankware.corebanking.accounting.cashaccounting.service.dto.BillCtgryCashMgmtSvcBillCtgryIn item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.cashaccounting.service.dto.BillCtgryCashMgmtSvcBillCtgryIn)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaExtrnlInfoMgmtSvcRemoveMsgMapInfoIn clone(){ try{ CaExtrnlInfoMgmtSvcRemoveMsgMapInfoIn object= (CaExtrnlInfoMgmtSvcRemoveMsgMapInfoIn)super.clone(); if ( this.msgMapInfoList== null ) object.msgMapInfoList = null; else{ java.util.List<bankware.corebanking.configurationadmin.externalproxy.service.dto.ExtrnlIntrfcMsgMapInfoOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.externalproxy.service.dto.ExtrnlIntrfcMsgMapInfoOut>(msgMapInfoList.size()); for( bankware.corebanking.configurationadmin.externalproxy.service.dto.ExtrnlIntrfcMsgMapInfoOut item : msgMapInfoList ){ clonedList.add( (bankware.corebanking.configurationadmin.externalproxy.service.dto.ExtrnlIntrfcMsgMapInfoOut)item.clone()); } object.msgMapInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrReal getArr() { return (ArrReal) super.getArrCore(); }
public void saveMapSubInfo(Map<String, String> assetSubInfoMap, AssetCore asset, String txDt, Integer txSeqNbr) throws BizApplicationException { _getAssetSubInfoBiz().saveMapSubInfo(assetSubInfoMap, txDt, txSeqNbr, (AssetImpl) asset); }
public CaSelfAuthCdSvcGetOut clone(){ try{ CaSelfAuthCdSvcGetOut object= (CaSelfAuthCdSvcGetOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveMapSubInfo(Map<String, String> subInfoMap, ActorImpl actorImpl) throws BizApplicationException { // 0. null check if (subInfoMap == null || subInfoMap.isEmpty()) { return; } // 1. 보조명세 종류 조회 ActorSubInfoKndEnum subInfoKnd = actorImpl.getSubInfoKnd(); // 2. 보조명세 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoIO = getSubInfoCache(actorImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = _getNewSubInfoSqlIO(subInfoKnd); subInfoIO.set("actorId", actorImpl.getActorId()); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _insertSubInfo(subInfoKnd, subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(actorImpl, subInfoIO); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _updateSubInfo(subInfoKnd, subInfoIO); } // 3. 캐시 저장 String cacheKey = XtnTableEnum.AT_ACTOR_M.getValue().concat(actorImpl.getActorId()); actorImpl.saveSubInfoCache(cacheKey, subInfoIO); }
static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (CaDstbCtvdRsltCdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@answerTrgtTpCd"}); } return true; }
public void validateTxProcess() throws BizApplicationException { // Validate only in case of triggering transaction Integer callDepth = CbbApplicationContext.getCurrentServiceCallDepth(); if(callDepth != 0) return; List<StTxMIO> stTxMIOList = _restoreTxInfo(); if(stTxMIOList == null) return; if(stTxMIOList.size() > 0){ for(StTxMIO stTxMIO : stTxMIOList) { ArrRealCore arr = _getArrMngr().getArrRealCore(stTxMIO.getArrId()); StTxMIO out = _getArrTxBiz().getArrTx(stTxMIO, arr); // if(out == null) out = _getArrTxBiz().getAccrualTx(stTxMIO, arr); if(out == null) throw new BizApplicationException("AAPSTE0020", new Object[] {stTxMIO.getTxDt(), stTxMIO.getTxSeqNbr()}); if(logger.isDebugEnabled()) { logger.debug("HHH StTxMIO: {} ", out); } // Transaction history is not registered. if(TxStsCoreEnum.NUMBERED.getValue().equals(out.getTxStsCd())) throw new BizApplicationException("AAPACE3016", new Object[] {out.getArrId()}); if (logger.isDebugEnabled()){ logger.debug("ArrTx linked transaction logging"); logger.debug(out.toString()); } } } } /** * <div class='en'> * @description * <pre> * This method validates the transaction sequence number and verifies that the transaction was created. * Occurs an error if the transaction is not inserted or the transaction status is NUMBERED. * It is called from distributed, so it accepts and processes the base list of transactions instead of the value loaded in memory. * </pre> * * @seealso {@link #validateTxProcess(List)} : validates the transaction sequence number and * verifies that the transaction was created with list of basic transaction infomation. * * @note The last valid transaction date can not be greater than the date of the transaction you want to create. * </div> * * <div class='ko'> * @description * <pre> * 이 메소드는 거래일련번호를 정상적으로 채번한 후, 거래가 생성되었는지 검증한다. * 거래가 insert 되지 않았거나 거래상태가 NUMBERED(채번만 된 경우)인 경우에는 오류를 발생시킨다. * 분산에서 호출되어지므로 메모리에 적재된 값 대신 거래기본목록을 받아서 처리한다. * </pre> * * @seealso {@link #validateTxProcess(List)}
public String getDocId() throws BizApplicationException { if(docIssueIO != null) return docIssueIO.getDocId(); return null; }
public String getSaleStartTime() { return PdUtil.parseDateToHHMMSS(bf.getSaleStartDt()); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AprslRqstCore aprslRqstCore) throws BizApplicationException { _getAprslRqstSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AprslRqstImpl) aprslRqstCore); }
public String getSaleEndDt() { if (pdPdM == null) { return CPD01.END_DT; } // Return output return (pdPdM.getSaleEndDt() == null) ? CPD01.END_DT : PdUtil.parseDateToYYYYMMDD(pdPdM.getSaleEndDt()); }
public TxJrnlSvcGetTxJrnlOut clone(){ try{ TxJrnlSvcGetTxJrnlOut object= (TxJrnlSvcGetTxJrnlOut)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaStdAbrvtnMgmtSvcRegisterStdAbrvtnIn clone(){ try{ CaStdAbrvtnMgmtSvcRegisterStdAbrvtnIn object= (CaStdAbrvtnMgmtSvcRegisterStdAbrvtnIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbCnstncyStAmtTpMDso().selectListForConsistency(pageOffSet, pgCnt); }
public void saveMapSubInfo(Map<String, String> assetSubInfoMap, AssetCore asset, String txDt, Integer txSeqNbr) throws BizApplicationException { _getAssetSubInfoBiz().saveMapSubInfo(assetSubInfoMap, txDt, txSeqNbr, (AssetImpl) asset); }
static boolean isValid(String value) { for (ExclsvDscdEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public CmClTreeDIO select(String clId, String clHrarcyId) { return _getCmClTreeD().select(clId, clHrarcyId); }
public String getCndNm() throws BizApplicationException { String cndName = _getTrnsfrLng().getTransferLanguage(CCM01.TRANS_PDCND, cndCd); if (StringCoreUtils.isEmpty(cndName) || cndCd.equals(cndName)) { String dbCndName = BfCndCoreImpl.getInstance().getCndName(motherInstCd, cndCd); if (StringUtils.isNotBlank(dbCndName)) { cndName = dbCndName; } } // Return Output return cndName; }
public CaDstbCtvdSrchRsltListOut clone(){ try{ CaDstbCtvdSrchRsltListOut object= (CaDstbCtvdSrchRsltListOut)super.clone(); if ( this.srchOutList== null ) object.srchOutList = null; else{ java.util.List<bankware.corebanking.configurationadmin.distribution.service.dto.CaDstbCtvdSrchOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.distribution.service.dto.CaDstbCtvdSrchOut>(srchOutList.size()); for( bankware.corebanking.configurationadmin.distribution.service.dto.CaDstbCtvdSrchOut item : srchOutList ){ clonedList.add( (bankware.corebanking.configurationadmin.distribution.service.dto.CaDstbCtvdSrchOut)item.clone()); } object.srchOutList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaAsmItmMgmtSvcGetAsmItmListIn clone(){ try{ CaAsmItmMgmtSvcGetAsmItmListIn object= (CaAsmItmMgmtSvcGetAsmItmListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CashSndRcvPrdDtlIO> getListCashSndRcvPrd(String inqryStartDt,String inqryEndDt, String rltvStaffId, String sndRcvTrgtDscd) throws BizApplicationException { CashSndRcvPrdDtlIO cashSndRcvPrdDtlIO = new CashSndRcvPrdDtlIO(); cashSndRcvPrdDtlIO.setInstCd(getInstCd()); cashSndRcvPrdDtlIO.setDeptId(getDeptId()); cashSndRcvPrdDtlIO.setStaffId(getStaffId()); cashSndRcvPrdDtlIO.setInqryStartDt(inqryStartDt); cashSndRcvPrdDtlIO.setInqryEndDt(inqryEndDt); cashSndRcvPrdDtlIO.setRltdStaffId(rltvStaffId); cashSndRcvPrdDtlIO.setSndRcvTrgtDscd(sndRcvTrgtDscd); return _getCashSndRcv().getListCashSndRcvPrd(cashSndRcvPrdDtlIO); }
public String getSubInfo(String atrbtNm, AprslImpl aprslImpl, Integer aprslThingSeqNbr) throws BizApplicationException { // 1. 보조명세 캐시 조회 IValueObject aprslThingSubInfo = getSubInfoCache(aprslImpl, aprslThingSeqNbr); // 2. 보조원장 캐시가 null인 경우, null 리턴 if (aprslThingSubInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명을 기준으로 속성값 조회 Object atrbtVal = aprslThingSubInfo.get(atrbtNm); // 속성값이 null인경우 null리턴 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public CaRoleMgmtSvcGetRoleServiceRelationListOut clone(){ try{ CaRoleMgmtSvcGetRoleServiceRelationListOut object= (CaRoleMgmtSvcGetRoleServiceRelationListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleServiceRelationOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleServiceRelationOut>(tblNm.size()); for( bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleServiceRelationOut item : tblNm ){ clonedList.add( (bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleServiceRelationOut)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaArrIssmdaTmpltMgmtSvcGetRelatedPsbkMsgListOut clone(){ try{ CaArrIssmdaTmpltMgmtSvcGetRelatedPsbkMsgListOut object= (CaArrIssmdaTmpltMgmtSvcGetRelatedPsbkMsgListOut)super.clone(); if ( this.psbkMsgList== null ) object.psbkMsgList = null; else{ java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgInfoList> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgInfoList>(psbkMsgList.size()); for( bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgInfoList item : psbkMsgList ){ clonedList.add( (bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgInfoList)item.clone()); } object.psbkMsgList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaStaffChngSvcAddrListIO clone(){ try{ CaStaffChngSvcAddrListIO object= (CaStaffChngSvcAddrListIO)super.clone(); if ( this.ctcptXtnInfoList== null ) object.ctcptXtnInfoList = null; else{ java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcCtcptXtnListIO> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcCtcptXtnListIO>(ctcptXtnInfoList.size()); for( bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcCtcptXtnListIO item : ctcptXtnInfoList ){ clonedList.add( (bankware.corebanking.configurationadmin.actor.service.dto.CaStaffChngSvcCtcptXtnListIO)item.clone()); } object.ctcptXtnInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean check(String vldnTrgt) throws BizApplicationException { boolean outMsg; if(logger.isDebugEnabled()){ logger.debug("CustIdVldtnImpl vldnTrgt : {} ", vldnTrgt); } // Query customer by customer id Cust cust = _getCustMngr().getCust(vldnTrgt); if (cust == null) { throw new BizApplicationException("AAPATE0008", new String[]{ "@custId", vldnTrgt }); } else { outMsg = true; } return outMsg; }
public void saveSubInfo(AtCustSIO subInfoIO, CustImpl custImpl) throws BizApplicationException { // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustSIO oldSubInfoIO = getSubInfoCache(custImpl); if (oldSubInfoIO == null) { // PK setting subInfoIO.setCustId(custImpl.getCustId()); // insert _getAtCustSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoIO, oldSubInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(custImpl, oldSubInfoIO); // PK setting subInfoIO.setCustId(custImpl.getCustId()); // update _getAtCustSDso().update(subInfoIO); } // 2. 캐시 저장 custImpl.setSubInfoCache(subInfoIO); }
public LnStsQuerySvcGetLnStsListBrnchIn clone(){ try{ LnStsQuerySvcGetLnStsListBrnchIn object= (LnStsQuerySvcGetLnStsListBrnchIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CashTransitSvcIn clone(){ try{ CashTransitSvcIn object= (CashTransitSvcIn)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn> clonedList = new java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn>(tblNm.size()); for( bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn item : tblNm ){ clonedList.add( (bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcDtlIn)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) { for (RpymntWayDscdEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public List<ArrReal> getListArrRealByArrStsList(String custId, List<ArrStsEnum> arrStsEnumList, String arrCustRelCd, String bizDscd,String pdTpCd, String pdTmpltCd, String pdCd) throws BizApplicationException { return _getArrCustRelQryBizImpl().getListArrRealByArrStsList(custId, arrStsEnumList, arrCustRelCd, bizDscd, pdTpCd, pdTmpltCd, pdCd, 0, 0, false); }
public List<ArrReal> getListArrBasedOnStsHistory(String deptId, ArrDeptRelEnum arrDeptRel, String pdCd, ArrStsEnum curArrSts, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, int pgNbr, int pgCnt) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId, null, null, null, pdCd, arrDeptRel, curArrSts, arrSts, null, inqryStartDt, inqryEndDt, pgNbr, pgCnt, false); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if (!this.getArrangementCore().isReal()) return; switch (arrSrvcTpCd) { case "OpenStandingOrder": _buildInitialPlan( arrSrvcTpCd,arrCndActionRequiredValue); return; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public void undoSubInfo(ArrIssmdaImpl arrIssmdaImpl, String txDt, Integer txSeqNbr) throws BizApplicationException { ArArrIssmdaSubHIO in = new ArArrIssmdaSubHIO(); in.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd()); in.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId()); in.setIssueArrId(arrIssmdaImpl.getIssueArrId()); in.setTxDt(txDt); in.setTxSeqNbr(txSeqNbr); in.setCnclYn(CCM01.NO); // 보조명세 이력 조회결과가 없는 경우 리턴 ArArrIssmdaSubHIO arArrIssmdaSubHIO = (ArArrIssmdaSubHIO) _getSubInfoHstCache(arrIssmdaImpl, txDt, txSeqNbr); if(arArrIssmdaSubHIO == null){ return; } // 취소여부를 'Y'로 갱신 arArrIssmdaSubHIO.setCnclYn(CCM01.YES); _getArArrIssmdaSubHDso().update(arArrIssmdaSubHIO); // 보조명세 원복 ArArrIssmdaSIO arArrIssmdaSIO = new ArArrIssmdaSIO(); DtoUtils.setSubInfoIO(arArrIssmdaSubHIO, arArrIssmdaSIO); _getArArrIssmdaSDso().update(arArrIssmdaSIO); }
public AssetMtrtyAdventSubInfoOut clone(){ try{ AssetMtrtyAdventSubInfoOut object= (AssetMtrtyAdventSubInfoOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getAttributeDtoClassName() { return stdDtoClassAtrbt.getAttributeDtoClassName(); }
public AtrbtVldtnWayEnum getAttributeValidationWayCode() { return (isValidationTailored)? atrbtVldtnWayCd:stdDtoClassAtrbt.getAttributeValidationWayCode(); }
public MbrshpArrStsChngHstInqrySvcListOut clone(){ try{ MbrshpArrStsChngHstInqrySvcListOut object= (MbrshpArrStsChngHstInqrySvcListOut)super.clone(); if ( this.mbrshpArrStsHst== null ) object.mbrshpArrStsHst = null; else{ java.util.List<bankware.corebanking.customer.query.service.dto.MbrshpArrStsChngHstInqrySvcOut> clonedList = new java.util.ArrayList<bankware.corebanking.customer.query.service.dto.MbrshpArrStsChngHstInqrySvcOut>(mbrshpArrStsHst.size()); for( bankware.corebanking.customer.query.service.dto.MbrshpArrStsChngHstInqrySvcOut item : mbrshpArrStsHst ){ clonedList.add( (bankware.corebanking.customer.query.service.dto.MbrshpArrStsChngHstInqrySvcOut)item.clone()); } object.mbrshpArrStsHst = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public RepeatStatus execute(StepContribution arg0, ChunkContext arg1) throws Exception { // String procKindCd = (String)arg1.getStepContext().getJobExecutionContext().get("procKindCd"); // 20180423 kjp arg 받는 방법이 바뀌었음 String procKindCd = BatchApplicationContext.getJobParameters().getString("procKindCd"); if(logger.isDebugEnabled()) { logger.debug("DistributionApply procKindCd : {}", procKindCd); } //예약배포 실행 if(PROC_KIND_CD_APPLY.equals(procKindCd)){ _excuteForApply(); } return RepeatStatus.FINISHED; }
public InsrncRltdCustOut getRelatedCust(InsrncCustRelEnum insrncCustRelCd) throws BizApplicationException { return super.getRelatedCust(insrncCustRelCd.getValue()); }
public void checkPassword(PswdVldtnIO in) throws BizApplicationException { //TODO 기관파라미터ENUM 으로 변경 String pswdRuleStr = _getInstParmProvider().getInstParm( InstParamEnum.APPLY_PASSWORD_VALIDATION_RULE_CONTENT.getValue()); if (pswdRuleStr == null) { throw new BizApplicationException("AAPCME0175", new Object[] {}); } String pswdRuleArr[] = pswdRuleStr.split(";"); for(int i = 0; i < pswdRuleArr.length; i++) { String pswdRule[] = pswdRuleArr[i].split(":"); if (pswdRule.length != 2) { throw new BizApplicationException("AAAAAAAAA", new Object[] {}); } String vldtnTp = pswdRule[0]; String regexNm = pswdRule[1]; CmnCdCheckIn inCdDao = new CmnCdCheckIn(); inCdDao.setCdNbr(CCM01.REGEX_TP_DSCD); inCdDao.setCd(regexNm); if (CCM03.REGT.equals(vldtnTp)) { DataCheckUtils.isValidPassword(_getCd().getCode(inCdDao).getCdNm(), in.getPswd()); } } }
public SimpleDpstAcctInqrySvcOut clone(){ try{ SimpleDpstAcctInqrySvcOut object= (SimpleDpstAcctInqrySvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaStaffInqrySvcGetStaffRoleListOut clone(){ try{ CaStaffInqrySvcGetStaffRoleListOut object= (CaStaffInqrySvcGetStaffRoleListOut)super.clone(); if ( this.staffRoleList== null ) object.staffRoleList = null; else{ java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffRoleOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffRoleOut>(staffRoleList.size()); for( bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffRoleOut item : staffRoleList ){ clonedList.add( (bankware.corebanking.configurationadmin.actor.service.dto.CaStaffInqrySvcGetStaffRoleOut)item.clone()); } object.staffRoleList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public StaffLoginHstSrchSvcIn clone(){ try{ StaffLoginHstSrchSvcIn object= (StaffLoginHstSrchSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public AprvlRgstSvcGetIn clone(){ try{ AprvlRgstSvcGetIn object= (AprvlRgstSvcGetIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<CaTblXtnAtrbtOut> getTableExtendAttribute(String tblNm) throws BizApplicationException { return this.getTableExtendAttribute(_getCaCmnContext().getInstCode(), tblNm, CaXtnAtrbtVrtnCmpsEnum.NA, null); }
public void saveSubInfo(IValueObject subInfo, ActorImpl actorImpl) throws BizApplicationException { // 1. 보조명세 종류 조회 ActorSubInfoKndEnum subInfoKnd = actorImpl.getSubInfoKnd(); // 2. 보조명세 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoIO = getSubInfoCache(actorImpl); if (subInfoIO == null) { // PK setting subInfoIO = _getNewSubInfoSqlIO(subInfoKnd); subInfoIO.set("actorId", actorImpl.getActorId()); // insert _insertSubInfo(subInfoKnd, subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfo, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(actorImpl, subInfoIO); // PK setting subInfoIO.set("actorId", actorImpl.getActorId()); // update _updateSubInfo(subInfoKnd, subInfoIO); } // 3. 캐시 저장 String cacheKey = XtnTableEnum.AT_ACTOR_M.getValue().concat(actorImpl.getActorId()); actorImpl.saveSubInfoCache(cacheKey, subInfoIO); }
public String getValAsString(Integer seqNbr) throws BizApplicationException { ArArrCndDIO arArrCndDIO = new ArArrCndDIO(); arArrCndDIO.setInstCd(_getCmnContextCore().getInstCode()); arArrCndDIO.setArrId(this.getArrangementCore().getArrId()); // ArrangementCore Id arArrCndDIO.setCndCd(this.getCndCd()); // Condition Code arArrCndDIO.setSeqNbr(seqNbr); // Sequence Number ArrRealCore arrReal = (ArrRealCore)this.getArrangementCore(); //거래계약분리처리 if (ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())) { arArrCndDIO = _getArArrTmpryCndDDso().select(arArrCndDIO); } else { arArrCndDIO = _getArArrCndDDso().select(arArrCndDIO); } if (arArrCndDIO == null) { return null; } return this._getValueAsString(arArrCndDIO); }
public static boolean isValid(String value) throws BizApplicationException { if(!StringUtils.isEmpty(value)) { for (NoticeSrchCrtrEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] { value, "@noticeSrchCrtrCd" }); } return true; }
static boolean isValid(String value){ for (ClsgPrsntStsInqryEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public boolean isPossibleByTransactionType(String intTxTp) throws BizApplicationException { switch (InterestTransactionTypeEnum.getEnum(intTxTp)) { case SETTLEMENT : case PROVISIONAL_SETTLEMENT : case TERMINATION : case DEPOSITOR_INFO_EXTRACTION : case DAILY_ACCRUAL : return true; default: /* * The transaction type of interest was not allowed. transaction type : {0} */ throw new BizApplicationException("AAPSTE0100", new Object[] { intTxTp }); } }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { // query data return !(_getDcDocMDso().select(DocStsEnum.NORMAL.getValue(), String.valueOf(supplInfoVal.get(CCM03.CD)), DocTypEnum.NOTICE_MSG.getValue()) == null); }
public IntRtCmptnSvcGetOut clone(){ try{ IntRtCmptnSvcGetOut object= (IntRtCmptnSvcGetOut)super.clone(); if ( this.intRtCmptnSvcGetsub== null ) object.intRtCmptnSvcGetsub = null; else{ java.util.List<bankware.corebanking.underexamination.application.service.dto.IntRtCmptnSvcGetsub> clonedList = new java.util.ArrayList<bankware.corebanking.underexamination.application.service.dto.IntRtCmptnSvcGetsub>(intRtCmptnSvcGetsub.size()); for( bankware.corebanking.underexamination.application.service.dto.IntRtCmptnSvcGetsub item : intRtCmptnSvcGetsub ){ clonedList.add( (bankware.corebanking.underexamination.application.service.dto.IntRtCmptnSvcGetsub)item.clone()); } object.intRtCmptnSvcGetsub = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean check(String vldnTrgt) throws BizApplicationException { boolean isOk; if(_getCmnContext().getTxDate().compareTo(vldnTrgt) < 0 ) { throw new BizApplicationException("AAPCME0606", new String[]{vldnTrgt}); } else { isOk = true; } return isOk; }
public java.lang.String getMthrArrId(){ return mthrArrId; }
public boolean isValidType(AtrbtTpEnum atrbtTp, Integer dcmlPntLen, String atrbtCntnt) throws BizApplicationException { if (logger.isDebugEnabled()) { logger.debug("atrbtTpCd={}", atrbtTp); logger.debug("atrbtCntnt={}", atrbtCntnt); } if (atrbtTp == null) { throw new BizApplicationException("AAPCME0037", new Object[] { atrbtTp }); } // Validate attribute type switch (atrbtTp) { case TEXT: // text return (StringCoreUtils.isEmpty(atrbtCntnt)) ? false : true; case TEXT_DATE: // date return DateCoreUtils.isValidDate(atrbtCntnt); case TEXT_NUMBER: // number return DataCheckCoreUtils.isNumeric(atrbtCntnt); case NUMBER: // number boolean chkNbr = DataCheckCoreUtils.isNumeric(atrbtCntnt); if(logger.isDebugEnabled()) { logger.debug(" ########### isValidType NUMBER chkNbr : {}", chkNbr); } if(chkNbr) { // 소수점자리수 검증 return _isValidDecimalPoint(dcmlPntLen, atrbtCntnt); } else { return chkNbr; } case TEXT_ALPHA_NUMERIC: // Alpha-Number return DataCheckCoreUtils.isAlphaNumeric(atrbtCntnt); case YES_OR_NO: // yes or no return (CCM01.YES.equals(atrbtCntnt) || CCM01.NO.equals(atrbtCntnt)) ? true : false; case PASSWORD: // Password return DataCheckCoreUtils.isValidPassword(atrbtCntnt); case TIMESTAMP: // timestamp return true; case JSON: // json return DataCheckCoreUtils.isJson(atrbtCntnt); case EMPTY: return true; default: throw new BizApplicationException("AAPCME0037", new Object[] { atrbtTp }); } }
public String getCndValDefault() throws BizApplicationException { if (getRngVal() != null) { return getRngVal().setScale(_setScale()).toPlainString(); } if (getMinVal() != null && getMinVal().compareTo(getMaxVal()) == 0 && getMinVal().compareTo(getBsicVal()) == 0) { return getBsicVal().setScale(_setScale()).toPlainString(); } return null; }
public List<ArrIntRt> generateArrDepositInterestRate(Arrangement arr,String txDt,Integer txSeqNbr) throws BizApplicationException{ return generateArrDepositInterestRate(arr, null, null, txDt, txSeqNbr); }
public boolean isChannelArs(String chnlDscd) throws BizApplicationException { return ChannelEnum.PHONE_BANKING_ARS.getValue().equals(chnlDscd) ? true : false; }
public boolean isSalable(String aplyDt, String aplyTm) { if (pdPdM == null || aplyDt == null) { return false; } Date baseDt = PdUtil.parseYyyyMMddHHmmssToDate(aplyDt, _getAplyTmString(aplyTm)); if (baseDt.after(pdPdM.getSaleStartDt()) && baseDt.before(pdPdM.getSaleEndDt())) { return true; } return false; }
public void saveSubInfo(IValueObject subInfo, String txDt, Integer txSeqNbr, AssetImpl assetImpl) throws BizApplicationException{ // 0. null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {_getNewSubInfo(assetImpl.getAssetSubInfoKnd()).getClass().getSimpleName()}); } logger.debug("## <AS> saveSubInfo -> subInfo = {} :: ", subInfo.getFieldValues()); // 1. 자산보조명세의 종류 조회 AssetSubInfoKndEnum subInfoKnd = assetImpl.getAssetSubInfoKnd(); // 2. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 for(Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(entry.getValue() != null) { _getAtrbtChk().checkStandardAttribute(entry.getKey(), String.valueOf(entry.getValue())); } } // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(assetImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("assetId", assetImpl.getAssetBasicCache().getAssetId()); //PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(assetImpl, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // set business column // 3-1. insert _insertSubInfo(subInfoKnd, subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfo, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(assetImpl, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 3-2. update _updateSubInfo(subInfoKnd, subInfoCache); } // 4. 캐시 저장 assetImpl.saveSubInfoCache(xtnTable, subInfoCache); }
static boolean isValid(String value) { for (PdClassificationStructureDistinctionCodeEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public java.lang.String getArrOpnDt(){ return arrOpnDt; }
public void saveSubInfo(ActorCore actorCore, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { _getActorSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (ActorImpl) actorCore); }
public ArrBalCore getArrPrincipalBalCore(ArrRealCore arr, String crncyCd) throws BizApplicationException { return getArrBalCore(arr, AmtTpCoreEnum.PRNCPL.getValue(),BalTpCoreEnum.CURRENT.getValue(), crncyCd); }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { logger.debug("====== Do Service Action Test ======"); switch (arrSrvcTpCd) { case "IntraRealTmTrnsfr": case "InterRealTmTrnsfrOut": _doMoneyTransferAction(arrSrvcTpCd,arrCndActionRequiredValue); break; default: // there are no condition action for this condition ({0},{1}) on arrangement service ({2}) // 계약서비스 ({2})를 위한 조건 ({0},{1})의 행동은 유효하지 않습니다 throw new BizApplicationException("AAPARE0288" , new Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd}); } }
public void registerStampTax(StStampTaxBsicIO stStampTaxBsicIO) throws BizApplicationException { _checkInputValue(stStampTaxBsicIO.getArrId(), "arrId"); _checkInputValue(stStampTaxBsicIO.getTxDt(), "txDt"); _checkInputValue(stStampTaxBsicIO.getTxSeqNbr(), "txSeqNbr"); _getCmnContext().setHeaderColumn(stStampTaxBsicIO); StStampTaxMIO in = _getStampTaxIn(stStampTaxBsicIO); in.setCnclYn(CCM01.NO); in.setDtsRcvryYn(CCM01.NO); if(StringUtils.isEmpty(stStampTaxBsicIO.getBaseDt())){ in.setBaseDt(stStampTaxBsicIO.getTxDt()); } _getStStampTaxMDso().insert(in); }
static boolean isValid(String value) { for (LevyBaseAmountCoreEnum enumObject : values()) { if (enumObject.getValue().equals(value)) { return true; } } return false; }
public CaSrvcPrflMgmtSvcGetInstSrvcBsicDtlOut clone(){ try{ CaSrvcPrflMgmtSvcGetInstSrvcBsicDtlOut object= (CaSrvcPrflMgmtSvcGetInstSrvcBsicDtlOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public UnmaskSvcGetListHistoryOut clone(){ try{ UnmaskSvcGetListHistoryOut object= (UnmaskSvcGetListHistoryOut)super.clone(); if ( this.list== null ) object.list = null; else{ java.util.List<bankware.corebanking.common.mask.service.dto.UnmaskSvcGetHistoryOut> clonedList = new java.util.ArrayList<bankware.corebanking.common.mask.service.dto.UnmaskSvcGetHistoryOut>(list.size()); for( bankware.corebanking.common.mask.service.dto.UnmaskSvcGetHistoryOut item : list ){ clonedList.add( (bankware.corebanking.common.mask.service.dto.UnmaskSvcGetHistoryOut)item.clone()); } object.list = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public AtNoticeDIO select(String instCd, String noticeId) { return _getAtNoticeD().select(instCd, noticeId); }
public void saveMapSubInfo(ActorImpl actorImpl, String ctcptId, Integer ctcptChngSeqNbr, Map<String, String> subInfoMap) throws BizApplicationException { // 0. null check if (subInfoMap == null || subInfoMap.isEmpty()) { return; } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 // ** 연락처 보조명세는 변경이력을 관리하지 않는다. AtActorCtcptSIO subInfoIO = getSubInfoCache(actorImpl, ctcptId, ctcptChngSeqNbr); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtActorCtcptSIO(); subInfoIO.setActorId(actorImpl.getActorId()); subInfoIO.setActorCtcptId(ctcptId); subInfoIO.setActorCtcptChngSeqNbr(ctcptChngSeqNbr); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _getAtActorCtcptSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _getAtActorCtcptSDso().update(subInfoIO); } // 2. 캐시 저장 _saveSubInfoCache(subInfoIO, actorImpl, ctcptId, ctcptChngSeqNbr); }
public int register(DstbCtvdRgstIn dstbCtvdRgstIn) throws BizApplicationException{ // 1. get data and seq String dstbCtvdDt = _getCmnContextCore().getTxDate(); int dstbCtvdSeqNbr = _getCaDstbCtvdMDso().selectNextSeqNbr(_getCmnContextCore().getTxDate()); // 2. register Main data _registerBsic(dstbCtvdDt, dstbCtvdSeqNbr, dstbCtvdRgstIn.getDstbRqstId(), dstbCtvdRgstIn.getDstbCtvdRqstDt()); // 3. register Detail data _registerDetail(dstbCtvdDt, dstbCtvdSeqNbr, dstbCtvdRgstIn.getDstbCtvdRgstInList()); return dstbCtvdSeqNbr; }
public DeptRoleTmpltBsicInfoIO getDeptRoleTemplateInfo( String instCd, String roleTmpltId) throws BizApplicationException { return super.getDeptRoleTemplateInfo(instCd, roleTmpltId); }
public CustCtcptChngSvcGetIn clone(){ try{ CustCtcptChngSvcGetIn object= (CustCtcptChngSvcGetIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (AprslUnitClCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@AssetXtnAtrbtNm"});//({0}) is invalid {1}. } return true; }
public BigDecimal getLogSeqNbr() throws BizApplicationException{ return BigDecimal.ZERO; }
public CaStaffRgstSvcCtcptIO clone(){ try{ CaStaffRgstSvcCtcptIO object= (CaStaffRgstSvcCtcptIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean checkCode(CaCdNbrInfoIO in, String cd) throws BizApplicationException { CaCmCdInstDIO daoIn = new CaCmCdInstDIO(); daoIn.setInstCd(in.getInstCd()); daoIn.setCdNbr(in.getCdNbr()); daoIn.setCd(cd); daoIn.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue()); List<CaCmCdInstDIO> daoOutList = _getCmCdInstDDso().selectListByCondition(daoIn); if(daoOutList == null || daoOutList.isEmpty()) { return false; } return true; }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr, AssetImpl assetImpl, Integer assetThingSeqNbr) { // 0. null check if (StringUtils.isEmpty(xtnAtrbtNm)){ return; } // 1. 자산물건보조명세의 종류 조회 AssetThingSubInfoKndEnum subInfoKnd = assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr); // 2. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttribute(xtnAtrbtNm, xtnAtrbtCntnt); // 3. 보조원장 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(assetImpl, assetThingSeqNbr); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("assetId", assetImpl.getAssetBasicCache().getAssetId()); // PK setting subInfoCache.set("assetThingSeqNbr", assetThingSeqNbr); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(assetImpl, assetThingSeqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 3-1. insert _insertSubInfo(subInfoKnd, subInfoCache); // 4. 캐시 저장 _saveSubInfoCache(subInfoKnd, subInfoCache, assetImpl, assetThingSeqNbr); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(assetImpl, assetThingSeqNbr, subInfoCache, txDt, txSeqNbr); // 입력된 확장속성명과 확장속성내용을 DBIO VO에 setting DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // 3-2. update _updateSubInfo(subInfoKnd, subInfoCache); } }
public List<TblXtnAtrbtOut> getTableExtendAttribute(String tblNm) throws BizApplicationException { return this.getTableExtendAttribute(_getCmnContextCore().getInstCode(), tblNm, XtnAtrbtVrtnCmpsEnum.NA, null); }
public String getSubInfo(ActorImpl actorImpl, String dueDlgncDscd, Integer dueDlgncSeqNbr, String atrbtNm) throws BizApplicationException { // 1. 보조명세 캐시 조회 IValueObject subInfo = getSubInfoCache(actorImpl, dueDlgncDscd, dueDlgncSeqNbr); // 2. 보조명세 캐시가 null인 경우, null 리턴 if (subInfo == null) { return null; } // 3. 보조명세 캐시에서 속성명 기준으로 속성값 조회 Object atrbtVal = subInfo.get(atrbtNm); // Casting 시 Null 방지 if (atrbtVal == null) { return null; } return String.valueOf(atrbtVal); }
public ArrRealCore getArrRealCore(ArrRealGetIn arrRealGetIn) throws BizApplicationException { return _getArrCoreMngrAgent().getArrRealCore(arrRealGetIn); }
public void saveMapSubInfo(Map<String, String> xtnInfo, AsmCore asm) { _getAsmSubInfoBiz().saveSubInfo(xtnInfo, (AsmImpl)asm); }
public CmAtchmntFileDIO clone(){ try{ CmAtchmntFileDIO object= (CmAtchmntFileDIO)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); object.atchmntFileCntnt = java.util.Arrays.copyOf(this.atchmntFileCntnt, this.atchmntFileCntnt.length); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void doServiceAction(String arrSrvcTpCd,ArrCndActionRequiredValue arrCndActionRequiredValue) throws BizApplicationException { if (!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){ String inputStr = this._getCdLstNm(getListCd()); String pdListStr = this._buildPdList(); //This product purchase is not allowed to customer type ({0},{1}) //본상품의 판매는 고객유형 ({0},{1})에게 허용되지 않습니다 throw new BizApplicationException("AAPARE0274" , new Object[]{pdListStr,inputStr}); } }
public void saveSubInfo(CustRprsnCore custRprsnCore, String xtnAtrbtNm, String xtnAtrbtCntnt) throws BizApplicationException { _getCustRprsnSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (CustRprsnImpl) custRprsnCore); }
public IpctMgmtSvcGetIpctTxEntryListIn clone(){ try{ IpctMgmtSvcGetIpctTxEntryListIn object= (IpctMgmtSvcGetIpctTxEntryListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public Map<String, String> getMapSubInfo(PrtnrCore prtnrCore) throws BizApplicationException { return _getPrtnrSubInfoBiz().getMapSubInfo((PrtnrImpl) prtnrCore); }
public CustCheckPwdOut checkPassword(String pswd) throws BizApplicationException { //check required inputs if (StringUtils.isEmpty(pswd)) { throw new BizApplicationException("AAPCME0006", new Object[] {"@pswd"}); } return checkPassword(null, pswd, null); }
public BigDecimal getLastTxAfBalBeforeSpecificTx(ArrReal arr, String txDt, int txSeqNbr) throws BizApplicationException { BigDecimal txAfBal = _getArrTxXtnBiz().getLastTxAfBalBeforeSpecificTx(_getCmnContext().getInstCode(), arr, txDt, txSeqNbr); if (txAfBal == null) { txAfBal = BigDecimal.ZERO; } return txAfBal; }
public Map<String, String> getMapXtnInfo(String assetId, String custId, String assetCustRelCd) throws BizApplicationException{ AsAssetCustXtnInfoDIO input = new AsAssetCustXtnInfoDIO(); input.setInstCd(_getCmnContextCore().getInstCode()); input.setAssetId(assetId); input.setCustId(custId); input.setAssetCustRelCd(assetCustRelCd); Map<String, String> xtnAtrbtMap = new HashMap<String, String>(); for(AsAssetCustXtnInfoDIO xtnInfo : _getAsAssetCustXtnInfoDDso().selectList(input)) { xtnAtrbtMap.put(xtnInfo.getXtnAtrbtNm(), xtnInfo.getXtnAtrbtCntnt()); } return xtnAtrbtMap; }
public ArrSrvcBlckngGetOut getArrServiceBlocking(Integer arrSrvcBlckngSeqNbr, String baseDt, Boolean isActiveOnly) throws BizApplicationException { return _getArrSrvcBlckngBiz().getArrServiceActiveBlocking(arrSrvcBlckngSeqNbr, baseDt, isActiveOnly, false, this); } /** * <div class='en'> * @description * <pre> * Get service blocking information registered to the arrangement based on the service blocking sequence number. * However, extended information of service restrictions is provided only with attribute method (EAV) information. * </pre> * * @seealso {@link #getListArrServiceBlockingByEav(String, String, Boolean)} : Get a list of service blocking information registered to the arrangement with specific service blocking kind code * </div> * * * * <div class='ko'> * @description * <pre> * 서비스제한 일련번호를 기준으로 계약에 등록된 서비스제한 정보를 조회한다. * 단, 서비스제한의 확장정보는 속성방식(EAV) 정보만 조회함 * </pre> * * @seealso {@link #getListArrServiceBlockingByEav(String, String, Boolean)}
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbCnstncySvScrnMDso().selectListForConsistency(pageOffSet, pgCnt); }
public CaKrRoadAddrOut getKrRoadAddr(String addrId) throws BizApplicationException { CaCmKrRoadAddrMIO cmKrRoadAddrMIO = _getCaCmKrRoadAddrMDso().select(CaAddrHrarcyEnum.KOREA_ROAD_NAME_ADDRESS_CODE.getValue(), addrId); return _getKrRoadAddrOut(cmKrRoadAddrMIO); }
public String getDescription() { return desc; }
public int delete(CaArArrArrRelPdRuleMIO arArrArrRelPdRuleMIO) { int cnt = _getArArrArrRelPdRuleM().delete(arArrArrRelPdRuleMIO); _getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_ARR_REL_PD_RULE_CACHE, null); return cnt; }
public boolean checkCode(CaCdNbrInfoIO in, String cd) throws BizApplicationException { String xtnCdClassNm = in.getXtnCdClassNm(); String lngCd = in.getLngCd(); if (StringUtils.isEmpty(xtnCdClassNm)) { throw new BizApplicationException("AAPCME0006", new Object[] { "@xtnCdClassNm" }); } // 해당 클래스의 빈명 추출 해야 된다. CaCbpClassIO cbpClass = _getCbpClass().getClassInfo(xtnCdClassNm); String beanName = cbpClass.getBeanNm(); if(logger.isDebugEnabled()) { logger.debug("lyj beanName : {}", beanName); } if(!CCM01.CHAR_AT.equals(beanName)) { xtnCdClassNm = beanName; } if (StringUtils.isEmpty(lngCd)) { lngCd = _getCaCmnContext().getLanguageCode(); } String cdNbr = in.getCdNbr(); String instCd = in.getInstCd(); if(StringUtils.isEmpty(in.getInstCd())) { instCd = _getCaCmnContext().getInstCode(); } // Get the login user's language code name Map<String, Object> supplInfoVal = new HashMap<String, Object>(); supplInfoVal.put(CaInstParamEnum.LANGUAGE_CODE.getValue(), lngCd); supplInfoVal.put(CaInstParamEnum.INSTITUTION_CODE.getValue(), instCd); supplInfoVal.put(CCM03.CD, cd); XtnCdCore xtdCd = (XtnCdCore) CbbApplicationContext.getBean(xtnCdClassNm); return xtdCd.checkCode(cdNbr, supplInfoVal); }
public void saveSubInfo(IValueObject subInfo, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {_getNewSubInfo(arrRealImpl.getSubInfoKnd()).getClass().getSimpleName()}); } // 1. 보조명세 종류 조회 ArrSubInfoKndEnum subInfoKnd = arrRealImpl.getSubInfoKnd(); // 2. 계약에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(arrRealImpl); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("arrId", arrRealImpl.getArrId()); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // insert _insertSubInfo(subInfoKnd, subInfoCache); // save cache arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(), subInfoCache); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfo, subInfoCache)) { return; } // 변경전 이력 저장 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // update _updateSubInfo(subInfoKnd, subInfoCache); } }
public void getLogSeqNbr(CmnJrnzArea cmnJrnzArea, String chnlCd) throws BizApplicationException { logger.debug("<AC-Core> AcctgJrnlCmnCoreCustomImpl _getLogSeqNbr CmnJrnzArea logSeqNbr : {}", cmnJrnzArea.getLogSeqNbr()); //20210121 CmnJrnzArea의 로그일련번호가 이미 외부에서 채번된 상태이면 채번하지 않음. if(cmnJrnzArea.getLogSeqNbr()!=null && cmnJrnzArea.getLogSeqNbr().compareTo(BigDecimal.ZERO)!=0) { return; } String logSeqNbr = null; // 로그일련번호 셋팅 if(!_getCmnContextCore().isChannelAtm() && !_getCmnContextCore().isChannelTellerWindow()) { // if (!ChannelEnum.CD_ATM.getValue().equals(chnlCd) && // !ChannelEnum.TELLER_WINDOW.getValue().equals(chnlCd)) { //Double d = Math.random() * Double.parseDouble("999999999999999") + 1; Double d = new SecureRandom().nextDouble()*Double.parseDouble("999999999999999") + 1; logSeqNbr = String.valueOf(d.longValue()); } else { // 로그일련번호 채번 logSeqNbr = _getNbrgCore().getNumbering(NumberingCoreEnum.LOG_SEQUENCE_NUMBER.getValue()); //log sequence number } cmnJrnzArea.setLogSeqNbr(new BigDecimal(logSeqNbr)); if(logger.isDebugEnabled()){ logger.debug("## AcctgJrnlCmnCoreCustomImpl > logSeqNbr : {}", logSeqNbr); }
public String getRoleIdByName(String instCd, String roleNm) throws BizApplicationException { RoleIO param = new RoleIO(); param.setInstCd(instCd); param.setRoleNm(roleNm); param = this.getRole(param); if(param!=null) return param.getRoleId(); else return null; }
public String getSectionEndDt() { return super.getSctnEndDt(); }
static boolean isValid(String value) { for (StsEnum item : StsEnum.values()) { if (value.equals(item.getValue())) { return "99".equalsIgnoreCase(value) ? false : true; } } return false; }
public void saveMapSubInfo(CustTxImpl custTxImpl, Map<String, String> subInfoMap) throws BizApplicationException { // 0. null check if (subInfoMap == null || subInfoMap.isEmpty()) { return; } // 1. 보조명세 캐시 조회결과에 따라 insert/update 판단 AtCustTxSIO subInfoIO = getSubInfoCache(custTxImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtCustTxSIO(); subInfoIO.setCustId(custTxImpl.getCustId()); subInfoIO.setTxDt(custTxImpl.getCustTxDt()); subInfoIO.setTxSeqNbr(custTxImpl.getCustTxSeqNbr()); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _getAtCustTxSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _getAtCustTxSDso().update(subInfoIO); } // 2. 캐시 저장 custTxImpl.setSubInfoCache(subInfoIO); }
public void setTimeoutScnd( java.lang.Integer timeoutScnd ) { isSet_timeoutScnd = true; this.timeoutScnd = timeoutScnd; }
public List<ArrRelStaffInfoOut> getListArrStaffRelation(String arrStaffRelCd, String staffId, String baseDt) throws BizApplicationException { return _getArrStaffRelBiz().getListArrStaffRelation(arrStaffRelCd, staffId, baseDt, this); }
public List<TaxRtIO> getListTaxRate(String isoNatCd, String taxRtCd, String aplyStartDt) throws BizApplicationException { return _getListTaxRate(isoNatCd, taxRtCd, "", aplyStartDt, ""); }
public void modifyCurrencyBillCategory(CaCrncyBillCtgryDtlIO crncyBillCtgryDtlIO) throws BizApplicationException { // Check Input Argument _checkCurrencyBillCategoryInput(crncyBillCtgryDtlIO); if(!_getCurrencyBillCategory(crncyBillCtgryDtlIO)) { // No record found throw new BizApplicationException("AAPACE3018", null); } if(_getAcCrncyBillCtgryMDso().update(_setAcCrncyBillCtgryCdIO(crncyBillCtgryDtlIO)) == 0) { // Failed to update throw new BizApplicationException("AAPACE1001", null); } }
public List<ArrAtrbtChngHst> getAttributeChangeHistory(ArrTxCore arrTx, boolean isEavOnly, ArrRealCoreImpl arrReal) throws BizApplicationException { if(arrTx==null){ throw new BizApplicationException("AAPSVE0012", new Object[] {"@arrTx"}); } return _getArrBasicBiz().getAttributeChangeHistory(null,arrTx,isEavOnly,arrReal); }
public Arr getArr(String acctNbr, Integer nthNbr) throws BizApplicationException { logger.debug("## <SHW> getArr(String, Integer executed!!"); ArrReal arrReal = (ArrReal) super.getArrRealCoreByAcctNbr(acctNbr, nthNbr); arrReal = _getArrRealCommon(arrReal, acctNbr); return (Arr)_checkArrObjectByKind(arrReal, ArrKndEnum.NORMAL); }
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbCnstncySvInstSrvcMDso().selectListForConsistency(pageOffSet, pgCnt); }
static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty(value)) { for (PushDtlScrnDscdEnum item : PushDtlScrnDscdEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; } return false; }
static boolean isValid(String value){ for (XtnTableEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public int getTxSeqNbr() { return txSeqNbr; }
public ArrActvtyDlvry getArrActivityDelivery(Integer arrActvtySeqNbr, ArrReal arrReal) throws BizApplicationException{ return (ArrActvtyDlvry) super.getArrActivityCore(ArrActvtyTpEnum.DELIVERY.getValue(), arrActvtySeqNbr, (ArrRealCore)arrReal); }
public List<ArrReal> getListArrRealByArrStsList(String custId, List<ArrStsEnum> arrStsEnumList, String arrCustRelCd, String bizDscd,String pdTpCd, String pdTmpltCd, String pdCd, boolean hasVrtnArr) throws BizApplicationException { return _getArrCustRelQryBizImpl().getListArrRealByArrStsList(custId, arrStsEnumList, arrCustRelCd, bizDscd, pdTpCd, pdTmpltCd, pdCd, 0, 0, hasVrtnArr); }
public int getProgressStatusTotalCount(String instCd, String stlmntBaseDt, String acctgDscd) throws BizApplicationException { _checkInputData(instCd, "instCd"); _checkInputData(stlmntBaseDt, "stlmntBaseDt"); _checkInputData(acctgDscd, "acctgDscd"); return _getAcStlmntPrgrsStsMDso().selectTotalCount(instCd, stlmntBaseDt, acctgDscd); }
public boolean checkRoleAthrtyAplyRng( String staffId, String roleAthrtyAplyRngTpCd ) throws BizApplicationException { // 2020.08.07 LINE 프로젝트 성능 개선요청 반영 // 역할 테이블 JOIN하여 조회하는 것 대신에 한번에 조회하여 반영함 // 프로젝트에서 Customizing 가능하도록 코어에서 사이트에서 기능으로 이관처리함 return CCM01.YES.equals(_getCmRoleMDso().selectExistStaffRoleByAthrityAplyRngTpCd(_getCmnContext().getInstCode(), _getCmnContext().getDeptId(), staffId, roleAthrtyAplyRngTpCd)); }
public Map<String, String> getMapSubInfo(ScrtyIntImpl scrtyInt){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 설정에 저장된 보조명세 캐시 조회 AsScrtyIntSIO subInfo = getSubInfoCache(scrtyInt); // 2. 설정에 저장된 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 설정에 저장된 보조원장 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(ScrtyIntSubInfo.FIELDS.get(entry.getKey()) == null) { continue; } // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public String getSubInfo(ActorCore actorCore, String xtnAtrbtNm) throws BizApplicationException { return _getActorSubInfoBiz().getSubInfo(xtnAtrbtNm, (ActorImpl) actorCore); }
static boolean isValid(String value){ for (CaDstbWayCdEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public CashSndRcvMgmtSvcCashSndRcvIn clone(){ try{ CashSndRcvMgmtSvcCashSndRcvIn object= (CashSndRcvMgmtSvcCashSndRcvIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public BigDecimal getTaxRate(String isoNatCd, TaxRateEnum taxRtEnum, TaxTypeEnum taxTpEnum, String aplyStartDt) throws BizApplicationException { return getTaxRate(isoNatCd, taxRtEnum.getValue(), taxTpEnum.getValue(), aplyStartDt); }
public List<? extends IOmmObject> getListDataForConsistency(Integer pgNbr, Integer pgCnt) throws BizApplicationException { int pageOffSet = PaginationCoreUtils.getPgOffset(pgNbr, pgCnt); return _getDstbCnstncySvInstSrvcPrflDDso().selectListForConsistency(pageOffSet, pgCnt); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, AprslCore aprslCore) throws BizApplicationException { _getAprslSubInfoBiz().saveSubInfo(xtnAtrbtNm, xtnAtrbtCntnt, (AprslImpl) aprslCore); }
public CaCoaMgmtSvcGetCoaListTreeOut clone(){ try{ CaCoaMgmtSvcGetCoaListTreeOut object= (CaCoaMgmtSvcGetCoaListTreeOut)super.clone(); if ( this.children== null ) object.children = null; else{ java.util.List<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaOut>(children.size()); for( bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaOut item : children ){ clonedList.add( (bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaOut)item.clone()); } object.children = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CustPswdSvcAllChngIn clone(){ try{ CustPswdSvcAllChngIn object= (CustPswdSvcAllChngIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isChannelExternalNetwork(String chnlDscd) throws BizApplicationException { return ChannelEnum.EXTERNAL_NETWORK.getValue().equals(chnlDscd) ? true : false; }
public boolean isChannelArs() throws BizApplicationException { return ChannelEnum.PHONE_BANKING_ARS.getValue().equals(this.getChannelDscd()) ? true : false; }
public void registerBlckngTrgtSrvc(CaArrExtrnlIdSrvcIO arrExtrnlIdSrvcIO) throws BizApplicationException { CaArArrExtrnlIdSrvcRIO arArrExtrnlIdSrvcRIO = new CaArArrExtrnlIdSrvcRIO(); arArrExtrnlIdSrvcRIO.setInstCd(arrExtrnlIdSrvcIO.getInstCd()); arArrExtrnlIdSrvcRIO.setArrExtrnlIdNbrTpCd(arrExtrnlIdSrvcIO.getArrExtrnlIdNbrTpCd()); arArrExtrnlIdSrvcRIO.setArrSrvcTpCd(arrExtrnlIdSrvcIO.getArrSrvcTpCd()); _getCaCmnContext().setHeaderColumn(arArrExtrnlIdSrvcRIO); CaArArrExtrnlIdSrvcRIO arArrExtrnlIdSrvcRVO = this._getArArrExtrnlIdSrvcRDso().select(arArrExtrnlIdSrvcRIO); arArrExtrnlIdSrvcRIO.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue()); int result = 0; if (arArrExtrnlIdSrvcRVO == null) { result = this._getArArrExtrnlIdSrvcRDso().insert(arArrExtrnlIdSrvcRIO); } else { result = this._getArArrExtrnlIdSrvcRDso().update(arArrExtrnlIdSrvcRIO); } if (result == 0) { throw new BizApplicationException("AAPACE1002", null); // Failed to register. } }
public int saveExchangeRateInfoActive(ExRtIO in) throws BizApplicationException { _checkNullInputArgument(in, CCM01.SAVE); int result = 0; CmExRtDIO daoIn = _setExRtDIO(in); daoIn.setExRgstrnStsCd(ExchngRegtStatusEnum.ACTIVE.getValue()); CmExRtDIO cmExRtDIO = new CmExRtDIO(); cmExRtDIO.setInstCd(in.getInstCd()); cmExRtDIO.setCrncyCd(in.getCrncyCd()); cmExRtDIO.setBaseDt(in.getBaseDt()); cmExRtDIO.setExRtAplyNth(in.getExRtAplyNth()); cmExRtDIO.setExRgstrnStsCd(ExchngRegtStatusEnum.REGISTER.getValue()); cmExRtDIO = _getCmExRtDDso().select(cmExRtDIO); if(cmExRtDIO == null) { /// 환율정보가 미등록되었습니다. throw new BizApplicationException("AAPARE0445", new Object[] {}); } result = _getCmExRtDDso().updateActive(daoIn); return result; }
public java.lang.String getUnmaskId(){ return unmaskId; }
public BillCtgryCashMgmtSvcGetBillCtgryCashOut clone(){ try{ BillCtgryCashMgmtSvcGetBillCtgryCashOut object= (BillCtgryCashMgmtSvcGetBillCtgryCashOut)super.clone(); object.lastChngTmstmp = (bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveMapSubInfo(Map<String, String> subInfoMap, String txDt, Integer txSeqNbr, InsrncImpl insrncImpl) throws BizApplicationException { // 0. 저장할 정보가 입력되지 않으면 return if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 1. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 _getAtrbtChk().checkStandardAttributeMap(subInfoMap); // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AsInsrncSIO subInfoCache = getSubInfoCache(insrncImpl); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = new AsInsrncSIO(); subInfoCache.setInsrncId(insrncImpl.getInsrncBasicCache().getInsrncId()); // PK setting // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(insrncImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-1. insert _getAsInsrncSDso().insert(subInfoCache); // 3. 캐시 저장 insrncImpl.setInsrncSubInfoCache(subInfoCache); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfoMap, subInfoCache)) { return; } // 변경전 속성값변경이력 저장 _saveSubInfoHst(insrncImpl, subInfoCache, txDt, txSeqNbr); // 입력된 확장정보map을 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfoMap, subInfoCache); // 2-2. update _getAsInsrncSDso().update(subInfoCache); } }
public boolean isChannelArs(String chnlDscd) throws BizApplicationException { return ChannelEnum.PHONE_BANKING_ARS.getValue().equals(chnlDscd) ? true : false; }
public List<ArrRelDeptInfoOut> getListArrDeptRelation(String arrDeptRelCd, String deptId, String baseDt) throws BizApplicationException { return _getArrDeptRelBiz().getListArrDeptRelation(arrDeptRelCd, deptId, baseDt, this); }
protected String getMthrArrId() { return this.mthrArrId; }
public boolean checkCode(CdNbrInfoIO in, String cd) throws BizApplicationException { CmCdDIO cmCdDIO = new CmCdDIO(); cmCdDIO.setCdNbr(in.getCdNbr()); cmCdDIO.setCdNm(in.getCdNm()); cmCdDIO.setCd(cd); cmCdDIO.setActvStsCd(ActiveStatusEnum.ACTIVE.getValue()); List<CmCdDIO> cdDtlList = _getCmCdDDso().selectListByCondition(cmCdDIO); if(cdDtlList == null || cdDtlList.isEmpty()) { return false; } return true; }
static boolean isValid(String value){ for (ArrCndStsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public Integer getNthNbr() { return nthNbr; }
public void saveMapSubInfo(PrtnrCore prtnrCore, Map<String, String> xtnInfoMap) throws BizApplicationException { _getPrtnrSubInfoBiz().saveMapSubInfo(xtnInfoMap, (PrtnrImpl) prtnrCore); }
public boolean isIteration() { return isIter; }
public CaDocBsicIO getDocBasic() throws BizApplicationException { return docBsicIO; }
public static boolean isValid(String value){ for (AcctgItmEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public void restoreCustLoginInfo() throws BizApplicationException { // restore data & register information change history _getCustLoinInfoBiz().restoreCustLoginInformation(super.getCustBasicInfo(), getActor().getListActorInfoMgmtItem()); }
public String getDeptId(){ return deptId; }
public Integer getListArrBasedOnStsHistoryCount( String deptId,ArrDeptRelEnum arrDeptRel, String bizDscd, String pdTpCd,String pdTmpltCd,String pdCd, List<String> arrKndList,List<String> curArrStsList, ArrStsEnum arrSts, String inqryStartDt, String inqryEndDt, boolean hasVrtnArr) throws BizApplicationException { return _getArrDeptRelImpl().getArrListBasedOnArrStatusHistoryCount(deptId, bizDscd, pdTpCd, pdTmpltCd, pdCd, arrDeptRel, arrKndList,curArrStsList, arrSts, inqryStartDt, inqryEndDt,hasVrtnArr ); }
public List<SrvcPrflGetInstSrvcDtlIO> getListInstServiceByProfile(SrvcPrflGetInstSrvcIO in) throws BizApplicationException { List<SrvcPrflGetInstSrvcDtlIO> out = new ArrayList<SrvcPrflGetInstSrvcDtlIO>(); List<SvSrvcMIO> daoList = _getListInstitutionServiceBasic(in); for( SvSrvcMIO tmpList : daoList ) { SrvcPrflGetInstSrvcDtlIO srvcBsicIO = new SrvcPrflGetInstSrvcDtlIO(); srvcBsicIO.setSrvcCd(tmpList.getSrvcCd()); //서비스코드 srvcBsicIO.setSrvcNm(tmpList.getSrvcNm()); //서비스명 srvcBsicIO.setSrvcAbrvtnNm(tmpList.getSrvcAbrvtnNm()); //서비스약어명 srvcBsicIO.setCmpntCd(tmpList.getCmpntCd()); //컴포넌트코드 srvcBsicIO.setSrvcClassNm(tmpList.getSrvcClassNm()); //서비스클래스명 srvcBsicIO.setSrvcFtrCntnt(tmpList.getSrvcFtrCntnt()); //서비스특성내용 srvcBsicIO.setOprtnNm(tmpList.getOprtnNm()); //오퍼레이션명 srvcBsicIO.setInpDtoNm(tmpList.getInpDtoNm()); //입력DTO명 srvcBsicIO.setOutpDtoNm(tmpList.getOutpDtoNm()); //출력DTO명 out.add( srvcBsicIO ); } return out; }
static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (AssetKndCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@AssetXtnAtrbtNm"});//({0}) is invalid {1}. } return true; }
public static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty( value)) { for (AprslThingKndCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } throw new BizApplicationException("AAPATE0028", new Object[] {value, "@AssetXtnAtrbtNm"});//({0}) is invalid {1}. } return true; }
public Map<String, String> getMapXtnInfo(boolean isEavOnly, ArrRealCoreImpl arrReal) throws BizApplicationException { return _getArrXtnInfoBiz().getMapXtnInfo(isEavOnly, arrReal); }
public CashCardIssueSvcOut clone(){ try{ CashCardIssueSvcOut object= (CashCardIssueSvcOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isChannelBatch() throws BizApplicationException { return ChannelEnum.BATCH.getValue().equals(this.getChannelDscd()) ? true : false; }
public Map<String, String> getMapSubInfo(AprslImpl aprsl){ Map<String, String> subInfoMap = new HashMap<String, String>(); // 1. 자산에 저장된 보조명세 캐시 조회 IValueObject subInfo = getSubInfoCache(aprsl); // 2. 자산에 저장된 보조명세 캐시가 null인 경우, 빈 Map 리턴 if (subInfo == null) { return subInfoMap; } // 3. 자산에 저장된 보조원장 캐시를 Map으로 convert for (Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(!_isSubInfoContainsField(aprsl.getAprslSubInfoKnd(), entry.getKey())) { continue; } // Casting 시 Null 방지 if (entry.getValue() != null) { subInfoMap.put(entry.getKey(), String.valueOf(entry.getValue())); } } return subInfoMap; }
public String getParentClassName() { return this.parntClassNm; }
public CustCheckPwdOut checkPassword(CustLoinInfoIO custLoinInfoIO, String pswd, String loinTpCd) throws BizApplicationException { CustCheckPwdOut custCheckPwdOut = new CustCheckPwdOut(); if (custLoinInfoIO == null) { return custCheckPwdOut; } if (custLoinInfoIO.getEncrptnPswd() == null) { custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue()); } else if (pswd.equals(custLoinInfoIO.getEncrptnPswd())) { custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.SUCCESS.getValue()); } else { custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue()); } return custCheckPwdOut; }
public CaNoticeMsgCdMgmtIO getInfo(String noticeMsgCd) throws BizApplicationException { if(StringUtils.isEmpty(noticeMsgCd)){ throw new BizApplicationException("AAPCME0006", new String[] {"@noticeMsgCd"}); } // get caching data CaNoticeMsgCdMgmtIO noticeMsgCdIO = new CaNoticeMsgCdMgmtIO(); // query data CaAtNoticeMsgMIO rgstrnAtNoticeMsgCdIO = _getAtNoticeMsgMDso().select(noticeMsgCd, null); if(rgstrnAtNoticeMsgCdIO != null) { noticeMsgCdIO.setNoticeGoalTpCd(rgstrnAtNoticeMsgCdIO.getNoticeGoalTpCd()); noticeMsgCdIO.setNoticeMsgCd(rgstrnAtNoticeMsgCdIO.getNoticeMsgCd()); noticeMsgCdIO.setNoticeMsgNm(rgstrnAtNoticeMsgCdIO.getNoticeMsgNm()); noticeMsgCdIO.setNoticeWayTpCd(rgstrnAtNoticeMsgCdIO.getNoticeWayTpCd()); noticeMsgCdIO.setDelYn(rgstrnAtNoticeMsgCdIO.getDelYn()); } return noticeMsgCdIO; }
public void validate() throws BizApplicationException { if (!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getRngVal()))){ //This product purchasable time is ({0} ~ {1}) //본상품은의 판매 가능 시간은 ({0} ~ {1}) 입니다 throw new BizApplicationException("AAPARE0279" , new Object[]{getMinVal().setScale(0).toPlainString(),getMaxVal().setScale(0).toPlainString()}); } }
public String getDescription() { return description; }
public void validate(ArrReal arrReal, Map<ArrVldtnRequiredValEnum, Object> vldtnRequiredValMap) throws BizApplicationException { super.validate((ArrRealCore) arrReal, _convertValMap(vldtnRequiredValMap)); }
public boolean isTableAttributeValid(String xtnTblNm, String xtnAtrbtNm, String xtnAtrbtCntnt, XtnAtrbtVrtnCmpsEnum xtnAtrbtVrtnCmpsEnum, String inputValue) throws BizApplicationException { // 상품과 관련 없는 확장속성변형구성 코드를 검증 한다. return _getAtrbt().isTableAttributeValid(xtnTblNm, xtnAtrbtNm, xtnAtrbtCntnt, xtnAtrbtVrtnCmpsEnum, inputValue); }
public String getInstCd() { return arrTxBsicIO.getInstCd(); }
public String getBeforeDateTxYn() throws BizApplicationException { return _getContextHeader().getBfDtTxYn(); }
public java.lang.String getCndVal(){ return cndVal; }
public CaStdAbrvtnMgmtSvcGetStdAbrvtnOut clone(){ try{ CaStdAbrvtnMgmtSvcGetStdAbrvtnOut object= (CaStdAbrvtnMgmtSvcGetStdAbrvtnOut)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getTxHhmmss() throws BizApplicationException { return this.getTxTime(); }
public String getInsrncXtnInfo(String xtnAtrbtNm) throws BizApplicationException { return _getInsrncXtnInfoBiz().getInsrncXtnInfo(this, xtnAtrbtNm); }
public void saveSubInfo(String xtnAtrbtNm,String xtnAtrbtCntnt, ArrTxImpl arrTx) { // 0. 저장하려는 속성값의 유효성 검증(코드관련 속성일 경우 유효한 코드값인지 검증한다.) _getAtrbtChk().checkStandardAttribute(xtnAtrbtNm, xtnAtrbtCntnt); // 1. 거래관련 보조명세 조회(캐시로부터) - DBIO VO IValueObject oldCache = getSubInfoCache(arrTx); // 2. DB 반영 if(oldCache == null) { // 2.1.1 DBIO VO 인스턴스 생성 oldCache = _newSubInfoDBIO(arrTx); // 2.1.2 primary key 조립 _setKey(oldCache,arrTx); // 2.1.3 보조정보(단건)으로부터 DBIO VO값 채우기 DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, oldCache); // 2.1.4 캐싱된 보조명세 정보가 없으면 최초 저장, 즉 insert _insertSubInfo(arrTx, oldCache); // 2.1.5 캐싱처리 (최초적재) arrTx.setArrTxSubInfoCache(oldCache); }else { // 2.2.1 캐싱된 보조명세 정보가 있으면 변경 저장, 즉 update, update전 기존정보랑 동일 시 리턴 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, oldCache)) { return; } // 2.2.2 update - 새로변경되어야 할 속성을 DBIO VO 반영 DtoUtils.setSubInfoIO(xtnAtrbtNm,xtnAtrbtCntnt, oldCache); // 2.2.3 update - update 수행 _updateSubInfo(arrTx, oldCache); } // 4. 캐시 처리 (DBIO VO->Interface VO) & 캐싱 //_saveSubInfoCache(oldCache,arrTx); }
public StaffSelfAuthSvcXtnAtrbtIO clone(){ try{ StaffSelfAuthSvcXtnAtrbtIO object= (StaffSelfAuthSvcXtnAtrbtIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaStyleSvcGetStyleListOut clone(){ try{ CaStyleSvcGetStyleListOut object= (CaStyleSvcGetStyleListOut)super.clone(); if ( this.tblNm== null ) object.tblNm = null; else{ java.util.List<bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcStyleIO> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcStyleIO>(tblNm.size()); for( bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcStyleIO item : tblNm ){ clonedList.add( (bankware.corebanking.configurationadmin.style.service.dto.CaStyleSvcStyleIO)item.clone()); } object.tblNm = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void doServiceAction(ArrangementCoreImpl arrangement,String arrSrvcTpCd,ArrActionRequiredValue arrActionRequiredValue) throws BizApplicationException { if (StringUtils.isEmpty(arrSrvcTpCd)) { arrSrvcTpCd = _getSrvcPrflCore().getInstServiceProfile(SrvcPrflAtrbtCoreEnum.REPRESENTATIVE_ARRANGEMENT_SERVICE_TYPE_CODE.getValue()); } if (StringUtils.isEmpty(arrSrvcTpCd)) { // There is no representative arrangement service type nor arrangement service type input. Please check input value. // 대표계약서비스유형 또는 입력된 계약서비스유형이 없습니다. 입력값을 확인하십시오. throw new BizApplicationException("AAPARE0716", null); } //1.조건처리 this.doConditionAction(arrangement, arrSrvcTpCd,arrActionRequiredValue); //2.확장속성처리 this.doXtnAtrbtAction(arrangement, arrSrvcTpCd, arrActionRequiredValue); arrangement.setIsSrvcActionDone(true); }
public static boolean isValid(String value) throws BizApplicationException { if(!StringCoreUtils.isEmpty(value)) { for (CdNbrCoreEnum item : CdNbrCoreEnum.values()) { if (value.equals(item.getValue())) { return true; } } return false; } return false; }
public DocPrntIO issueTemporaryDoc(Doc doc, DocIssueIn docIssueIn, PrntWayTpEnum prntWayTp, Map<String,Object> refObjectMap) throws BizApplicationException { DocCore docCore = (DocCore)doc; return super.issueTemporaryDoc(docCore, docIssueIn, prntWayTp, refObjectMap); }
public Pd getPd(String instCd,String arrCrtnDt,String arrCrtnTm, String pdCd) throws BizApplicationException { PdIn pdIn = new PdIn(); pdIn.setInstCd(instCd); // Product Code pdIn.setPdCd(pdCd); // Product Code pdIn.setAplyDt(arrCrtnDt); // Apply Date pdIn.setAplyTm(arrCrtnTm); // Product Code Pd pd = _getPdMngr().getPd(pdIn); if (pd == null || !pd.isAvailable() ) { throw new BizApplicationException("AAPARE0000", new Object[]{instCd+":"+pdCd+":"+arrCrtnDt+":"+arrCrtnTm}); } return pd; }
public List<PdCnd> getCndHistory(PdCndHstIn in) throws BizApplicationException { List<PdCnd> out = null; Date aplyStartDt = PdUtil.parseStringToDate(in.getAplyStartDt() + in.getAplyStartTm()); Date aplyEndDt = PdUtil.parseStringToDate(in.getAplyEndDt() + _getAplyTmString(in.getAplyEndTm())); List<PdPdCndMIO> list = null; PdCndHistoryListIn pdCndHistoryListIn = new PdCndHistoryListIn(); pdCndHistoryListIn.setInstitutionId(getInstCd()); pdCndHistoryListIn.setPdCd(pd.getPdCd()); pdCndHistoryListIn.setCndCd(cndCd); pdCndHistoryListIn.setStartDate(aplyStartDt); pdCndHistoryListIn.setEndDate(aplyEndDt); List<PdCndBaseOut> pdCndBaseOutList = _getPdCndCore().getListPdCndHistory(pdCndHistoryListIn); if (!CollectionCoreUtils.isEmpty(pdCndBaseOutList)) { list = new ArrayList<>(); for (PdCndBaseOut pdCndBaseOut : pdCndBaseOutList) { PdPdCndMIO pdPdCndMIO = new PdPdCndMIO(); pdPdCndMIO.setInstCd(pdCndBaseOut.getInstitutionId()); pdPdCndMIO.setCndGrpTmpltCd(pdCndBaseOut.getCndGroupTemplateCd()); pdPdCndMIO.setCndGrpCd(pdCndBaseOut.getCndGroupCd()); pdPdCndMIO.setCndCd(pdCndBaseOut.getCndCd()); pdPdCndMIO.setAplyStartDt(pdCndBaseOut.getApplyStartDate()); pdPdCndMIO.setAplyEndDt(pdCndBaseOut.getApplyEndDate()); pdPdCndMIO.setStsChngDt(PdUtil.parseDateToYYYYMMDDHHMMSS(pdCndBaseOut.getStatusChangeDate())); pdPdCndMIO.setCndTpCd(pdCndBaseOut.getCndTypeCd()); pdPdCndMIO.setCmpxCndYn(pdCndBaseOut.isComplexCnd() ? CPD01.YES : CPD01.NO); pdPdCndMIO.setCmpxStrctrId(pdCndBaseOut.getComplexStructureId()); pdPdCndMIO.setTierAplyCalcnWayCd(pdCndBaseOut.getTierApplyCalculationWayCd()); pdPdCndMIO.setCndStsCd(pdCndBaseOut.getCndStatusCd()); pdPdCndMIO.setCndValDcsnLvlCd(pdCndBaseOut.getCndValDecisionLevelCd()); pdPdCndMIO.setCndValNullYn(pdCndBaseOut.isCndValNull() ? CPD01.YES : CPD01.NO); pdPdCndMIO.setMndtryNegCndYn(pdCndBaseOut.isMandatoryNegotiationCnd() ? CPD01.YES : CPD01.NO); pdPdCndMIO.setCndValAplyWayCd(pdCndBaseOut.getCndValApplyWayCd()); pdPdCndMIO.setStepCndCd(pdCndBaseOut.getStepCndCd()); pdPdCndMIO.setIntRtAplyBaseDayCd(pdCndBaseOut.getInterestRateApplyBaseDayCd()); pdPdCndMIO.setPrfIntRtAplyTmCd(pdCndBaseOut.getPrefInterestRateApplyTimeCd()); pdPdCndMIO.setChildPdUseYn(pdCndBaseOut.isChildPdUse() ? CPD01.YES : CPD01.NO); pdPdCndMIO.setCndDtlsTpCd(pdCndBaseOut.getCndDetailTypeCd()); pdPdCndMIO.setAmtTpDscd(pdCndBaseOut.getAmtTypeDscd()); pdPdCndMIO.setRtrnFeeYn(pdCndBaseOut.isReturnFee() ? CPD01.YES : CPD01.NO); pdPdCndMIO.setTierHstExistYn(pdCndBaseOut.isTierHistoryExist() ? CPD01.YES : CPD01.NO); list.add(pdPdCndMIO); } out = new ArrayList<PdCnd>(); for (PdPdCndMIO pdCndMIO : list) { PdCndImpl cnd = new PdCndImpl(this.pd, pdCndMIO); out.add(cnd); } } //sorting interface // TODO - PdCnd //_getPdCndCustom().getCndHistory(out); // TODO - PdCnd return out; }
public ImportGrntAmtWhdrwlSvcIn clone(){ try{ ImportGrntAmtWhdrwlSvcIn object= (ImportGrntAmtWhdrwlSvcIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public PdTemplateQuerySvcGetCndGrpTmpltListTypeOut clone(){ try{ PdTemplateQuerySvcGetCndGrpTmpltListTypeOut object= (PdTemplateQuerySvcGetCndGrpTmpltListTypeOut)super.clone(); if ( this.childCatalogList== null ) object.childCatalogList = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut>(childCatalogList.size()); for( bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut item : childCatalogList ){ clonedList.add( (bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut)item.clone()); } object.childCatalogList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public List<ArArrAssetRXtnInfoDIO> selectList(ArArrAssetRXtnInfoDIO arArrAssetRXtnInfoDIO) { return _getArArrAssetRXtnInfoD().selectList(arArrAssetRXtnInfoDIO); }
public LnAplyIntRtHstSvcListOut clone(){ try{ LnAplyIntRtHstSvcListOut object= (LnAplyIntRtHstSvcListOut)super.clone(); if ( this.intRtList== null ) object.intRtList = null; else{ java.util.List<bankware.corebanking.loan.query.service.dto.LnArr360IntRt> clonedList = new java.util.ArrayList<bankware.corebanking.loan.query.service.dto.LnArr360IntRt>(intRtList.size()); for( bankware.corebanking.loan.query.service.dto.LnArr360IntRt item : intRtList ){ clonedList.add( (bankware.corebanking.loan.query.service.dto.LnArr360IntRt)item.clone()); } object.intRtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void saveMapSubInfo(ActorCore actorCore, Map<String, String> xtnInfoMap) throws BizApplicationException { _getActorSubInfoBiz().saveMapSubInfo(xtnInfoMap, (ActorImpl) actorCore); }
public void saveSubInfo(IValueObject subInfo, AprslImpl aprslImpl, Integer aprslThingSeqNbr) throws BizApplicationException{ // 0. null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {_getNewSubInfo(aprslImpl.getAprslThingSubInfoKnd(aprslThingSeqNbr)).getClass().getSimpleName()}); } logger.debug("## <AS> saveSubInfo -> subInfo = {} :: ", subInfo.getFieldValues()); // 1. 감정물건보조명세의 종류 조회 AprslThingSubInfoKndEnum subInfoKnd = aprslImpl.getAprslThingSubInfoKnd(aprslThingSeqNbr); // 2. 표준속성에 등록된 검증규칙을 통해 입력받은 확장속성내용 검증 for(Entry<String, Object> entry : subInfo.getFieldValues().entrySet()) { if(entry.getValue() != null) { _getAtrbtChk().checkStandardAttribute(entry.getKey(), String.valueOf(entry.getValue())); } } // 3. 보조원장 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(aprslImpl, aprslThingSeqNbr); if(subInfoCache == null){ // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("aprslId", aprslImpl.getAprslBasicCache().getAprslId()); // PK setting subInfoCache.set("aprslThingSeqNbr", aprslThingSeqNbr); // PK setting // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 3-1. insert _insertSubInfo(subInfoKnd, subInfoCache); // 4. 캐시 저장 _saveSubInfoCache(subInfoKnd, subInfoCache, aprslImpl, aprslThingSeqNbr); } else { // 속성값 변경여부 확인 - 변경사항이 없는 경우 update하지 않고 skip if (!DtoUtils.isValChanged(subInfo, subInfoCache)) { return; } // 입력된 확장정보를 DBIO VO에 setting DtoUtils.setSubInfoIO(subInfo, subInfoCache); // 3-2. update _updateSubInfo(subInfoKnd, subInfoCache); } }
public Map<String, String> getMapSubInfo(ArrTxCore arrTx){ return _getArrTxSubInfoBiz().getMapSubInfo((ArrTxImpl)arrTx); }
public int saveDstbTgtMInfo(CaDstbTgtMVO in) throws BizApplicationException{ int result = _getSvDstbTgtMDso().insert(_getDstbTgtReqMIO(in)); return result; }
public ArrIntSmltnSvcCndItmListOut clone(){ try{ ArrIntSmltnSvcCndItmListOut object= (ArrIntSmltnSvcCndItmListOut)super.clone(); if ( this.arrStrctrCndList== null ) object.arrStrctrCndList = null; else{ java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrCndStrctr> clonedList = new java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrCndStrctr>(arrStrctrCndList.size()); for( bankware.corebanking.arrangementservice.query.service.dto.ArrCndStrctr item : arrStrctrCndList ){ clonedList.add( (bankware.corebanking.arrangementservice.query.service.dto.ArrCndStrctr)item.clone()); } object.arrStrctrCndList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public ArrRelCustInfoOut getArrCustRelation(String arrCustRelCd, String custId, String baseDt, ArrRealCoreImpl arrReal) throws BizApplicationException { if(ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())){return null;} if( StringCoreUtils.isEmpty(arrCustRelCd)) { throw new BizApplicationException("AAPCME0006", new Object[]{"@arrCustRelCd"}); } if( StringCoreUtils.isEmpty(custId)) { _getArrRelRuleImpl().validateArrRelationPluralPossibleYn(ArrRelKndCoreEnum.CUSTOMER.getValue(), arrCustRelCd, arrReal); custId = null; } String inqBaseDt = baseDt; if( StringCoreUtils.isEmpty(baseDt)) { inqBaseDt = ArrCmnCoreUtil.getRckngDt( _getCmnContextCore() ); } ArArrCustRIO arArrCustRIO = _getArArrCustRDso().selectEffective(arrReal.getInstCd(), arrReal.getArrId(), custId, arrCustRelCd, inqBaseDt); return _buildArrRelInfoOut( arArrCustRIO ); }
public PreScrningCardPrfrmnc clone(){ try{ PreScrningCardPrfrmnc object= (PreScrningCardPrfrmnc)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaDocRgstSvcBsicModifyIn clone(){ try{ CaDocRgstSvcBsicModifyIn object= (CaDocRgstSvcBsicModifyIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void setTxAblStartHms( java.lang.String txAblStartHms ) { isSet_txAblStartHms = true; this.txAblStartHms = txAblStartHms; }
public CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetIn clone(){ try{ CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetIn object= (CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public void validate(String arrSrvcCd,ArrRealCore arrReal, CustCore cust, Map<String, Object> vldtnRequiredValMap) throws BizApplicationException { if (!_getCmnContext().isSelfChannel()) return; ArrMbrshp arrMbrshp = _getArrCustMngr().getMembershipArr(cust.getCustId()); if (arrMbrshp == null || !arrMbrshp.isActive()) { //You are not authenticated with this bank or authentication is under processing. Please, Apply for authentication first. //인증에 대한 심사가 진행중이거나, 인증을 받지 않은 회원입니다. 먼저 인증을 받으시기 바랍니다. throw new BizApplicationException("AAPARE0404", new Object[]{}); } ArrCnd arrCnd = arrMbrshp.getArrCnd(PdCndEnum.INTERNET_CHANNEL_USE_YN.getValue()); if (_getCmnContext().isChannelInternet() && ( arrCnd == null || CCM01.NO.equals(arrCnd.getCndVal()))) { //Internet web service is not registered for you //인터넷 서비스 등록이 되어 있지 않습니다 throw new BizApplicationException("AAPARE0408", new Object[]{}); } arrCnd = arrMbrshp.getArrCnd(PdCndEnum.MOBILE_APP_CHANNEL_USE_YN.getValue()); if (_getCmnContext().isChannelMobile() && ( arrCnd == null || CCM01.NO.equals(arrCnd.getCndVal()))) { //Mobile app service is not registered for you //모바일 앱 서비스 등록이 되어 있지 않습니다. throw new BizApplicationException("AAPARE0409", new Object[]{}); } arrCnd = arrMbrshp.getArrCnd(PdCndEnum.PHONE_BANKING_ARS_CHANNEL_USE_YN.getValue()); if (_getCmnContext().isChannelArs() && ( arrCnd == null || CCM01.NO.equals(arrCnd.getCndVal()))) { //Mobile phone bankikng ARS service is not registered for you //폰뱅킹 ARS 서비스 등록이 되어 있지 않습니다 throw new BizApplicationException("AAPARE0567", new Object[]{}); } }
public void validate(String arrSrvcCd,ArrReal arrReal, Map<ArrVldtnRequiredValEnum, Object> vldtnRequiredValMap) throws BizApplicationException { super.validate(arrSrvcCd, (ArrRealCore) arrReal, _convertValMap(vldtnRequiredValMap)); }
public TxHstQrySvcInquiryTxBsicInfoOut clone(){ try{ TxHstQrySvcInquiryTxBsicInfoOut object= (TxHstQrySvcInquiryTxBsicInfoOut)super.clone(); if ( this.entryList== null ) object.entryList = null; else{ java.util.List<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut> clonedList = new java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut>(entryList.size()); for( bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut item : entryList ){ clonedList.add( (bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut)item.clone()); } object.entryList = clonedList; } if ( this.stlmntMList== null ) object.stlmntMList = null; else{ java.util.List<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut> clonedList = new java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut>(stlmntMList.size()); for( bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut item : stlmntMList ){ clonedList.add( (bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut)item.clone()); } object.stlmntMList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public boolean isStandardAttributeValidationUse() { return (isValidationTailored)? isStdAtrbtVldtnUse: stdDtoClassAtrbt.isStandardAttributeValidationUse(); }
public Map<String, String> getMapXtnInfo(ArrTxCoreImpl arrTx, ArrRealCore arr) { return _getMapXtnInfoCache(arrTx); }
public boolean isChannelCenterCut(String chnlDscd) throws BizApplicationException { return ChannelEnum.CENTER_CUT.getValue().equals(chnlDscd) ? true : false; }
public ArArrGrpArrRIO select(ArArrGrpArrRIO arArrGrpArrRIO) { return _getArArrGrpArrR().select(arArrGrpArrRIO); }
public void saveSubInfo(String xtnAtrbtNm, String xtnAtrbtCntnt, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if (StringUtils.isEmpty(xtnAtrbtNm)){ return; } // 1. 보조명세 종류 조회 ArrSubInfoKndEnum subInfoKnd = arrRealImpl.getSubInfoKnd(); // 2. 계약에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(arrRealImpl); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("arrId", arrRealImpl.getArrId()); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // insert _insertSubInfo(subInfoKnd, subInfoCache); // save cache arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(), subInfoCache); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache)) { return; } // 변경전 이력 저장 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 속성명/속성값을 DBIO VO에 set DtoUtils.setSubInfoIO(xtnAtrbtNm, xtnAtrbtCntnt, subInfoCache); // update _updateSubInfo(subInfoKnd, subInfoCache); } }
public void saveMapSubInfo(Map<String, String> subInfoMap, DeptImpl deptImpl) throws BizApplicationException { // 0. null check if(subInfoMap==null || subInfoMap.isEmpty()) { return; } // 2. 보조원장 캐시 조회결과에 따라 insert/update 판단 AtDeptSIO subInfoIO = getSubInfoCache(deptImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtDeptSIO(); subInfoIO.setDeptId(deptImpl.getDeptId()); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _getAtDeptSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(deptImpl, subInfoIO); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _getAtDeptSDso().update(subInfoIO); } // 2. 캐시 저장 deptImpl.setSubInfoCache(subInfoIO); }
public LnAplyIntRtHstSvcListIn clone(){ try{ LnAplyIntRtHstSvcListIn object= (LnAplyIntRtHstSvcListIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String xtnAtrbtNm, ArrRealCore arrReal) throws BizApplicationException { return _getArrSubInfoBiz().getSubInfo(xtnAtrbtNm, (ArrRealImpl) arrReal); }
private BfCndTestSvcOut getQueryBaseDayCode(BfCndTestSvcIn in) throws BizApplicationException { // Set input BfIn bfIn = new BfIn(); bfIn.setBfCd(in.getPdCd()); bfIn.setAplyDt(in.getAplyDt()); // BF 객체생성 Bf bf = _getBfMngr().getBf(bfIn); // 조건객체 생성 BfCnd bfCnd = bf.getCnd(in.getCndCd()); String output = bfCnd.getQueryBaseDayCode(); BfCndTestSvcOut out = new BfCndTestSvcOut(); if (StringUtils.isEmpty(output)) { out.setChkYn(false); } else { out.setChkYn(true); out.setCntnt(output.toString()); } return out; }
public List<PntCnd> getCndMultiple(List<String> cndCdList, String aplyStartDt, String aplyStartTm, String aplyEndDt, String aplyEndTm) throws BizApplicationException { // Set input PntCndMltplIn in = new PntCndMltplIn(); in.setAplyStartDt(aplyStartDt); in.setAplyStartTm(_getAplyTmString(aplyStartTm)); in.setAplyEndDt(aplyEndDt); in.setAplyEndTm(_getAplyTmString(aplyEndTm)); in.setCndCdList(cndCdList); // Return output return getCndMultiple(in); }
public String getNumbering(String nbrgAtrbtNm,Map<String, Object> inpParmMap,Boolean isReUseSameTxNbrg) throws BizApplicationException { return getNumbering(_getCmnContext().getInstCode(), nbrgAtrbtNm, inpParmMap, isReUseSameTxNbrg); }
public List<SctnBalWhdrwlOrderIO> getListSctnBalWhdrwlOrder(SctnBalWhdrwlOrderIO in) throws BizApplicationException { // Inquiry Product By Extend Amount Type List from DB StTxWhdrwlOrderBalHIO stTxWhdrwlOrderBalHIO = new StTxWhdrwlOrderBalHIO(); _getCmnContext().setHeaderColumn(stTxWhdrwlOrderBalHIO); stTxWhdrwlOrderBalHIO.setArrId(in.getArrId()); List<StTxWhdrwlOrderBalHIO> listStTxWhdrwlOrderBalHIO = _getStTxWhdrwlOrderBalHXtnDso().selectSctnList(stTxWhdrwlOrderBalHIO, in.getSctnStartDt(), in.getSctnEndDt()); // Set Result value List<SctnBalWhdrwlOrderIO> outList = new ArrayList<SctnBalWhdrwlOrderIO>(); if (listStTxWhdrwlOrderBalHIO != null) { for(StTxWhdrwlOrderBalHIO out : listStTxWhdrwlOrderBalHIO) { outList.add(_getSctnBalWhdrwlOrderIO(out)); } } return outList; }
public List<CaCndTmpltOut> getListCndTmpltInfo(CaCndTmpltIn in) throws BizApplicationException { CaPdCtMIO daoIn = new CaPdCtMIO(); daoIn.setTntInstId(in.getInstCd()); daoIn.setCndCd(in.getCndCd()); daoIn.setCndNm(in.getCndNm()); daoIn.setCndTpCd(in.getCndTpCd()); daoIn.setCndDtlsTpCd(in.getCndDtlsTpCd()); daoIn.setActvYn(in.getActvYn()); if (StringUtils.isEmpty(daoIn.getTntInstId())) { daoIn.setTntInstId(_getCmnContext().getInstCode()); } List<CaCndTmpltOut> outList = _getCaPdCtMDso().selectConditionTemplateDetailList(daoIn); return outList; }
public CaTblMgmtSvcGetTblXtnAtrbtListOut clone(){ try{ CaTblMgmtSvcGetTblXtnAtrbtListOut object= (CaTblMgmtSvcGetTblXtnAtrbtListOut)super.clone(); if ( this.atrbtList== null ) object.atrbtList = null; else{ java.util.List<bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetTblXtnAtrbtListDtlOut> clonedList = new java.util.ArrayList<bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetTblXtnAtrbtListDtlOut>(atrbtList.size()); for( bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetTblXtnAtrbtListDtlOut item : atrbtList ){ clonedList.add( (bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetTblXtnAtrbtListDtlOut)item.clone()); } object.atrbtList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public CaCmInstPMIO select(CaCmInstPMIO cmInstPMIO) { return _getCmInstPM().select(cmInstPMIO); }
public boolean checkCode(String cdNbr, Map<String, Object> supplInfoVal) throws BizApplicationException { String cd = ""; if(supplInfoVal.get(CCM03.CD) != null) { cd = supplInfoVal.get(CCM03.CD).toString(); } ArArrSrvcBlckngMIO sqlIn = new ArArrSrvcBlckngMIO(); sqlIn.setArrSrvcBlckngCd(cd); ArArrSrvcBlckngMIO ArArrSrvcBlckngMIO = _getArArrSrvcBlckngMDso().select(sqlIn); if(ArArrSrvcBlckngMIO == null){ return false; } return true; }
public String getInputDtoName() { return inpDtoNm; }
public PdBaseIntRtInqrySvcOut clone(){ try{ PdBaseIntRtInqrySvcOut object= (PdBaseIntRtInqrySvcOut)super.clone(); if ( this.list== null ) object.list = null; else{ java.util.List<bankware.corebanking.product.service.dto.PdBaseIntRtInqrySvcBaseRt> clonedList = new java.util.ArrayList<bankware.corebanking.product.service.dto.PdBaseIntRtInqrySvcBaseRt>(list.size()); for( bankware.corebanking.product.service.dto.PdBaseIntRtInqrySvcBaseRt item : list ){ clonedList.add( (bankware.corebanking.product.service.dto.PdBaseIntRtInqrySvcBaseRt)item.clone()); } object.list = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public FrgnCrncyChkClctnSvcIn clone(){ try{ FrgnCrncyChkClctnSvcIn object= (FrgnCrncyChkClctnSvcIn)super.clone(); if ( this.chkInfoList== null ) object.chkInfoList = null; else{ java.util.List<bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn> clonedList = new java.util.ArrayList<bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn>(chkInfoList.size()); for( bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn item : chkInfoList ){ clonedList.add( (bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn)item.clone()); } object.chkInfoList = clonedList; } return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public java.util.List<bankware.corebanking.configurationadmin.assessment.service.dto.CaAsmItmMgmtSvcGetAsmItm> getAsmItmList(){ return asmItmList; }
public CaCoaMgmtSvcGetXtnTblAtrbtIO clone(){ try{ CaCoaMgmtSvcGetXtnTblAtrbtIO object= (CaCoaMgmtSvcGetXtnTblAtrbtIO)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public MbrshpArrOpnSvcArrXtnIn clone(){ try{ MbrshpArrOpnSvcArrXtnIn object= (MbrshpArrOpnSvcArrXtnIn)super.clone(); return object; } catch(CloneNotSupportedException e){ throw new bxm.omm.exception.CloneFailedException(); } }
public String getSubInfo(String xtnAtrbtNm, Integer arrSrvcBlckngSeqNbr, Integer seqNbr, ArrRealCore arrRealCore) throws BizApplicationException { return _getArrSrvcBlckngSubInfoBiz().getSubInfo(xtnAtrbtNm, arrSrvcBlckngSeqNbr, seqNbr, (ArrRealImpl)arrRealCore); }
public void saveSubInfo(IValueObject subInfo, String txDt, Integer txSeqNbr, ArrRealImpl arrRealImpl) throws BizApplicationException { // null check if(subInfo == null){ throw new BizApplicationException("AAPCME0006", new Object[] {_getNewSubInfo(arrRealImpl.getSubInfoKnd()).getClass().getSimpleName()}); } // 1. 보조명세 종류 조회 ArrSubInfoKndEnum subInfoKnd = arrRealImpl.getSubInfoKnd(); // 2. 계약에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 IValueObject subInfoCache = getSubInfoCache(arrRealImpl); if (subInfoCache == null) { // DBIO VO new instance subInfoCache = _getNewSubInfoSqlIO(subInfoKnd); subInfoCache.set("arrId", arrRealImpl.getArrId()); // 빈 이력 생성 --> undo 시 확장속성 저장 이전으로 속성값을 원복시키기 위함 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // insert _insertSubInfo(subInfoKnd, subInfoCache); // save cache arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(), subInfoCache); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfo, subInfoCache)) { return; } // 변경전 이력 저장 _saveSubInfoHst(arrRealImpl, subInfoKnd, subInfoCache, txDt, txSeqNbr); // 입력된 I/F VO를 DBIO VO로 convert DtoUtils.setSubInfoIO(subInfo, subInfoCache); // update _updateSubInfo(subInfoKnd, subInfoCache); } }
public String getAttributeValidationRule() { return atrbtVldtnRule; }
protected void register(CustImpl custImpl) throws BizApplicationException { AtCustMIO atCustMIO = custImpl.getCustBsicCache(); List<AtScrtyQstnrAnswerDIO> atScrtyQstnrAnswerDIOList = custImpl.getListQstnrAnswerCache(); if (atScrtyQstnrAnswerDIOList.isEmpty()) { return; } for (AtScrtyQstnrAnswerDIO item : atScrtyQstnrAnswerDIOList) { item.setInstCd(atCustMIO.getInstCd()); item.setAnswerTrgtId(atCustMIO.getCustId()); item.setAnswerTrgtTpCd(AnswerTrgtTpEnum.CUST.getValue()); } _getSecurityQuestionnaireAnswer().register(atScrtyQstnrAnswerDIOList); }
public PdCardAprvlMIO selectAprvlInfo(String tntInstId, String aprvlDt, String cardNbr, String aprvlNbr) { // 조회 PdCardAprvlMIO out = _getPdServiceM().selectAprvlInfo(tntInstId, aprvlDt, cardNbr, aprvlNbr); // Return output return out; }
public Pnt getDummyPnt() { return new PntImpl(); }
public String getCndGrpTmpltCd() { if (pdPdCndM == null) { return null; } return pdPdCndM.getCndGrpTmpltCd(); }
static boolean isValid(String value){ for (ArrCndActionRequiredValueCoreEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
public void saveMapSubInfo(Map<String, String> subInfoMap, AtrlImpl atrlImpl) throws BizApplicationException { // null check if (subInfoMap == null || subInfoMap.isEmpty()) { return; } // 1. 액터역할에 저장된 보조명세 캐시 조회결과에 따라 insert/update 판단 AtAtrlSIO subInfoIO = getSubInfoCache(atrlImpl); if (subInfoIO == null) { // DBIO VO new instance subInfoIO = new AtAtrlSIO(); subInfoIO.setAtrlId(atrlImpl.getAtrlId()); // 입력된 Map을 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // insert _getAtAtrlSDso().insert(subInfoIO); } else { // 속성값 변경여부 검증 if (!DtoUtils.isValChanged(subInfoMap, subInfoIO)) { return; } // 변경전 이력 저장 _saveSubInfoHst(atrlImpl, subInfoIO); // 입력된 Map을 기존 캐시 저장된 DBIO VO에 반영 DtoUtils.setSubInfoIO(subInfoMap, subInfoIO); // update _getAtAtrlSDso().update(subInfoIO); } // 2. 캐시 저장 atrlImpl.setSubInfoCache(subInfoIO); }
public void saveMapSubInfo(Map<String, String> assetThingSubInfoMap, AssetCore assetImpl, Integer assetThingSeqNbr, String txDt, Integer txSeqNbr) throws BizApplicationException { _getAssetThingSubInfoBiz().saveMapSubInfo(assetThingSubInfoMap, txDt, txSeqNbr, (AssetImpl) assetImpl, assetThingSeqNbr); }
public boolean isTerminated() { return this.arrGrpStsCd.equals(ArrGrpStsCoreEnum.TERMINATED.getValue()); }
static boolean isValid(String value){ for (ArrCustRelStsEnum enumObject: values()){ if(enumObject.getValue().equals(value)) { return true; } } return false; }
