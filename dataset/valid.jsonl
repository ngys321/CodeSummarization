{"code_tokens": ["public", "SelfAuthBsicInfoIO", "request(SelfAuthBsicInfoIO", "selfAuthBsicIO)", "throws", "BizApplicationException", "{", "//check", "required", "inputs", "if(selfAuthBsicIO", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"self", "authentication", "basic", "info\"});", "}else", "if(StringUtils.isEmpty(selfAuthBsicIO.getAuthCd())){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@authCd\"});", "}", "//", "get", "self", "authorization", "code", "SelfAuthCdIO", "SelfAuthCdIO", "=", "_getSelfAuthCd().getInfo(selfAuthBsicIO.getAuthCd());", "/*", "get", "target", "Actor", "*/", "Actor", "actor", "=", "null;", "if(AuthTrgtTpEnum.CUST.getValue().equals(selfAuthBsicIO.getAuthTrgtTpCd()))", "{", "Cust", "cust", "=", "_getCustMngr().getCust(selfAuthBsicIO.getAuthTrgtId());", "if", "(cust", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"self", "authentication", "tartet", "ID\"});", "}", "actor", "=", "((CustImpl)", "cust).getActor();", "}", "else", "if(AuthTrgtTpEnum.STAFF.getValue().equals(selfAuthBsicIO.getAuthTrgtTpCd()))", "{", "Staff", "staff", "=", "_getStaffMngr().getStaff(selfAuthBsicIO.getAuthTrgtId());", "if(staff", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"self", "authentication", "tartet", "ID\"});", "}", "if(!StringUtils.isEmpty(staff.getActorId()))", "{", "actor", "=", "_getActorMngr().getActor(staff.getActorId());", "}", "}", "/*", "Create", "self", "authentication", "basic", "*/", "selfAuthBsicIO.setAuthStsCd(AuthStsEnum.DEMAND.getValue());", "_getSelfAuthBsic().registerRequestInformation(selfAuthBsicIO,", "SelfAuthCdIO,", "actor);", "//check", "if", "the", "actor", "is", "locked", "for", "SMS", "authentication.", "_checkAdjustmentForRequest(selfAuthBsicIO,", "SelfAuthCdIO,", "actor);", "if(selfAuthBsicIO.getAuthRsltTpCd()", "==", "null", "||", "AuthRsltTpEnum.SUCCESS.getValue().equals(selfAuthBsicIO.getAuthRsltTpCd()))", "{", "/*", "if", "authentication", "way", "type", "is", "SMS", "OTP", "or", "email", "OTP,", "create", "one", "time", "password", "*/", "if(AuthTpEnum.SMS_AUTH.isEqual(SelfAuthCdIO.getAuthTpCd())", "||", "AuthTpEnum.EMAIL_AUTH.isEqual(SelfAuthCdIO.getAuthTpCd()))", "{", "_createOneTimePassword(selfAuthBsicIO);", "/*", "demand", "notice", "*/", "NoticeBsicInfoIO", "noticeBsicIO", "=", "_requestNotice(selfAuthBsicIO,", "SelfAuthCdIO,", "actor);", "if(noticeBsicIO", "!=", "null)", "{", "if(NoticeDemandRsltEnum.SUCCESS.getValue().equals(noticeBsicIO.getNoticeDemandRsltCd()))", "{", "selfAuthBsicIO.setNoticeId(noticeBsicIO.getNoticeId());", "/*", "update", "notice", "id", "*/", "_getSelfAuthBsic().modifyNoticeIdentification(selfAuthBsicIO);", "}", "else", "if(NoticeDemandRsltEnum.ERR_SEND_FAIL.getValue().equals(noticeBsicIO.getNoticeDemandRsltCd()))", "{", "selfAuthBsicIO.setAuthRsltTpCd(AuthRsltTpEnum.FAIL_NOT_SEND_AUTH_INFO.getValue());", "}", "else", "if(!NoticeDemandRsltEnum.SUCCESS.getValue().equals(noticeBsicIO.getNoticeDemandRsltCd()))", "{", "throw", "new", "BizApplicationException(\"AAPCME0002\",", "new", "String[]", "{", "noticeBsicIO.getNoticeDemandRsltCd()},", "new", "String[]", "{", "noticeBsicIO.getNoticeDemandRsltCd()});", "}", "}", "}", "}", "selfAuthBsicIO.setAuthEfctvTrmCd(SelfAuthCdIO.getAuthEfctvTrmCd());", "return", "selfAuthBsicIO;", "}"], "docstring_tokens": ["It", "requests", "notice.", "It", "can", "be", "used", "after", "connecting", "with", "actual", "SMS", "text", "and", "EMAIL", "sending", "server.", "For", "SMS,", "the", "caller", "ID", "is", ":", "0101112222", "For", "E-Mail,", "the", "caller", "ID", "is", ":", "admin@bankwareglobal.com"]}
{"code_tokens": ["public", "CashTransitSvcInquiryCashTransitListOut", "clone(){", "try{", "CashTransitSvcInquiryCashTransitListOut", "object=", "(CashTransitSvcInquiryCashTransitListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcOut>(tblNm.size());", "for(", "bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.cashaccounting.service.dto.CashTransitSvcOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "validate(String", "arrSrvcCd,ArrRealCore", "arrReal,", "CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "if", "(cust.isBankruptcy()){", "//Customer", "is", "in", "bankruptcy.", "This", "service", "({0})", "could", "not", "be", "finished", "properly", "//\uace0\uac1d\uc774", "\ud30c\uc0b0\uc0c1\ud0dc\uc785\ub2c8\ub2e4.", "\ubcf8\uc11c\ube44\uc2a4({0})", "\uc2e4\ud589\uc774", "\ubd88\uac00", "\ud569\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0296\",", "new", "Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)});", "}", "}"], "docstring_tokens": ["Check", "if", "the", "issued", "media", "is", "available.", "Throw", "error", "if", "it", "is", "unavailable."]}
{"code_tokens": ["public", "DivideArrangementSvcOutSub", "clone(){", "try{", "DivideArrangementSvcOutSub", "object=", "(DivideArrangementSvcOutSub)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AssetTxCore", "assetTx)", "throws", "BizApplicationException", "{", "_getAssetTxSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AssetTxImpl)", "assetTx);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\uae30\uc874", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "ArArrSrvcBlckngSIO", "subInfoCache", "=", "_getSubInfoCache(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "ArArrSrvcBlckngSIO();", "subInfoCache.setArrId(arrRealImpl.getArrId());", "subInfoCache.setArrSrvcBlckngSeqNbr(arrSrvcBlckngSeqNbr);", "subInfoCache.setSeqNbr(seqNbr);", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveArArrSrvcBlckngSubH(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "insert", "_getArArrSrvcBlckngSDso().insert(subInfoCache);", "//", "save", "cache", "_saveSubInfoCache(subInfoCache,", "arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveArArrSrvcBlckngSubH((ArrRealImpl)", "arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "update", "_getArArrSrvcBlckngSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AssetCore", "asset,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getAssetSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "(AssetImpl)", "asset);", "}"], "docstring_tokens": ["Save", "an", "asset", "transaction", "subsidiary", "information."]}
{"code_tokens": ["public", "AssetListInqrySvcGetBsicInfoOut", "clone(){", "try{", "AssetListInqrySvcGetBsicInfoOut", "object=", "(AssetListInqrySvcGetBsicInfoOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaCoaMgmtSvcGetCoaIO", "clone(){", "try{", "CaCoaMgmtSvcGetCoaIO", "object=", "(CaCoaMgmtSvcGetCoaIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "if", "(", "this.xtnInfo==", "null", ")", "object.xtnInfo", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaXtnInfoIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaXtnInfoIO>(xtnInfo.size());", "for(", "bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaXtnInfoIO", "item", ":", "xtnInfo", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaXtnInfoIO)item.clone());", "}", "object.xtnInfo", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustEtcReportSvcGetIn", "clone(){", "try{", "CustEtcReportSvcGetIn", "object=", "(CustEtcReportSvcGetIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(TxTpDscdEnum", "item", ":", "TxTpDscdEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "setTxYn(String", "txYn){", "this.txYn=", "txYn;", "}"], "docstring_tokens": ["Set", "transaction", "yn."]}
{"code_tokens": ["public", "void", "validate(CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "validate(null,", "cust,", "vldtnRequiredValMap);", "}"], "docstring_tokens": ["Processing", "rules", "should", "be", "commonly", "performed", "according", "to", "the", "rules", "defined", "in", "the", "service", "processing", "rule,", "based", "on", "the", "service", "type", "input."]}
{"code_tokens": ["public", "CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrIn", "clone(){", "try{", "CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrIn", "object=", "(CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrIn)super.clone();", "if", "(", "this.mltLngDtlList==", "null", ")", "object.mltLngDtlList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.dictionary.service.dto.CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrDtlIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.dictionary.service.dto.CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrDtlIn>(mltLngDtlList.size());", "for(", "bankware.corebanking.configurationadmin.dictionary.service.dto.CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrDtlIn", "item", ":", "mltLngDtlList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.dictionary.service.dto.CaMltLngTrnsfrMgmtSvcRegisterMltLngTrnsfrDtlIn)item.clone());", "}", "object.mltLngDtlList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "FvrtAcctMgmtSvcGetFvrtAcctListOut", "clone(){", "try{", "FvrtAcctMgmtSvcGetFvrtAcctListOut", "object=", "(FvrtAcctMgmtSvcGetFvrtAcctListOut)super.clone();", "if", "(", "this.fvrtAcctList==", "null", ")", "object.fvrtAcctList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.FvrtAcctMgmtSvcGetFvrtAcctOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.FvrtAcctMgmtSvcGetFvrtAcctOut>(fvrtAcctList.size());", "for(", "bankware.corebanking.customer.change.service.dto.FvrtAcctMgmtSvcGetFvrtAcctOut", "item", ":", "fvrtAcctList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.FvrtAcctMgmtSvcGetFvrtAcctOut)item.clone());", "}", "object.fvrtAcctList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "arrXtnInfoMap,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(arrXtnInfoMap", "==", "null", "||", "arrXtnInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\uae30\uc874", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "ArArrSrvcBlckngSIO", "subInfoCache", "=", "_getSubInfoCache(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "ArArrSrvcBlckngSIO();", "subInfoCache.setArrId(arrRealImpl.getArrId());", "subInfoCache.setArrSrvcBlckngSeqNbr(arrSrvcBlckngSeqNbr);", "subInfoCache.setSeqNbr(seqNbr);", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveArArrSrvcBlckngSubH(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(arrXtnInfoMap,", "subInfoCache);", "//", "insert", "_getArArrSrvcBlckngSDso().insert(subInfoCache);", "//", "save", "cache", "_saveSubInfoCache(subInfoCache,", "arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(arrXtnInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveArArrSrvcBlckngSubH((ArrRealImpl)", "arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(arrXtnInfoMap,", "subInfoCache);", "//", "update", "_getArArrSrvcBlckngSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "subInfoMap."]}
{"code_tokens": ["public", "List<ArArrAssetRXtnInfoDIO>", "selectListArrAssetRXtnInfo(ArArrAssetRXtnInfoDIO", "arArrAssetRXtnInfoDIO)", "throws", "BizApplicationException", "{", "return", "_getArArrAssetRXtnInfoDDso().selectList(arArrAssetRXtnInfoDIO);", "}"], "docstring_tokens": ["Inquire", "all", "of", "active", "arrangement/asset", "relation", "extended", "attribute", "of", "subsidiary", "information(CTI)"]}
{"code_tokens": ["public", "LnLmtRdctnAmtSvcChngSvcIn", "clone(){", "try{", "LnLmtRdctnAmtSvcChngSvcIn", "object=", "(LnLmtRdctnAmtSvcChngSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(StaffCore", "staffCore)", "throws", "BizApplicationException", "{", "return", "_getStaffSubInfoBiz().getMapSubInfo((StaffImpl)staffCore);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "detail", "information."]}
{"code_tokens": ["public", "TermDpstIntPymntSvcOut", "clone(){", "try{", "TermDpstIntPymntSvcOut", "object=", "(TermDpstIntPymntSvcOut)super.clone();", "if", "(", "this.list==", "null", ")", "object.list", "=", "null;", "else{", "java.util.List<bankware.corebanking.deposit.financialtransaction.service.dto.TermDpstIntPymntSvcOutSub>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.deposit.financialtransaction.service.dto.TermDpstIntPymntSvcOutSub>(list.size());", "for(", "bankware.corebanking.deposit.financialtransaction.service.dto.TermDpstIntPymntSvcOutSub", "item", ":", "list", "){", "clonedList.add(", "(bankware.corebanking.deposit.financialtransaction.service.dto.TermDpstIntPymntSvcOutSub)item.clone());", "}", "object.list", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getNumbering(String", "instCd,String", "nbrgAtrbtNm,Map<String,", "Object>", "inpParmMap)", "throws", "BizApplicationException", "{", "return", "getNumbering(instCd,", "nbrgAtrbtNm,", "inpParmMap,", "false);", "}"], "docstring_tokens": ["It", "calculates", "next", "number.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'instCd'", "value", "is", "replaced", "by", "instCd", "in", "Common", "Context.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'isReUseSameTxNbrg'", "value", "is", "treated", "as", "false."]}
{"code_tokens": ["public", "CustRprsnChngSvcXtnInfoListIO", "clone(){", "try{", "CustRprsnChngSvcXtnInfoListIO", "object=", "(CustRprsnChngSvcXtnInfoListIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArArrIssmdaXtnInfoDIO>", "selectList(ArArrIssmdaXtnInfoDIO", "arArrIssmdaXtnInfoDIO){", "arArrIssmdaXtnInfoDIO.setInstCd(_getCmnContextCore().getInstCode());", "return", "_getArArrIssmdaXtnInfoD().selectList(arArrIssmdaXtnInfoDIO);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "boolean", "isValid(String", "type)", "{", "return", "(", "\"FO\".equalsIgnoreCase(type)", "||", "\"PR\".equalsIgnoreCase(type)", "||", "\"MF\".equalsIgnoreCase(type)", "||", "\"MP\".equalsIgnoreCase(type)", ")", ";", "//added", "by", "Roh(change", "to", "simplify)", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "AssetTxImpl", "assetTxImpl)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsAssetTxSIO", "subInfoCache", "=", "getSubInfoCache(assetTxImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsAssetTxSIO();", "subInfoCache.setTxDt(assetTxImpl.getAssetTxBasicCache().getTxDt());", "//PK", "setting", "subInfoCache.setTxSeqNbr(assetTxImpl.getAssetTxBasicCache().getTxSeqNbr());//PK", "setting", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-1.", "insert", "_getAsAssetTxSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "assetTxImpl.setAssetTxSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-2.", "update", "_getAsAssetTxSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "subInfoMap"]}
{"code_tokens": ["public", "void", "rebuild(ArrCndRebuildRequiredValue", "rebuildIn)", "throws", "BizApplicationException", "{", "logger.debug(\"##", "<AR>", "ArrCndOkTestIntRtSampleImpl", "=>", "rebuildIn", "=", "{}", "::", "\",", "rebuildIn.getFieldValues());", "Arrangement", "arr", "=", "getArr();", "if(!arr.isReal()){", "return;", "}", "initializeArrCndVal();", "//", "\uc0c1\ud488\uc758", "\uc801\uc6a9\ub300\uc0c1", "\uc6b0\ub300\uae08\ub9ac", "\uc870\ud68c", "BigDecimal", "rate", "=", "_getAplyRuleIntRtValue();", "//", "\uacc4\uc57d\uc870\uac74\uc73c\ub85c", "\uc800\uc7a5", "this.createPdCndAsArrLevel(rate,", "rebuildIn.getBaseDt(),", "this.getArrangementCore(),", "rebuildIn.getTxDt(),", "rebuildIn.getTxSeqNbr());", "}"], "docstring_tokens": ["Perform", "interest", "rate", "rebuild."]}
{"code_tokens": ["public", "List<CaDataVldtnPrsntMIO>", "selectList(CaDataVldtnPrsntMIO", "caDataVldtnPrsntMIO){", "return", "_getCaDataVldtnPrsntM().selectList(caDataVldtnPrsntMIO);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaTmpltMgmtSvcGetTmpltDtl>", "getChildren(){", "return", "children;", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "child", "arrangement."]}
{"code_tokens": ["public", "void", "modifyArrMaturityDate(String", "arrMtrtyDt,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getArrBasicBiz().modifyArrMaturityDate(arrMtrtyDt,", "txDt,", "txSeqNbr,", "this);", "}"], "docstring_tokens": ["Change", "maturity", "date", "of", "arrangement."]}
{"code_tokens": ["public", "CaInstInfo", "getInst()", "throws", "BizApplicationException", "{", "return", "this.getInst(_getCaCmnContext().getInstCode());", "}"], "docstring_tokens": ["Inquiry", "institution", "through", "institution", "code", "in", "header."]}
{"code_tokens": ["public", "CaBnkMgmtSvcSaveBankCodeSubIn", "clone(){", "try{", "CaBnkMgmtSvcSaveBankCodeSubIn", "object=", "(CaBnkMgmtSvcSaveBankCodeSubIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "terminate(ArrStsChngIn", "arrStsChngIn)", "throws", "BizApplicationException", "{", "_setArrStatus(", "ArrStsEnum.TERMINATED,", "arrStsChngIn", ");", "_changeStatus(", "arrStsChngIn,", "null);", "}"], "docstring_tokens": ["terminate", "assessment", "status"]}
{"code_tokens": ["public", "AprslRqstInfoOut", "clone(){", "try{", "AprslRqstInfoOut", "object=", "(AprslRqstInfoOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(CaRoleTmpltStsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"APATE0028\",", "new", "Object[]", "{value,", "\"@roleTmpltStsCd\"});", "}", "return", "true;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "String", "getInstCd()", "{", "return", "instCd;", "}"], "docstring_tokens": ["Inquire", "financial", "institution", "code", "where", "the", "arrangement", "is", "created", "and", "managed."]}
{"code_tokens": ["public", "ArrFxSubInfo", "getArrFxSubInfo()", "throws", "BizApplicationException{", "//", "\ubcf4\uc870\uba85\uc138\uc885\ub958\uac00", "\uacc4\uc57d\uc678\ud658\ubcf4\uc870\uba85\uc138\uc774", "\uc544\ub2c8\uba74", "\uc5d0\ub7ec\ucc98\ub9ac", "if", "(getSubInfoKnd()", "!=", "ArrSubInfoKndEnum.AR_ARR_FX_S)", "{", "throw", "new", "BizApplicationException(\"AAPARE0719\");", "}", "IValueObject", "subInfoCache", "=", "_getArrSubInfoBiz().getSubInfoCache(this);", "if", "(subInfoCache", "==", "null)", "{", "return", "null;", "}", "ArrFxSubInfo", "subInfoOut", "=", "new", "ArrFxSubInfo();", "DtoUtils.setSubInfoIO(subInfoCache,", "subInfoOut);", "return", "subInfoOut;", "}"], "docstring_tokens": ["Inquire", "foreign", "exchange", "subsidiary", "information", "of", "arrangement."]}
{"code_tokens": ["public", "List<KrStutDongCdOut>", "getListGuGun(String", "cityPrvncCd)throws", "BizApplicationException", "{", "List<KrStutDongCdOut>", "krStutDongCdOutList", "=", "new", "ArrayList<KrStutDongCdOut>();", "List<CmKrStutDongCdMIO>", "cmKrStutDongCdMList", "=", "_getCmKrStutDongCdMDso().selectGuGunLIst(cityPrvncCd);", "if(cmKrStutDongCdMList.isEmpty())", "{", "return", "krStutDongCdOutList;", "}", "for(CmKrStutDongCdMIO", "cmKrStutDongCdMIO", ":", "cmKrStutDongCdMList)", "{", "krStutDongCdOutList.add(_getKrStutDongCdOut(cmKrStutDongCdMIO));", "}", "return", "krStutDongCdOutList;", "}"], "docstring_tokens": ["It", "inquiries", "basic", "statutory", "address", "of", "specific", "region", "in", "Korea."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,", "ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"ArrangementConditionTest\":", "case", "\"TransferRights\":", "_doTransferAction();", "return;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "void", "modifyCndValue(String", "baseDt,", "String", "cndVal,", "Integer", "tierNbr,", "String", "txDt,", "int", "txSeqNbr)", "throws", "BizApplicationException", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"##", "----------------------------------------------------------", "##\"", ");", "logger.debug(\"##", "ArrCndCoreImpl.modifyCndValue", "START!!", "\");", "logger.debug(\"##", "cndCd", ":", "{}", "/", "isHasArrVal", ":", "{}", "/", "tierNbr", ":", "{}", "/", "cndVal", ":", "{}\",", "this.getCndCd(),", "this.hasArrLevelCndVal,", "tierNbr,", "cndVal", ");", "logger.debug(\"##", "----------------------------------------------------------", "##\"", ");", "}", "if", "(this.hasArrLevelCndVal())", "{", "//Check", "Input", "value", "and", "change", "the", "effective", "start", "date", "_checkInputAndBuildChangeArrCnd(baseDt,", "txDt,", "txSeqNbr);", "//Terminate", "Old", "One", "_terminateCurrentCondition(baseDt,", "txDt,", "txSeqNbr,", "ArrCndStsChngRsnCoreEnum.CHANGE.getValue());", "//Create", "New", "One", "_insertArrCndMaster((ArrRealCore)", "arr,", "txDt,", "txSeqNbr,", "true,", "ArrCndStsChngRsnCoreEnum.CHANGE.getValue());", "}", "else", "{", "ArrCndCrtn", "arrCndCrtn", "=", "new", "ArrCndCrtn();", "arrCndCrtn.setCndCd(this.getCndCd());", "arrCndCrtn.setTxtCndVal(cndVal);", "boolean", "isValueSet", "=", "_checkInputAndBuildArrCndCreation(arrCndCrtn,", "baseDt,", "CCM01.MAX_DATE,", "arr,", "txDt,", "txSeqNbr);", "_insertArrCndMaster((ArrRealCore)", "arr,", "txDt,", "txSeqNbr,", "isValueSet,", "ArrCndStsChngRsnCoreEnum.REGISTRATION.getValue());", "}", "if", "(this.isComplex()", "&&", "tierNbr", "!=", "null)", "{", "this.setPdCmpxCndTierNbr(tierNbr);", "}", "_modifyCndHashByCndCd((ArrangementCoreImpl)", "arr);", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"##", "----------------------------------------------------------", "##\"", ");", "logger.debug(\"##", "ArrCndCoreImpl.modifyCndValue", "END!!", "\");", "logger.debug(\"##", "----------------------------------------------------------", "##\"", ");", "}", "}"], "docstring_tokens": ["Change", "condition", "value", "of", "arrangement", "level", "condition", "and", "create", "condition", "value", "change", "history.", "If", "there", "is", "condition", "value", "history,", "terminate", "it", "one", "and", "create", "new", "one.", "Update", "applied", "interest", "table", "if", "it", "is", "interest", "condition."]}
{"code_tokens": ["public", "List<PdCndMOut>", "getCndBaseLight(String", "pdCd,", "List<String>", "cndCdList)", "throws", "BizApplicationException", "{", "if", "(CollectionCoreUtils.isEmpty(cndCdList))", "{", "throw", "new", "BizApplicationException(\"AAPATE0067\",", "new", "String[]", "{", "\"cndCdList\"", "});", "}", "List<PdCndMOut>", "outList", "=", "new", "ArrayList<PdCndMOut>();", "PdCndImpl", "pdCndImpl", "=", "new", "PdCndImpl();", "PdPdCndUnitSearchIn", "inDao", "=", "new", "PdPdCndUnitSearchIn();", "inDao.setInstCd(_getCmnContext().getInstCode());", "inDao.setPdInfoDscd(PdInformationDscdCoreEnum.PD.getValue());", "inDao.setPdCd(pdCd);", "inDao.setAplyDate(PdUtil.parseStringToDate(_getCmnContext().getTxDate()", "+", "_getCmnContext().getTxTime()));", "inDao.setCndStsCd(CPD01.PD_CND_STS_CD_ACTIVE);", "for", "(String", "cndCd", ":", "cndCdList)", "{", "inDao.setCndCd(cndCd);", "//", "\uc870\uac74\ubaa9\ub85d", "\uc870\ud68c", "PdPdCndMIO", "cnd", "=", "pdCndImpl.getCndBase(inDao,", "false);", "if", "(cnd", "==", "null)", "{", "continue;", "}", "//", "Set", "output", "PdCndMOut", "out", "=", "new", "PdCndMOut();", "out.setInstCd(cnd.getInstCd());", "out.setCndGrpTmpltCd(cnd.getCndGrpTmpltCd());", "out.setCndGrpCd(cnd.getCndGrpCd());", "out.setCndCd(cnd.getCndCd());", "out.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(cnd.getAplyStartDt()));", "out.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(cnd.getAplyEndDt()));", "out.setAplyStartTm(PdUtil.parseDateToHHMMSS(cnd.getAplyStartDt()));", "out.setAplyEndTm(PdUtil.parseDateToHHMMSS(cnd.getAplyEndDt()));", "out.setStsChngDt(cnd.getStsChngDt());", "out.setCndTpCd(cnd.getCndTpCd());", "out.setCndDtlsTpCd(cnd.getCndDtlsTpCd());", "out.setIntRtAplyBaseDayCd(_getIntRtAplyBaseDayCd(cnd));", "out.setPrfIntRtAplyTmCd(cnd.getPrfIntRtAplyTmCd());", "out.setCmpxCndYn(cnd.getCmpxCndYn());", "out.setCmpxStrctrId(cnd.getCmpxStrctrId());", "out.setTierAplyCalcnWayCd(cnd.getTierAplyCalcnWayCd());", "out.setCndStsCd(cnd.getCndStsCd());", "out.setCndValDcsnLvlCd(cnd.getCndValDcsnLvlCd());", "out.setCndValNullYn(cnd.getCndValNullYn());", "out.setAmtTpDscd(cnd.getAmtTpDscd());", "outList.add(out);", "}", "return", "outList;", "}"], "docstring_tokens": ["Methods", "to", "get", "condition", "base", "light", "If", "point", "code", "is", "null,", "get", "common", "condition.", "Even", "if", "point", "code", "is", "not", "null,", "if", "it", "is", "common", "condition,", "get", "common", "condition.", "Else", "get", "point", "condition.", "If", "the", "condition", "has", "no", "value,", "use", "intRtAplyBaseDayCd", "of", "previous", "history."]}
{"code_tokens": ["public", "CaExtrnlInstMgmtSvcGetExtrnlInstOut", "clone(){", "try{", "CaExtrnlInstMgmtSvcGetExtrnlInstOut", "object=", "(CaExtrnlInstMgmtSvcGetExtrnlInstOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled()){", "logger.debug(\"ArrCndPasswordUseImpl", "start", "-", "arrSrvcTpCd", ":", "{}\",", "arrSrvcTpCd);", "logger.debug(\"ArrCndPasswordUseImpl", "isChannelCenterCut", ":", "{}\",", "_getCmnContext().isChannelCenterCut());", "}", "switch", "(arrSrvcTpCd)", "{", "case", "\"OpenDeposit\":", "if(logger.isDebugEnabled()){", "logger.debug(\"ArrCndPasswordUseImpl", "OpenDeposit\");", "}", "if", "(_getCmnContext().isChannelCenterCut())", "{", "_doReDepositAction(arrSrvcTpCd,arrCndActionRequiredValue);", "}", "else", "{", "_doOpenAction(arrCndActionRequiredValue);", "}", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "specific", "service", "type.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "AtrbtTpEnum", "getAttributeType()", "throws", "BizApplicationException", "{", "return", "stdDtoClassAtrbt.getStandardAttribute()", "==", "null", "?", "null", ":", "AtrbtTpEnum.getEnum(stdDtoClassAtrbt.getStandardAttribute().getAtrbtTpCd());", "}"], "docstring_tokens": ["Get", "attribute", "type"]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo,", "String", "txDt,", "Integer", "txSeqNbr,", "AssetImpl", "assetImpl,", "Integer", "assetThingSeqNbr)", "throws", "BizApplicationException{", "//", "0.", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{_getNewSubInfo(assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr)).getClass().getSimpleName()});", "}", "logger.debug(\"##", "<AS>", "saveSubInfo", "->", "subInfo", "=", "{}", "::", "\",", "subInfo.getFieldValues());", "//", "1.", "\uc790\uc0b0\ubb3c\uac74\ubcf4\uc870\uba85\uc138\uc758", "\uc885\ub958", "\uc870\ud68c", "AssetThingSubInfoKndEnum", "subInfoKnd", "=", "assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr);", "//", "2.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "for(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(entry.getValue()", "!=", "null)", "{", "_getAtrbtChk().checkStandardAttribute(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(assetImpl,", "assetThingSeqNbr);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"assetId\",", "assetImpl.getAssetBasicCache().getAssetId());", "//", "PK", "setting", "subInfoCache.set(\"assetThingSeqNbr\",", "assetThingSeqNbr);", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(assetImpl,", "assetThingSeqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "3-1.", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "4.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoKnd,", "subInfoCache,", "assetImpl,", "assetThingSeqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(assetImpl,", "assetThingSeqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "3-2.", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "appraisal", "preferential", "claim", "subsidiary", "information."]}
{"code_tokens": ["public", "String", "getXtnInfo(String", "xtnAtrbtNm,", "boolean", "isEavOnly,", "ArrRealCoreImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "1.", "Site", "Base\uc5d0\uc11c", "\ud638\ucd9c\ub41c", "\uacbd\uc6b0", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138\ub9cc", "\uc870\ud68c", "if", "(isEavOnly)", "{", "return", "_getArrXtnInfo(arrRealImpl,", "xtnAtrbtNm);", "}", "//", "2.", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\ubc29\ubc95", "\ud310\ub2e8", "//", "2-1.", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if", "(_getTblXtnAtrbtCore().isExtendWayEav(XtnTableEnum.AR_ARR_M.getValue(),", "xtnAtrbtNm))", "{", "return", "_getArrXtnInfo(arrRealImpl,", "xtnAtrbtNm);", "}", "//", "2-2.", "\ubcf4\uc870\uc6d0\uc7a5", "return", "_getArrXtnInfoCustom().getSubInfo(xtnAtrbtNm,", "arrRealImpl);", "}"], "docstring_tokens": ["Inquire", "the", "extended", "attribute", "information", "that", "matches", "the", "input", "attribute", "name.", "If", "the", "matching", "extended", "attribute", "information", "doesn't", "exist,", "it", "returns", "null."]}
{"code_tokens": ["public", "void", "doServiceAction(ArrActionRequiredValue", "arrActionRequiredValue)", "throws", "BizApplicationException", "{", "//", "\uace0\uac1d\ub808\ubca8\ud55c\ub3c4\uad00\ub9ac\uc5ec\ubd80\uac00", "\"Y\"\uc778", "\uacbd\uc6b0", "\uc870\uac74\ud589\ub3d9(\ud55c\ub3c4\uc870\uac74)", "\ubc0f", "\ud55c\ub3c4\uc794\uc561\uad00\ub9ac\ub97c", "\uc704\ud574", "\ud68c\uc6d0\uacc4\uc57d\uc744", "\ubaa8\uacc4\uc57d\uc73c\ub85c", "\uc784\uc2dc\uc9c0\uc815\ud55c\ub2e4.", "if(_isTargetArrForSettingMthrArr(arrActionRequiredValue))", "{", "this.setMthrArrId(_getArrCustCoreMngr().getMembershipArrCore(this.getMainArrCustId()).getArrId());", "}", "super.doServiceAction(arrActionRequiredValue);", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "List<CndTmpltOut>", "getListCndTmpltInfo(CndTmpltIn", "in)", "throws", "BizApplicationException", "{", "String", "mTntInstId", "=", "null;", "if", "(StringCoreUtils.isEmpty(in.getInstCd()))", "{", "mTntInstId", "=", "getMotherInstId(_getCmnContext().getInstCode());", "}", "else", "{", "mTntInstId", "=", "getMotherInstId(in.getInstCd());", "}", "CndTemplateListIn", "templateIn", "=", "new", "CndTemplateListIn();", "templateIn.setInstitutionId(mTntInstId);", "templateIn.setCndCd(in.getCndCd());", "templateIn.setCndTypeCd(in.getCndTpCd());", "templateIn.setCndDetailTypeCd(in.getCndDtlsTpCd());", "templateIn.setCndName(in.getCndNm());", "List<CndTemplateOut>", "templateOut", "=", "_getTemplate().getListCndTemplate(templateIn);", "if", "(CollectionUtils.isEmpty(templateOut))", "return", "Collections.emptyList();", "List<CndTmpltOut>", "out", "=", "new", "ArrayList<>();", "for", "(CndTemplateOut", "template", ":", "templateOut)", "{", "CndTmpltOut", "temp", "=", "new", "CndTmpltOut();", "temp.setCndCd(template.getCndCd());", "temp.setCndNm(template.getCndName());", "temp.setActvYn(template.isActive()", "?", "CPD01.YES", ":", "CPD01.NO);", "temp.setCndTpCd(template.getCndTypeCd());", "temp.setCndDtlsTpCd(template.getCndDetailTypeCd());", "temp.setCndCntnt(template.getCndContent());", "temp.setListRefTpCd(template.getListReferenceTypeCd());", "temp.setRefTrgtNm(template.getReferenceTargetName());", "temp.setAmtTpDscd(template.getAmtTypeDscd());", "temp.setIntRtCmpsElmntYn(template.isInterestRateComposingElement()", "?", "CPD01.YES", ":", "CPD01.NO);", "out.add(temp);", "}", "return", "out;", "}"], "docstring_tokens": ["query", "list", "of", "condition", "template", "information"]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "deptXtnInfoHash,", "DeptCore", "deptCore)", "throws", "BizApplicationException", "{", "_getDeptSubInfoBiz().saveMapSubInfo(deptXtnInfoHash,", "(DeptImpl)", "deptCore);", "}"], "docstring_tokens": ["Save", "the", "insurance", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "CustRprsnInqrySvcGetLoinIdNbrOut", "clone(){", "try{", "CustRprsnInqrySvcGetLoinIdNbrOut", "object=", "(CustRprsnInqrySvcGetLoinIdNbrOut)super.clone();", "if", "(", "this.loinIdNbrList==", "null", ")", "object.loinIdNbrList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinIdNbrListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinIdNbrListOut>(loinIdNbrList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinIdNbrListOut", "item", ":", "loinIdNbrList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinIdNbrListOut)item.clone());", "}", "object.loinIdNbrList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(InstallmentAgreementPenaltyInterestApplyWayDscdCoreEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getCndGrpTmpltCd(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "String", "output", "=", "bfCnd.getCndGrpTmpltCd();", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "group", "template", "code."]}
{"code_tokens": ["public", "AplctnInfoRgstSvcGetIn", "clone(){", "try{", "AplctnInfoRgstSvcGetIn", "object=", "(AplctnInfoRgstSvcGetIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getInstParm(String", "parmAtrbtNm", ")", "throws", "BizApplicationException", "{", "String", "instCd", "=", "_getCmnContextCore().getInstCode();", "String", "instParm", "=", "getInstitutionParameterValue(instCd,", "parmAtrbtNm);", "//", "2020.11.02", "//", "\uae30\uad00\ud30c\ub77c\ubbf8\ud130\uac12", "\uc870\ud68c", "\uc2dc", "\ud574\ub2f9", "\uae30\uad00\uc758", "\uac12\ub9cc\uc744", "\uc870\ud68c\ud558\ub3c4\ub85d", "\uc218\uc815", "//", "\uae30\uc874\uc5d0\ub294", "\ud574\ub2f9", "\uae30\uad00\uc5d0", "\uac12\uc774", "\uc815\uc758\ub418\uc9c0", "\uc54a\uc740", "\uacbd\uc6b0", "STDA\uc758", "\uac12\uc744", "\ucc38\uc870\ud588\uc74c", "return", "instParm;", "}"], "docstring_tokens": ["It", "query", "institution", "parameter", "attribute", "value", "simply.", "if", "want", "to", "get", "the", "value", "of", "attribute", "for", "each", "institution,", "use", "the", "method", "instead", "of", "instParmMngr.getInstParm", "method."]}
{"code_tokens": ["public", "boolean", "isChannelCenterCut()", "throws", "BizApplicationException", "{", "return", "ChannelEnum.CENTER_CUT.getValue().equals(this.getChannelDscd())", "?", "true", ":", "false;", "}"], "docstring_tokens": ["It", "checks", "center", "cut", "channel."]}
{"code_tokens": ["public", "String", "getXtnInfo(ArrTxCoreImpl", "arrTx,", "String", "xtnAtrbtNm,", "boolean", "isEavOnly)", "throws", "BizApplicationException", "{", "//", "1.", "Site", "Base\uc5d0\uc11c", "\ud638\ucd9c\ub41c", "\uacbd\uc6b0", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138\ub9cc", "\uc870\ud68c", "if", "(isEavOnly)", "{", "return", "_getXtnInfo(arrTx,", "xtnAtrbtNm);", "}", "//", "2.", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\ubc29\ubc95", "\ud310\ub2e8", "//", "2-1.", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if", "(!_getTblXtnAtrbt().isExtendWayEav(_getArrTxClsfctnCustom().getArrTxKndTblNm(arrTx.getArrCore()),xtnAtrbtNm))", "{", "return", "_getXtnInfo(arrTx,", "xtnAtrbtNm);", "}", "//", "2-2.", "\ubcf4\uc870\uc6d0\uc7a5", "return", "_getArrTxXtnInfoCustom().getSubInfo(xtnAtrbtNm,", "arrTx);", "}"], "docstring_tokens": ["Inquire", "the", "extended", "attribute", "information", "that", "matches", "the", "input", "attribute", "name.", "If", "the", "matching", "extended", "attribute", "information", "doesn't", "exist,", "it", "returns", "null."]}
{"code_tokens": ["public", "List<BfPdRelOut>", "getRelBtwnBfAndPd(String", "pdRelTpDscd)", "{", "BfPdRelIn", "in", "=", "new", "BfPdRelIn();", "in.setPdBtwnRelCd(pdRelTpDscd);", "in.setRelPdInfoDscd(PdInformationDscdCoreEnum.PD.getValue());", "in.setAplyDt(baseDaring);", "in.setAplyTm(baseTimeString);", "return", "getRelBtwnBfAndPd(in);", "}"], "docstring_tokens": ["This", "Method", "inquire", "of", "products", "of", "related", "to", "benefit", "by", "product", "relatipn", "type", "distinction", "code.", "if", "there", "is", "no", "product", "relatipn", "type", "distinction", "code,", "all", "products", "inquire"]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ActorImpl", "actorImpl)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "subInfo", "=", "getSubInfoCache(actorImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "inquiring", "all", "of", "subsidiary", "information", "about", "transaction", "as", "MAP", "type."]}
{"code_tokens": ["public", "void", "validate()", "throws", "BizApplicationException", "{", "switch", "(isValidCndValue(getSuperListCd()))", "{", "case", "NoError:", "return;", "default:", "throw", "new", "BizApplicationException(\"AAPARE0158\"", ",", "new", "Object[]{", "getCndCd(),", "getPdCnd().getCndNm(),", "getArrangementCore().getPd().getPdNm(),", "getListCdList(),", "getSuperListCd()});", "}", "}"], "docstring_tokens": ["It", "performs", "common", "service", "processing", "rules", "defined", "in", "the", "service", "processing", "rules", "and", "whether", "the", "contract-based", "service", "is", "available,", "based", "on", "the", "service", "type", "input.", "Whether", "contract", "services", "are", "available", "verifies:", "1)", "Verification", "of", "service", "restriction", "based", "on", "product", "information", "of", "contract.", "2)", "Verification", "of", "restriction", "related", "to", "the", "service", "set", "in", "the", "contract", "such", "as", "pledge", "setting.", "3)", "Perform", "verification", "rules", "that", "should", "be", "performed", "in", "common", "as", "the", "requirement", "that", "dead", "customers", "should", "not", "become", "financial", "transactions."]}
{"code_tokens": ["public", "AmAplctnCltrlRgstSvcRgstList", "clone(){", "try{", "AmAplctnCltrlRgstSvcRgstList", "object=", "(AmAplctnCltrlRgstSvcRgstList)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "delete(CaArArrIssmdaTmpltMIO", "arArrIssmdaTmpltMIO)", "{", "int", "cnt", "=", "_getArArrIssmdaTmpltM().delete(arArrIssmdaTmpltMIO.getInstCd(),", "arArrIssmdaTmpltMIO.getArrIssmdaTmpltId());", "String", "cacheKey", "=", "arArrIssmdaTmpltMIO.getInstCd()", "+", "arArrIssmdaTmpltMIO.getArrIssmdaTmpltId();", "_getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_ISSUED_MEDIA_TEMPLATE_CACHE,", "cacheKey);", "String", "cacheKey2", "=", "arArrIssmdaTmpltMIO.getInstCd();", "_getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_ISSUED_MEDIA_TEMPLATE_CACHE,", "cacheKey2);", "String", "cacheKey3", "=", "arArrIssmdaTmpltMIO.getInstCd().concat(arArrIssmdaTmpltMIO.getArrIssmdaTpCd());", "_getArDataCacheManager().clearInstanceCache(DataCacheCoreConfig.ARR_ISSUED_MEDIA_TEMPLATE_LIST_CACHE,", "cacheKey3);", "return", "cnt;", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "String", "getNumbering(String", "instCd,", "String", "nbrgAtrbtNm,", "Map<String,", "Object>", "inpParmMap,", "Boolean", "isReUseSameTxNbrg)", "throws", "BizApplicationException", "{", "//", "\uae30\uad00\ucf54\ub4dc\uc640", "\ucc44\ubc88\uc18d\uc131\uba85\uc774", "\uc788\ub294\uc9c0", "\uac80\uc99d", "\ud55c\ub2e4.", "_checkNumberingInput(instCd,", "nbrgAtrbtNm);", "//", "Query", "numbering", "rule", "NumberingGetIn", "inParm", "=", "new", "NumberingGetIn();", "inParm.setInstCd(instCd);", "inParm.setNbrgAtrbtNm(nbrgAtrbtNm);", "//", "\ucc44\ubc88\uaddc\uce59", "\uc870\ud68c", "NumberingGetListOut", "numbering02Out", "=", "this._getNumberingRule(inParm);", "if(logger.isDebugEnabled())", "{", "logger.debug(\"numbering02Out", ":::", "{}\",", "numbering02Out.getFieldValues());", "}", "CmNbrgRuleMIO", "cmNbrgRuleMIO", "=", "_setCommonNumberingRuleMasterParameter(numbering02Out);", "List<CmNbrgRuleCmpsDIO>", "listCmNbrgRuleCmpsDIO", "=", "new", "ArrayList<CmNbrgRuleCmpsDIO>();", "for", "(NumberingGetOut", "numbering02OutSub1", ":", "numbering02Out.getTblNm())", "{", "listCmNbrgRuleCmpsDIO.add(_setNumberingRuleCompositionDetailParameter(numbering02OutSub1));", "}", "//", "Assemble", "numbering", "layer", "value", "String", "jsonCntnt", "=", "\"\";", "Map<String,", "Object>", "tierValMap", "=", "new", "LinkedHashMap<String,", "Object>();", "for", "(CmNbrgRuleCmpsDIO", "cmNbrgRuleCmpsDIO", ":", "listCmNbrgRuleCmpsDIO)", "{", "//", "\ucc44\ubc88\uacc4\uce35\uc5ec\ubd80\uac00", "Y", "\uc774\uba74", "\ucc44\ubc88\uacc4\uce35\uac12\uc744", "\uac00\uc838", "\uc628\ub2e4.", "if", "(CCM01.YES.equals(cmNbrgRuleCmpsDIO.getNbrgTierYn()))", "{", "Entry<String,", "String>", "entry", "=", "_getNbrgTierVal(instCd,", "cmNbrgRuleMIO,", "cmNbrgRuleCmpsDIO,", "jsonCntnt,", "inpParmMap,", "isReUseSameTxNbrg,", "\"\");", "tierValMap.put(entry.getKey().toString(),", "entry.getValue().toString());", "}", "}", "if", "(tierValMap.isEmpty())", "{", "//", "Fail", "to", "query", "Assemble", "numbering", "layer", "value", "throw", "new", "BizApplicationException(\"AAPCME0084\",", "new", "Object[]", "{\"@nbrgTierYn\",", "\"@nbrgAtrbtNm\",", "nbrgAtrbtNm});", "}", "jsonCntnt", "=", "_getJsonString(tierValMap);", "//", "Numbering", "and", "assemble", "number", "String", "nbrgVal", "=", "\"\";", "for", "(CmNbrgRuleCmpsDIO", "cmNbrgRuleCmpsDIO", ":", "listCmNbrgRuleCmpsDIO)", "{", "if", "(cmNbrgRuleCmpsDIO.getCmpsStartPstnCnt()", ">", "0", "&&", "cmNbrgRuleCmpsDIO.getCmpsFgrsCnt()", ">", "0)", "{", "nbrgVal", "=", "nbrgVal", "+", "_getNumberingCompositionValue(instCd,", "cmNbrgRuleMIO,", "cmNbrgRuleCmpsDIO,", "jsonCntnt,", "inpParmMap,", "isReUseSameTxNbrg,", "nbrgVal);", "}", "}", "String", "orgNbrgVal", "=", "nbrgVal;", "if(!StringUtils.isEmpty(cmNbrgRuleMIO.getEncrptnDscd())){", "try", "{", "if(EncryptDstnctnEnum.ONE_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){", "nbrgVal", "=", "CryptUtils.encryptSHA1(orgNbrgVal);", "}", "else", "if(EncryptDstnctnEnum.TWO_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){", "nbrgVal", "=", "CryptUtils.encryptAES(orgNbrgVal);", "}", "}", "catch", "(Exception", "e)", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"Exception", ":", "{}\",", "e);", "}", "//logger.debug(\"####", "NbrgImpl.getNumbering", "modify", "source:{0}", ",", "Error:{1}\",", "new", "Object[]{orgNbrgVal,e});", "throw", "new", "BizApplicationException(\"AAPCME0000\",", "new", "String[]", "{\"getNumbering\",", "\"Encrypt", "getNumber\"", "});", "}", "}", "return", "nbrgVal;", "}"], "docstring_tokens": ["It", "calculates", "next", "number."]}
{"code_tokens": ["public", "Cust", "getCust(String", "custId)", "throws", "BizApplicationException", "{", "Cust", "cust", "=", "(CustImpl)", "super.getCustCore(custId);", "return", "cust;", "}"], "docstring_tokens": ["Inquire", "customer", "object", "by", "institution", "code", "and", "customer", "identification."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(InterestTransactionTypeCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CaAcJrRulePXtnAtrDIO", "select(CaAcJrRulePXtnAtrDIO", "acJrRulePXtnAtrDIO)", "throws", "BizApplicationException", "{", "//return", "acJrRulePXtnAtrD.select(acJrRulePXtnAtrDIO);", "switch(", "DbmsVendorNmEnum.getByValue(_getSysNonstopCoreUtil().getDbmsVendorName())", ")", "{", "case", "ORACLE:", "return", "_getAcJrRulePXtnAtrD().selectOracle(acJrRulePXtnAtrDIO);", "case", "MYSQL:", "return", "_getAcJrRulePXtnAtrD().selectMysql(acJrRulePXtnAtrDIO);", "default:", "throw", "new", "BizApplicationException(\"AAPCME0202\",", "null);", "}", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "CaStyleSvcScrnTextIO", "clone(){", "try{", "CaStyleSvcScrnTextIO", "object=", "(CaStyleSvcScrnTextIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AssetCore", "asset)", "throws", "BizApplicationException", "{", "return", "_getAssetSubInfoBiz().getMapSubInfo((AssetImpl)asset);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "insurance", "as", "a", "map."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(RcptStsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "ArrRelRprsnInfoOut", "getArrRprsnRelation(String", "arrRprsnRelCd,", "String", "rprsnId,", "String", "baseDt,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "//", "\uacc4\uc57d", "\uad00\ub828\uc778\uad00\uacc4", "\uc8fc\uc81c\uc601\uc5ed", "\ubbf8\uc0ac\uc6a9", "\uc2dc", "skip", "if", "(!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.RELATED_PERSON_RELATION)", "||", "ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())", ")", "{", "return", "null;", "}", "if(", "StringCoreUtils.isEmpty(arrRprsnRelCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]{\"@arrRprsnRelCd\"});", "}", "if(", "StringCoreUtils.isEmpty(rprsnId))", "{", "_getArrRelRuleImpl().validateArrRelationPluralPossibleYn(ArrRelKndCoreEnum.ASSET.getValue(),", "arrRprsnRelCd,", "arrReal);", "rprsnId", "=", "null;", "}", "String", "inqBaseDt", "=", "baseDt;", "if(", "StringCoreUtils.isEmpty(baseDt))", "{", "inqBaseDt", "=", "ArrCmnCoreUtil.getRckngDt(", "_getCmnContextCore()", ");", "}", "ArArrRprsnRIO", "arArrRprsnRIO", "=", "_getArArrRprsnRDso().selectEffective(arrReal.getInstCd(),", "arrReal.getArrId(),", "rprsnId,", "arrRprsnRelCd,", "inqBaseDt);", "return", "_buildArrRelInfoOut(", "arArrRprsnRIO", ");", "}"], "docstring_tokens": ["Inquire", "available", "arrangement/customer", "related", "person's", "relation", "information", "on", "specific", "date."]}
{"code_tokens": ["public", "String", "getNumbering(String", "instCd,", "String", "nbrgAtrbtNm,", "Map<String,", "Object>", "inpParmMap,", "Boolean", "isReUseSameTxNbrg)", "throws", "BizApplicationException", "{", "//", "\uae30\uad00\ucf54\ub4dc\uc640", "\ucc44\ubc88\uc18d\uc131\uba85\uc774", "\uc788\ub294\uc9c0", "\uac80\uc99d", "\ud55c\ub2e4.", "_checkNumberingInput(instCd,", "nbrgAtrbtNm);", "//", "Query", "numbering", "rule", "NumberingGetIn", "inParm", "=", "new", "NumberingGetIn();", "inParm.setInstCd(instCd);", "inParm.setNbrgAtrbtNm(nbrgAtrbtNm);", "//", "\ucc44\ubc88\uaddc\uce59", "\uc870\ud68c", "NumberingGetListOut", "numbering02Out", "=", "this._getNumberingRule(inParm);", "if(logger.isDebugEnabled())", "{", "logger.debug(\"numbering02Out", ":::", "{}\",", "numbering02Out.getFieldValues());", "}", "CmNbrgRuleMIO", "cmNbrgRuleMIO", "=", "_setCommonNumberingRuleMasterParameter(numbering02Out);", "List<CmNbrgRuleCmpsDIO>", "listCmNbrgRuleCmpsDIO", "=", "new", "ArrayList<CmNbrgRuleCmpsDIO>();", "for", "(NumberingGetOut", "numbering02OutSub1", ":", "numbering02Out.getTblNm())", "{", "listCmNbrgRuleCmpsDIO.add(_setNumberingRuleCompositionDetailParameter(numbering02OutSub1));", "}", "//", "Assemble", "numbering", "layer", "value", "String", "jsonCntnt", "=", "\"\";", "Map<String,", "Object>", "tierValMap", "=", "new", "LinkedHashMap<String,", "Object>();", "for", "(CmNbrgRuleCmpsDIO", "cmNbrgRuleCmpsDIO", ":", "listCmNbrgRuleCmpsDIO)", "{", "//", "\ucc44\ubc88\uacc4\uce35\uc5ec\ubd80\uac00", "Y", "\uc774\uba74", "\ucc44\ubc88\uacc4\uce35\uac12\uc744", "\uac00\uc838", "\uc628\ub2e4.", "if", "(CCM01.YES.equals(cmNbrgRuleCmpsDIO.getNbrgTierYn()))", "{", "Entry<String,", "String>", "entry", "=", "_getNbrgTierVal(instCd,", "cmNbrgRuleMIO,", "cmNbrgRuleCmpsDIO,", "jsonCntnt,", "inpParmMap,", "isReUseSameTxNbrg,", "\"\");", "tierValMap.put(entry.getKey().toString(),", "entry.getValue().toString());", "}", "}", "if", "(tierValMap.isEmpty())", "{", "//", "Fail", "to", "query", "Assemble", "numbering", "layer", "value", "throw", "new", "BizApplicationException(\"AAPCME0084\",", "new", "Object[]", "{\"@nbrgTierYn\",", "\"@nbrgAtrbtNm\",", "nbrgAtrbtNm});", "}", "jsonCntnt", "=", "_getJsonString(tierValMap);", "//", "Numbering", "and", "assemble", "number", "String", "nbrgVal", "=", "\"\";", "for", "(CmNbrgRuleCmpsDIO", "cmNbrgRuleCmpsDIO", ":", "listCmNbrgRuleCmpsDIO)", "{", "if", "(cmNbrgRuleCmpsDIO.getCmpsStartPstnCnt()", ">", "0", "&&", "cmNbrgRuleCmpsDIO.getCmpsFgrsCnt()", ">", "0)", "{", "nbrgVal", "=", "nbrgVal", "+", "_getNumberingCompositionValue(instCd,", "cmNbrgRuleMIO,", "cmNbrgRuleCmpsDIO,", "jsonCntnt,", "inpParmMap,", "isReUseSameTxNbrg,", "nbrgVal);", "}", "}", "String", "orgNbrgVal", "=", "nbrgVal;", "if(!StringUtils.isEmpty(cmNbrgRuleMIO.getEncrptnDscd())){", "try", "{", "if(EncryptDstnctnEnum.ONE_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){", "nbrgVal", "=", "CryptUtils.encryptSHA1(orgNbrgVal);", "}", "else", "if(EncryptDstnctnEnum.TWO_WAY.getValue().equals(cmNbrgRuleMIO.getEncrptnDscd())){", "nbrgVal", "=", "CryptUtils.encryptAES(orgNbrgVal);", "}", "}", "catch", "(Exception", "e)", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"Exception", ":", "{}\",", "e);", "}", "//logger.debug(\"####", "NbrgImpl.getNumbering", "modify", "source:{0}", ",", "Error:{1}\",", "new", "Object[]{orgNbrgVal,e});", "throw", "new", "BizApplicationException(\"AAPCME0000\",", "new", "String[]", "{\"getNumbering\",", "\"Encrypt", "getNumber\"", "});", "}", "}", "return", "nbrgVal;", "}"], "docstring_tokens": ["It", "calculates", "next", "number.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'instCd'", "value", "is", "replaced", "by", "instCd", "in", "Common", "Context.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'isReUseSameTxNbrg'", "value", "is", "treated", "as", "false."]}
{"code_tokens": ["public", "List<ArrIssmdaTmpltIO>", "getListArrIssmdaTmplt(String", "instCd,", "String", "arrIssmdaTpCd)", "throws", "BizApplicationException", "{", "List<ArrIssmdaTmpltIO>", "arrIssmdaTempltList", "=", "new", "ArrayList<ArrIssmdaTmpltIO>();", "List<ArArrIssmdaTmpltMIO>", "arrIssmdaTmpltMIOList", "=", "new", "ArrayList<ArArrIssmdaTmpltMIO>();", "if", "(StringCoreUtils.isEmpty(instCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]{\"@instCd\"});", "}", "//", "2020.11.12", "//", "\uacc4\uc57d\ubc1c\uae09\ub9e4\uccb4\ud15c\ud50c\ub9bf\uc740", "\uac1c\ubcc4\uae30\uad00\uc758", "\uc815\ubcf4\ub9cc\uc744", "\uc870\ud68c", "arrIssmdaTmpltMIOList", "=", "_getArArrIssmdaTmpltMDso().selectListByTpCd(instCd,", "StringCoreUtils.isEmpty(arrIssmdaTpCd)", "?", "null", ":", "arrIssmdaTpCd);", "for", "(ArArrIssmdaTmpltMIO", "arArrIssmdaTmpltMIO", ":", "arrIssmdaTmpltMIOList)", "{", "ArrIssmdaTmpltIO", "arrIssmdaTmplt", "=", "_setArrIssmdaTmpltIO(arArrIssmdaTmpltMIO);", "List<ArrIssmdaPrflAtrbt>", "prflAtrbtList", "=", "_getArrIssmdaPrflCore().getListArrIssmdaProfile(instCd,", "arArrIssmdaTmpltMIO.getArrIssmdaTmpltId());", "arrIssmdaTmplt.setPrflAtrbtList(prflAtrbtList);", "arrIssmdaTempltList.add(arrIssmdaTmplt);", "}", "return", "arrIssmdaTempltList;", "}"], "docstring_tokens": ["Get", "a", "list", "of", "arrangement", "issued", "media", "template", "in", "specific", "type."]}
{"code_tokens": ["public", "DpstMscllnsRevenueInqSvcOut", "clone(){", "try{", "DpstMscllnsRevenueInqSvcOut", "object=", "(DpstMscllnsRevenueInqSvcOut)super.clone();", "if", "(", "this.arrList==", "null", ")", "object.arrList", "=", "null;", "else{", "java.util.List<bankware.corebanking.deposit.conditionchange.service.dto.DpstMscllnsRevenueInqSvcOutSub>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.deposit.conditionchange.service.dto.DpstMscllnsRevenueInqSvcOutSub>(arrList.size());", "for(", "bankware.corebanking.deposit.conditionchange.service.dto.DpstMscllnsRevenueInqSvcOutSub", "item", ":", "arrList", "){", "clonedList.add(", "(bankware.corebanking.deposit.conditionchange.service.dto.DpstMscllnsRevenueInqSvcOutSub)item.clone());", "}", "object.arrList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaSelfAuthCdSvcRgstIn", "clone(){", "try{", "CaSelfAuthCdSvcRgstIn", "object=", "(CaSelfAuthCdSvcRgstIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustRgstSvcLoinInoListIn", "clone(){", "try{", "CustRgstSvcLoinInoListIn", "object=", "(CustRgstSvcLoinInoListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "previewDocContent(CaDocPreviewIO", "docPreviewIO,", "CaDocMakingTpEnum", "docMakingTpEnum)", "throws", "BizApplicationException", "{", "Object", "docObj", "=", "_getDocValidatorUtil().checkDocSchema(docPreviewIO.getDocCntnt(),", "CaDocVerifyTpEnum.PREVIEW_DOC,", "docMakingTpEnum);", "if(CaDocMakingTpEnum.DOCBOOK.equals(docMakingTpEnum))", "{", "String", "docIssueCntnt", "=", "_getDocIssueUtil().previewIssueDoc(docPreviewIO.getLngCd(),", "(Document)", "docObj);", "CaPrntWayTpEnum", "prntWayTp", "=", "CaPrntWayTpEnum.HTML;", "/**", "*", "get", "stylesheet", "information", "*/", "String", "stylesheetInfo", "=", "null;", "if(!StringUtils.isEmpty(docPreviewIO.getDocStylesheetCntnt()))", "{", "stylesheetInfo", "=", "docPreviewIO.getDocStylesheetCntnt();", "}", "else", "if(!StringUtils.isEmpty(docPreviewIO.getDocStylesheetUrl()))", "{", "stylesheetInfo", "=", "docPreviewIO.getDocStylesheetUrl();", "}", "CaDoc", "stylehseetDoc", "=", "null;", "//", "get", "style", "sheet", "object", "if(isDocId(stylesheetInfo))", "{", "stylehseetDoc", "=", "getCaDoc(stylesheetInfo);", "}", "stylesheetInfo", "=", "_getStylesheetInformation(stylesheetInfo,", "stylehseetDoc,", "prntWayTp,", "_getDocValidatorUtil());", "/**", "*", "Transfer", "xml", "->", "HTML", "*/", "Object", "transCntnt", "=", "_getDocTransformUtil().transfer(docIssueCntnt,", "stylesheetInfo,", "prntWayTp);", "if(transCntnt", "!=", "null)", "{", "String", "previewTransCntnt", "=", "(String)", "transCntnt;", "return", "previewTransCntnt.replace(\"<title", "/>\",", "\"<title></title>\").replace(\"<title/>\",", "\"<title></title>\");", "}", "return", "\"\";", "}", "else", "{", "return", "String.valueOf(docObj);", "}", "}"], "docstring_tokens": ["Preview", "Document", "template"]}
{"code_tokens": ["public", "CaDstbCtvdRsltErrSrchOut", "clone(){", "try{", "CaDstbCtvdRsltErrSrchOut", "object=", "(CaDstbCtvdRsltErrSrchOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getCndVal()", "throws", "BizApplicationException", "{", "return", "getFeeVal()!=", "null?ArrCmnCoreUtil.setScale4(getFeeVal()):null;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "value."]}
{"code_tokens": ["public", "CustRprsnInqrySvcGetAddrOut", "clone(){", "try{", "CustRprsnInqrySvcGetAddrOut", "object=", "(CustRprsnInqrySvcGetAddrOut)super.clone();", "if", "(", "this.ctcptXtnInfoList==", "null", ")", "object.ctcptXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut>(ctcptXtnInfoList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut", "item", ":", "ctcptXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut)item.clone());", "}", "object.ctcptXtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ArrRealCore", "arrReal)", "throws", "BizApplicationException", "{", "return", "_getArrSubInfoBiz().getMapSubInfo((ArrRealImpl)", "arrReal);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "detail", "information."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "{", "for", "(PreferenceInterestRateApplyTimeEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "CustRprsnInqrySvcGetTelNbrOut", "clone(){", "try{", "CustRprsnInqrySvcGetTelNbrOut", "object=", "(CustRprsnInqrySvcGetTelNbrOut)super.clone();", "if", "(", "this.ctcptXtnInfoList==", "null", ")", "object.ctcptXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut>(ctcptXtnInfoList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut", "item", ":", "ctcptXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut)item.clone());", "}", "object.ctcptXtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "AsAprslMIO", "select(String", "instCd,", "String", "aprslId){", "return", "_getAsAprslM().select(instCd,", "aprslId);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "saveSubInfo(Map<String,", "String>", "subInfoMap,", "ArrTxImpl", "arrTx)", "{", "//", "1.", "\uc785\ub825\uc73c\ub85c", "\ubc1b\uc740", "Map\uc774", "\ube44\uc5ec", "\uc788\uac70\ub098", "null\uc77c", "\ub54c", ",", "null", "\uccb4\ud06c\ud558\ub294", "\uc774\uc720\ub294", "CTI,", "EAV\ubd84\ub9ac\ud558\ub294", "\uba54\uc18c\ub4dc\uc5d0\uc11c", "\uc5c6\uc73c\uba74", "null", "return\ud558\uace0", "\uc788\uc74c.", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "\uc18d\uc131\uac12", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\uac70\ub798\uad00\ub828", "\ubcf4\uc870\uba85\uc138", "\uc870\ud68c(\uce90\uc2dc\ub85c\ubd80\ud130)", "IValueObject", "oldCache", "=", "getSubInfoCache(arrTx);", "//", "4.", "DB", "\ubc18\uc601", "if(oldCache", "==", "null)", "{", "//", "4.1.1", "DBIO", "VO", "\uc778\uc2a4\ud134\uc2a4", "\uc0dd\uc131", "oldCache", "=", "_newSubInfoDBIO(arrTx);", "//", "4.1.2", "primary", "key", "\uc870\ub9bd", "_setKey(oldCache,arrTx);", "//", "4.1.3", "\ubcf4\uc870\uc815\ubcf4Map->", "DBIO", "VO\uac12", "\ucc44\uc6b0\uae30", "DtoUtils.setSubInfoIO(subInfoMap,", "oldCache);", "//", "4.1.4", "\uce90\uc2f1\ub41c", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc5c6\uc73c\uba74", "\ucd5c\ucd08", "\uc800\uc7a5,", "\uc989", "insert", "_insertSubInfo(arrTx,", "oldCache);", "//", "4.1.5", "arrTx.setArrTxSubInfoCache(oldCache);", "}else", "{", "//", "4.2.1.", "\uce90\uc2f1\ub41c", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc788\uc73c\uba74", "\ubcc0\uacbd", "\uc800\uc7a5,", "\uc989", "update,", "update\uc804", "\uae30\uc874\uc815\ubcf4\ub791", "\ub3d9\uc77c", "\uc2dc", "\ub9ac\ud134", "if", "(!DtoUtils.isValChanged(subInfoMap,", "oldCache))", "{", "return;", "}", "//", "4.2.4", "update", "-", "\uc0c8\ub85c\ubcc0\uacbd\ub418\uc5b4\uc57c", "\ud560", "\uc18d\uc131\uc744", "DBIO", "VO", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "oldCache);", "//", "4.2.5", "update", "-", "update", "\uc218\ud589", "_updateSubInfo(arrTx,", "oldCache);", "}", "//", "//", "5.", "\uce90\uc2dc", "\ucc98\ub9ac", "(DBIO", "VO->Interface", "VO)", "&", "\uce90\uc2f1", "//", "_saveSubInfoCache(subInfoDBIO,arrTx);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "interface", "VO."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(CupldBizDscdCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "String", "getInstCd()", "{", "return", "bf.getInstCd();", "}"], "docstring_tokens": ["Inquire", "financial", "institution", "code", "by", "which", "the", "arrangement", "is", "created", "and", "managed."]}
{"code_tokens": ["public", "CaBalMgmtPMngrSvcGetBalMgmtPListOut", "clone(){", "try{", "CaBalMgmtPMngrSvcGetBalMgmtPListOut", "object=", "(CaBalMgmtPMngrSvcGetBalMgmtPListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.settlement.service.dto.CaBalMgmtPMngrSvcGetBalMgmtPOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.settlement.service.dto.CaBalMgmtPMngrSvcGetBalMgmtPOut>(tblNm.size());", "for(", "bankware.corebanking.configurationadmin.settlement.service.dto.CaBalMgmtPMngrSvcGetBalMgmtPOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.settlement.service.dto.CaBalMgmtPMngrSvcGetBalMgmtPOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "String", "txDt,", "Integer", "txSeqNbr,", "ScrtyIntImpl", "scrtyIntImpl)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsScrtyIntSIO", "subInfoCache", "=", "getSubInfoCache(scrtyIntImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsScrtyIntSIO();", "subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId());", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-1.", "insert", "_getAsScrtyIntSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-2.", "update", "_getAsScrtyIntSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "subInfoMap"]}
{"code_tokens": ["public", "BigDecimal", "eval(String", "inFormula,", "List<BigDecimal>", "operands)", "throws", "BizApplicationException", "{", "if", "(StringCoreUtils.isEmpty(inFormula))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]{\"@formula\"});", "}", "inFormula", "=", "StringCoreUtils.trimAllWhiteSpace(inFormula);", "Node", "node", "=", "_buildNode", "(inFormula,operands);", "if", "(node", "==", "null)", "{", "return", "null;", "}", "return", "(node.doIt());", "}"], "docstring_tokens": ["It", "performs", "calculations."]}
{"code_tokens": ["public", "AgrmntTrmntnSvcAcctIn", "clone(){", "try{", "AgrmntTrmntnSvcAcctIn", "object=", "(AgrmntTrmntnSvcAcctIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustAdtnlSrvcOpnSvcArrXtnOut", "clone(){", "try{", "CustAdtnlSrvcOpnSvcArrXtnOut", "object=", "(CustAdtnlSrvcOpnSvcArrXtnOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(CustRprsnCore", "custRprsnCore)", "throws", "BizApplicationException", "{", "return", "_getCustRprsnSubInfoBiz().getMapSubInfo((CustRprsnImpl)", "custRprsnCore);", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "inquiring", "all", "of", "subsidiary", "information", "about", "transaction", "as", "MAP", "type."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(", "value))", "{", "for", "(StaffXtnInfoEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@DeptXtnAtrbtNm\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "validate(CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "validate(null,", "cust,", "vldtnRequiredValMap);", "}"], "docstring_tokens": ["Check", "if", "the", "issued", "media", "is", "available.", "Throw", "error", "if", "it", "is", "unavailable."]}
{"code_tokens": ["public", "void", "modifyArrStaffRelation(ArrStaffRelChngIn", "arrStaffRelChngIn)", "throws", "BizApplicationException", "{", "_checkStaffStats(", "arrStaffRelChngIn.getStaffId()", ");", "super.modifyArrStaffRelation(arrStaffRelChngIn);", "}"], "docstring_tokens": ["Change", "arrangement", "staff", "relationship."]}
{"code_tokens": ["public", "int", "delete(CaCmRoleSrvcRIO", "cmRoleSrvcRIO)", "{", "return", "_getCmRoleSrvcR().delete(cmRoleSrvcRIO.getInstCd(),", "cmRoleSrvcRIO.getRoleId(),", "cmRoleSrvcRIO.getSrvcCd());", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "int", "delete(CaAcCrncyBillCtgryMIO", "acCrncyBillCtgryCdIO)", "{", "return", "_getAcCrncyBillCtgryCd().delete(acCrncyBillCtgryCdIO);", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "CustLoginSvcGetHstOut", "getCustLastLoginHistory(CustLoginSvcGetHstIn", "in)", "throws", "BizApplicationException{", "/**", "*", "get", "customer", "object", "*/", "Cust", "cust", "=", "_getCustMngr().getCust(in.getCustId());", "/**", "*", "get", "customer", "last", "login", "history", "*/", "CustLoinHstIO", "custLastLoinHstIO", "=", "new", "CustLoinHstIO();", "if(StringUtils.isEmpty(in.getLoinIdNbr())){", "custLastLoinHstIO", "=", "cust.getCustLastLoginHistory();", "}else{", "custLastLoinHstIO", "=", "cust.getCustLastLoginHistory(in.getLoinIdNbr());", "}", "/**", "*", "assemble", "output", "*/", "CustLoginSvcGetHstOut", "out", "=", "new", "CustLoginSvcGetHstOut();", "if(custLastLoinHstIO", "==", "null){", "return", "out;", "}", "out.setInstCd(custLastLoinHstIO.getInstCd());", "out.setCustId(custLastLoinHstIO.getCustId());", "out.setLoinTpCd(custLastLoinHstIO.getLoinTpCd());", "out.setLoinIdNbr(custLastLoinHstIO.getLoinIdNbr());", "out.setLoinSeqNbr(custLastLoinHstIO.getLoinSeqNbr());", "out.setHstSeqNbr(custLastLoinHstIO.getHstSeqNbr());", "out.setLoinDt(custLastLoinHstIO.getLoinDt());", "out.setLoinHms(custLastLoinHstIO.getLoinHms());", "out.setLoinRsltYn(custLastLoinHstIO.getLoinRsltYn());", "out.setLoinRsltCd(custLastLoinHstIO.getLoinRsltCd());", "out.setFnlLoinChnlDscd(custLastLoinHstIO.getFnlLoinChnlDscd());", "out.setLoinIp(custLastLoinHstIO.getLoinIp());", "return", "out;", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "This", "service", "inquires", "customer", "related", "person's", "latest", "login", "history", "information.", "*", "If", "login", "identification", "number", "was", "input,", "it", "gets", "the", "login", "ID's", "latest", "login", "history.", "*", "</pre>", "*", "@flow", "*", "<pre>", "*", "1.", "get", "customer", "related", "person", "object", "{@link", "bankware.corebanking.actor.customer.interfaces.CustRprsnMngr#getCustRprsn(String)}", "*", "2.", "get", "customer", "related", "person", "last", "login", "history", "*", "{@link", "bankware.corebanking.actor.customer.interfaces.CustRprsn#getCustRprsnLastLoginHistory()}", "*", "{@link", "bankware.corebanking.actor.customer.interfaces.CustRprsn#getCustRprsnLastLoginHistory(String)}", "*", "3.", "assemble", "output", "*", "</pre>", "*", "@note", "{@link", "CustRprsnLoginSvcGetHstIn}", ":", "required", "fields", "-", "custRprsnId", "*", "</div>", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\uc774", "\uc11c\ube44\uc2a4\ub294", "\uace0\uac1d\uad00\ub828\uc778\uc758", "\ucd5c\uc2e0", "\ub85c\uadf8\uc778\uc774\ub825\uc815\ubcf4\ub97c", "\uc870\ud68c\ud55c\ub2e4.", "*", "\ub85c\uadf8\uc778", "ID\ub97c", "\uc785\ub825\ud558\uba74", "\ud574\ub2f9", "\ub85c\uadf8\uc778ID\uc758", "\ucd5c\uc2e0", "\ub85c\uadf8\uc778\uc774\ub825\uc815\ubcf4\ub97c", "\uc870\ud68c\ud55c\ub2e4.", "*", "</pre>", "*", "@flow", "*", "<pre>", "*", "1.", "\uace0\uac1d\uad00\ub828\uc778\uac1d\uccb4\uc870\ud68c", "{@link", "bankware.corebanking.actor.customer.interfaces.CustRprsnMngr#getCustRprsn(String)}", "*", "2.", "\uace0\uac1d\uad00\ub828\uc778", "\ucd5c\uc2e0", "\ub85c\uadf8\uc778\uc774\ub825", "\uc870\ud68c", "*", "{@link", "bankware.corebanking.actor.customer.interfaces.CustRprsn#getCustRprsnLastLoginHistory()}", "*", "{@link", "bankware.corebanking.actor.customer.interfaces.CustRprsn#getCustRprsnLastLoginHistory(String)}", "*", "3.", "\ucd9c\ub825\uac12", "\uc870\ub9bd", "*", "</pre>", "*", "@note", "{@link", "CustRprsnLoginSvcGetHstIn}", ":", "\ud544\uc218\uc785\ub825\ud56d\ubaa9", "-", "custRprsnId", "*", "</div>", "*", "@param", "custRprsnLoginSvcGetHstIn", "(required)", ":", "customer", "related", "person", "login", "history", "inquiry", "input", "*", "@return", "CustRprsnLoginSvcGetHstOut", ":", "customer", "related", "person", "login", "history", "inquiry", "output", "*", "@throws", "AAPCME0006", ":", "required", "input", "is", "missing", "*", "@throws", "AAPATE0016", ":", "customer", "related", "person", "basic", "information", "doesn't", "exist", "*", "@throws", "AAPATE0005", ":", "actor", "basic", "information", "doesn't", "exist", "*", "@since", "3.0.0", "*", "@example", "*", "<pre>", "*", "-", "Input", "JSON", "{\"custRprsnId\":\"00000017897R\"}", "*", "-", "Output", "JSON", "\"CustLoginSvcGetHstOut\":", "{", "\"instCd\":", "null,", "\"custRprsnId\":", "null,", "\"loinTpCd\":", "\"01\",", "\"loinIdNbr\":", "\"rltdPerson0783\",", "\"loinSeqNbr\":", "1,", "\"hstSeqNbr\":", "2,", "\"loinDt\":", "\"20171204\",", "\"loinHms\":", "null,", "\"loinRsltYn\":", "\"Y\",", "\"loinRsltCd\":", "\"01\",", "\"fnlLoinChnlDscd\":", "\"03\",", "\"loinIp\":", "\"172.25.0.1\"", "}"], "docstring_tokens": ["Inquire", "customer's", "latest", "login", "history.", "It", "includes", "failed", "login", "attempts."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(AssetTxStsCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@AssetTxStsCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "BfCardInfoPopUpSvcIn", "clone(){", "try{", "BfCardInfoPopUpSvcIn", "object=", "(BfCardInfoPopUpSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<AtSelfAuthXtnInfoDIO>", "selectList(", "String", "selfAuthId)", "{", "return", "_getAtSelfAuthXtnInfoD().selectList(_getCmnContext().getInstCode(),", "selfAuthId);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "List<CrIntCalSectionOut>", "getListInterestCalculationSection(CrIntCalSectionIn", "in)", "throws", "BizApplicationException", "{", "//", "\ud544\uc218", "\uc785\ub825", "\uac12", "\uccb4\ud06c", "_getCrCalculatorUtil().checkInputStringData(\"AAPCME0006\",", "in.getTntInstId(),", "\"instCd\");", "CrIntCalSctnMIO", "crIntCalSctnMIO", "=", "new", "CrIntCalSctnMIO();", "crIntCalSctnMIO.setTntInstId(in.getTntInstId());", "crIntCalSctnMIO.setIntCalSctnId(in.getIntCalSctnId());", "crIntCalSctnMIO.setIntKndDscd(in.getIntKndDscd());", "crIntCalSctnMIO.setIntCalStartDtDscd(in.getIntCalStartDtDscd());", "crIntCalSctnMIO.setIntCalEndDtDscd(in.getIntCalEndDtDscd());", "crIntCalSctnMIO.setIntTpDscd(in.getIntTpDscd());", "crIntCalSctnMIO.setTgtAmtCalcnWayDscd(in.getTgtAmtCalcnWayDscd());", "crIntCalSctnMIO.setBaseTrmCntCalcnWayDscd(in.getBaseTrmCntCalcnWayDscd());", "crIntCalSctnMIO.setIntCalSctnCntnt(in.getIntCalSctnCntnt());", "return", "_getCrIntCalSctnMDso().selectListSectionDynamic(crIntCalSctnMIO);", "}"], "docstring_tokens": ["Methods", "to", "query", "interest", "calculation", "sections", "-", "All", "interest", "calculation", "section", "for", "each", "institution", "are", "inquired"]}
{"code_tokens": ["public", "CaAsmItmMgmtSvcGetAsmItmTblListIn", "clone(){", "try{", "CaAsmItmMgmtSvcGetAsmItmTblListIn", "object=", "(CaAsmItmMgmtSvcGetAsmItmTblListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveLastPsbkBkgInfo(", "ArrLastPsbkBkgInfoIn", "lastBkgInfoIn,", "ArrIssmdaCore", "arrIssmda", ")", "throws", "BizApplicationException", "{", "ArArrIssmdaRIO", "arArrIssmdaRIO", "=", "_getArrIssmdaR(_getCmnContext().getInstCode(),", "arrIssmda.getArrIssmdaInhrncId(),", "lastBkgInfoIn.getArrId());", "ArrIssmdaTmpltInfo", "arrIssmdaTmpltInfo", "=", "arrIssmda.getTemplateInfo();", "Integer", "psbkBaseSideCnt", "=", "null;", "Integer", "psbkBaseRowCnt", "=", "null;", "//", "BigDecimal", "psbkBaseLetterCnt", "=", "null;", "for(", "ArrIssmdaPrflAtrbt", "prflAtrbt", ":", "arrIssmdaTmpltInfo.getPrflAtrbtList()", "){", "if(", "ArrIssmdaPrflAtrbtEnum.PASSBOOK_BASE_SIDE_COUNT.getValue().equals(prflAtrbt.getArrIssmdaPrflAtrbtNm())", "){", "psbkBaseSideCnt", "=", "Integer.parseInt(", "prflAtrbt.getArrIssmdaPrflCntnt()", ");", "}", "else", "if(", "ArrIssmdaPrflAtrbtEnum.PASSBOOK_BASE_ROW_COUNT.getValue().equals(prflAtrbt.getArrIssmdaPrflAtrbtNm())", "){", "psbkBaseRowCnt", "=", "Integer.parseInt(", "prflAtrbt.getArrIssmdaPrflCntnt()", ");", "//", "}", "else", "if(", "ArrIssmdaPrflAtrbtEnum.PASSBOOK_BASE_LETTER_COUNT.getValue().equals(prflAtrbt.getArrIssmdaPrflAtrbtNm())", "){", "//", "psbkBaseLetterCnt", "=", "new", "BigDecimal(", "prflAtrbt.getArrIssmdaPrflCntnt()", ");", "}", "}", "if(", "psbkBaseSideCnt", "==", "null", "||", "psbkBaseSideCnt.compareTo(", "lastBkgInfoIn.getLastPsbkBkgSideCnt())", "<", "0", "){", "//", "Passbook", "output", "exceeds", "the", "range", "as", "possible.Destination", "information:", "{0}", "output", "information:", "{1},", "output", "range:", "{2}", "//", "\ud1b5\uc7a5\uc774", "\ucd9c\ub825", "\uac00\ub2a5\ud55c", "\ubc94\uc704\ub97c", "\ucd08\uacfc\ud558\uc600\uc2b5\ub2c8\ub2e4.", "//", "\ub300\uc0c1\uc815\ubcf4", ":", "{0}", "\ucd9c\ub825\uc815\ubcf4", ":", "{1},", "\ucd9c\ub825\uac00\ub2a5\ud55c", "\ubc94\uc704", ":", "{2}", "throw", "new", "BizApplicationException(\"AAPARE0531\",", "new", "String[]{\"@lastPsbkBkgPgCnt\",", "String.valueOf(lastBkgInfoIn.getLastPsbkBkgSideCnt()),", "String.valueOf(psbkBaseSideCnt)});", "}", "if(", "psbkBaseRowCnt", "==", "null", "||", "psbkBaseRowCnt.compareTo(", "lastBkgInfoIn.getLastPsbkBkgRowCnt())", "<", "0", "){", "//", "Passbook", "output", "exceeds", "the", "range", "as", "possible.Destination", "information:", "{0}", "output", "information:", "{1},", "output", "range:", "{2}", "//", "\ud1b5\uc7a5\uc774", "\ucd9c\ub825", "\uac00\ub2a5\ud55c", "\ubc94\uc704\ub97c", "\ucd08\uacfc\ud558\uc600\uc2b5\ub2c8\ub2e4.", "//", "\ub300\uc0c1\uc815\ubcf4", ":", "{0}", "\ucd9c\ub825\uc815\ubcf4", ":", "{1},", "\ucd9c\ub825\uac00\ub2a5\ud55c", "\ubc94\uc704", ":", "{2}", "throw", "new", "BizApplicationException(\"AAPARE0531\",", "new", "String[]{\"@lastPsbkBkgPgCnt\",", "String.valueOf(lastBkgInfoIn.getLastPsbkBkgRowCnt()),", "String.valueOf(psbkBaseRowCnt)});", "}", "ArArrLastPsbkBkgDIO", "lastBkgDIO", "=", "_makeArArrPsbkBkgDto(arArrIssmdaRIO,", "lastBkgInfoIn);", "_getArArrLastPsbkBkgDDso().update(lastBkgDIO);", "}"], "docstring_tokens": ["Save", "the", "last", "booking", "information", "of", "passbook."]}
{"code_tokens": ["public", "void", "saveSubInfo(ActorImpl", "actorImpl,", "String", "dueDlgncDscd,", "Integer", "dueDlgncSeqNbr,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ActorDueDlgncSubInfoKndEnum", "subInfoKnd", "=", "actorImpl.getDueDlgncSubInfoKnd();", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "//", "**", "\ud655\uc778\uc758\ubb34", "\ubcf4\uc870\uba85\uc138\ub294", "\ubcc0\uacbd\uc774\ub825\uc744", "\uad00\ub9ac\ud558\uc9c0", "\uc54a\ub294\ub2e4.", "IValueObject", "subInfoIO", "=", "getSubInfoCache(actorImpl,", "dueDlgncDscd,", "dueDlgncSeqNbr);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoIO.set(\"actorId\",", "actorImpl.getActorId());", "subInfoIO.set(\"dueDlgncDscd\",", "dueDlgncDscd);", "subInfoIO.set(\"dueDlgncSeqNbr\",", "dueDlgncSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85\uacfc", "\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoIO);", "}", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoKnd,", "subInfoIO,", "actorImpl,", "dueDlgncDscd,", "dueDlgncSeqNbr);", "}"], "docstring_tokens": ["Save", "an", "asset", "subsidiary", "information."]}
{"code_tokens": ["public", "ActorAddrOut", "getAddrInfo(String", "cntctPntLctnTpCd,", "String", "cntctMthdTpCd)", "throws", "BizApplicationException", "{", "return", "getActor().getAddrInfo(cntctPntLctnTpCd,", "cntctMthdTpCd);", "}"], "docstring_tokens": ["Inquire", "the", "address", "information", "that", "matches", "the", "input", "contact", "point", "location", "type", "code,", "contact", "method", "type", "code."]}
{"code_tokens": ["public", "ArArrActvtyMIO", "select(String", "instCd,", "String", "arrId,", "Integer", "arrActvtySeqNbr)", "{", "return", "_getArArrActvtyM().select(instCd,", "arrId,", "arrActvtySeqNbr);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,", "ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled()){", "logger.debug(\"ArrCndInstallmentAmountImpl", "doServiceAction\");", "}", "if", "(!this.getArrangementCore().isReal())", "return;", "switch", "(arrSrvcTpCd)", "{", "case", "\"OpenDeposit\":", "case", "\"Deposit\":", "_validateInstallmentAmount(arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["This", "function", "execute", "the", "extended", "attribute", "business", "rules", "that", "registered", "in", "the", "Contract", "Services", "Processing", "Rules."]}
{"code_tokens": ["public", "void", "saveXtnInfo(String", "arrGrpXtnAtrbt,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "ArrGrpCoreImpl", "arrGrp)", "throws", "BizApplicationException", "{", "//", "\uacc4\uc57d", "\uadf8\ub8f9", "\uc8fc\uc81c\uc601\uc5ed", "\ubbf8\uc0ac\uc6a9", "\uc2dc", "skip", "if", "(!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.GROUP))", "{", "return;", "}", "this._saveGrpArrXtnInfoOne(arrGrpXtnAtrbt,", "xtnAtrbtCntnt,", "txDt,", "arrGrp);", "}"], "docstring_tokens": ["Save", "(create", "or", "change", ")", "extend", "attribute."]}
{"code_tokens": ["public", "DpstlmCltrCupldSvcOpenIn", "clone(){", "try{", "DpstlmCltrCupldSvcOpenIn", "object=", "(DpstlmCltrCupldSvcOpenIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "removeInsrncXtnInfo(String", "xtnAtrbtNm,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getInsrncXtnInfoBiz().saveInsrncXtnInfo(xtnAtrbtNm,", "null,", "txDt,", "txSeqNbr,", "this,", "false);", "}"], "docstring_tokens": ["Remove", "a", "specific", "extended", "information", "of", "the", "insurance."]}
{"code_tokens": ["private", "BfTestSvcOut", "getAdtnlInfo(BfTestSvcIn", "in)", "throws", "BizApplicationException", "{", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "List<BfAdtlInfoOut>", "output", "=", "bf.getAdtnlInfo(in.getBfAdtlInfoIn().getAdtnlInfoCd());", "BfTestSvcOut", "out", "=", "new", "BfTestSvcOut();", "if(CollectionUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "additional", "information", "related", "to", "point.", "if", "there", "is", "no", "additional", "information", "code,", "all", "additional", "information", "inquire"]}
{"code_tokens": ["public", "boolean", "isArrMediaIssued(ArrIssmdaTpEnum", "arrIssmdaTp,", "ArrRealImpl", "arrReal)", "throws", "BizApplicationException", "{", "if", "(_getArArrIssmdaRXtnDso().selectAliveOne(_getCmnContext().getInstCode(),", "arrIssmdaTp.getValue(),", "arrReal.getArrId())", ">", "0){", "return", "true;", "}", "else", "{", "return", "false;", "}", "}"], "docstring_tokens": ["Inquire", "whether", "if", "there", "is", "arrangement", "issued", "media", "relation", "of", "specific", "issued", "media", "type."]}
{"code_tokens": ["public", "ArArrSrvcBlckngMIO", "select(ArArrSrvcBlckngMIO", "ArArrSrvcBlckngMIO)", "{", "String", "cacheKey", "=", "ArArrSrvcBlckngMIO.getArrSrvcBlckngCd();", "Object", "arrSrvcCndListCacheObj", "=", "_getArDataCacheManager().getCacheData(DataCacheCoreConfig.ARR_SRVC_BLOCKING_TYPE_CACHE,", "cacheKey);", "ArArrSrvcBlckngMIO", "returnObj", "=", "new", "ArArrSrvcBlckngMIO();", "if(arrSrvcCndListCacheObj", "==", "null){", "returnObj", "=", "_getArArrSrvcBlckngM().select(ArArrSrvcBlckngMIO);", "if(returnObj", "==", "null){", "_getArDataCacheManager().saveCache(DataCacheCoreConfig.ARR_SRVC_BLOCKING_TYPE_CACHE,", "cacheKey,", "CAR01.ARR_NOT_APPLICABLE);", "}else{", "_getArDataCacheManager().saveCache(DataCacheCoreConfig.ARR_SRVC_BLOCKING_TYPE_CACHE,", "cacheKey,", "returnObj);", "}", "}else{", "if(arrSrvcCndListCacheObj.equals(CAR01.ARR_NOT_APPLICABLE)){", "return", "returnObj;", "}", "returnObj", "=", "(ArArrSrvcBlckngMIO)arrSrvcCndListCacheObj;", "}", "return", "returnObj;", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "register(List<CaNoticeMsgDocRMgmtIO>", "docNoticeMsgRIOList)", "throws", "BizApplicationException", "{", "if(docNoticeMsgRIOList", "==", "null", "||", "docNoticeMsgRIOList.isEmpty()){", "return;", "}", "for(CaNoticeMsgDocRMgmtIO", "docNoticeMsgRIOItem", ":", "docNoticeMsgRIOList){", "//check", "required", "inputs", "if(StringUtils.isEmpty(docNoticeMsgRIOItem.getInstCd())){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@instCd\"});", "}else", "if(StringUtils.isEmpty(docNoticeMsgRIOItem.getNoticeMsgCd())){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@noticeMsgCd\"});", "}", "CaAtDocNoticeMsgRIO", "rgstrnDocNoticeMsgRMgmtIO", "=", "_getAtDocNoticeMsgRDso().select(docNoticeMsgRIOItem.getInstCd(),", "docNoticeMsgRIOItem.getNoticeMsgCd());", "if(rgstrnDocNoticeMsgRMgmtIO", "==", "null){", "if(!_isEmptyDocId(docNoticeMsgRIOItem.getDocId())){", "CaAtDocNoticeMsgRIO", "atDocNoticeMsgRIO", "=", "new", "CaAtDocNoticeMsgRIO();", "_getCaCmnContext().setHeaderColumn(atDocNoticeMsgRIO);", "atDocNoticeMsgRIO.setInstCd(docNoticeMsgRIOItem.getInstCd());", "atDocNoticeMsgRIO.setNoticeMsgCd(docNoticeMsgRIOItem.getNoticeMsgCd());", "atDocNoticeMsgRIO.setDocId(docNoticeMsgRIOItem.getDocId());", "_getAtDocNoticeMsgRDso().insert(atDocNoticeMsgRIO);", "}", "}else{", "//delete", "registered", "doc-notice", "message", "relation", "_getCaCmnContext().setHeaderColumn(rgstrnDocNoticeMsgRMgmtIO);", "rgstrnDocNoticeMsgRMgmtIO.setInstCd(docNoticeMsgRIOItem.getInstCd());", "_getAtDocNoticeMsgRDso().delete(rgstrnDocNoticeMsgRMgmtIO);", "//insert", "new", "doc-notice", "message", "relation", "rgstrnDocNoticeMsgRMgmtIO.setDocId(StringUtils.isEmpty(docNoticeMsgRIOItem.getDocId())", "?", "CCM02.NO_OPINION", ":", "docNoticeMsgRIOItem.getDocId());", "_getAtDocNoticeMsgRDso().insert(rgstrnDocNoticeMsgRMgmtIO);", "//", "clear", "cache", "_getCaDataCacheManager().clearInstanceCache(DataCacheCoreConfig.DOC_NOTICE_MSG_REL_CACHE,", "docNoticeMsgRIOItem.getInstCd().concat(docNoticeMsgRIOItem.getNoticeMsgCd()));", "}", "}", "}"], "docstring_tokens": ["It", "registers", "the", "self", "authentication", "code", "information.", "Needs", "caution", "as", "the", "registered", "information", "performs", "the", "update", "transaction.", "It", "gets", "the", "first", "institution", "code", "in", "the", "list", "and", "query", "the", "entire", "contents."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "String", "cd)", "throws", "BizApplicationException", "{", "return", "_checkCode(cdNbr,", "cd);", "}"], "docstring_tokens": ["This", "method", "check", "the", "code", "number.", "If", "code", "is", "exist", "return", "true,", "else", "return", "false."]}
{"code_tokens": ["public", "PdRqstIntCalcnInfoInqryIn", "clone(){", "try{", "PdRqstIntCalcnInfoInqryIn", "object=", "(PdRqstIntCalcnInfoInqryIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "String", "txDt,", "Integer", "txSeqNbr,", "InsrncImpl", "insrncImpl)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsInsrncSIO", "subInfoCache", "=", "getSubInfoCache(insrncImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsInsrncSIO();", "subInfoCache.setInsrncId(insrncImpl.getInsrncBasicCache().getInsrncId());", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(insrncImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-1.", "insert", "_getAsInsrncSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "insrncImpl.setInsrncSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(insrncImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-2.", "update", "_getAsInsrncSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "the", "appraisal", "thing", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "void", "register(List<ScrtyQstnrIO>", "scrtyQstnrList)", "throws", "BizApplicationException", "{", "if(scrtyQstnrList", "!=", "null", "&&", "!scrtyQstnrList.isEmpty())", "{", "AtScrtyQstnrDIO", "atScrtyQstnrDIO", "=", "new", "AtScrtyQstnrDIO();", "_getCmnContext().setHeaderColumn(atScrtyQstnrDIO);", "atScrtyQstnrDIO.setQstnrId(scrtyQstnrList.get(0).getQstnrId());", "//", "Check", "Questionnaire", "id", "Integer", "checkResult", "=", "_getAtScrtyQstnrDDso().selectQstnrId(_getCmnContext().getInstCode(),", "scrtyQstnrList.get(0).getQstnrId());", "if(checkResult.intValue()", ">", "0)", "{", "throw", "new", "BizApplicationException(\"AAPCME0005\",", "null);", "}", "int", "qstnSeqNbr", "=", "0;", "for(ScrtyQstnrIO", "scrtyQstnrItem", ":", "scrtyQstnrList)", "{", "atScrtyQstnrDIO.setLngCd(scrtyQstnrItem.getLngCd());", "atScrtyQstnrDIO.setQstnCntnt(scrtyQstnrItem.getQstnCntnt());", "atScrtyQstnrDIO.setQstnrId(scrtyQstnrItem.getQstnrId());", "atScrtyQstnrDIO.setQstnSeqNbr(qstnSeqNbr++);", "_getAtScrtyQstnrDDso().insert(atScrtyQstnrDIO);", "}", "}", "}"], "docstring_tokens": ["It", "registers", "customer", "agreement", "code", "information", "list.", "If", "registered", "information", "by", "the", "same", "institution", "code", "and", "agreement", "type", "code", "exists,", "throws", "exception."]}
{"code_tokens": ["public", "String", "getListCndName(String", "tntInstId,", "String", "cndCd,", "String", "listCd)", "throws", "BizApplicationException", "{", "String", "listCndNm", "=", "\"\";", "if", "(StringCoreUtils.isEmpty(tntInstId))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@tntInstId\"", "});", "}", "if", "(StringCoreUtils.isEmpty(cndCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@cndCd\"", "});", "}", "if", "(StringCoreUtils.isEmpty(listCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@listCd\"", "});", "}", "PdLstCtMOut", "out", "=", "getListConditionInfo(tntInstId,", "cndCd,", "listCd);", "if", "(out", "!=", "null)", "{", "listCndNm", "=", "out.getListCdNm();", "}", "//", "Return", "list", "condition", "name", "return", "listCndNm;", "}"], "docstring_tokens": ["Methods", "for", "querying", "list", "condition", "names"]}
{"code_tokens": ["public", "PdRqstIntCalcnSmltnOut", "clone(){", "try{", "PdRqstIntCalcnSmltnOut", "object=", "(PdRqstIntCalcnSmltnOut)super.clone();", "if", "(", "this.intFndtnList==", "null", ")", "object.intFndtnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnFndtnListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnFndtnListOut>(intFndtnList.size());", "for(", "bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnFndtnListOut", "item", ":", "intFndtnList", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnFndtnListOut)item.clone());", "}", "object.intFndtnList", "=", "clonedList;", "}", "if", "(", "this.calculationTypeList==", "null", ")", "object.calculationTypeList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnCalculationType>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnCalculationType>(calculationTypeList.size());", "for(", "bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnCalculationType", "item", ":", "calculationTypeList", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnCalculationType)item.clone());", "}", "object.calculationTypeList", "=", "clonedList;", "}", "if", "(", "this.determineCndList==", "null", ")", "object.determineCndList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnCndList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnCndList>(determineCndList.size());", "for(", "bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnCndList", "item", ":", "determineCndList", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnCndList)item.clone());", "}", "object.determineCndList", "=", "clonedList;", "}", "if", "(", "this.determineRuleList==", "null", ")", "object.determineRuleList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnRuleList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnRuleList>(determineRuleList.size());", "for(", "bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnRuleList", "item", ":", "determineRuleList", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdRqstIntCalcnSmltnDtrmnRuleList)item.clone());", "}", "object.determineRuleList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(CustCore", "custCore,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getCustSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(CustImpl)", "custCore);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "calculation", "detail", "information."]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getCndVal(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "CndVal", "output", "=", "bfCnd.getCndVal(_convertProvideCndSvcListToProvideCndList(in.getProvideCnd()));", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(output", "==", "null)", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "value."]}
{"code_tokens": ["public", "TxHstQrySvcHstListItemOut", "clone(){", "try{", "TxHstQrySvcHstListItemOut", "object=", "(TxHstQrySvcHstListItemOut)super.clone();", "if", "(", "this.entryList==", "null", ")", "object.entryList", "=", "null;", "else{", "java.util.List<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut>(entryList.size());", "for(", "bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut", "item", ":", "entryList", "){", "clonedList.add(", "(bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryEntryOut)item.clone());", "}", "object.entryList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isChildPntUsable()", "{", "if", "(pdPdCndM", "==", "null)", "{", "return", "false;", "}", "//", "Return", "Output", "return", "CCM01.YES.equals(pdPdCndM.getChildPdUseYn());", "}"], "docstring_tokens": ["This", "method", "inquire", "Is", "Child", "Point", "usable."]}
{"code_tokens": ["public", "CustRelArrInqrySvcGetCustrelAcctListOut", "clone(){", "try{", "CustRelArrInqrySvcGetCustrelAcctListOut", "object=", "(CustRelArrInqrySvcGetCustrelAcctListOut)super.clone();", "if", "(", "this.mainArrList==", "null", ")", "object.mainArrList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetMainArrOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetMainArrOut>(mainArrList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetMainArrOut", "item", ":", "mainArrList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetMainArrOut)item.clone());", "}", "object.mainArrList", "=", "clonedList;", "}", "if", "(", "this.relArrList==", "null", ")", "object.relArrList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetRelArrOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetRelArrOut>(relArrList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetRelArrOut", "item", ":", "relArrList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustRelArrInqrySvcGetRelArrOut)item.clone());", "}", "object.relArrList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "AtrlImpl", "atrlImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(subInfoMap", "==", "null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\uc561\ud130\uc5ed\ud560\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtAtrlSIO", "subInfoIO", "=", "getSubInfoCache(atrlImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtAtrlSIO();", "subInfoIO.setAtrlId(atrlImpl.getAtrlId());", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_getAtAtrlSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(atrlImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "Map\uc744", "\uae30\uc874", "\uce90\uc2dc", "\uc800\uc7a5\ub41c", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_getAtAtrlSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "atrlImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCnd)", "throws", "BizApplicationException", "{", "if", "(!this.getArrangementCore().isReal())", "return;", "//", "This", "account", "is", "a", "product", "that", "can", "not", "be", "interest", "settlement", "if", "(!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(CCM01.YES)))", "return;", "switch", "(ArrSrvcEnum.getEnum(", "arrSrvcTpCd", ")", ")", "{", "case", "INTRA_INSTITUTION_SCHEDULED_TRANSFER:", "_buildRealTimeTransferPlan(", "arrSrvcTpCd,", "arrCnd);", "return;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["This", "function", "execute", "the", "extended", "attribute", "business", "rules", "that", "registered", "in", "the", "Contract", "Services", "Processing", "Rules."]}
{"code_tokens": ["public", "DpArr360Cnd", "clone(){", "try{", "DpArr360Cnd", "object=", "(DpArr360Cnd)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaDocSrchSvcGetDocTreeOut", "clone(){", "try{", "CaDocSrchSvcGetDocTreeOut", "object=", "(CaDocSrchSvcGetDocTreeOut)super.clone();", "if", "(", "this.children==", "null", ")", "object.children", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocTreeDtlOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocTreeDtlOut>(children.size());", "for(", "bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocTreeDtlOut", "item", ":", "children", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocTreeDtlOut)item.clone());", "}", "object.children", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaDstbTgtMIO", "clone(){", "try{", "CaDstbTgtMIO", "object=", "(CaDstbTgtMIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CaCmRoleSrvcRIO>", "selectList(String", "instCd,", "String", "roleId,", "String", "srvcCd)", "{", "return", "_getCmRoleSrvcR().selectList(instCd,", "roleId,", "srvcCd);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "CaRgstrnSvcIn", "clone(){", "try{", "CaRgstrnSvcIn", "object=", "(CaRgstrnSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getEnglishAttributeName()", "{", "return", "stdDtoClassAtrbt.getEnglishAttributeName();", "}"], "docstring_tokens": ["Query", "English", "attribute", "name"]}
{"code_tokens": ["public", "List<CaInstSrvcIO>", "getListInstService()", "throws", "BizApplicationException", "{", "return", "getListInstService(null,null);", "}"], "docstring_tokens": ["Inquiry", "active", "institution", "service", "list", "by", "institution", "code,", "component", "code,", "base", "date"]}
{"code_tokens": ["public", "ArrBsicQrySvcGetChildrenArrListOut", "clone(){", "try{", "ArrBsicQrySvcGetChildrenArrListOut", "object=", "(ArrBsicQrySvcGetChildrenArrListOut)super.clone();", "if", "(", "this.relArrList==", "null", ")", "object.relArrList", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetChildrenArrItmOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetChildrenArrItmOut>(relArrList.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetChildrenArrItmOut", "item", ":", "relArrList", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetChildrenArrItmOut)item.clone());", "}", "object.relArrList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ActorCtcptChngSvcTelNbrIn", "clone(){", "try{", "ActorCtcptChngSvcTelNbrIn", "object=", "(ActorCtcptChngSvcTelNbrIn)super.clone();", "if", "(", "this.ctcptXtnInfoList==", "null", ")", "object.ctcptXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.ActorCtcptChngSvcCtcptXtnIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.ActorCtcptChngSvcCtcptXtnIn>(ctcptXtnInfoList.size());", "for(", "bankware.corebanking.customer.change.service.dto.ActorCtcptChngSvcCtcptXtnIn", "item", ":", "ctcptXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.ActorCtcptChngSvcCtcptXtnIn)item.clone());", "}", "object.ctcptXtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveRelationXtnInfo(ArrRelInfoIn", "arrRelInfoIn,", "List<ArrRelCrtnXtnInfoIn>", "arrRelXtnList,String", "txDt,Integer", "txSeqNbr,ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "if", "(ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())){", "return;", "}", "_checkInput(arrRelInfoIn,txDt,txSeqNbr);", "//", "Check", "Transaction", "Exist", "//", "\uac70\ub798\uc0dd\uc131\uc5ec\ubd80", "\uac80\uc99d", "_getArrCmnUtil().validateArrTxExist(arrReal,", "txDt,", "txSeqNbr);", "for", "(ArrRelCrtnXtnInfoIn", "arrRelCrtnXtnInfoIn", ":", "arrRelXtnList)", "{", "this.saveRelationXtnInfo(arrRelInfoIn,", "arrRelCrtnXtnInfoIn.getXtnAtrbtNm(),", "arrRelCrtnXtnInfoIn.getXtnAtrbtCntnt(),", "txDt,", "txSeqNbr,", "arrReal);", "}", "}"], "docstring_tokens": ["Save", "arrangement", "relation", "extended", "attribute", "to", "the", "arrangement."]}
{"code_tokens": ["public", "List<PdAdtlInfoOut>", "getAdtnlInfo(PdAdtlInfoIn", "in)", "throws", "BizApplicationException", "{", "List<PdAdtlInfoOut>", "out", "=", "new", "ArrayList<>();", "//", "\uc0c1\ud488\ucf54\ub4dc,", "\uc0c1\ud488\ubd80\uac00\uc815\ubcf4\uc720\ud615,", "\uc801\uc77c\uc77c\uc790\ub97c", "\uc785\ub825\ud558\uc5ec", "\ud574\ub2f9", "\uc0c1\ud488\uc5d0", "\uad00\ub828\ub41c", "\uc0c1\ud488\ubd80\uac00\uc815\ubcf4\ub97c", "\uc870\ud68c\ud568", "//", "Enter", "the", "product", "code,", "product", "additional", "information", "type", "code,", "//", "apply", "date", "and", "inquiry", "product", "additional", "information", "related", "to", "the", "//", "product", "PdAdditionalInfoListIn", "additionalIn", "=", "new", "PdAdditionalInfoListIn();", "additionalIn.setInstitutionId(pdPdM.getInstCd());", "additionalIn.setPdCd(pdPdM.getPdCd());", "additionalIn.setAdditionalInfoCd(in.getAdtnlInfoCd());", "additionalIn.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(),", "_getAplyTmString(in.getAplyTm())));", "List<PdAdditionalInfoOut>", "additionalOut", "=", "_getPdCore().getListAdditionalInfo(additionalIn);", "for(PdAdditionalInfoOut", "item", ":", "CollectionUtils.emptyIfNull(additionalOut))", "{", "PdAdtlInfoOut", "temp", "=", "new", "PdAdtlInfoOut();", "temp.setAdtnlInfoCd(item.getAdditionalInfoCd());", "temp.setPdRelStsCd(item.getPdRelationStatusCd());", "temp.setAdtnlInfoCntnt(item.getAdditionalInfoContent());", "temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(item.getApplyStartDate()));", "temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(item.getApplyEndDate()));", "temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(item.getApplyStartDate()));", "temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(item.getApplyEndDate()));", "out.add(temp);", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "additional", "information", "related", "to", "point", "by", "additional", "information", "distinction", "code.", "if", "there", "is", "no", "additional", "information", "distinction", "code,", "all", "additional", "information", "inquire"]}
{"code_tokens": ["public", "CaDateMngrCheckDateOut", "calculateDate(String", "baseDt)", "throws", "BizApplicationException", "{", "//", "Validate", "date", "_checkDate(baseDt);", "//", "New", "result", "object", "CaDateMngrCheckDateOut", "out", "=", "new", "CaDateMngrCheckDateOut();", "//", "Next", "date", "out.setNxtDt(_getCalculationDate(baseDt,", "1));", "//", "Next", "next", "date", "out.setNxtNxtDt(_getCalculationDate(baseDt,", "2));", "//", "Before", "date", "out.setBfDt(_getCalculationDate(baseDt,", "-1));", "//", "Before", "before", "date", "out.setBfBfDt(_getCalculationDate(baseDt,", "-2));", "return", "out;", "}"], "docstring_tokens": ["It", "calculates", "the", "date", "of", "the", "day.", "(\u00b11~2", "days)"]}
{"code_tokens": ["public", "DeptOrgnztnRelSrchSvcGetHistOut", "clone(){", "try{", "DeptOrgnztnRelSrchSvcGetHistOut", "object=", "(DeptOrgnztnRelSrchSvcGetHistOut)super.clone();", "if", "(", "this.orgnztnRelHist==", "null", ")", "object.orgnztnRelHist", "=", "null;", "else{", "java.util.List<bankware.corebanking.department.query.service.dto.DeptOrgnztnRelSrchSvcGetOrgnztnRelOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.department.query.service.dto.DeptOrgnztnRelSrchSvcGetOrgnztnRelOut>(orgnztnRelHist.size());", "for(", "bankware.corebanking.department.query.service.dto.DeptOrgnztnRelSrchSvcGetOrgnztnRelOut", "item", ":", "orgnztnRelHist", "){", "clonedList.add(", "(bankware.corebanking.department.query.service.dto.DeptOrgnztnRelSrchSvcGetOrgnztnRelOut)item.clone());", "}", "object.orgnztnRelHist", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<bankware.corebanking.core.product.productapi.interfaces.dto.BfInfoIO>", "getListBfInfo(String", "instCd,", "String", "bizDscd,", "String", "bfTpCd,", "String", "bfTmpltCd)", "throws", "BizApplicationException", "{", "List<bankware.corebanking.core.product.productapi.interfaces.dto.BfInfoIO>", "outList", "=", "new", "ArrayList<>();", "//", "Set", "input", "BfBaseListIn", "apiIn", "=", "new", "BfBaseListIn();", "apiIn.setInstitutionId((StringCoreUtils.isEmpty(instCd))", "?", "_getCmnContext().getInstCode()", ":", "instCd);", "apiIn.setBizDscd(bizDscd);", "apiIn.setBfTypeCd(bfTpCd);", "apiIn.setBfTemplateCd(bfTmpltCd);", "List<BfInfoIO>", "apiOutList", "=", "_bfApi().getListBfBase(apiIn);", "if", "(!CollectionCoreUtils.isEmpty(apiOutList))", "{", "for", "(BfInfoIO", "io", ":", "apiOutList)", "{", "bankware.corebanking.core.product.productapi.interfaces.dto.BfInfoIO", "out", "=", "new", "bankware.corebanking.core.product.productapi.interfaces.dto.BfInfoIO();", "out.setInstCd(io.getInstitutionId());", "out.setIndsDscd(io.getIndustryDscd());", "out.setBizDscd(io.getBizDscd());", "out.setPdTpCd(io.getBfTypeCd());", "out.setPdTmpltCd(io.getBfTemplateCd());", "out.setPdCd(io.getBfCd());", "out.setPdNm(io.getBfName());", "out.setSaleStartDt(PdUtil.parseDateToYYYYMMDD(io.getSaleStartDate()));", "out.setSaleStartTm(PdUtil.parseDateToHHMMSS(io.getSaleStartDate()));", "out.setSaleEndDt(PdUtil.parseDateToYYYYMMDD(io.getSaleEndDate()));", "out.setSaleEndTm(PdUtil.parseDateToHHMMSS(io.getSaleEndDate()));", "outList.add(out);", "}", "}", "//", "Return", "output", "return", "outList;", "}"], "docstring_tokens": ["Methods", "to", "inquiry", "all", "benefit", "list", "-", "View", "all", "benefits", "(", "sale", "+", "end", "of", "sale", "+", "Selling", "in", "the", "future", ")"]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\uacc4\uc57d\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "arrSubInfo", "=", "getSubInfoCache(arrRealImpl);", "//", "2.", "\uacc4\uc57d\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(arrSubInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\uacc4\uc57d\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "arrSubInfo.get(atrbtNm);", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "calculation", "detail", "information."]}
{"code_tokens": ["public", "StndngOrderSvcArrCndIn", "clone(){", "try{", "StndngOrderSvcArrCndIn", "object=", "(StndngOrderSvcArrCndIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CaInstParamAtrbtInfo>", "getListInstParamAtrbtInfo(String", "instCd,", "CaInstParamTypeEnum", "instParamTypeEnum", ")", "throws", "BizApplicationException", "{", "List<CaCmInstPMSelectListParmAtrbtInfoForScreenIO>", "outSqlList", "=", "_getCmInstPMDso().selectListParmAtrbtInfoForScreen(", "instCd,_getCaCmnContext().getLanguageCode(),", "instParamTypeEnum", "==", "null", "?", "null", ":", "instParamTypeEnum.getValue());", "List<CaInstParamAtrbtInfo>", "outList", "=", "new", "ArrayList<CaInstParamAtrbtInfo>();", "for(", "CaCmInstPMSelectListParmAtrbtInfoForScreenIO", "dto", ":", "outSqlList", ")", "{", "CaInstParamAtrbtInfo", "instParamAtrbtInfo", "=", "new", "CaInstParamAtrbtInfo();", "instParamAtrbtInfo.setAtrbtLen(dto.getAtrbtLen());", "instParamAtrbtInfo.setAtrbtTpCd(dto.getAtrbtTpCd());", "instParamAtrbtInfo.setInstParmTpCd(dto.getInstParmTpCd());", "instParamAtrbtInfo.setParmAtrbtNm(dto.getParmAtrbtNm());", "instParamAtrbtInfo.setParmExplntnCntnt(dto.getParmExplntnCntnt());", "instParamAtrbtInfo.setParmKorExplntnCntnt(dto.getParmKorExplntnCntnt());", "instParamAtrbtInfo.setParmNm(dto.getParmNm());", "instParamAtrbtInfo.setParmVal(dto.getParmVal());", "if", "(CaAtrbtVldtnWayEnum.CODE.getValue().equals(dto.getAtrbtVldtnWayCd())", "&&", "!StringUtils.isEmpty(dto.getAtrbtVldtnRuleCntnt())", ")", "{", "instParamAtrbtInfo.setJsonCmbBoxCntnt(getCodeListToJson(dto.getAtrbtVldtnRuleCntnt()));", "}", "instParamAtrbtInfo.setAtrbtVldtnWayCd(dto.getAtrbtVldtnWayCd());", "instParamAtrbtInfo.setAtrbtVldtnRuleCntnt(dto.getAtrbtVldtnRuleCntnt());", "instParamAtrbtInfo.setAtrbtVldtnXtnRuleCntnt(dto.getAtrbtVldtnXtnRuleCntnt());", "outList.add(instParamAtrbtInfo);", "}", "return", "outList;", "}"], "docstring_tokens": ["Query", "institution", "parameter", "attribute", "information", "Please", "use", "CaInstParmProvider.getListInstParamAtrbtInfo", "method"]}
{"code_tokens": ["public", "ArArrPlnMIO", "select(String", "instCd,", "String", "arrId,", "Integer", "plnSeqNbr)", "{", "return", "_getArArrPlnM().select(instCd,", "arrId,", "plnSeqNbr);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "TxJrnlSvcGetTxJrnlOut", "clone(){", "try{", "TxJrnlSvcGetTxJrnlOut", "object=", "(TxJrnlSvcGetTxJrnlOut)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "StTxMIO", "getArrTx(StTxMIO", "stTxMIO,", "ArrRealCore", "arr)", "throws", "BizApplicationException", "{", "switch(ArrTxKndCoreEnum.getEnum(getArrTxKnd(arr)))", "{", "case", "ARR_TX_INTERNAL:", "return", "_getStTxIntrnlMDso().selectArrTx(stTxMIO);", "case", "ARR_TX_TEMPRARY:", "return", "_getStTxTmpryMDso().selectArrTx(stTxMIO);", "case", "ARR_TX_NORMAL:", "return", "_getStTxMDso().selectArrTx(stTxMIO);", "default", ":", "throw", "new", "BizApplicationException(\"AAPSTE0212\");", "}", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "inquiring", "the", "basic", "information", "of", "transaction."]}
{"code_tokens": ["public", "String", "getInstCd()", "{", "return", "arrTxBsicIO.getInstCd();", "}"], "docstring_tokens": ["This", "method", "inquire", "institution", "code."]}
{"code_tokens": ["public", "AprslRsltMgmtSvcGetOut", "clone(){", "try{", "AprslRsltMgmtSvcGetOut", "object=", "(AprslRsltMgmtSvcGetOut)super.clone();", "if", "(", "this.aprslThingList==", "null", ")", "object.aprslThingList", "=", "null;", "else{", "java.util.List<bankware.corebanking.collateral.evaluation.service.dto.AprslThingList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.collateral.evaluation.service.dto.AprslThingList>(aprslThingList.size());", "for(", "bankware.corebanking.collateral.evaluation.service.dto.AprslThingList", "item", ":", "aprslThingList", "){", "clonedList.add(", "(bankware.corebanking.collateral.evaluation.service.dto.AprslThingList)item.clone());", "}", "object.aprslThingList", "=", "clonedList;", "}", "if", "(", "this.aprslOwnerList==", "null", ")", "object.aprslOwnerList", "=", "null;", "else{", "java.util.List<bankware.corebanking.collateral.evaluation.service.dto.AprslOwnerList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.collateral.evaluation.service.dto.AprslOwnerList>(aprslOwnerList.size());", "for(", "bankware.corebanking.collateral.evaluation.service.dto.AprslOwnerList", "item", ":", "aprslOwnerList", "){", "clonedList.add(", "(bankware.corebanking.collateral.evaluation.service.dto.AprslOwnerList)item.clone());", "}", "object.aprslOwnerList", "=", "clonedList;", "}", "if", "(", "this.aprslLeaseList==", "null", ")", "object.aprslLeaseList", "=", "null;", "else{", "java.util.List<bankware.corebanking.collateral.evaluation.service.dto.AprslLeaseList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.collateral.evaluation.service.dto.AprslLeaseList>(aprslLeaseList.size());", "for(", "bankware.corebanking.collateral.evaluation.service.dto.AprslLeaseList", "item", ":", "aprslLeaseList", "){", "clonedList.add(", "(bankware.corebanking.collateral.evaluation.service.dto.AprslLeaseList)item.clone());", "}", "object.aprslLeaseList", "=", "clonedList;", "}", "if", "(", "this.prfClaimDetailList==", "null", ")", "object.prfClaimDetailList", "=", "null;", "else{", "java.util.List<bankware.corebanking.collateral.evaluation.service.dto.PrfClaimDetailList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.collateral.evaluation.service.dto.PrfClaimDetailList>(prfClaimDetailList.size());", "for(", "bankware.corebanking.collateral.evaluation.service.dto.PrfClaimDetailList", "item", ":", "prfClaimDetailList", "){", "clonedList.add(", "(bankware.corebanking.collateral.evaluation.service.dto.PrfClaimDetailList)item.clone());", "}", "object.prfClaimDetailList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getAplyStartTm()", "{", "if", "(pdPdCndM", "==", "null)", "{", "return", "CPD01.START_TM;", "}", "//", "Return", "output", "return", "(pdPdCndM.getAplyStartDt()", "==", "null)", "?", "CPD01.START_TM", ":", "PdUtil.parseDateToHHMMSS(pdPdCndM", ".getAplyStartDt());", "}"], "docstring_tokens": ["This", "method", "inquire", "apply", "start", "time", "of", "product", "condition."]}
{"code_tokens": ["public", "void", "modifyArrMaturityDate(String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "\ud574\ub2f9", "\uba54\uc18c\ub4dc\ub294", "({0})", "\ud074\ub798\uc2a4\uc758", "\uc778\uc2a4\ud134\uc2a4\ub85c", "\uc0ac\uc6a9\ud560", "\uc218", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\uacc4\uc57d\ub2f4\ub2f9\uc790\uc5d0\uac8c", "\ubb38\uc758\ubc14\ub78d\ub2c8\ub2e4.", "//", "This", "method", "cannot", "be", "used", "by", "instance", "of", "({0})", "class.", "throw", "new", "BizApplicationException(\"AAPARE0678\",new", "Object[]{this.getClass().getName()});", "}"], "docstring_tokens": ["Change", "maturity", "date", "of", "arrangement."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "for", "(ClHrarcyEnum", "item", ":", "ClHrarcyEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "//", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@clHrarcyId\"});", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["private", "BfTestSvcOut", "getBfCd(BfTestSvcIn", "in)", "throws", "BizApplicationException", "{", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "String", "output", "=", "bf.getBfCd();", "BfTestSvcOut", "out", "=", "new", "BfTestSvcOut();", "if(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "benefit", "code"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(AssetTpCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@AssetXtnAtrbtNm\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "registerDeptClosing(DeptClsgDtlIO", "in)", "throws", "BizApplicationException", "{", "/*", "*", "Set", "deptClsgDtlIO", "*/", "DeptClsgDtlIO", "deptClsgDtlIO", "=", "_setDeptClsgDtlIO(in);", "/*", "*", "Check", "business", "date", "*/", "_checkBizDt(deptClsgDtlIO.getBaseDt());", "/*", "*", "Validation", "for", "department", "closing", "*/", "if", "(ClsgDscdEnum.CLSG.getValue().equals(deptClsgDtlIO.getDeptClsgDscd()))", "{", "/*", "*", "TODO", "*", "1.", "\uc804\uc77c\uc790", "\ub9c8\uac10\uc5ec\ubd80", "check", "*", "2.", "\uc5c5\ubb34\ud1b5\uc81c\uad00\ub828", "check", "*", "3.", "\uc678\ud658\uc5c5\ubb34\ub9c8\uac10", "check", "*", "4.", "\uc790\ub3d9\ud654\uae30\uae30", "\ub9c8\uac10", "check", "*", "5.", "\ub300\uccb4\ubd88\uc77c\uce58", "\uc13c\ud130\ucef7", "\uc218\ud589", "\uc644\ub8cc", "\uc5ec\ubd80", "check", "*", "6.", "\uc13c\ud130\ucef7", "\ud154\ub7ec", "\ub300\uccb4", "\uc77c\uce58\uc5ec\ubd80", "check", "*/", "/*", "*", "Check", "closing", "status", "of", "tellers", "who", "have", "cash", "on", "hand", "on", "previous", "business", "date", "*/", "_checkTlrClsgStsByPrvsBizDtCashHolidng(deptClsgDtlIO);", "/*", "*", "Check", "transfer", "deposit/withdrawal", "amount", "when", "registering", "department", "closing", "*/", "_checkTrnsfrAmt(deptClsgDtlIO);", "/*", "*", "Check", "closing", "target", "teller's", "closing", "status", "on", "business", "day", "*/", "if(_getCmnContext().getTxDate().equals(deptClsgDtlIO.getBaseDt())){", "_getDepartmentStaffClosingYn(deptClsgDtlIO.getDeptId(),", "deptClsgDtlIO.getBaseDt());", "}", "}", "/*", "*", "Get", "department", "closing", "ledger", "*/", "DeptClsgDtlIO", "out", "=", "getDepartmentClosing(deptClsgDtlIO);", "if", "(out==null)", "{", "_registerDepartmentClosing(deptClsgDtlIO);", "}", "else", "{", "if", "(ClsgDscdEnum.CLSG_BF.getValue().equals(out.getDeptClsgDscd()))", "{", "//", "\ub9c8\uac10\uad6c\ubd84\ucf54\ub4dc\uac00", "\"\ub9c8\uac10\"\uc77c", "\uacbd\uc6b0\ub9cc", "update", "\uc218\ud589", "if(deptClsgDtlIO.getDeptClsgDscd().equals(ClsgDscdEnum.CLSG.getValue()))", "{", "_modifyDepartmentClosingRegistration(deptClsgDtlIO);", "}", "}", "else", "{", "//", "\uc774\ubbf8", "\ub9c8\uac10\ucc98\ub9ac", "\ub418\uc5b4", "\uc788\uc2b5\ub2c8\ub2e4.({0})", "throw", "new", "BizApplicationException(\"AAPACE3023\",", "new", "Object[]", "{", "deptClsgDtlIO.getDeptId()", "});", "}", "}", "}"], "docstring_tokens": ["This", "method", "is", "used", "to", "register", "department", "closing", "in", "specific", "business", "date.", "You", "can", "register", "department", "opening/closing", "using", "closing", "distinction", "code.", "(@link", "ClsgDscdEnum)"]}
{"code_tokens": ["private", "BfTestSvcOut", "getBfMrchntRelBackward(BfTestSvcIn", "in)", "throws", "BizApplicationException", "{", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "List<BfMrchntRelOut>", "output", "=", "bf.getBfMrchntRelBackward(_convertOmmToVo(in.getBfMrchntRelIn()));", "BfTestSvcOut", "out", "=", "new", "BfTestSvcOut();", "if(CollectionUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "Benefit", "and", "merchant", "relation", "list", "Backward"]}
{"code_tokens": ["public", "List<CaAddrIO>", "getListKoreaAddress(CaAddrHrarcyEnum", "addrHrarcyEnum,", "CaAddrSearchTpEnum", "addrSearchTpEnum,", "String", "cityPrvncAddr,", "String", "cityGunGuAddr", ",", "String", "roadNm,", "BigDecimal", "bldgMainNbr,", "BigDecimal", "bldgSubNbr,", "String", "bldgNm,", "String", "emdongAddr,", "BigDecimal", "nbrAddrNbr,", "BigDecimal", "househldNbr)", "throws", "BizApplicationException", "{", "List<CaAddrIO>", "addrIOList", "=", "new", "ArrayList<CaAddrIO>();", "switch", "(addrSearchTpEnum)", "{", "case", "ROAD_ADDRESS_SEARCH:", "//", "\ub3c4\ub85c\uba85\uc8fc\uc18c", "\uac80\uc0c9", "addrIOList", "=", "_getRoadAddressSearch(cityPrvncAddr,", "cityGunGuAddr,", "roadNm,", "bldgMainNbr,", "bldgSubNbr);", "break;", "case", "BUILDING_NAME_SEARCH:", "//", "\uac74\ubb3c\uba85", "\uac80\uc0c9", "addrIOList", "=", "_getBuildingNameSearch(cityPrvncAddr,", "cityGunGuAddr,", "bldgNm);", "break;", "case", "AREA_NUMBER_SEARCH:", "//", "\uc9c0\ubc88", "\uac80\uc0c9", "addrIOList", "=", "_getAreaNumberSearch(cityPrvncAddr,", "cityGunGuAddr,", "emdongAddr,", "nbrAddrNbr,", "househldNbr);", "break;", "default:", "//", "\uc5d0\ub7ec\ucc98\ub9ac", "break;", "}", "return", "addrIOList;", "}"], "docstring_tokens": ["It", "inquiries", "Korea", "address", "list."]}
{"code_tokens": ["public", "List<CaCrdtrtgGradeIO>", "getListCrdtrtgGradeByBaseDt(String", "instCd,", "String", "crdtrtgMdlDscd,", "String", "baseDt)throws", "BizApplicationException", "{", "List<CaCrdtrtgGradeIO>", "outList", "=", "new", "ArrayList<CaCrdtrtgGradeIO>();", "List<CaAmCrdtrtgGradeMIO>", "crdtrtgTblList", "=_getAmCrdtrtgGradeMDso().selectListByBaseDt(", "instCd,", "crdtrtgMdlDscd,", "baseDt);", "for", "(CaAmCrdtrtgGradeMIO", "crdtrtgTblIO", ":", "crdtrtgTblList)", "{", "outList.add(_setBasicInfo(crdtrtgTblIO));", "}", "return", "outList;", "}"], "docstring_tokens": ["It", "inquiries", "credit", "rating", "grade", "information", "list."]}
{"code_tokens": ["public", "String", "getXtnInfo(String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "//", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\uc815\ubcf4\uad00\ub9ac\ubc29\ubc95", "\ud310\ub2e8", "//", "1.", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if", "(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AT_ACTOR_M.getValue(),", "xtnAtrbtNm))", "{", "return", "super.getXtnInfo(xtnAtrbtNm);", "}", "//", "2.", "\ubcf4\uc870\uba85\uc138", "else", "{", "return", "_getActorSubInfoBiz().getSubInfo(xtnAtrbtNm,", "this);", "}", "}"], "docstring_tokens": ["Inquire", "the", "extended", "attribute", "information", "that", "matches", "the", "input", "attribute", "name.", "If", "the", "matching", "extended", "attribute", "information", "doesn't", "exist,", "it", "returns", "null."]}
{"code_tokens": ["public", "Actor", "getActorByUniqueIdNbr(String", "actorUnqIdNbrTpCd,", "String", "actorUnqIdNbr)", "throws", "BizApplicationException", "{", "if", "(StringUtils.isEmpty(actorUnqIdNbrTpCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@actorUnqIdNbrTpCd\"});", "}", "if", "(StringUtils.isEmpty(actorUnqIdNbr))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@actorUnqIdNbr\"});", "}", "//check", "input", "code", "_getCd().validateCode(ActorBaseCdNbrCoreEnum.ACTOR_UNQ_ID_NBR_TP_CD.getValue(),", "actorUnqIdNbrTpCd);", "AtActorMXtnIO", "atActorMIO", "=", "_getActorBsicXtn().getInformationByUniqueIdentificationNumber(_getCmnContext().getInstCode(),", "actorUnqIdNbrTpCd,", "actorUnqIdNbr);", "if", "(atActorMIO", "==", "null)", "{", "return", "null;", "}", "ActorImpl", "actor", "=", "(ActorImpl)", "super.getUniqueBusinessBean(atActorMIO.getInstCd(),", "atActorMIO.getActorId());", "if", "(actor.getActorBasicInfo()", "!=", "null)", "{", "return", "actor;", "}", "actor.initialize(atActorMIO);", "//", "set", "subsidiary", "information", "kind", "code", "_getActorXtnInfoCustom().setSubInfoKndCd(actor);", "_getActorDueDlgncXtnInfoCustom().setSubInfoKndCd(actor);", "return", "actor;", "}"], "docstring_tokens": ["Inquire", "Actor", "object", "by", "the", "input", "actor", "identification", "from", "current", "institution.", "It", "inquires", "the", "effective", "actor", "unique", "identification", "number", "information", "on", "transaction", "date.", "If", "the", "result", "doesn't", "exist,", "it", "returns", "null."]}
{"code_tokens": ["public", "SrvcBlckngAmtReduceSvcOut", "clone(){", "try{", "SrvcBlckngAmtReduceSvcOut", "object=", "(SrvcBlckngAmtReduceSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(CupldBizDscdCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "CustRprsnInqrySvcGetLoinInfoListOut", "clone(){", "try{", "CustRprsnInqrySvcGetLoinInfoListOut", "object=", "(CustRprsnInqrySvcGetLoinInfoListOut)super.clone();", "if", "(", "this.custRprsnLoinInfoList==", "null", ")", "object.custRprsnLoinInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinInfoOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinInfoOut>(custRprsnLoinInfoList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinInfoOut", "item", ":", "custRprsnLoinInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcGetLoinInfoOut)item.clone());", "}", "object.custRprsnLoinInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaScrnMgmtSvcRemoveScrnInfoListIn", "clone(){", "try{", "CaScrnMgmtSvcRemoveScrnInfoListIn", "object=", "(CaScrnMgmtSvcRemoveScrnInfoListIn)super.clone();", "if", "(", "this.scrnList==", "null", ")", "object.scrnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn>(scrnList.size());", "for(", "bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn", "item", ":", "scrnList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn)item.clone());", "}", "object.scrnList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrSrvcBlckng>", "getCustDepositArrServiceBlocking(String", "custId)", "throws", "BizApplicationException", "{", "List<ArrSrvcBlckng>", "arrSrvcBlckngList", "=", "new", "ArrayList<ArrSrvcBlckng>();", "List<Arr>", "arrList", "=", "this.getListCustOwnArrActive(custId,PdBizDscdEnum.DEPOSIT.getValue(),null,null);", "if", "(arrList", "==", "null", "||", "arrList.isEmpty())", "return", "arrSrvcBlckngList;", "for", "(Arr", "arr:arrList){", "List<ArrSrvcBlckngGetOut>", "arSrvcBlckngGetOutList", "=", "arr.getListArrServiceBlocking(null,", "ArrCmnUtil.getRckngDt(_getCmnContext()),", "true);", "if", "(arSrvcBlckngGetOutList", "==", "null", "||arSrvcBlckngGetOutList.isEmpty())", "continue;", "ArrSrvcBlckng", "arrSrvcBlckng", "=", "new", "ArrSrvcBlckng();", "arrSrvcBlckng.setArrReal(arr);", "arrSrvcBlckng.setArrSrvcBlckngList(arSrvcBlckngGetOutList);", "arrSrvcBlckngList.add(arrSrvcBlckng);", "}", "return", "arrSrvcBlckngList;", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "active", "service", "blocking", "information", "of", "deposit", "arrangement", "in", "active", "status", "owned", "by", "main", "contractor", "customer", "of", "the", "membership", "arrangement."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "{", "for", "(FrstFixIRtAplyTrmDscdCoreEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "List<CndGrpTmpltCndTmpltRel>", "getListCndGrpTmpltCndTmpltRel(", "String", "tntInstId,", "String", "cndGrpTmpltTpCd,", "String", "aplyDt)", "throws", "BizApplicationException", "{", "List<CndGrpTmpltCndTmpltRel>", "outList", "=", "new", "ArrayList<CndGrpTmpltCndTmpltRel>();", "Date", "aplyDate", "=", "null;", "if(StringCoreUtils.isEmpty(aplyDt))", "{", "aplyDate", "=", "PdUtil.parseStringToDate(_getCmnContext().getTxDate()", "+", "_getCmnContext().getTxTime());", "}", "else", "{", "aplyDate", "=", "PdUtil.parseStringToDate(aplyDt);", "}", "List<CndGroupTemplateCndTemplateRelation>", "relationOut", "=", "_getTemplate()", ".getListCommonCndCndGroupTemplateCndTemplateRelation(tntInstId,", "cndGrpTmpltTpCd,", "aplyDate);", "if(CollectionUtils.isEmpty(relationOut))", "return", "Collections.emptyList();", "for", "(CndGroupTemplateCndTemplateRelation", "cnd", ":", "relationOut)", "{", "CndGrpTmpltCndTmpltRel", "out", "=", "new", "CndGrpTmpltCndTmpltRel();", "out.setCndGrpTmpltCd(cnd.getCndGroupTemplateCd());", "out.setCndCd(cnd.getCndCd());", "out.setCndNm(cnd.getCndName());", "out.setAplyStartDt(cnd.getApplyStartDate());", "out.setAplyEndDt(cnd.getApplyEndDate());", "out.setCmpxCndYn(cnd.isComplexCnd()", "?", "CPD01.YES", ":", "CPD01.NO);", "out.setCndTpCd(cnd.getCndTypeCd());", "out.setCndValDcsnLvlCd(cnd.getCndValDecisionLevelCd());", "out.setRltdAtrbtTpCd(cnd.getRelatedAttributeTypeCd());", "out.setCndGrpCd(cnd.getCndGroupCd());", "out.setCndValNullYn(cnd.isCndValNull()", "?", "CPD01.YES", ":", "CPD01.NO);", "outList.add(out);", "}", "return", "outList;", "}"], "docstring_tokens": ["Methods", "for", "querying", "the", "relationship", "between", "condition", "group", "template", "and", "condition", "template"]}
{"code_tokens": ["public", "CaTaxRtCdMgmtSvcGetTaxRateCodeListIn", "clone(){", "try{", "CaTaxRtCdMgmtSvcGetTaxRateCodeListIn", "object=", "(CaTaxRtCdMgmtSvcGetTaxRateCodeListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Tlr", "getTlr(String", "instCd,String", "deptId,String", "staffId)", "throws", "BizApplicationException", "{", "return", "(TlrImpl)", "super.getTlrCore(instCd,", "deptId,", "staffId);", "}"], "docstring_tokens": ["This", "method", "inquires", "teller", "object", "by", "institution", "code,", "department", "identification,", "staff", "identification."]}
{"code_tokens": ["public", "CaBnkMgmtSvcGetBankCodeListSubOut", "clone(){", "try{", "CaBnkMgmtSvcGetBankCodeListSubOut", "object=", "(CaBnkMgmtSvcGetBankCodeListSubOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "MarketPriceMgmtSvcGetIn", "clone(){", "try{", "MarketPriceMgmtSvcGetIn", "object=", "(MarketPriceMgmtSvcGetIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DueDiligenceInqrySvcListOut", "clone(){", "try{", "DueDiligenceInqrySvcListOut", "object=", "(DueDiligenceInqrySvcListOut)super.clone();", "if", "(", "this.dueDlgncList==", "null", ")", "object.dueDlgncList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub>(dueDlgncList.size());", "for(", "bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub", "item", ":", "dueDlgncList", "){", "clonedList.add(", "(bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub)item.clone());", "}", "object.dueDlgncList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustAdtnlSrvcOpnSvcExcptnAcctInfoIn", "clone(){", "try{", "CustAdtnlSrvcOpnSvcExcptnAcctInfoIn", "object=", "(CustAdtnlSrvcOpnSvcExcptnAcctInfoIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "ScrtyIntCore", "scrtyInt)", "throws", "BizApplicationException", "{", "return", "_getScrtyIntSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(ScrtyIntImpl)scrtyInt);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "insurance."]}
{"code_tokens": ["public", "SelfAuthSvcDemandIn", "clone(){", "try{", "SelfAuthSvcDemandIn", "object=", "(SelfAuthSvcDemandIn)super.clone();", "if", "(", "this.xtnAtrbtList==", "null", ")", "object.xtnAtrbtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO>(xtnAtrbtList.size());", "for(", "bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO", "item", ":", "xtnAtrbtList", "){", "clonedList.add(", "(bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO)item.clone());", "}", "object.xtnAtrbtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrPlanIO>", "getArrPlans(ArrSrvcEnum", "arrSrvc,", "String", "exctnPlnDt,", "String", "arrPlnStsCd)", "throws", "BizApplicationException", "{", "return", "super.getArrPlans(arrSrvc.getValue(),", "exctnPlnDt,", "arrPlnStsCd);", "}"], "docstring_tokens": ["Inquire", "arrangement", "plans", "which", "are", "currently", "in", "specific", "status", "with", "arrangement", "service", "type", "ENUM,", "plan", "execution", "date,", "and", "plan", "status", "code."]}
{"code_tokens": ["public", "PreScrningNICEScore", "clone(){", "try{", "PreScrningNICEScore", "object=", "(PreScrningNICEScore)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "BfCmpsCndSvcOut", "clone(){", "try{", "BfCmpsCndSvcOut", "object=", "(BfCmpsCndSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbCnstncyCmTblXtnAtrXtnAtrMDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "String", "getStandardInstitution()", "throws", "BizApplicationException", "{", "String", "instCd", "=", "_getCmnContextCore().getInstCode();", "return", "getInstitutionParameterValue(instCd,", "InstParamEnum.STANDARD_INSTITUTION_CODE.getValue());", "}"], "docstring_tokens": ["Query", "standard", "institution", "code", "of", "institution", "value", "of", "standard", "institution", "code."]}
{"code_tokens": ["public", "CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut", "getExtendAttributeExtendAttributeDetail(", "CaTblMgmtSvcGetTblXtnAtrbtIn", "input)", "throws", "BizApplicationException", "{", "CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut", "output", "=", "new", "CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut();", "List<CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl>", "xtnAtrbtXtnAtrbtDtls", "=", "new", "ArrayList<CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl>();", "//", "\ud655\uc7a5\uc18d\uc131\ud655\uc7a5\uc18d\uc131\uba85", "\ubaa9\ub85d", "String[]", "xtnAtrbtXtnAtrbtNms", "=", "CCM01.XTN_ATRBT_XTN_ATRBT_NM_ARR;", "CaTblXtnAtrXtnAtrOut", "tblXtnAtrXtnAtrOut", "=", "_getTblXtnAtrbt()", ".getExtendAttributeExtendAttributeDetail(input.getInstCd(),", "input.getTblNm(),", "input.getAtrbtNm());", "output.setAtrbtVldtnRuleCntnt(tblXtnAtrXtnAtrOut.getAtrbtVldtnRuleCntnt());", "output.setAtrbtVldtnWayCd(tblXtnAtrXtnAtrOut.getAtrbtVldtnWayCd());", "output.setAtrbtVldtnXtnRuleCntnt(tblXtnAtrXtnAtrOut.getAtrbtVldtnXtnRuleCntnt());", "output.setStdAtrbtVldtnUseYn(tblXtnAtrXtnAtrOut.getStdAtrbtVldtnUseYn());", "output.setInstIndvDfntnMndtryYn(tblXtnAtrXtnAtrOut.getInstIndvDfntnMndtryYn());", "output.setRmkCntnt(tblXtnAtrXtnAtrOut.getRmkCntnt());", "output.setXtnAtrbtVrtnCmpsCd(tblXtnAtrXtnAtrOut.getXtnAtrbtVrtnCmpsCd());", "//", "2020-02-15", "Activity", "#16838", "Kiwi", "\ud655\uc7a5\uc18d\uc131\uace0\ub3c4\ud654", "output.setXtnAtrbtMgmtWayCd(tblXtnAtrXtnAtrOut.getXtnAtrbtMgmtWayCd());", "List<CaTblXtnAtrXtnAtrDtlOut>", "tblXtnAtrXtnAtrDtlOuts", "=", "tblXtnAtrXtnAtrOut.getDtlList();", "String", "checkKey", "=", "\"\";", "CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl", "xtnAtrbtXtnAtrbtDtl", "=", "new", "CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl();", "for", "(CaTblXtnAtrXtnAtrDtlOut", "tblXtnAtrXtnAtrDtlOut", ":", "tblXtnAtrXtnAtrDtlOuts)", "{", "String", "key", "=", "tblXtnAtrXtnAtrDtlOut.getInstCd().concat(tblXtnAtrXtnAtrDtlOut.getTblNm())", ".concat(tblXtnAtrXtnAtrDtlOut.getXtnAtrbtNm()).concat(tblXtnAtrXtnAtrDtlOut.getJsonKeyValCntnt());", "if", "(!checkKey.equals(key))", "{", "xtnAtrbtXtnAtrbtDtl", "=", "new", "CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl();", "}", "xtnAtrbtXtnAtrbtDtl.setXtnAtrbtVrtnCmpsCd(tblXtnAtrXtnAtrOut.getXtnAtrbtVrtnCmpsCd());", "xtnAtrbtXtnAtrbtDtl.setInstCd(tblXtnAtrXtnAtrDtlOut.getInstCd());", "xtnAtrbtXtnAtrbtDtl.setTblNm(tblXtnAtrXtnAtrDtlOut.getTblNm());", "xtnAtrbtXtnAtrbtDtl.setXtnAtrbtNm(tblXtnAtrXtnAtrDtlOut.getXtnAtrbtNm());", "xtnAtrbtXtnAtrbtDtl.setJsonKeyValCntnt(tblXtnAtrXtnAtrDtlOut.getJsonKeyValCntnt());", "for", "(int", "i", "=", "0;", "i", "<", "xtnAtrbtXtnAtrbtNms.length;", "i++)", "{", "if", "(xtnAtrbtXtnAtrbtNms[i].equals(tblXtnAtrXtnAtrDtlOut.getXtnAtrbtXtnAtrbtNm()))", "{", "xtnAtrbtXtnAtrbtDtl.set(xtnAtrbtXtnAtrbtNms[i],", "tblXtnAtrXtnAtrDtlOut.getXtnAtrbtCntnt());", "break;", "}", "}", "if", "(!checkKey.equals(key))", "{", "checkKey", "=", "key;", "xtnAtrbtXtnAtrbtDtls.add(xtnAtrbtXtnAtrbtDtl);", "}", "}", "output.setXtnAtrbtXtnAtrbtDtlList(xtnAtrbtXtnAtrbtDtls);", "return", "output;", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "extend", "attribute", "list.", "table", "extend", "attribute", "extend", "attribute", "meaning", "the", "actual", "value", "of", "the", "item", "defined", "in", "the", "table", "extend", "attribute", "validation", "composition"]}
{"code_tokens": ["public", "IpctMgmtSvcGetIpctTxList", "clone(){", "try{", "IpctMgmtSvcGetIpctTxList", "object=", "(IpctMgmtSvcGetIpctTxList)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "check(String", "vldnTrgt)", "throws", "BizApplicationException", "{", "if", "(_getArrCustMngr().getMembershipArr(vldnTrgt)", "==", "null)", "//The", "membership", "arrangement", "dose", "not", "exist,", "Please", "open", "membership", "arrangement", "first", "//\uba64\ubc84\uc27d\uacc4\uc57d\uc774", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\uba64\ubc84\uc27d\uacc4\uc57d\uc744", "\uba3c\uc800", "\uac1c\uc124", "\ud558\uc138\uc694", "throw", "new", "BizApplicationException(\"AAPARE0350\",", "null);", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Simple", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "ArrTxCore", "arrTx)throws", "BizApplicationException{", "_getArrTxSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,(ArrTxImpl)arrTx);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "String", "getCndGrpTmpltCd(){", "return", "cndGrpTmpltCd;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "group", "template", "code."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ArrIssmdaImpl", "arrIssmdaImpl)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "IValueObject", "subInfo", "=", "getSubInfoCache(arrIssmdaImpl);", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "subsidiary", "information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["protected", "BigDecimal", "getRngVal()", "throws", "BizApplicationException", "{", "return", "rngVal;", "}"], "docstring_tokens": ["A", "method", "that", "compares", "the", "value", "of", "a", "condition", "class", "to", "the", "value", "of", "a", "range", "condition."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "IValueObject", "subInfo", "=", "_getSubInfoCache(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "Object", "xtnAtrbtCntnt", "=", "subInfo.get(xtnAtrbtNm);", "if", "(xtnAtrbtCntnt", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(xtnAtrbtCntnt);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal."]}
{"code_tokens": ["public", "void", "saveSubInfo(AtPrtnrSIO", "subInfoIO,", "PrtnrImpl", "prtnrImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtPrtnrSIO", "oldSubInfoIO", "=", "getSubInfoCache(prtnrImpl);", "if", "(oldSubInfoIO", "==", "null)", "{", "//", "PK", "setting", "subInfoIO.setPrtnrId(prtnrImpl.getPrtnrId());", "//", "insert", "_getAtPrtnrSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoIO,", "oldSubInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(prtnrImpl,", "oldSubInfoIO);", "//", "PK", "setting", "subInfoIO.setPrtnrId(prtnrImpl.getPrtnrId());", "//", "update", "_getAtPrtnrSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "prtnrImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "String", "getIntRtStructureStsCd()", "{", "return", "intRtStructureStsCd;", "}"], "docstring_tokens": ["This", "method", "inquire", "interest", "rate", "structure", "status", "code"]}
{"code_tokens": ["public", "DpstMMFSvcOut", "clone(){", "try{", "DpstMMFSvcOut", "object=", "(DpstMMFSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if", "(!this.getArrangementCore().isReal())", "return;", "Arr", "arr", "=", "(Arr)this.getArrangementCore();", "switch", "(arrSrvcTpCd)", "{", "case", "\"TermExtension\":", "_checkInput(arrSrvcTpCd,arrCndActionRequiredValue);", "_doTermExtension(arr,", "arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "void", "undo(ArrTx", "arrTx)", "throws", "BizApplicationException", "{", "if(", "logger.isDebugEnabled()", ")", "{", "logger.debug(\"HHH", "undo", "ArrId:{}\",", "arrTx.getArrId());", "logger.debug(\"HHH", "undo", "txDt:{}\",", "arrTx.getTxDt());", "logger.debug(\"HHH", "undo", "txSeqNbr:{}\",", "arrTx.getTxSeqNbr());", "}", "/**", "*", "1.", "StUnrpdArrCashFlowH", "SELECT", "*/", "StUnrpdArrCashFlowHIO", "stUnrpdArrCashFlowHIn", "=", "new", "StUnrpdArrCashFlowHIO();", "stUnrpdArrCashFlowHIn.setInstCd(_getCmnContext().getInstCode());", "stUnrpdArrCashFlowHIn.setArrId(arrTx.getArrId());", "//", "Arrangement", "identification", "stUnrpdArrCashFlowHIn.setTxDt(arrTx.getTxDt());", "//", "Tran", "Date", "stUnrpdArrCashFlowHIn.setTxSeqNbr(arrTx.getTxSeqNbr());", "//", "Tran", "Sequence", "number", "List<StUnrpdArrCashFlowHIO>", "unrpdArrCashFlowHList", "=", "_getStUnrpdArrCashFlowHDso().selectList(stUnrpdArrCashFlowHIn);", "/**", "*", "2.", "StUnrpdArrCashFlowD", "List", "set", "*/", "if(", "unrpdArrCashFlowHList", "!=", "null", "){", "/**", "*", "2.1.", "StUnrpdArrCashFlowD", "Delete", "*/", "_removeUnrepaidArrCashFlow(arrTx.getInstCd(),", "arrTx.getArrId());", "/**", "*", "2.2.", "StUnrpdArrCashFlowD", "Insert", "*/", "for(", "StUnrpdArrCashFlowHIO", "hio", ":", "unrpdArrCashFlowHList", "){", "_getStUnrpdArrCashFlowDDso().insert(_convertStUnrpdArrCashFlowHIOToDIO(hio));", "}", "}", "}"], "docstring_tokens": ["Restores", "the", "repayment", "schedule", "when", "the", "transaction", "is", "cancelled."]}
{"code_tokens": ["public", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrIssmdaTmpltMgmtSvcGetTmpltDtl>", "getChildren(){", "return", "children;", "}"], "docstring_tokens": ["Inquire", "children", "arrangement", "structure", "including", "mandatory", "and", "optional."]}
{"code_tokens": ["public", "boolean", "hasArrLevelCndVal()", "{", "return", "hasArrLevelCndVal;", "}"], "docstring_tokens": ["Inquire", "boolean", "whether", "arrangement", "condition", "has", "valid", "value."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "staffXtnInfoHash,", "StaffCore", "staffCore)", "throws", "BizApplicationException", "{", "_getStaffSubInfoBiz().saveMapSubInfo(staffXtnInfoHash,", "(StaffImpl)", "staffCore);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "subInfoMap"]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbCnstncyArArrIssmdaPsbkMsgRDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut", "clone(){", "try{", "DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut", "object=", "(DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "modifyArrMaturityDate(String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "if(!this.getCndCd().equals(PdCndEnum.CONTRACT_TERM.getValue())){", "return;", "}", "if(StringUtils.isEmpty(this.getArrangementCore().getArrOpnDt())){", "return", ";", "}", "if(this.getRngVal()", "==", "null){", "return", ";", "}", "ArrReal", "arrReal", "=", "(ArrReal)this.getArrangementCore();", "if(", "arrReal.isArrKindModification()", ")", "{", "return;", "}", "String", "arrMtrtyDt", "=", "this.calculateMaturityDate();", "//\uc0b0\ucd9c\ud55c", "\ub9cc\uae30\uc77c\uc774", "\uae30\uc874", "\ub9cc\uae30\uc77c\uacfc", "\ub3d9\uc77c\ud558\uba74", "\ub9ac\ud134", "if(!StringUtils.isEmpty(this.getArrangementCore().getArrMtrtyDt())){", "if(arrMtrtyDt.equals(this.getArrangementCore().getArrMtrtyDt())){", "if(logger.isDebugEnabled()){", "logger.debug(\"the", "mtrtyDt", "is", "same", "with", "before", "change\");", "}", "return", ";", "}", "}", "((ArrImpl)this.getArrangementCore()).modifyArrMaturityDate(arrMtrtyDt,txDt,txSeqNbr);", "}"], "docstring_tokens": ["Change", "maturity", "date", "of", "standing", "order."]}
{"code_tokens": ["public", "SpnsAcctQrySvcListOut", "clone(){", "try{", "SpnsAcctQrySvcListOut", "object=", "(SpnsAcctQrySvcListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.suspenseaccounts.service.dto.SpnsAcctQrySvcOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.suspenseaccounts.service.dto.SpnsAcctQrySvcOut>(tblNm.size());", "for(", "bankware.corebanking.accounting.suspenseaccounts.service.dto.SpnsAcctQrySvcOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.suspenseaccounts.service.dto.SpnsAcctQrySvcOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<PdAdtlInfoOut>", "getAdtnlInfo(String", "adtnlInfoCd)", "throws", "BizApplicationException", "{", "//", "\uc0c1\ud488\ubd80\uac00\uc815\ubcf4\uc720\ud615\ucf54\ub4dc\ub9cc", "\uc785\ub825\ub41c\uacbd\uc6b0", "\uc0c1\ud488\uc870\ud68c\uc2dc", "\uc785\ub825\ub41c", "\uc801\uc6a9\uc77c\uc790\ub97c", "\uae30\uc900\uc73c\ub85c", "\uc870\ud68c\ud568", "//", "if", "the", "apply", "date", "was", "not", "inputed,", "use", "the", "product", "input", "date", "to", "//", "inquiry", "relation", "information", "PdAdtlInfoIn", "in", "=", "new", "PdAdtlInfoIn();", "in.setAdtnlInfoCd(adtnlInfoCd);", "in.setAplyDt(aplyDt);", "in.setAplyTm(aplyTm);", "//", "Return", "output", "return", "getAdtnlInfo(in);", "}"], "docstring_tokens": ["This", "Method", "inquire", "additional", "information", "related", "to", "point.", "if", "there", "is", "no", "additional", "information", "code,", "all", "additional", "information", "inquire"]}
{"code_tokens": ["public", "TxQrySvcGetXtnListOut", "clone(){", "try{", "TxQrySvcGetXtnListOut", "object=", "(TxQrySvcGetXtnListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.TxQrySvcGetXtnOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.TxQrySvcGetXtnOut>(tblNm.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.TxQrySvcGetXtnOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.TxQrySvcGetXtnOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaCmnCdSvcGetCdListByCdNbrDtlOut", "clone(){", "try{", "CaCmnCdSvcGetCdListByCdNbrDtlOut", "object=", "(CaCmnCdSvcGetCdListByCdNbrDtlOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(AtrlCore", "AtrlCore,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getAtrlSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AtrlImpl)", "AtrlCore);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "asset."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "custId,", "ArrCustRelEnum", "arrCustRelEnum,", "String", "pdCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId,", "arrCustRelEnum,", "null,", "null,", "null,", "pdCd,", "curArrSts,", "arrSts,", "inqryStartDt,", "inqryEndDt);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "Current", "Status", "/", "Base", "Status", "/", "Inquiry", "Period(Start", "Date", "/", "End", "Date)", "Approved", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "approved", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Active", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "activated", "within", "1/1", "~", "3/1", "and", "still", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired."]}
{"code_tokens": ["public", "String", "getCndStsCd()", "{", "if", "(pdPdCndM", "==", "null)", "{", "return", "null;", "}", "return", "pdPdCndM.getCndStsCd();", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "status", "code."]}
{"code_tokens": ["public", "List<StlmntDtlIO>", "calculate(ArrReal", "arr,", "BigDecimal", "applyIntRt,", "String", "toDt,", "Map<String,", "String>", "xtdInfo)", "throws", "BizApplicationException", "{", "//String", "frDt", "=", "_getExistingValue(arr.getExtendAttributeByStr(ArrXtnInfoCoreEnum.LAST_INT_CAL_DT.getValue()),", "arr.getArrOpnDt());", "String", "frDt", "=", "_getExistingValue(arr.getArrXtnInfo(ArrXtnInfoEnum.LAST_INT_CAL_DT),", "arr.getArrOpnDt());", "IntCalculatorIO", "intCalculatorIO", "=", "_makeCommonInfoForCalculation(arr,", "arr.getCrncyCd(),", "InterestTransactionTypeEnum.PROVISIONAL_SETTLEMENT.getValue(),", "frDt,", "toDt,", "xtdInfo);", "/*", "*", "Make", "the", "target", "list", "of", "interest", "calculation", "*/", "List<StlmntCalcnDtlIO>", "stlmntCalcnDList", "=", "_makeDemandDepositStlmnt(intCalculatorIO,", "applyIntRt);", "/*", "*", "Calculate", "interest", "by", "accumulated", "amount", "*/", "_calculateIntByAcmltd(intCalculatorIO.getArr(),", "intCalculatorIO.getCrncyCd(),", "stlmntCalcnDList);", "/*", "*", "Make", "the", "list", "of", "settlement", "result", "and", "return", "it", "*/", "return", "_makeInterestSettlementInformation(intCalculatorIO,", "stlmntCalcnDList,", "CalcnBaseAmtTpEnum.ACMLTD_AMT.getValue(),", "null);", "}"], "docstring_tokens": ["This", "method", "calculates", "the", "interest", "of", "account", "accordance", "with", "type", "of", "interest", "transaction.", "It", "must", "be", "performed", "after", "executing", "normally", "the", "createCalculator", "method."]}
{"code_tokens": ["public", "Map<AprslRqstXtnInfoEnum,", "String>", "getMapAprslRqstXtnInfo()", "throws", "BizApplicationException", "{", "Map<AprslRqstXtnInfoEnum,", "String>", "xtnInfoHash", "=", "new", "HashMap<AprslRqstXtnInfoEnum,", "String>();", "//", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "Map<String,", "String>", "xtnInfoStrMap", "=", "super.getMapAprslRqstXtnInfoAsStrByEav();", "for(Entry<String,", "String>", "entry", ":", "xtnInfoStrMap.entrySet()){", "xtnInfoHash.put(AprslRqstXtnInfoEnum.getEnum(entry.getKey()),", "entry.getValue());", "}", "//", "\ubcf4\uc870\uba85\uc138", "Map<String,", "String>", "subInfoMap", "=", "_getAprslRqstSubInfoBiz().getMapSubInfo(this);", "for(Entry<String,", "String>", "entry", ":", "subInfoMap.entrySet()){", "xtnInfoHash.put(AprslRqstXtnInfoEnum.getEnum(entry.getKey()),", "entry.getValue());", "}", "return", "xtnInfoHash;", "}"], "docstring_tokens": ["Inquire", "all", "extended", "information", "of", "the", "appraisal", "request", "as", "a", "map."]}
{"code_tokens": ["public", "String", "getTransferLanguage(String", "trnsfrKnd,", "String", "trnsfrKeyVal,", "String", "lngCd)", "throws", "BizApplicationException", "{", "if(StringCoreUtils.isEmpty(trnsfrKnd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@trnsfrKnd\"", "});", "}", "if(StringCoreUtils.isEmpty(trnsfrKeyVal))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@trnsfrKeyVal\"", "});", "}", "if(StringCoreUtils.isEmpty(lngCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@lngCd\"", "});", "}", "return", "_getCmMltLngTrnsltnDDso().getTransferLanguage(trnsfrKnd,", "trnsfrKeyVal,", "lngCd);", "}"], "docstring_tokens": ["Offering", "terminology", "that", "fit", "with", "the", "language", "code."]}
{"code_tokens": ["static", "Object", "getBean(String", "arg0,", "Object...", "arg1)", "throws", "NestedRuntimeException", "{", "return", "LApplicationContext.getCurrentApplicationContext().getBean(arg0,", "arg1);", "}"], "docstring_tokens": ["get", "bean"]}
{"code_tokens": ["public", "CnsltnSrchSvcIn", "clone(){", "try{", "CnsltnSrchSvcIn", "object=", "(CnsltnSrchSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DateMngrCalDayHmsOut", "calculateDateByDayHourMinuteSecond(String", "startTmstmp,", "String", "endTmstmp)", "throws", "BizApplicationException", "{", "if", "(!DateCoreUtils.isValidDate(startTmstmp,", "DATE_FORMAT_YYYYMMDD.concat(TIME_FORMAT_HHMMSS)))", "{", "throw", "new", "BizApplicationException(\"AAPCME0001\",", "new", "Object[]", "{", "startTmstmp,", "\"\"", "});", "}", "if", "(!DateCoreUtils.isValidDate(endTmstmp,", "DATE_FORMAT_YYYYMMDD.concat(TIME_FORMAT_HHMMSS)))", "{", "throw", "new", "BizApplicationException(\"AAPCME0001\",", "new", "Object[]", "{", "endTmstmp,", "\"\"", "});", "}", "return", "_calculateDateByDayHourMinuteSecond(startTmstmp,", "endTmstmp);", "}"], "docstring_tokens": ["It", "calculates", "the", "remaining", "period", "from", "the", "current", "day", "to", "the", "specific", "end", "date", "(hour,", "minute,", "second).", "End", "date", "must", "be", "greater", "than", "current", "time."]}
{"code_tokens": ["public", "List<RefAtrbtIO>", "getListReferenceAttribute(RefAtrbtIO", "in)", "throws", "BizApplicationException", "{", "List<RefAtrbtIO>", "out", "=", "new", "ArrayList<RefAtrbtIO>();", "CmRefAtrbtMIO", "inDao", "=", "new", "CmRefAtrbtMIO();", "inDao.setRefObjCd(in.getRefObjCd());", "inDao.setRefAtrbtNm(in.getRefAtrbtNm());", "inDao.setRefAtrbtDescCntnt(in.getRefAtrbtDescCntnt());", "List<CmRefAtrbtMIO>", "outDaoList", "=", "_getCmRefAtrbtMDso().selectList(inDao);", "for(CmRefAtrbtMIO", "outDao", ":", "outDaoList)", "{", "RefAtrbtIO", "sub", "=", "new", "RefAtrbtIO();", "sub.setRefObjCd(outDao.getRefObjCd());", "sub.setRefAtrbtNm(outDao.getRefAtrbtNm());", "sub.setRefAtrbtDescCntnt(outDao.getRefAtrbtDescCntnt());", "out.add(sub);", "}", "return", "out;", "}"], "docstring_tokens": ["Inquiry", "reference", "object", "list."]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbCnstncyArArrExtrnlIdSrvcRDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "String", "getJointNetworkClCode()", "throws", "BizApplicationException", "{", "return", "_getContextHeader().getJointNetworkClCd();", "}"], "docstring_tokens": ["joint", "network", "classification", "code", "inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "ArrIssmdaCore", "arrIssmda,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getArrIssmdaSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(ArrIssmdaImpl)", "arrIssmda,", "txDt,", "txSeqNbr);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "xtnAtrbtNm", "and", "xtnAtrbtCntnt"]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "logger.debug(\"======", "Do", "Service", "Action", "Test", "======\");", "switch", "(arrSrvcTpCd)", "{", "case", "\"IntraRealTmTrnsfr\":", "case", "\"InterRealTmTrnsfrOut\":", "_doMoneyTransferAction(arrSrvcTpCd,arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["This", "function", "execute", "the", "extended", "attribute", "business", "rules", "that", "registered", "in", "the", "Contract", "Services", "Processing", "Rules."]}
{"code_tokens": ["public", "List<StArrDailyBalHIO>", "selectList(StArrDailyBalHIO", "a,", "String", "startDt,", "String", "endDt)", "{", "return", "_getStArrDailyBalH().selectList(a,", "startDt,", "endDt);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AprslRqstCore", "aprslRqstCore)", "throws", "BizApplicationException", "{", "return", "_getAprslRqstSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AprslRqstImpl)aprslRqstCore);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "asset."]}
{"code_tokens": ["public", "AssetPrsntStsRprtInqrySvcOut", "clone(){", "try{", "AssetPrsntStsRprtInqrySvcOut", "object=", "(AssetPrsntStsRprtInqrySvcOut)super.clone();", "if", "(", "this.assetRprtList==", "null", ")", "object.assetRprtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.collateral.query.service.dto.AssetRprtList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.AssetRprtList>(assetRprtList.size());", "for(", "bankware.corebanking.collateral.query.service.dto.AssetRprtList", "item", ":", "assetRprtList", "){", "clonedList.add(", "(bankware.corebanking.collateral.query.service.dto.AssetRprtList)item.clone());", "}", "object.assetRprtList", "=", "clonedList;", "}", "if", "(", "this.lnRprtList==", "null", ")", "object.lnRprtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.collateral.query.service.dto.LnRprtList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.LnRprtList>(lnRprtList.size());", "for(", "bankware.corebanking.collateral.query.service.dto.LnRprtList", "item", ":", "lnRprtList", "){", "clonedList.add(", "(bankware.corebanking.collateral.query.service.dto.LnRprtList)item.clone());", "}", "object.lnRprtList", "=", "clonedList;", "}", "if", "(", "this.grntRprtList==", "null", ")", "object.grntRprtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.collateral.query.service.dto.GrntRprtList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.GrntRprtList>(grntRprtList.size());", "for(", "bankware.corebanking.collateral.query.service.dto.GrntRprtList", "item", ":", "grntRprtList", "){", "clonedList.add(", "(bankware.corebanking.collateral.query.service.dto.GrntRprtList)item.clone());", "}", "object.grntRprtList", "=", "clonedList;", "}", "if", "(", "this.wrntRprtList==", "null", ")", "object.wrntRprtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.collateral.query.service.dto.WrntRprtList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.WrntRprtList>(wrntRprtList.size());", "for(", "bankware.corebanking.collateral.query.service.dto.WrntRprtList", "item", ":", "wrntRprtList", "){", "clonedList.add(", "(bankware.corebanking.collateral.query.service.dto.WrntRprtList)item.clone());", "}", "object.wrntRprtList", "=", "clonedList;", "}", "if", "(", "this.insrncRprtList==", "null", ")", "object.insrncRprtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.collateral.query.service.dto.InsrncRprtList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.InsrncRprtList>(insrncRprtList.size());", "for(", "bankware.corebanking.collateral.query.service.dto.InsrncRprtList", "item", ":", "insrncRprtList", "){", "clonedList.add(", "(bankware.corebanking.collateral.query.service.dto.InsrncRprtList)item.clone());", "}", "object.insrncRprtList", "=", "clonedList;", "}", "if", "(", "this.dstrbtRprtList==", "null", ")", "object.dstrbtRprtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.collateral.query.service.dto.DstrbtRprtList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.collateral.query.service.dto.DstrbtRprtList>(dstrbtRprtList.size());", "for(", "bankware.corebanking.collateral.query.service.dto.DstrbtRprtList", "item", ":", "dstrbtRprtList", "){", "clonedList.add(", "(bankware.corebanking.collateral.query.service.dto.DstrbtRprtList)item.clone());", "}", "object.dstrbtRprtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "modifyArrRelationRule(CaArrRelRuleIO", "arrRelRule)", "throws", "BizApplicationException", "{", "_checkInput(arrRelRule);", "_checkInputValidationForPortal(arrRelRule);", "CaArArrRelRuleMIO", "arArrRelRuleMIO", "=", "new", "CaArArrRelRuleMIO();", "arArrRelRuleMIO.setInstCd(arrRelRule.getInstCd());", "arArrRelRuleMIO.setBizDscd(arrRelRule.getBizDscd());", "arArrRelRuleMIO.setPdTpCd(arrRelRule.getPdTpCd());", "arArrRelRuleMIO.setPdTmpltCd(arrRelRule.getPdTmpltCd());", "arArrRelRuleMIO.setPdCd(arrRelRule.getPdCd());", "arArrRelRuleMIO.setArrStsCd(arrRelRule.getArrStsCd());", "arArrRelRuleMIO.setArrRelKndCd(arrRelRule.getArrRelKndCd());", "arArrRelRuleMIO.setArrRelCd(arrRelRule.getArrRelCd());", "arArrRelRuleMIO.setRelMndtryYn(CCM01.YES.equals(arrRelRule.getRelMndtryYn())", "?", "CCM01.YES", ":", "CCM01.NO);", "arArrRelRuleMIO.setRelPlrlYn(CCM01.YES.equals(arrRelRule.getRelPlrlYn())", "?", "CCM01.YES", ":", "CCM01.NO);", "arArrRelRuleMIO.setScrnInpYn(CCM01.YES.equals(arrRelRule.getScrnInpYn())", "?", "CCM01.YES", ":", "CCM01.NO);", "_getCaCmnContext().setHeaderColumn(arArrRelRuleMIO);", "_getArArrRelRuleMDso().update(arArrRelRuleMIO);", "}"], "docstring_tokens": ["Change", "arrangement", "relation", "rule."]}
{"code_tokens": ["public", "java.util.List<bankware.corebanking.configurationadmin.accounting.service.dto.CaCoaMgmtSvcGetCoaXtnInfoIO>", "getXtnInfo(){", "return", "xtnInfo;", "}"], "docstring_tokens": ["Inquire", "the", "extended", "attribute", "information", "that", "matches", "the", "input", "attribute", "name.", "If", "the", "matching", "extended", "attribute", "information", "doesn't", "exist,", "it", "returns", "null."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ArrIssmdaImpl", "arrIssmdaImpl)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "IValueObject", "subInfo", "=", "getSubInfoCache(arrIssmdaImpl);", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "preferential", "claim", "as", "a", "map."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "InsrncCore", "insrncCore,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getInsrncSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "(InsrncImpl)", "insrncCore);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "DpstArrOpnSvcArrIntRtOut", "clone(){", "try{", "DpstArrOpnSvcArrIntRtOut", "object=", "(DpstArrOpnSvcArrIntRtOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "InsrncImpl", "insrncImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\ud5d8", "\uac1d\uccb4\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AsInsrncSIO", "insrncSubInfo", "=", "getSubInfoCache(insrncImpl);", "//", "2.", "\ubcf4\ud5d8\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(insrncSubInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\ud5d8\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "insrncSubInfo.get(atrbtNm);", "//", "\uc18d\uc131\uac12\uc774", "null\uc778\uacbd\uc6b0", "null\ub9ac\ud134", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal", "thing."]}
{"code_tokens": ["public", "List<CaCmnCdCheckOut>", "getListCode(String", "cdNbr)", "throws", "BizApplicationException", "{", "//", "Check", "the", "code", "number", "_checkCodeNumber(cdNbr);", "List<CaCmnCdCheckOut>", "out", "=", "new", "ArrayList<CaCmnCdCheckOut>();", "//", "Get", "the", "code", "master", "information", "CaCdNbrInfoIO", "cdMstOut", "=", "_getCodeMasterInformation(cdNbr);", "//", "Get", "the", "code", "detail", "information", "List<CaCdDtlIO>", "cdDtlOutList", "=", "_getCdDtl().getCodeDetail(cdMstOut);", "for", "(CaCdDtlIO", "cdDtlIO", ":", "cdDtlOutList)", "{", "CaCmnCdCheckOut", "cmnCdCheckOut", "=", "_setCodeCheckOut(cdDtlIO,", "cdMstOut.getCdNbrTpCd());", "out.add(cmnCdCheckOut);", "}", "return", "out;", "}"], "docstring_tokens": ["Make", "the", "combo-box", "of", "Code", "that", "meet", "the", "search", "condition.", "Combo-box", "is", "consisted", "of", "CaCmnCdCheckOut.", "(cdNbr,", "cd,", "cdNm,", "delYn,", "cdAbrvtnNm)"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(CupldBizDscdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "AprslBsicInfoIO", "getBasicInfo()", "throws", "BizApplicationException", "{", "if(aprslBasicCache", "==", "null)", "{", "return", "null;", "}", "AprslBsicInfoIO", "aprslBsicInfoIO", "=", "new", "AprslBsicInfoIO();", "DtoCoreUtils.setSubInfoIO(aprslBasicCache,", "aprslBsicInfoIO);", "return", "aprslBsicInfoIO;", "}"], "docstring_tokens": ["It", "inquires", "basic", "information", "of", "insurance."]}
{"code_tokens": ["public", "CaXpExtrnlIntrfcMsgCdMappingDIO", "select(CaXpExtrnlIntrfcMsgCdMappingDIO", "xpExtrnlIntrfcMsgCdMappingDIO)", "{", "return", "_getXpExtrnlCdMappingD().select(xpExtrnlIntrfcMsgCdMappingDIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "CustRprsnChngSvcTelNbrIn", "clone(){", "try{", "CustRprsnChngSvcTelNbrIn", "object=", "(CustRprsnChngSvcTelNbrIn)super.clone();", "if", "(", "this.ctcptXtnInfoList==", "null", ")", "object.ctcptXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn>(ctcptXtnInfoList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn", "item", ":", "ctcptXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn)item.clone());", "}", "object.ctcptXtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "checkCode(CaCdNbrInfoIO", "in,", "String", "cd)", "throws", "BizApplicationException", "{", "CaCmCdInstDIO", "daoIn", "=", "new", "CaCmCdInstDIO();", "daoIn.setInstCd(in.getInstCd());", "daoIn.setCdNbr(in.getCdNbr());", "daoIn.setCd(cd);", "daoIn.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue());", "List<CaCmCdInstDIO>", "daoOutList", "=", "_getCmCdInstDDso().selectListByCondition(daoIn);", "if(daoOutList", "==", "null", "||", "daoOutList.isEmpty())", "{", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value", "by", "cdDtlIO", "DTO.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(FeeRateAmountDscdCoreEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(TaxUnchrgdRsnCdEnum", "enumObject:", "values())", "{", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "PdCndQuerySvcGetFeeDiscountOut", "clone(){", "try{", "PdCndQuerySvcGetFeeDiscountOut", "object=", "(PdCndQuerySvcGetFeeDiscountOut)super.clone();", "if", "(", "this.baseInfo==null", ")", "object.baseInfo", "=", "null;", "else", "object.baseInfo", "=", "(bankware.corebanking.product.service.dto.PdCndQuerySvcGetFeeDiscountBaseInfoOut)this.baseInfo.clone();", "if", "(", "this.provideCnd==", "null", ")", "object.provideCnd", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailProvideCndOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailProvideCndOut>(provideCnd.size());", "for(", "bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailProvideCndOut", "item", ":", "provideCnd", "){", "clonedList.add(", "(bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailProvideCndOut)item.clone());", "}", "object.provideCnd", "=", "clonedList;", "}", "if", "(", "this.aplyRule==null", ")", "object.aplyRule", "=", "null;", "else", "object.aplyRule", "=", "(bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailAplyRuleOut)this.aplyRule.clone();", "if", "(", "this.limitCnd==", "null", ")", "object.limitCnd", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdCndQuerySvcGetFeeDiscountLimitCndOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdCndQuerySvcGetFeeDiscountLimitCndOut>(limitCnd.size());", "for(", "bankware.corebanking.product.service.dto.PdCndQuerySvcGetFeeDiscountLimitCndOut", "item", ":", "limitCnd", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdCndQuerySvcGetFeeDiscountLimitCndOut)item.clone());", "}", "object.limitCnd", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaExtrnlIntrfcMsgHdrInfoMgmtOut", "select(CaExtrnlIntrfcMsgHdrInfoMgmtIn", "in)", "{", "CaXpExtrnlIntrfcMsgHdrInfoDIO", "xpExtrnlIntrfcMsgHdrInfoDIO", "=", "new", "CaXpExtrnlIntrfcMsgHdrInfoDIO();", "CaExtrnlIntrfcMsgHdrInfoMgmtOut", "out", "=", "new", "CaExtrnlIntrfcMsgHdrInfoMgmtOut();", "//", "Generated", "by", "code", "generator", "[[", "xpExtrnlIntrfcMsgHdrInfoDIO.setInstCd(in.getInstCd());//", "set", "[\uae30\uad00\ucf54\ub4dc]", "xpExtrnlIntrfcMsgHdrInfoDIO.setExtrnlInstCd(in.getExtrnlInstCd());//", "set", "[\ub300\uc678\uae30\uad00\ucf54\ub4dc]", "xpExtrnlIntrfcMsgHdrInfoDIO.setExtrnlInstTxDscd(in.getExtrnlInstTxDscd());//", "set", "[\ub300\uc678\uae30\uad00\uac70\ub798\uad6c\ubd84\ucf54\ub4dc]", "xpExtrnlIntrfcMsgHdrInfoDIO.setHdrAtrbtNm(in.getHdrAtrbtNm());//", "set", "[\ud5e4\ub354\uc18d\uc131\uba85]", "//", "Generated", "by", "code", "generator", "]]", "xpExtrnlIntrfcMsgHdrInfoDIO", "=", "_getXpExtrnlHdrInfoDDso().select(xpExtrnlIntrfcMsgHdrInfoDIO);", "if", "(xpExtrnlIntrfcMsgHdrInfoDIO", "!=", "null)", "{", "//", "Generated", "by", "code", "generator", "[[", "out.setInstCd(xpExtrnlIntrfcMsgHdrInfoDIO.getInstCd());//", "set", "[\uae30\uad00\ucf54\ub4dc]", "out.setExtrnlInstCd(xpExtrnlIntrfcMsgHdrInfoDIO.getExtrnlInstCd());//", "set", "[\ub300\uc678\uae30\uad00\ucf54\ub4dc]", "out.setExtrnlInstTxDscd(xpExtrnlIntrfcMsgHdrInfoDIO.getExtrnlInstTxDscd());//", "set", "[\ub300\uc678\uae30\uad00\uac70\ub798\uad6c\ubd84\ucf54\ub4dc]", "out.setHdrAtrbtNm(xpExtrnlIntrfcMsgHdrInfoDIO.getHdrAtrbtNm());//", "set", "[\ud5e4\ub354\uc18d\uc131\uba85]", "out.setHdrAtrbtVal(xpExtrnlIntrfcMsgHdrInfoDIO.getHdrAtrbtVal());//", "set", "[\ud5e4\ub354\uc18d\uc131\uac12]", "out.setHdrAtrbtSettingDscd(xpExtrnlIntrfcMsgHdrInfoDIO.getHdrAtrbtSettingDscd());//", "set", "[\ud5e4\ub354\uc18d\uc131\uc124\uc815\uad6c\ubd84\ucf54\ub4dc]", "//out.setEncdngMthdDscd(xpExtrnlIntrfcMsgHdrInfoDIO.getEncdngMthdDscd());//", "set", "[\uc778\ucf54\ub529\ubc29\uc2dd\uad6c\ubd84\ucf54\ub4dc]", "//out.setAtrbtSeqNbr(xpExtrnlIntrfcMsgHdrInfoDIO.getAtrbtSeqNbr());", "//", "Generated", "by", "code", "generator", "]]", "}", "return", "out;", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(ActorImpl", "actorImpl,", "String", "dueDlgncDscd,", "Integer", "dueDlgncSeqNbr,", "Map<String,", "String>", "subInfoMap)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(subInfoMap", "==", "null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ActorDueDlgncSubInfoKndEnum", "subInfoKnd", "=", "actorImpl.getDueDlgncSubInfoKnd();", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "//", "**", "\ud655\uc778\uc758\ubb34", "\ubcf4\uc870\uba85\uc138\ub294", "\ubcc0\uacbd\uc774\ub825\uc744", "\uad00\ub9ac\ud558\uc9c0", "\uc54a\ub294\ub2e4.", "IValueObject", "subInfoIO", "=", "getSubInfoCache(actorImpl,", "dueDlgncDscd,", "dueDlgncSeqNbr);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoIO.set(\"actorId\",", "actorImpl.getActorId());", "subInfoIO.set(\"dueDlgncDscd\",", "dueDlgncDscd);", "subInfoIO.set(\"dueDlgncSeqNbr\",", "dueDlgncSeqNbr);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoIO);", "}", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoKnd,", "subInfoIO,", "actorImpl,", "dueDlgncDscd,", "dueDlgncSeqNbr);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "GrntRprtList", "clone(){", "try{", "GrntRprtList", "object=", "(GrntRprtList)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<StdAtrbtIO>", "getListMaskAttribute()", "throws", "BizApplicationException", "{", "List<CmStdAtrMIO>", "cmStdAtrMIOs", "=", "_getCmStdAtrMDso().selectListMaskAtrbt();", "return", "_setStdAtrbtIO(cmStdAtrMIOs);", "}"], "docstring_tokens": ["Get", "list", "of", "the", "mask", "attribute"]}
{"code_tokens": ["public", "boolean", "isExistArrDocRelation(String", "arrDocRelCd,", "String", "docIssueId,", "String", "baseDt,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "//", "\uacc4\uc57d", "\uc790\uc0b0\uad00\uacc4", "\uc8fc\uc81c\uc601\uc5ed", "\ubbf8\uc0ac\uc6a9", "\uc2dc", "skip", "if", "(!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.DOC_ISSUE_RELATION)", "||", "ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())", ")", "{", "return", "false;", "}", "arrDocRelCd", "=", "ArrRelCoreUtil.getEmptyCheckValue(arrDocRelCd);", "docIssueId", "=", "ArrRelCoreUtil.getEmptyCheckValue(docIssueId);", "String", "existYn", "=", "_getArArrDocRDso().selectExistYn(arrReal.getInstCd(),", "arrReal.getArrId(),", "docIssueId,", "arrDocRelCd,", "_getInqBaseDt(baseDt)", ");", "return", "(", "CCM01.YES.equals(existYn)", "?", "true", ":", "false", ");", "}"], "docstring_tokens": ["Inquire", "existence", "of", "arrangement/document", "relation."]}
{"code_tokens": ["public", "List<ArrPsbkMsg>", "getListArrPsbkMsg(String", "instCd,", "String", "psbkMsgId){", "return", "_getArrPsbkMsgXtnBiz().getArrPsbkMsgDtlList(instCd,", "psbkMsgId);", "}"], "docstring_tokens": ["Get", "the", "list", "of", "passbook", "message."]}
{"code_tokens": ["public", "static", "Object", "getBean(String", "arg0,", "Class<?>", "arg1)", "throws", "NestedRuntimeException", "{", "return", "LApplicationContext.getCurrentApplicationContext().getBean(arg0,", "arg1);", "}"], "docstring_tokens": ["get", "bean"]}
{"code_tokens": ["public", "void", "saveMapSubInfo(AtrlCore", "AtrlCore,", "Map<String,", "String>", "xtnInfoMap)", "throws", "BizApplicationException", "{", "_getAtrlSubInfoBiz().saveMapSubInfo(xtnInfoMap,", "(AtrlImpl)", "AtrlCore);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "subInfoMap."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(", "value))", "{", "for", "(InsrncXtnInfoEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@AssetXtnAtrbtNm\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "DtoClassAtrbt", "getAttribute(String", "dtoClassNm,", "String", "atrbtNm)", "throws", "BizApplicationException", "{", "if", "(StringCoreUtils.isEmpty(atrbtNm))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@atrbtNm\"", "});", "}", "List<DtoClassAtrbt>", "dtoClassAtrbtList", "=", "getListAttribute(dtoClassNm);", "for", "(DtoClassAtrbt", "dtoClassAtrbt", ":", "dtoClassAtrbtList)", "{", "if", "(atrbtNm.equals(dtoClassAtrbt.getAttributeName()))", "return", "dtoClassAtrbt;", "}", "return", "null;", "}"], "docstring_tokens": ["Get", "the", "DTO", "attribute"]}
{"code_tokens": ["public", "int", "delete(CaAmAsmItmTblDIO", "amAsmItmTblDIO){", "return", "_getAmAsmItmTblD().delete(amAsmItmTblDIO);", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "StlmntManualEntryMgmtSvcItemOut", "clone(){", "try{", "StlmntManualEntryMgmtSvcItemOut", "object=", "(StlmntManualEntryMgmtSvcItemOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getApplyEndDateTime()", "{", "//", "Return", "output", "return", "PdUtil.parseDateToYYYYMMDDHHMMSS(_getAplyEndDt());", "}"], "docstring_tokens": ["This", "method", "inquire", "apply", "end", "date", "and", "time", "of", "point", "condition."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(BalUpdtWayEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "RlsttCltrlMgmtSvcSaveOut", "clone(){", "try{", "RlsttCltrlMgmtSvcSaveOut", "object=", "(RlsttCltrlMgmtSvcSaveOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustCheckInfoSvcCheckCustInfoIn", "clone(){", "try{", "CustCheckInfoSvcCheckCustInfoIn", "object=", "(CustCheckInfoSvcCheckCustInfoIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["protected", "void", "createInsrnc(InsrncCrtnIn", "crtnIn)", "throws", "BizApplicationException{", "//", "1.", "\ud655\uc7a5\uc815\ubcf4\uc640", "\ubcf4\uc870\uba85\uc138", "\ubd84\ub9ac", "\ubd84\ub9ac", "Map<String,", "String>", "subInfoCrtnMap", "=", "_getInsrncSubInfoBiz().getMapSubInfoCrtn(crtnIn.getInsrncBsicCrtnIn().getInsrncXtnList());", "//", "2.", "\ubcf4\ud5d8", "\uc0dd\uc131", "super.createInsrncCore(crtnIn);", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uc800\uc7a5", "_getInsrncSubInfoBiz().saveMapSubInfo(subInfoCrtnMap,", "crtnIn.getTxDt(),", "crtnIn.getTxSeqNbr(),", "this);", "}"], "docstring_tokens": ["It", "register", "insurance", "information", "for", "the", "asset", "and", "return", "a", "insurance", "object", "to", "access", "it."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "if", "(StringUtils.isEmpty(cdNbr))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@cdNbr\"", "});", "}", "if", "(StringUtils.isEmpty(supplInfoVal.get(CCM03.CD).toString()))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@cd\"", "});", "}", "Map<String,", "Object>", "supplInfoValForChkCd", "=", "new", "HashMap<String,", "Object>();", "String", "lngCd", "=", "(String)supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue());", "if(StringUtils.isEmpty(lngCd))", "{", "lngCd", "=", "_getCmnContext().getLanguageCode();", "}", "String", "cd", "=", "String.valueOf(supplInfoVal.get(CCM03.CD));", "String", "isoNatCd", "=", "String.valueOf(supplInfoVal.get(CCM03.ISO_NAT_CD));", "supplInfoValForChkCd.put(InstParamEnum.LANGUAGE_CODE.getValue(),", "lngCd);", "supplInfoValForChkCd.put(CCM03.CD,", "cd);", "supplInfoValForChkCd.put(CCM03.ISO_NAT_CD,", "isoNatCd);", "List<XtnCdIO>", "xtnCdList", "=", "this.getListCode(cdNbr,", "supplInfoValForChkCd);", "if(xtnCdList.size()", "==", "0)", "{", "return", "false;", "}", "else", "{", "return", "true;", "}", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["public", "List<DocInstIO>", "getDocHistory(String", "instCd,", "String", "docId)", "throws", "BizApplicationException", "{", "return", "_getDocInst().getInformationHistory(instCd,", "docId);", "}"], "docstring_tokens": ["It", "inquiries", "the", "document", "information", "history", "with", "classification."]}
{"code_tokens": ["public", "List<ProvideCnd>", "getListProvidedCndLight(List<PdIn>", "pdList)", "throws", "BizApplicationException", "{", "List<com.bankware.pf.product.api.models.ProvideCnd>", "provideCndList", "=", "_getPdCore().getListProvideCndLight(_convertToPdIn(pdList));", "if(CollectionUtils.isEmpty(provideCndList))", "return", "Collections.emptyList();", "List<ProvideCnd>", "out", "=", "new", "ArrayList<>();", "for(com.bankware.pf.product.api.models.ProvideCnd", "provideCnd", ":", "provideCndList)", "{", "ProvideCnd", "temp", "=", "new", "ProvideCnd();", "temp.setProvidedCndSeqNbr(provideCnd.getProvideCndSeqNum());", "temp.setCndCd(provideCnd.getCndCd());", "temp.setCndTpCd(provideCnd.getCndTypeCd());", "temp.setCndDscd(provideCnd.getCndDscd());", "temp.setMsurUnitCd(provideCnd.getMeasureUnitCd());", "temp.setCrncyCd(provideCnd.getCurrencyCd());", "temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(provideCnd.getApplyStartDate()));", "temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(provideCnd.getApplyEndDate()));", "temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(provideCnd.getApplyStartDate()));", "temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(provideCnd.getApplyEndDate()));", "temp.setMaxValue(provideCnd.getMaxVal());", "temp.setMinValue(provideCnd.getMinVal());", "temp.setListCdList(provideCnd.getListCdList());", "temp.setProvideCndAdtnlInfoOutList(", "_convertToProvideCndAdditionalInfoOutList(provideCnd.getProvideCndAdditionalInfoOutList()));", "temp.setListCd(provideCnd.getListCd());", "temp.setVal(provideCnd.getVal());", "out.add(temp);", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "light", "inquire", "multiple", "services", "provided", "condition", "list"]}
{"code_tokens": ["public", "CaCndTmpltOut", "getCndTmpltInfo(String", "cndCd,", "String", "instCd)", "throws", "BizApplicationException", "{", "String", "stdInstCd", "=", "instCd;", "if", "(StringUtils.isEmpty(stdInstCd))", "{", "stdInstCd", "=", "_getCmnContext().getInstCode();", "}", "return", "_getCaPdCtMDso().selectConditionTemplate(stdInstCd,", "cndCd);", "}"], "docstring_tokens": ["get", "condition", "template", "information"]}
{"code_tokens": ["public", "LnCndChngAplctnSvcOutIntRt", "clone(){", "try{", "LnCndChngAplctnSvcOutIntRt", "object=", "(LnCndChngAplctnSvcOutIntRt)super.clone();", "if", "(", "this.tierElmntList==", "null", ")", "object.tierElmntList", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtTierElement>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtTierElement>(tierElmntList.size());", "for(", "bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtTierElement", "item", ":", "tierElmntList", "){", "clonedList.add(", "(bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtTierElement)item.clone());", "}", "object.tierElmntList", "=", "clonedList;", "}", "if", "(", "this.rtElmntList==", "null", ")", "object.rtElmntList", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtCmpsElement>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtCmpsElement>(rtElmntList.size());", "for(", "bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtCmpsElement", "item", ":", "rtElmntList", "){", "clonedList.add(", "(bankware.corebanking.loan.conditionchange.service.dto.LnCndChngAplctnSvcOutIntRtCmpsElement)item.clone());", "}", "object.rtElmntList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut", "clone(){", "try{", "DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut", "object=", "(DuedtMgmtStsQuerySvcGetDuedtMgmtStsOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "check(Map<String,", "String>", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"EmptyListCmpxVldtnImpl", ":", "{}\",", "atrbtCntnt);", "}", "for(Map.Entry<String,", "String>", "atrbt:", "atrbtCntnt.entrySet())", "{", "if(\"0\".equals(atrbt.getValue()))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@\"", "+", "atrbt.getKey()});", "}", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Complex", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "CustCmphInqrySvcGetCustLoinIdNbrListOut", "clone(){", "try{", "CustCmphInqrySvcGetCustLoinIdNbrListOut", "object=", "(CustCmphInqrySvcGetCustLoinIdNbrListOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "check(String", "vldnTrgt)", "throws", "BizApplicationException", "{", "boolean", "isOk;", "if(_getCmnContext().getTxDate().compareTo(vldnTrgt)", "<", "0", ")", "{", "throw", "new", "BizApplicationException(\"AAPCME0606\",", "new", "String[]{vldnTrgt});", "}", "else", "{", "isOk", "=", "true;", "}", "return", "isOk;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Simple", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "BigDecimal", "getRngVal()", "throws", "BizApplicationException", "{", "logger.debug(\"##AR##", "ArrCndEarlyRepaymentFeeTermCntImpl", "=>", "getRngVal", "START", "::", "\");", "if", "(", "super.getRngVal()", "==", "null", "){", "super.setRngVal(_getEarlyRepaymentFeeTerm());", "}", "return", "super.getRngVal();", "}"], "docstring_tokens": ["A", "method", "that", "compares", "the", "value", "of", "a", "condition", "class", "to", "the", "value", "of", "a", "range", "condition."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(PrtnrImpl", "prtnrImpl)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtPrtnrSIO", "subInfo", "=", "getSubInfoCache(prtnrImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "thing", "as", "a", "map."]}
{"code_tokens": ["public", "PdQryCalRuleCndListOut", "clone(){", "try{", "PdQryCalRuleCndListOut", "object=", "(PdQryCalRuleCndListOut)super.clone();", "if", "(", "this.list==", "null", ")", "object.list", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQryCalRuleCndOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQryCalRuleCndOut>(list.size());", "for(", "bankware.corebanking.product.service.dto.PdQryCalRuleCndOut", "item", ":", "list", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQryCalRuleCndOut)item.clone());", "}", "object.list", "=", "clonedList;", "}", "if", "(", "this.calcnRuleList==", "null", ")", "object.calcnRuleList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQryCalRuleCalcnRuleOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQryCalRuleCalcnRuleOut>(calcnRuleList.size());", "for(", "bankware.corebanking.product.service.dto.PdQryCalRuleCalcnRuleOut", "item", ":", "calcnRuleList", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQryCalRuleCalcnRuleOut)item.clone());", "}", "object.calcnRuleList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaArrPdRuleCntntCdNbrListOut", "clone(){", "try{", "CaArrPdRuleCntntCdNbrListOut", "object=", "(CaArrPdRuleCntntCdNbrListOut)super.clone();", "if", "(", "this.list==", "null", ")", "object.list", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList>(list.size());", "for(", "bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList", "item", ":", "list", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPdRuleCntntCdNbrList)item.clone());", "}", "object.list", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(", "value))", "{", "for", "(CltrlOprtngTpEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@cltrlOprtngTpCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "int", "saveIpctClPrfl(IpctClPrflIn", "in)", "throws", "BizApplicationException", "{", "int", "out", "=", "0;", "CmIpctClPrflDIO", "inCmIpctPrfl", "=", "new", "CmIpctClPrflDIO();", "inCmIpctPrfl.setIpctClCd(in.getIpctClCd());", "inCmIpctPrfl.setInstCd(in.getInstCd()", "==", "null", "?", "_getCmnContext().getInstCode()", ":", "in.getInstCd());", "inCmIpctPrfl.setIpctPrflAtrbtNm(in.getIpctPrflAtrbtNm());", "inCmIpctPrfl.setIpctPrflCntnt(in.getIpctPrflCntnt());", "inCmIpctPrfl.setLastChngId(_getCmnContext().getStaffId());", "_getCmnContext().setHeaderColumn(inCmIpctPrfl);", "List<CmIpctClPrflDIO>", "rtnList", "=", "_getCmIpctClPrflDDso().selectList(inCmIpctPrfl);", "if(rtnList", "!=", "null", "&&", "rtnList.size()", ">", "0){", "out", "=", "_getCmIpctClPrflDDso().update(inCmIpctPrfl);", "}", "else", "{", "out", "=", "_getCmIpctClPrflDDso().insert(inCmIpctPrfl);", "}", "return", "out;", "}"], "docstring_tokens": ["-", "Save", "of", "important", "certificate", "classification", "profile", "information", "-", "Functionalities", "Registration", "of", "important", "certificate", "classification", "profile", "information", "Modify", "of", "important", "certificate", "classification", "profile", "information"]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "null,", "null,", "null,", "null,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt,", "false);", "}"], "docstring_tokens": ["Inquire", "specific", "customer", "own", "(as", "main", "contractor)", "arrangements", "of", "specific", "product", "code", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status."]}
{"code_tokens": ["public", "ArrRelIssmdaInfoOut", "getArrIssmdaRelation(", "String", "arrIssmdaTpCd,", "String", "arrIssmdaInhrncId,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException{", "//", "\uacc4\uc57d", "\ubc1c\uae09\ub9e4\uccb4", "\uc8fc\uc81c\uc601\uc5ed", "\ubbf8\uc0ac\uc6a9", "\uc2dc", "skip", "if", "(!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.ISSUED_MEDIA))", "{", "return", "null;", "}", "_checkInput(", "arrIssmdaTpCd,", "arrIssmdaInhrncId", ");", "ArArrIssmdaRIO", "issmdaR", "=", "_getArArrIssmdaRDso().selectActiveOne(_getCmnContextCore().getInstCode(),", "arrIssmdaTpCd,", "arrIssmdaInhrncId,", "arrReal.getArrId());", "if(issmdaR", "==", "null){", "throw", "new", "BizApplicationException(\"AAPARE0559\",", "new", "Object[]{_getCdCore().getCode(ArrIssmdaTpCoreEnum.cdNbr,", "arrIssmdaTpCd),", "arrIssmdaInhrncId});", "}", "return", "_buildArrRelInfoOut(issmdaR);", "}"], "docstring_tokens": ["Inquire", "arrangement", "issued", "media", "relation", "information", "registered", "to", "arrangement", "based", "on", "issued", "media", "type", "and", "issued", "media", "inherence", "id."]}
{"code_tokens": ["public", "List<CaCaDstbTaskHIO>", "selectChangeHistoryList(CaCaDstbChngHstIn", "svDstbChngHstIn)", "{", "return", "_getSvDstbTaskH().selectChangeHistoryList(svDstbChngHstIn);", "}"], "docstring_tokens": ["select", "change", "history", "list"]}
{"code_tokens": ["public", "PdClassIqrySvcListOutListOut", "clone(){", "try{", "PdClassIqrySvcListOutListOut", "object=", "(PdClassIqrySvcListOutListOut)super.clone();", "if", "(", "this.childCatalogList==", "null", ")", "object.childCatalogList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdClassDetailListIqrySvcOutListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdClassDetailListIqrySvcOutListOut>(childCatalogList.size());", "for(", "bankware.corebanking.product.service.dto.PdClassDetailListIqrySvcOutListOut", "item", ":", "childCatalogList", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdClassDetailListIqrySvcOutListOut)item.clone());", "}", "object.childCatalogList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "pdCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt,", "boolean", "hasVrtnArr)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "null,", "null,", "null,", "pdCd,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt,", "hasVrtnArr);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "Current", "Status", "/", "Base", "Status", "/", "Inquiry", "Period(Start", "Date", "/", "End", "Date)", "Approved", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "approved", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Active", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "activated", "within", "1/1", "~", "3/1", "and", "still", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired."]}
{"code_tokens": ["public", "List<PdBrnchRelOut>", "getPdBrnchRel(String", "brnchTpDscd)", "{", "//", "Set", "input", "PdBrnchRelIn", "in", "=", "new", "PdBrnchRelIn();", "in.setBrnchRelCd(brnchTpDscd);", "in.setAplyDt(aplyDt);", "in.setAplyTm(aplyTm);", "//", "Return", "output", "return", "getPdBrnchRel(in);", "}"], "docstring_tokens": ["This", "Method", "inquire", "of", "branches", "of", "related", "to", "product", "by", "branch", "relation", "type", "distinction", "code.", "if", "there", "is", "no", "branch", "relation", "code,", "all", "branches", "inquire"]}
{"code_tokens": ["public", "UnmaskSvcSaveRqstOut", "clone(){", "try{", "UnmaskSvcSaveRqstOut", "object=", "(UnmaskSvcSaveRqstOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaDstbChrncDataRqstTblInfoIn", "clone(){", "try{", "CaDstbChrncDataRqstTblInfoIn", "object=", "(CaDstbChrncDataRqstTblInfoIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(MostUsedAcctTpEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "java.lang.String", "getBaseIntRtDataTpDscd(){", "return", "baseIntRtDataTpDscd;", "}"], "docstring_tokens": ["Inquire", "the", "base", "interest", "rate", "data", "type", "of", "distinction", "code."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "{", "for", "(TaxRateEnum", "item", ":", "TaxRateEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "String", "getAttributeName()", "{", "return", "stdDtoClassAtrbt.getAtrbtNm();", "}"], "docstring_tokens": ["Query", "attribute", "name"]}
{"code_tokens": ["public", "String", "getXtnInfo(String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "//", "\ud655\uc7a5\ud14c\uc774\ube14", "\ud310\ub2e8", "if", "(_getTblXtnAtrbt().isExtendAttributeExist(XtnTableEnum.AT_ACTOR_M.getValue(),", "xtnAtrbtNm))", "{", "//", "\uc561\ud130", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "\uc870\ud68c", "return", "getActor().getXtnInfo(xtnAtrbtNm);", "}", "//", "\ud655\uc7a5\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\ubc29\ubc95", "\ud310\ub2e8", "if", "(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AT_CUST_M.getValue(),", "xtnAtrbtNm))", "{", "//", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "\uc870\ud68c", "return", "super.getXtnInfoByEav(xtnAtrbtNm);", "}", "//", "\ubcf4\uc870\uba85\uc138", "\uc870\ud68c", "return", "_getCustSubInfoBiz().getSubInfo(xtnAtrbtNm,", "this);", "}"], "docstring_tokens": ["Inquire", "the", "extended", "attribute", "information", "that", "matches", "the", "input", "attribute", "name.", "If", "the", "matching", "extended", "attribute", "information", "doesn't", "exist,", "it", "returns", "null."]}
{"code_tokens": ["public", "boolean", "check(Map<String,", "String>", "atrbtCntnt)", "throws", "BizApplicationException", "{", "String", "cashTrnsfrDscd", "=", "atrbtCntnt.get(CASH_TRANSFR_DSCD);", "String", "prtlTrnsfrAmtStr", "=", "atrbtCntnt.get(PRTL_TRNSFR_AMT);", "String", "arrTrmntnDscd", "=", "atrbtCntnt.get(ARR_TRMNTN_DSCD);", "String", "oprtnAcctNbr", "=", "null;", "/*", "*", "Get", "an", "account", "number", "*/", "for(Entry<String,", "String>", "entry:", "atrbtCntnt.entrySet())", "{", "String", "key", "=", "entry.getKey();", "String", "value", "=", "entry.getValue();", "if(key.indexOf(\"AcctNbr\")", ">=", "0", ")", "oprtnAcctNbr", "=", "value;", "}", "BigDecimal", "prtlTrnsfrAmt", "=", "BigDecimal.ZERO;", "if(!StringUtils.isEmpty(prtlTrnsfrAmtStr))", "prtlTrnsfrAmt", "=", "new", "BigDecimal(prtlTrnsfrAmtStr);", "switch(CashTrnsfrEnum.getEnum(cashTrnsfrDscd)", ")", "{", "/*", "*", "1.In", "case", "of", "'Cash',", "both", "partial", "transfer", "amount", "and", "operation", "account", "number", "are", "not", "allowed", "*/", "case", "CASH:", "if(prtlTrnsfrAmt.compareTo(BigDecimal.ZERO)", "!=", "0", "||", "!StringUtils.isEmpty(oprtnAcctNbr))", "{", "throw", "new", "BizApplicationException(\"AAPDPE0024\",", "null);", "}", "break;", "/*", "*", "2.In", "case", "of", "'Transfer',", "partial", "transfer", "amount", "is", "not", "allowed", "and", "operation", "account", "number", "is", "essential", "(Except,", "set-off)", "*/", "case", "TRNSFR:", "if(prtlTrnsfrAmt.compareTo(BigDecimal.ZERO)", "!=", "0)", "throw", "new", "BizApplicationException(\"AAPSTE0073\",", "null);", "if(StringUtils.isEmpty(oprtnAcctNbr)", "&&", "!TrmntnDscdEnum.SETOFF.getValue().equals(arrTrmntnDscd))", "{", "throw", "new", "BizApplicationException(\"AAPSTE0074\",", "null);", "}", "break;", "/*", "*", "3.In", "case", "of", "'Mix',", "both", "partial", "transfer", "amount", "and", "operation", "account", "number", "are", "essential", "(Except,", "set-off)", "*/", "case", "MIX:", "if(prtlTrnsfrAmt.compareTo(", "BigDecimal.ZERO)", "==", "0)", "throw", "new", "BizApplicationException(\"AAPSTE0075\",", "null);", "if(StringUtils.isEmpty(oprtnAcctNbr)", "&&", "!TrmntnDscdEnum.SETOFF.getValue().equals(arrTrmntnDscd))", "{", "throw", "new", "BizApplicationException(\"AAPSTE0074\",", "null);", "}", "break;", "default:", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Simple", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "CustDocRelChngSvcTrmntnIn", "clone(){", "try{", "CustDocRelChngSvcTrmntnIn", "object=", "(CustDocRelChngSvcTrmntnIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "modifyArrTx(StTxMIO", "stTxMIO,", "ArrRealCore", "arr)", "throws", "BizApplicationException", "{", "switch(ArrTxKndEnum.getEnum(getArrTxKnd(arr)))", "{", "case", "ARR_TX_DEMAND", ":", "return", "_getStTxDemandMDso().updateArrTx(stTxMIO);", "default:", "return", "super.modifyArrTx(stTxMIO,", "arr);", "}", "}"], "docstring_tokens": ["This", "method", "modifies", "information", "of", "arrangement", "transaction."]}
{"code_tokens": ["public", "List<InterestCalculationSection>", "apply(ApplyInterestCalculationSectionExceptionIn", "in,", "List<InterestCalculationSection>", "intCalIntervals)", "throws", "BizApplicationException", "{", "for", "(InterestCalculationSection", "interval", ":", "intCalIntervals)", "{", "List<CalculationType>", "typeList", "=", "new", "ArrayList<>();", "for", "(CalculationType", "type", ":", "interval.getCalTps())", "{", "CalculationType", "t1", "=", "type.clone();", "final", "String", "calStartDt", "=", "t1.getCalStartDt();", "final", "String", "calEndDt", "=", "t1.getCalEndDt();", "//", "\uc2dc\uc791/\uc885\ub8cc\uc77c\uc790", "\uc5ed\uc21c\uc77c", "\uacbd\uc6b0", "\ub2f9\uc77c\ub85c", "\ucc98\ub9ac", "if", "(DateCoreUtils.isDt1BeforeDt2(calEndDt,", "calStartDt))", "{", "t1.setCalEndDt(calStartDt);", "}", "typeList.add(t1);", "}", "//", "\ubcc0\uacbd\ub41c", "\uc720\ud615", "\ubc18\uc601", "interval.setCalTps(typeList);", "}", "return", "intCalIntervals;", "}"], "docstring_tokens": ["Change", "the", "status", "of", "arrangement", "into", "\"Applied\",", "while", "change", "product", "of", "arrangement", "based", "on", "product", "code", "input.", "Following", "additional", "arrangement", "information", "can", "be", "registered.", "1)", "Account", "number", "2)", "Whether", "if", "created", "mandatory", "condition", "automatically", "or", "not", "3)", "A", "list", "of", "arrangement", "level", "condition", "4)", "A", "list", "of", "arrangement", "relation", "information", "5)", "A", "list", "of", "arrangement", "extended", "attribute"]}
{"code_tokens": ["public", "String", "getTxStaffId(){", "return", "txStaffId;", "}"], "docstring_tokens": ["Inquire", "the", "transaction", "staff", "ID", "of", "this", "asset", "transaction."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "ArrIssmdaImpl", "arrIssmdaImpl,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(subInfoMap", "==", "null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "ArArrIssmdaSIO", "sqlIO", "=", "null;", "//", "1.\uae30\uc874", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "ArrIssmdaSubInfo", "oldCache", "=", "(ArrIssmdaSubInfo)", "getSubInfoCache(arrIssmdaImpl);", "if", "(oldCache", "==", "null)", "{", "sqlIO", "=", "new", "ArArrIssmdaSIO();", "sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd());", "sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId());", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveArArrIssmdaSubHEmpty(arrIssmdaImpl,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "sqlIO);", "_getArArrIssmdaSDso().insert(sqlIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "oldCache))", "{", "return;", "}", "sqlIO", "=", "new", "ArArrIssmdaSIO();", "sqlIO.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd());", "sqlIO.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId());", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveArArrIssmdaSubH(arrIssmdaImpl,", "oldCache,", "txDt,", "txSeqNbr);", "//", "\uae30\uc874", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(oldCache,", "sqlIO);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "sqlIO);", "//", "update", "_getArArrIssmdaSDso().update(sqlIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(", "sqlIO,", "arrIssmdaImpl);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "CaDstbReqMIn", "clone(){", "try{", "CaDstbReqMIn", "object=", "(CaDstbReqMIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrNrmlIntRtQrySvcIn", "clone(){", "try{", "ArrNrmlIntRtQrySvcIn", "object=", "(ArrNrmlIntRtQrySvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getMndtryNegCndYn(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "String", "output", "=", "bfCnd.getMndtryNegCndYn();", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "mandatory", "negotiation", "condition", "yes", "or", "no."]}
{"code_tokens": ["public", "String", "getTxRmkCntnt()", "{", "return", "arrTxBsicIO.getTxRmkCntnt();", "}", "public", "String", "getCrncyCd()", "{", "return", "arrTxBsicIO.getCrncyCd();", "}"], "docstring_tokens": ["Inquire", "currency", "code", "of", "arrangement"]}
{"code_tokens": ["public", "CaRoleMgmtSvcSaveRoleServiceRelationIn", "clone(){", "try{", "CaRoleMgmtSvcSaveRoleServiceRelationIn", "object=", "(CaRoleMgmtSvcSaveRoleServiceRelationIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "undoSubInfo(InsrncImpl", "insrnc,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\ud5d8\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138\uc774\ub825", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uac00", "\uc5c6\ub294", "\uacbd\uc6b0", "\ub9ac\ud134", "AsInsrncSubHIO", "hstSqlIO", "=", "_getSubInfoHstCache(insrnc,", "txDt,", "txSeqNbr);", "if(hstSqlIO", "==", "null){", "return;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138\uc774\ub825\uc758", "\ucde8\uc18c\uc5ec\ubd80\ub97c", "'Y'\ub85c", "\uac31\uc2e0", "hstSqlIO.setCnclYn(CCM01.YES);", "_getAsInsrncSubHDso().update(hstSqlIO);", "//", "4.", "\ubcf4\uc870\uba85\uc138\uc774\ub825", "DBIO", "VO\ub97c", "\ubcf4\uc870\uba85\uc138", "DBIO", "VO\ub85c", "convert", "AsInsrncSIO", "sqlIO", "=", "new", "AsInsrncSIO();", "DtoUtils.setSubInfoIO(hstSqlIO,", "sqlIO);", "//", "set", "PK", "&", "business", "column", "//", "5.", "\ubcf4\uc870\uba85\uc138", "\uac12", "\uc6d0\ubcf5", "_getAsInsrncSDso().update(sqlIO);", "}"], "docstring_tokens": ["Return", "the", "value", "of", "the", "subsidiary", "information", "to", "the", "previous", "value.", "However,", "this", "method", "is", "not", "invoked", "because", "no", "cancellation", "function", "is", "currently", "made", "in", "the", "asset", "area.", "If", "cancellation", "function", "is", "made", "in", "the", "asset", "area,", "this", "method", "should", "be", "called", "through", "the", "method", "{@link", "AssetSubInfoBiz", "#undoSubInfo}."]}
{"code_tokens": ["public", "CaRoleStaffOut", "clone(){", "try{", "CaRoleStaffOut", "object=", "(CaRoleStaffOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(AtrlCore", "AtrlCore,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "_getAtrlSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AtrlImpl)", "AtrlCore);", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "List<DeptClsgDtlIO>", "getListDeptClosing(DeptClsgDtlIO", "deptClsgDtlIO)", "throws", "BizApplicationException", "{", "return", "_getListDeptClosing(_setAcDeptClsgDIn(deptClsgDtlIO));", "}"], "docstring_tokens": ["This", "method", "is", "for", "inquiring", "the", "list", "of", "department", "closing", "status.", "After", "that,", "it", "returns", "department", "closing", "status", "list", "of", "specific", "base", "date."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"Disbursement\":", "_doDisbursementAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"Repayment\"", ":", "_doRepaymentAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"ReduceLimit\"", ":", "_doReduceLoanLimtAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"IncreaseLimit\"", ":", "_doIncreaseLoanLimitAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"IncreaseTermExtension\"", ":", "_doIncreaseLoanLimitAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "void", "validate(String", "arrSrvcCd,ArrRealCore", "arrReal,", "CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "if", "(_getCmnContext().isSelfChannel()", "&&", "!cust.getCustId().equals(_getCmnContext().getCustId())){", "//Customer", "to", "be", "accessed", "is", "not", "same", "with", "self-service", "channel's", "user.", "This", "service", "({0})", "could", "not", "performs", "properly", "//\uc811\uadfc\ub300\uc0c1", "\uace0\uac1d\uc815\ubcf4\uc758", "\uace0\uac1d\uacfc", "\ubcf8", "\uc140\ud504\uc11c\ube44\uc2a4", "\ucc44\ub110\uc758", "\uc0ac\uc6a9\uc790\uac00", "\ub3d9\uc77c\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4.", "\ubcf8\uc11c\ube44\uc2a4({0})", "\uc2e4\ud589\uc774", "\ubd88\uac00", "\ud569\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0336\",", "new", "Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)});", "}", "}"], "docstring_tokens": ["It", "performs", "common", "service", "processing", "rules", "defined", "in", "the", "service", "processing", "rules", "and", "whether", "the", "contract-based", "service", "is", "available,", "based", "on", "the", "service", "type", "input.", "Whether", "contract", "services", "are", "available", "verifies:", "1)", "Verification", "of", "service", "restriction", "based", "on", "product", "information", "of", "contract.", "2)", "Verification", "of", "restriction", "related", "to", "the", "service", "set", "in", "the", "contract", "such", "as", "pledge", "setting.", "3)", "Perform", "verification", "rules", "that", "should", "be", "performed", "in", "common", "as", "the", "requirement", "that", "dead", "customers", "should", "not", "become", "financial", "transactions."]}
{"code_tokens": ["public", "void", "activate(ArrIssmdaStsChngIn", "arrIssmdaStsChngIn)", "throws", "BizApplicationException", "{", "super.changeStatus(ArrIssmdaStsEnum.ACTIVATED.getValue(),", "arrIssmdaStsChngIn.getStsChngRsnCntnt(),", "arrIssmdaStsChngIn.getIssmdaStsChngBizCdNbr(),", "arrIssmdaStsChngIn.getIssmdaStsChngBizCd(),", "arrIssmdaStsChngIn.getXtnInfoList(),", "arrIssmdaStsChngIn.getStsChngTxDt(),", "arrIssmdaStsChngIn.getStsChngTxSeqNbr());", "}"], "docstring_tokens": ["It", "activates", "self", "authentication.", "It", "removes", "special", "characters(-.)", "if", "authentication", "type", "is", "mobile", "phone."]}
{"code_tokens": ["public", "String", "getTransferLanguage(String", "trnsfrKnd,", "String", "trnsfrKeyVal,", "String", "lngCd){", "//data", "cache", "\uc801\uc6a9", "CaCacheProvider", "p", "=", "new", "CaCacheProvider<CaCmMltLngTrnsltnDIO>(){", "@Override", "public", "CaCmMltLngTrnsltnDIO", "select(CaCmMltLngTrnsltnDIO", "cmMltLngTrnsltnDIO)", "{", "return", "_getCmMltLngTrnsltnD().selectActive(cmMltLngTrnsltnDIO);", "}", "};", "CaCmMltLngTrnsltnDIO", "cmMltLngTrnsltnDIO", "=", "new", "CaCmMltLngTrnsltnDIO();", "cmMltLngTrnsltnDIO.setLngCd(lngCd);", "cmMltLngTrnsltnDIO.setTrnsfrKndCd(trnsfrKnd);", "cmMltLngTrnsltnDIO.setTrnsfrOriginKeyVal(trnsfrKeyVal);", "CaCmMltLngTrnsltnDIO", "rtnObj", "=", "super.selectCache(CaDataCacheConfig.CA_TRANSLATE_LANGUAGE_CACHE,", "lngCd.concat(trnsfrKnd).concat(trnsfrKeyVal),", "cmMltLngTrnsltnDIO,p);", "String", "trnsfrRsltVal", "=", "null;", "if(rtnObj", "!=", "null){", "trnsfrRsltVal", "=", "rtnObj.getTrnsfrRsltVal();", "}", "return", "trnsfrRsltVal", "==", "null", "?", "trnsfrKeyVal", ":", "trnsfrRsltVal;", "}"], "docstring_tokens": ["Offering", "terminology", "that", "fit", "with", "the", "language", "code."]}
{"code_tokens": ["public", "CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut", "clone(){", "try{", "CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut", "object=", "(CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "StaffCore", "staffCore)", "throws", "BizApplicationException", "{", "return", "_getStaffSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(StaffImpl)staffCore);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "detail", "information."]}
{"code_tokens": ["public", "CrspndntBnkMgmtSvcIn", "clone(){", "try{", "CrspndntBnkMgmtSvcIn", "object=", "(CrspndntBnkMgmtSvcIn)super.clone();", "if", "(", "this.nmList==", "null", ")", "object.nmList", "=", "null;", "else{", "java.util.List<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtNmListIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtNmListIn>(nmList.size());", "for(", "bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtNmListIn", "item", ":", "nmList", "){", "clonedList.add(", "(bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtNmListIn)item.clone());", "}", "object.nmList", "=", "clonedList;", "}", "if", "(", "this.cntctPntList==", "null", ")", "object.cntctPntList", "=", "null;", "else{", "java.util.List<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtCntctPntList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtCntctPntList>(cntctPntList.size());", "for(", "bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtCntctPntList", "item", ":", "cntctPntList", "){", "clonedList.add(", "(bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtCntctPntList)item.clone());", "}", "object.cntctPntList", "=", "clonedList;", "}", "if", "(", "this.xtnInfoList==", "null", ")", "object.xtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtXtnInfoListIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtXtnInfoListIn>(xtnInfoList.size());", "for(", "bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtXtnInfoListIn", "item", ":", "xtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.foreignexchange.common.service.dto.CrspndntBnkMgmtXtnInfoListIn)item.clone());", "}", "object.xtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "BfCouponQuantitySvcIn", "clone(){", "try{", "BfCouponQuantitySvcIn", "object=", "(BfCouponQuantitySvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AtrlImpl", "atrlImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\uc561\ud130\uc5ed\ud560\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtAtrlSIO", "subInfoIO", "=", "getSubInfoCache(atrlImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtAtrlSIO();", "subInfoIO.setAtrlId(atrlImpl.getAtrlId());", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "insert", "_getAtAtrlSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(atrlImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "update", "_getAtAtrlSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "atrlImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "subsidiary", "information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "ArrReal", "arrReal", "=", "(ArrReal)this.getArrangementCore();", "logger.debug(\":::", "arrCndActionRequiredValue.getTxDt", "::", "{}\",arrCndActionRequiredValue.getTxDt());", "if", "(!arrReal.isReal())", "return;", "ArrSrvcEnum", "arrSrvcEnum", "=", "ArrSrvcEnum.getEnum(arrSrvcTpCd);", "if(", "arrSrvcEnum", "==", "null", ")", "{", "throw", "new", "BizApplicationException(\"AAPARE0579\");", "}", "switch", "(arrSrvcEnum)", "{", "case", "OPEN_DEPOSIT:", "_doOpenAction(arrSrvcTpCd,arrCndActionRequiredValue,arrReal);", "break;", "case", "TERMINATION_DEPOSIT:", "//_doTrmntnAction(arrReal,", "arrCndActionRequiredValue);", "break;", "case", "TERMINATION_DEPOSIT_INQUIRY:", "_doTerminationAction(arrSrvcTpCd,arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "StaffRgstSvcCntctPntListIn", "clone(){", "try{", "StaffRgstSvcCntctPntListIn", "object=", "(StaffRgstSvcCntctPntListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaDeptRoleTmpltSvcGetListDtlOut", "clone(){", "try{", "CaDeptRoleTmpltSvcGetListDtlOut", "object=", "(CaDeptRoleTmpltSvcGetListDtlOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getInstCd(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "String", "output", "=", "bfCnd.getInstCd();", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["It", "inquires", "institution", "code", "where", "the", "teller", "belongs", "to."]}
{"code_tokens": ["public", "CustRgstSvcSimpleIndvIn", "clone(){", "try{", "CustRgstSvcSimpleIndvIn", "object=", "(CustRgstSvcSimpleIndvIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "ArrTxCore", "arrTx)", "{", "return", "_getArrTxSubInfoBiz().getSubInfo(xtnAtrbtNm,(ArrTxImpl)arrTx);", "}"], "docstring_tokens": ["This", "method", "inquires", "settlement", "subsidiary", "detail", "information", "list", "(inquire", "all", "subsidiary", "detail", "information", "of", "a", "given", "settlement", "master", "by", "using", "the", "key", "value", "other", "than", "the", "detail", "sequence", "number)."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(PrvsCrdtChkRsltCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "String", "getSubInfo(AtrlCore", "AtrlCore,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getAtrlSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AtrlImpl)", "AtrlCore);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "calculation", "detail", "information."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "DeptCore", "deptCore)", "throws", "BizApplicationException", "{", "return", "_getDeptSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(DeptImpl)deptCore);", "}"], "docstring_tokens": ["get", "a", "extended", "information", "of", "subsidiary", "information(CTI)"]}
{"code_tokens": ["public", "ActorCmphInqrySvcGetActorCntctPntTpCdListIn", "clone(){", "try{", "ActorCmphInqrySvcGetActorCntctPntTpCdListIn", "object=", "(ActorCmphInqrySvcGetActorCntctPntTpCdListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "ArrIssmdaCore", "arrIssmda,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getArrIssmdaSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(ArrIssmdaImpl)", "arrIssmda,", "txDt,", "txSeqNbr);", "}"], "docstring_tokens": ["Save", "an", "appraisal", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcCd,ArrangementCore", "arr,", "String", "arrXtnAtrbtNm,", "String", "arrXtnAtrbtVal,", "ArrActionRequiredValue", "arrActionRequiredValue)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled()){", "logger.debug(\"XtnAtrbtActionSampleClassImpl", "start", "{}\",arrSrvcCd);", "}", "}"], "docstring_tokens": ["This", "function", "execute", "the", "extended", "attribute", "business", "rules", "that", "registered", "in", "the", "Contract", "Services", "Processing", "Rules."]}
{"code_tokens": ["public", "AcAcctgLDfrdIO", "selectJournalDeferred(String", "instCd,", "String", "bizDt,", "Long", "lastSeq,", "Long", "fetchCnt)", "throws", "BizApplicationException", "{", "switch(DbmsVendorNmEnum.getByValue(_getSysNonstopUtil().getDbmsVendorName()))", "{", "case", "ORACLE:", "return", "_getAcAcctgLDfrd().selectJournalDeferredOracle(instCd,", "bizDt,", "lastSeq,", "fetchCnt);", "case", "MYSQL:", "return", "_getAcAcctgLDfrd().selectJournalDeferredMysql(instCd,", "bizDt,", "lastSeq,", "fetchCnt);", "default:", "throw", "new", "BizApplicationException(\"AAPCME0202\",", "null);", "}", "}"], "docstring_tokens": ["It", "inquires", "the", "max", "sequence", "number", "and", "min", "sequence", "number", "of", "journalizing", "processing", "target", "in", "deferred", "mode."]}
{"code_tokens": ["public", "CustCmphInqrySvcGetCustClIdListIn", "clone(){", "try{", "CustCmphInqrySvcGetCustClIdListIn", "object=", "(CustCmphInqrySvcGetCustClIdListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if", "(!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){", "//This", "product", "purchase", "is", "not", "allowed", "for", "this", "customer", "credit", "grade", "({0},{1})", "//\ubcf8\uc0c1\ud488\uc740", "\uace0\uac1d", "\uc2e0\uc6a9\ub4f1\uae09", "({0},{1})\uc5d0\ub294", "\ud310\ub9e4", "\ubd88\uac00", "\ud569\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"", "\"", ",", "new", "Object[]{getListCd(),getListCd()});", "//TODO", "ERRor", "}", "}"], "docstring_tokens": ["Perform", "the", "condition", "action", "related", "to", "the", "specific", "service", "type.", "For", "example", "1", ",", "In", "case", "of", "loan", "installment", "disbursement", "possible", "condition", ",the", "loan", "disbursement", "possible", "condition", "class'", "\"doServiceAction\"", "method", "dose", "the", "validation", "step", "like", "1.investigates", "disbursed", "amount,", "2.get", "product", "condition", "value", "whether", "installment", "disbursement", "is", "allowed,", "3.", "make", "decision", "whether", "the", "service", "is", "permitted", "or", "not.", "The", "other", "example,", "the", "interest", "capitalization", "YN", "condition", "class", "do", "the", "action", "to", "make", "a", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date", "when", "arrangement", "open", "service", "is", "executed."]}
{"code_tokens": ["public", "CaDeptRoleTmpltTreeIn", "clone(){", "try{", "CaDeptRoleTmpltTreeIn", "object=", "(CaDeptRoleTmpltTreeIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "NoticeBsicInfoIO", "request(NoticeBsicInfoIO", "noticeBsicInfoIO,", "Actor", "targetActor)", "throws", "BizApplicationException", "{", "return", "request(noticeBsicInfoIO,", "null,", "targetActor);", "}"], "docstring_tokens": ["It", "requests", "notice.", "It", "can", "be", "used", "after", "connecting", "with", "actual", "SMS", "text", "and", "EMAIL", "sending", "server.", "For", "SMS,", "the", "caller", "ID", "is", ":", "0101112222", "For", "E-Mail,", "the", "caller", "ID", "is", ":", "admin@bankwareglobal.com"]}
{"code_tokens": ["public", "Map<InsrncXtnInfoEnum,", "String>", "getMapInsrncXtnInfo()", "throws", "BizApplicationException", "{", "Map<InsrncXtnInfoEnum,", "String>", "xtnInfoHash", "=", "new", "HashMap<InsrncXtnInfoEnum,", "String>();", "//", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "Map<String,", "String>", "xtnInfoStrMap", "=", "super.getMapInsrncXtnInfoAsStrByEav();", "for(Entry<String,", "String>", "entry", ":", "xtnInfoStrMap.entrySet()){", "xtnInfoHash.put(InsrncXtnInfoEnum.getEnum(entry.getKey()),", "entry.getValue());", "}", "//", "\ubcf4\uc870\uba85\uc138", "Map<String,", "String>", "subInfoMap", "=", "_getInsrncSubInfoBiz().getMapSubInfo(this);", "for(Entry<String,", "String>", "entry", ":", "subInfoMap.entrySet()){", "xtnInfoHash.put(InsrncXtnInfoEnum.getEnum(entry.getKey()),", "entry.getValue());", "}", "return", "xtnInfoHash;", "}"], "docstring_tokens": ["Inquire", "all", "extended", "information", "of", "the", "insurance", "as", "a", "map."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(ArrCustRelStsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "Arrangement", "getArr()", "{", "return", "arr;", "}"], "docstring_tokens": ["This", "method", "inquire", "customer", "account", "arrangement", "using", "arrangement", "ID.", "Detail", "function", "description", "refers", "to", "{@link", "#getArr(ArrRealGetIn)}."]}
{"code_tokens": ["public", "void", "validateTxProcess(List<ArrTxBsicIO>", "arrTxBsicIOList)", "throws", "BizApplicationException", "{", "List<StTxMIO>", "stTxMIOList", "=", "new", "ArrayList<StTxMIO>();", "if", "(arrTxBsicIOList", "!=", "null)", "{", "for", "(ArrTxBsicIO", "io", ":", "arrTxBsicIOList)", "{", "StTxMIO", "stTxMIO", "=", "_setStTxMIO(io);", "stTxMIOList.add(stTxMIO);", "}", "}", "if(stTxMIOList", "==", "null", "||", "stTxMIOList.isEmpty())", "return;", "if(stTxMIOList.size()", ">", "0){", "for(StTxMIO", "stTxMIO", ":", "stTxMIOList)", "{", "ArrRealCore", "arr", "=", "_getArrMngr().getArrRealCore(stTxMIO.getArrId());", "StTxMIO", "out", "=", "_getArrTxBiz().getArrTx(stTxMIO,", "arr);", "if(out", "==", "null)", "throw", "new", "BizApplicationException(\"AAPSTE0020\",", "new", "Object[]", "{stTxMIO.getTxDt(),", "stTxMIO.getTxSeqNbr()});", "//", "Transaction", "history", "is", "not", "registered.", "if(TxStsCoreEnum.NUMBERED.getValue().equals(out.getTxStsCd()))", "throw", "new", "BizApplicationException(\"AAPACE3016\",", "new", "Object[]", "{out.getArrId()});", "if", "(logger.isDebugEnabled()){", "logger.debug(\"ArrTx", "linked", "transaction", "logging", ":", "{}\",", "out.toString());", "}", "}", "}", "}"], "docstring_tokens": ["Check", "Transaction", "history", "should", "be", "recorded", "after", "numbering", "transaction", "sequence", "Functionalities", "Transaction", "history", "should", "be", "recorded", "after", "numbering", "transaction", "sequence.", "This", "method", "checks", "this", "rule."]}
{"code_tokens": ["public", "void", "validate(ArrReal", "arrReal,", "Map<ArrVldtnRequiredValEnum,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "super.validate((ArrRealCore)", "arrReal,", "_convertValMap(vldtnRequiredValMap));", "}"], "docstring_tokens": ["It", "performs", "common", "service", "processing", "rules", "defined", "in", "the", "service", "processing", "rules", "and", "whether", "the", "contract-based", "service", "is", "available,", "based", "on", "the", "representative", "service", "type", "registered", "to", "the", "specific", "service.", "Whether", "contract", "services", "are", "available", "verifies:", "1)", "Verification", "of", "service", "restriction", "based", "on", "product", "information", "of", "contract.", "2)", "Verification", "of", "restriction", "related", "to", "the", "service", "set", "in", "the", "contract", "such", "as", "pledge", "setting.", "3)", "Perform", "verification", "rules", "that", "should", "be", "performed", "in", "common", "as", "the", "requirement", "that", "dead", "customers", "should", "not", "become", "financial", "transactions."]}
{"code_tokens": ["public", "CaSrvcIO", "registerService(CaSrvcRgstrnIn", "in)", "throws", "BizApplicationException{", "_checkInput(in.getSrvcCd());", "CaSvSrvcMIO", "svSrvcMIO", "=", "_setSvSrvcMIO(in);", "_getSvSrvcMDso().insert(svSrvcMIO);", "return", "_getService(in.getSrvcCd());", "}"], "docstring_tokens": ["Register", "Service."]}
{"code_tokens": ["public", "CustRelArrInqrySvcGetCustRelAcctListIn", "clone(){", "try{", "CustRelArrInqrySvcGetCustRelAcctListIn", "object=", "(CustRelArrInqrySvcGetCustRelAcctListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"ForeignExchangeSell\":", "_doForeignExchangeSellAction(arrSrvcTpCd,arrCndActionRequiredValue);", "break;", "//TODO", "\ucd94\ud6c4", "\ucd94\uac00", "case", "\"SellForeignExchange\":", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "CaCustGradeCdSvcRgstIn", "clone(){", "try{", "CaCustGradeCdSvcRgstIn", "object=", "(CaCustGradeCdSvcRgstIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getCndVal()", "throws", "BizApplicationException", "{", "//", "\ud574\ub2f9", "\uba54\uc18c\ub4dc\ub294", "({0})", "\ud074\ub798\uc2a4\uc758", "\uc778\uc2a4\ud134\uc2a4\ub85c", "\uc0ac\uc6a9\ud560", "\uc218", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\uacc4\uc57d\ub2f4\ub2f9\uc790\uc5d0\uac8c", "\ubb38\uc758\ubc14\ub78d\ub2c8\ub2e4.", "//", "This", "method", "cannot", "be", "used", "by", "instance", "of", "({0})", "class.", "throw", "new", "BizApplicationException(\"AAPARE0678\",new", "Object[]{this.getClass().getName()});", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "value."]}
{"code_tokens": ["public", "TxHstQrySvcInquiryStlmntMListOut", "clone(){", "try{", "TxHstQrySvcInquiryStlmntMListOut", "object=", "(TxHstQrySvcInquiryStlmntMListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut>(tblNm.size());", "for(", "bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.deposit.query.service.dto.TxHstQrySvcInquiryStlmntMOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(CustRprsnCore", "custRprsnCore)", "throws", "BizApplicationException", "{", "return", "_getCustRprsnSubInfoBiz().getMapSubInfo((CustRprsnImpl)", "custRprsnCore);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "thing", "as", "a", "map."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "insrncSubInfoMap,", "InsrncCore", "insrncCore,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getInsrncSubInfoBiz().saveMapSubInfo(insrncSubInfoMap,", "txDt,", "txSeqNbr,", "(InsrncImpl)", "insrncCore);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "subsidiary", "information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(XtnTableEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "String", "getCnclCntrprtTxDt(){", "return", "cnclCntrprtTxDt;", "}"], "docstring_tokens": ["This", "method", "inquires", "a", "cancel", "target", "transaction", "date", "of", "the", "transaction."]}
{"code_tokens": ["public", "List<PdAdtlInfoOut>", "getAdtnlInfo(PdAdtlInfoIn", "in)", "throws", "BizApplicationException", "{", "List<PdAdtlInfoOut>", "out", "=", "new", "ArrayList<>();", "//", "\uc0c1\ud488\ucf54\ub4dc,", "\uc0c1\ud488\ubd80\uac00\uc815\ubcf4\uc720\ud615,", "\uc801\uc77c\uc77c\uc790\ub97c", "\uc785\ub825\ud558\uc5ec", "\ud574\ub2f9", "\uc0c1\ud488\uc5d0", "\uad00\ub828\ub41c", "\uc0c1\ud488\ubd80\uac00\uc815\ubcf4\ub97c", "\uc870\ud68c\ud568", "//", "Enter", "the", "product", "code,", "product", "additional", "information", "type", "code,", "//", "apply", "date", "and", "inquiry", "product", "additional", "information", "related", "to", "the", "//", "product", "PdAdditionalInfoListIn", "additionalIn", "=", "new", "PdAdditionalInfoListIn();", "additionalIn.setInstitutionId(pdPdM.getInstCd());", "additionalIn.setPdCd(pdPdM.getPdCd());", "additionalIn.setAdditionalInfoCd(in.getAdtnlInfoCd());", "additionalIn.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(),", "_getAplyTmString(in.getAplyTm())));", "List<PdAdditionalInfoOut>", "additionalOut", "=", "_getPdCore().getListAdditionalInfo(additionalIn);", "for(PdAdditionalInfoOut", "item", ":", "CollectionUtils.emptyIfNull(additionalOut))", "{", "PdAdtlInfoOut", "temp", "=", "new", "PdAdtlInfoOut();", "temp.setAdtnlInfoCd(item.getAdditionalInfoCd());", "temp.setPdRelStsCd(item.getPdRelationStatusCd());", "temp.setAdtnlInfoCntnt(item.getAdditionalInfoContent());", "temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(item.getApplyStartDate()));", "temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(item.getApplyEndDate()));", "temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(item.getApplyStartDate()));", "temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(item.getApplyEndDate()));", "out.add(temp);", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "additional", "information", "related", "to", "product.", "if", "there", "is", "no", "additional", "information", "code,", "all", "additional", "information", "inquire"]}
{"code_tokens": ["private", "BfTestSvcOut", "getSaleStartDateTime(BfTestSvcIn", "in)", "throws", "BizApplicationException", "{", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "String", "output", "=", "bf.getSaleStartDateTime();", "BfTestSvcOut", "out", "=", "new", "BfTestSvcOut();", "if(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "sale", "start", "date", "time", "of", "product"]}
{"code_tokens": ["public", "boolean", "isValidationWayCodeAndRule(String", "vldtnWayCd,", "String", "vldtnRule)", "throws", "BizApplicationException", "{", "if", "(StringUtils.isEmpty(vldtnWayCd)", "&&", "StringUtils.isEmpty(vldtnRule))", "{", "return", "true;", "}", "CaAtrbtVldCntntChkImpl", "checkAtrbtVld", "=", "null;", "if", "(!StringUtils.isEmpty(vldtnWayCd))", "{", "if", "(!CaAtrbtVldtnWayEnum.isValid(vldtnWayCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0104\",", "new", "Object[]", "{vldtnWayCd});", "}", "if", "(StringUtils.isEmpty(vldtnRule))", "{", "throw", "new", "BizApplicationException(\"AAPCME0105\",", "new", "Object[]", "{vldtnWayCd});", "}", "checkAtrbtVld", "=", "_setAttributeValidationWayCode(vldtnWayCd);", "}", "else", "{", "if", "(!StringUtils.isEmpty(vldtnRule))", "{", "throw", "new", "BizApplicationException(\"AAPCME0106\",", "new", "Object[]", "{});", "}", "}", "if(checkAtrbtVld", "==", "null){", "return", "false;", "}", "return", "checkAtrbtVld.checkValidationWayCodeAndRule(vldtnRule);", "}"], "docstring_tokens": ["Check", "Attribute", "validation", "way", "code", "and", "Attribute", "validation", "rule."]}
{"code_tokens": ["public", "WorkflowRoleMgmtSvcIO", "clone(){", "try{", "WorkflowRoleMgmtSvcIO", "object=", "(WorkflowRoleMgmtSvcIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "AssetTxBsicInfoIO", "getBasicInfo()", "throws", "BizApplicationException", "{", "if(assetTxBasicCache", "==", "null)", "{", "return", "null;", "}", "AssetTxBsicInfoIO", "assetTxBsicInfoIO", "=", "new", "AssetTxBsicInfoIO();", "DtoCoreUtils.setSubInfoIO(assetTxBasicCache,", "assetTxBsicInfoIO);", "return", "assetTxBsicInfoIO;", "}"], "docstring_tokens": ["Inquire", "the", "basic", "information", "of", "the", "appraisal", "request."]}
{"code_tokens": ["public", "void", "saveListXtnInfo(List<ActorXtnAtrbtRgstIn>", "actorXtnAtrbtIOList)", "throws", "BizApplicationException", "{", "//", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138/\ubcf4\uc870\uba85\uc138", "\ubd84\ub958", "Map<String,", "String>", "subInfoCrtnMap", "=", "_getActorSubInfoBiz().getMapSubInfoCrtn(actorXtnAtrbtIOList);", "//", "2022.04.01", "CTI", "/", "EAV", "\ud310\ub2e8\uc774", "\ub05d\ub098", "EAV\uc6a9\uc73c\ub85c\ub9cc", "\ud638\ucd9c\ud568", "//", "super.saveListXtnInfo(actorXtnAtrbtIOList);", "super.saveListXtnInfoByEav(actorXtnAtrbtIOList);", "//", "\ubcf4\uc870\uba85\uc138", "\uc0dd\uc131", "_getActorSubInfoBiz().saveMapSubInfo(subInfoCrtnMap,", "this);", "}"], "docstring_tokens": ["It", "modifies", "the", "actor's", "extended", "information", "list.", "If", "the", "extended", "attribute", "information", "is", "registered,", "it", "will", "be", "modified.", "Otherwise,", "it", "will", "be", "registered.", "The", "registered", "information", "only", "includes", "normal", "status", "information."]}
{"code_tokens": ["public", "String", "getSaleEndDt()", "{", "return", "PdUtil.parseDateToYYYYMMDD(bf.getSaleEndDt());", "}"], "docstring_tokens": ["This", "Method", "inquire", "sale", "end", "date", "of", "product"]}
{"code_tokens": ["public", "String", "getApplyStartDate()", "{", "return", "aplyStartDt;", "}"], "docstring_tokens": ["Query", "apply", "start", "date"]}
{"code_tokens": ["public", "CaExtrnlInfoMgmtSvcRegisterMsgHdrInfoIn", "clone(){", "try{", "CaExtrnlInfoMgmtSvcRegisterMsgHdrInfoIn", "object=", "(CaExtrnlInfoMgmtSvcRegisterMsgHdrInfoIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(AsmStsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "List<StTxMIO>", "getListArrTx(StTxMIn", "in,", "ArrRealCore", "arr)", "throws", "BizApplicationException", "{", "switch(ArrTxKndCoreEnum.getEnum(getArrTxKnd(arr)))", "{", "case", "ARR_TX_INTERNAL:", "return", "_getStTxIntrnlMDso().selectListArrTx(in);", "case", "ARR_TX_TEMPRARY:", "return", "_getStTxTmpryMDso().selectListArrTx(in);", "case", "ARR_TX_NORMAL:", "return", "_getStTxMDso().selectListArrTx(in);", "default", ":", "throw", "new", "BizApplicationException(\"AAPSTE0212\");", "}", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "inquiring", "list", "of", "basic", "information", "of", "transaction."]}
{"code_tokens": ["public", "List<LmtIO>", "getListLimit(String", "instCd,", "String", "roleId,", "String", "lmtDscd,", "String", "crncyCd)", "throws", "BizApplicationException", "{", "List<CmLmtDIO>", "list", "=", "_getCmLmtDDso().selectList(instCd,", "roleId,", "lmtDscd,", "crncyCd);", "List<LmtIO>", "out", "=", "new", "ArrayList<LmtIO>();", "if(list", "==", "null", "||", "list.isEmpty())", "{", "return", "out;", "}", "for(CmLmtDIO", "cmLmtDIO", ":", "list)", "{", "out.add(_getLmtIO(cmLmtDIO));", "}", "return", "out;", "}"], "docstring_tokens": ["It", "inquires", "the", "limit", "list", "of", "role.", "@seealso", "@note", "</div>", "<div", "class='ko'>", "@description", "<pre>", "\uc5ed\ud560\uc758", "\ud55c\ub3c4\ubaa9\ub85d\uc744", "\uc870\ud68c", "\ud55c\ub2e4."]}
{"code_tokens": ["public", "boolean", "isPhysicallyCreated()", "{", "return", "isPhysicallyCreated;", "}"], "docstring_tokens": ["Check", "whether", "if", "arrangement", "is", "physically", "created."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "String", "cd)", "throws", "BizApplicationException", "{", "return", "_checkCode(cdNbr,", "cd);", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["public", "CaClTreeMgmtSvcSysIn", "clone(){", "try{", "CaClTreeMgmtSvcSysIn", "object=", "(CaClTreeMgmtSvcSysIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "validate()", "throws", "BizApplicationException", "{", "switch", "(isValidCndValue(getSuperListCd()))", "{", "case", "NoError:", "return;", "default:", "throw", "new", "BizApplicationException(\"AAPARE0158\"", ",", "new", "Object[]{", "getCndCd(),", "getPdCnd().getCndNm(),", "getArrangementCore().getPd().getPdNm(),", "getListCdList(),", "getSuperListCd()});", "}", "}"], "docstring_tokens": ["Inquire", "whether", "if", "arrangement", "issued", "media", "is", "effective.", "Not", "available", "status", "for", "transaction", ":", "Arrangement", "issued", "media", "status", "is", "Suspended,", "Terminated,", "Canceled", "or", "active", "service", "blocking", "is", "regisetered", "on", "the", "media"]}
{"code_tokens": ["public", "AptMaketPriceListIn", "clone(){", "try{", "AptMaketPriceListIn", "object=", "(AptMaketPriceListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(CustRprsnCore", "custRprsnCore,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "_getCustRprsnSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(CustRprsnImpl)", "custRprsnCore);", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo", ",", "StlmntCalcnSubInfoInqryIn", "stlmntCalcnSubInfoInqryIn)", "throws", "BizApplicationException", "{", "_getStlmntCalcnSubInfoBiz().saveSubInfo(subInfo,", "_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn));", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOutList", "clone(){", "try{", "CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOutList", "object=", "(CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOutList)super.clone();", "if", "(", "this.tblList==", "null", ")", "object.tblList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut>(tblList.size());", "for(", "bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut", "item", ":", "tblList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrXtnAtrbtCntrlSvcGetListSrvcTpByXtnAtrbtOut)item.clone());", "}", "object.tblList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaBizRuleInqrySvcByPdOut", "clone(){", "try{", "CaBizRuleInqrySvcByPdOut", "object=", "(CaBizRuleInqrySvcByPdOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "static", "String", "getRckngDt(CmnContextCore", "cmnContextCore)", "throws", "BizApplicationException", "{", "String", "rckngDt", "=", "cmnContextCore.getRckngDt();", "if", "(StringCoreUtils.isEmpty(rckngDt))", "{", "rckngDt", "=", "cmnContextCore.getTxDate();", "}", "return", "rckngDt;", "}"], "docstring_tokens": ["Reckoning", "date", "inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "void", "terminateContactPoint(String", "actorCtcptId)", "throws", "BizApplicationException", "{", "getActor().terminateContactPoint(actorCtcptId);", "}"], "docstring_tokens": ["It", "terminates", "a", "specific", "contact", "point", "information", "by", "the", "actor", "contact", "point", "identification", "and", "actor", "contact", "point", "change", "sequence", "number."]}
{"code_tokens": ["public", "StaffSubInfo", "getStaffSubInfo()", "throws", "BizApplicationException", "{", "AtStaffSIO", "subInfoCache", "=", "_getStaffSubInfoBiz().getSubInfoCache(this);", "//", "null", "check", "if", "(subInfoCache", "==", "null)", "{", "return", "null;", "}", "//", "convert", "to", "I/F", "VO", "StaffSubInfo", "subInfo", "=", "new", "StaffSubInfo();", "DtoUtils.setSubInfoIO(subInfoCache,", "subInfo);", "return", "subInfo;", "}"], "docstring_tokens": ["Inquire", "subsidiary", "information", "of", "the", "staff", "as", "a", "VO."]}
{"code_tokens": ["public", "PdCardMIO", "selectCardInfo(String", "tntInstId,", "String", "cardId)", "throws", "BizApplicationException", "{", "//", "\uc870\ud68c", "PdCardMIO", "out", "=", "_getPdServiceDso().selectCardInfo(tntInstId,", "cardId);", "//return", "return", "out;", "}"], "docstring_tokens": ["Methods", "to", "query", "card", "information"]}
{"code_tokens": ["public", "BfCnd", "getCnd(String", "cndCd)", "throws", "BizApplicationException", "{", "BfCndIn", "in", "=", "new", "BfCndIn();", "in.setCndCd(cndCd);", "in.setAplyDt(baseDaring);", "in.setAplyTm(baseTimeString);", "return", "getCnd(in);", "}"], "docstring_tokens": ["This", "Method", "create", "a", "condition", "object.", "condition", "information", "initialization.", "condition", "object", "has", "condition", "defined", "in", "product", "or", "common", "condition", "information."]}
{"code_tokens": ["public", "int", "saveTransferLanguage(CaTrnsfrLngSaveListIn", "in)", "throws", "BizApplicationException", "{", "//", "UI", "Data", "List<CaTrnsfrLngSaveIn>", "uiInputData", "=", "in.getTrnsfrLngList();", "//", "Check", "the", "input", "data", "size", "if(uiInputData.size()", "==", "0)", "{", "throw", "new", "BizApplicationException(\"AAPATE0067\",", "null);", "}", "if(logger.isDebugEnabled()){", "logger.debug(\"saveTransferLanguage", "TrnsfrLngSaveListIn", "=>{}\",in);", "}", "//", "DB", "Data", "String", "trnsfrKnd", "=", "in.getTrnsfrLngList().get(0).getTrnsfrKndCd();", "String", "browseUnitCd", "=", "in.getTrnsfrLngList().get(0).getQryUnitCd();", "List<CaCmMltLngTrnsltnDIO>", "dbOutputData;", "CaCmMltLngTrnsltnDIO", "multiLngDbIn", "=", "new", "CaCmMltLngTrnsltnDIO();", "multiLngDbIn.setTrnsfrKndCd(trnsfrKnd);", "multiLngDbIn.setTrnsfrOriginKeyVal(browseUnitCd);", "dbOutputData", "=", "_getCmMltLngTrnsltnDDso().selectList(multiLngDbIn);", "//", "Check", "the", "input", "validation", "_checkInputValidation(trnsfrKnd,", "browseUnitCd,", "in);", "if(logger.isDebugEnabled()){", "logger.debug(\"saveTransferLanguage", "dbOutputData", "=>{}\",dbOutputData);", "}", "//", "Compare", "UI,", "Db", "Data,", "and", "make", "the", "temp", "data", "//", "UI", "->", "DB", "Compare", "//", "logger.debug(\"#@#", "=======================", "=======================", "UI", "->", "DB\");", "List<CaCmMltLngTrnsltnDIO>", "tempData", "=", "new", "ArrayList<CaCmMltLngTrnsltnDIO>();", "if(dbOutputData.size()", "==", "0)", "{", "//", "No", "existing", "data(DB)", "for(int", "i", "=", "0;", "i", "<", "uiInputData.size();", "i++)", "{", "CaTrnsfrLngSaveIn", "uiInput", "=", "uiInputData.get(i);", "//", "insert", "CaCmMltLngTrnsltnDIO", "temp", "=", "new", "CaCmMltLngTrnsltnDIO();", "_getCmnContextCore().setHeaderColumn(temp);", "temp.setDscd(CCM01.INSERT_STATE);", "temp.setTrnsfrKndCd(uiInput.getTrnsfrKndCd());", "temp.setTrnsfrOriginKeyVal(uiInput.getTrnsfrOriginKeyVal());", "temp.setLngCd(uiInput.getLngCd());", "temp.setTrnsfrRsltVal(uiInput.getTrnsfrRsltVal());", "tempData.add(temp);", "}", "}", "else", "{", "for(int", "i", "=", "0;", "i", "<", "uiInputData.size();", "i++)", "{", "int", "uiUpdateCount", "=", "0;", "int", "uiInsertCount", "=", "0;", "CaTrnsfrLngSaveIn", "uiInput", "=", "uiInputData.get(i);", "for(int", "j", "=", "0;", "j", "<", "dbOutputData.size();", "j++)", "{", "CaCmMltLngTrnsltnDIO", "dbOutput", "=", "dbOutputData.get(j);", "if(uiInput.getTrnsfrOriginKeyVal().equals(dbOutput.getTrnsfrOriginKeyVal())", "&&", "uiInput.getLngCd().equals(dbOutput.getLngCd()))", "{", "++", "uiUpdateCount;", "}", "else", "{", "++", "uiInsertCount;", "}", "}", "if(uiUpdateCount", ">", "0)", "{", "//", "update", "CaCmMltLngTrnsltnDIO", "temp", "=", "new", "CaCmMltLngTrnsltnDIO();", "_getCmnContextCore().setHeaderColumn(temp);", "temp.setDscd(CCM01.UPDATE_STATE);", "temp.setTrnsfrKndCd(uiInput.getTrnsfrKndCd());", "temp.setTrnsfrOriginKeyVal(uiInput.getTrnsfrOriginKeyVal());", "temp.setLngCd(uiInput.getLngCd());", "temp.setTrnsfrRsltVal(uiInput.getTrnsfrRsltVal());", "tempData.add(temp);", "}", "else", "if(uiInsertCount", ">", "0)", "{", "//", "insert", "CaCmMltLngTrnsltnDIO", "temp", "=", "new", "CaCmMltLngTrnsltnDIO();", "_getCmnContextCore().setHeaderColumn(temp);", "temp.setDscd(CCM01.INSERT_STATE);", "temp.setTrnsfrKndCd(uiInput.getTrnsfrKndCd());", "temp.setTrnsfrOriginKeyVal(uiInput.getTrnsfrOriginKeyVal());", "temp.setLngCd(uiInput.getLngCd());", "temp.setTrnsfrRsltVal(uiInput.getTrnsfrRsltVal());", "tempData.add(temp);", "}", "}", "}", "//", "DB", "->", "UI", "Compare", "//", "logger.debug(\"#@#", "=======================", "=======================", "DB", "->", "UI\");", "HashMap<String,", "String>", "useLanguageDbHashMap", "=", "new", "HashMap<String,", "String>();", "//", "2018.06.07", "keewoong.hong", "\ubcc0\uacbd", "\uc694\uccad\uc774", "\ub4e4\uc5b4\uc624\uc9c0", "\uc54a\uc740", "\uc5b8\uc5b4\ub4e4\uc5d0", "\ub300\ud55c", "\uc0ad\uc81c\uc5ec\ubd80\ub97c", "\ud310\ubcc4\ud558\uae30", "\uc704\ud574", "\ud604\uc7ac", "\uc0ac\uc6a9\uc911\uc778", "\uc5b8\uc5b4\uc758", "\uac12\uc744", "\uc800\uc7a5\ud574", "\ub193\ub294\ub2e4.", "for(int", "i", "=", "0;", "i", "<", "dbOutputData.size();", "i++)", "{", "CaCmMltLngTrnsltnDIO", "dbOutput", "=", "dbOutputData.get(i);", "if(_getCmnContextCore().getLanguageCode().equals(dbOutput.getLngCd()))", "{", "useLanguageDbHashMap.put(dbOutput.getTrnsfrOriginKeyVal(),", "dbOutput.getTrnsfrRsltVal());", "}", "}", "//", "2018.06.07", "keewoong.hong", "DB\uc5d0\ub294", "\uc874\uc7ac\ud558\ub098", "UI\uc5d0\uc11c", "\ubcc0\uacbd\uc694\uccad\uc774", "\ub418\uc9c0", "\uc54a\uc740", "\ud56d\ubaa9\uc5d0", "\ub300\ud574\uc11c\ub3c4", "\uc77c\uad04", "\ubcc0\uacbd", "\uc791\uc5c5\uc744", "\uc218\ud589\ud55c\ub2e4.", "for(int", "i", "=", "0;", "i", "<", "dbOutputData.size();", "i++)", "{", "int", "dbDataDeleteCount", "=", "0;", "CaCmMltLngTrnsltnDIO", "dbOutput", "=", "dbOutputData.get(i);", "for(int", "j", "=", "0;", "j", "<", "uiInputData.size();", "j++)", "{", "CaTrnsfrLngSaveIn", "uiInput", "=", "uiInputData.get(j);", "//", "DB\uc5d0\ub294", "\uc874\uc7ac\ud558\ub098", "UI\uc5d0\uc11c", "\uba85\uc2dc\uc801\uc73c\ub85c", "\uc218\uc815\uc694\uccad\uc744", "\ud558\uc9c0", "\uc54a\uc740", "\ud56d\ubaa9\ub4e4\uc744", "\uc77c\uad04", "\uc0ad\uc81c\ub300\uc0c1\uc73c\ub85c", "\ud3ec\ud568\ud55c\ub2e4.", "if(dbOutput.getTrnsfrOriginKeyVal().equals(uiInput.getTrnsfrOriginKeyVal())", "&&", "dbOutput.getLngCd().equals(uiInput.getLngCd()))", "{", "++", "dbDataDeleteCount;", "}", "}", "if(dbDataDeleteCount", "==", "0)", "{", "//", "delete", "//", "\uc601\ubb38\uacfc", "\ud604\uc7ac", "\uc0ac\uc6a9\uc911\uc778", "\uc5b8\uc5b4\ub294", "\uba85\uc2dc\uc801\uc778", "\uc694\uccad\uc5d0", "\uc758\ud574\uc11c\ub9cc", "\uc218\uc815\ub41c\ub2e4\ub294", "\uac00\uc815\ud558\uc5d0", "\uc77c\uad04", "\uc791\uc5c5", "\ub300\uc0c1\uc5d0\ub294", "\ud3ec\ud568\uc2dc\ud0a4\uc9c0", "\uc54a\ub294\ub2e4.", "if(!CCM01.LNG_ENG.equals(dbOutput.getLngCd())", "&&", "!_getCmnContextCore().getLanguageCode().equals(dbOutput.getLngCd()))", "{", "//", "If", "Chinese", "value", "exist", "only", "in", "the", "DB", "int", "useOtherLanguageCount", "=", "0;", "String", "useLanguageTrnsfrOriginKey", "=", "\"\";", "String", "useLanguageTrnsfrRsltVal", "=", "\"\";", "if(useLanguageDbHashMap.containsKey(dbOutput.getTrnsfrOriginKeyVal()))", "{", "useLanguageTrnsfrOriginKey", "=", "dbOutput.getTrnsfrOriginKeyVal();", "useLanguageTrnsfrRsltVal", "=", "useLanguageDbHashMap.get(useLanguageTrnsfrOriginKey);", "}", "for(int", "j", "=", "0;", "j", "<", "uiInputData.size();", "j++)", "{", "CaTrnsfrLngSaveIn", "uiInput", "=", "uiInputData.get(j);", "//", "Check", "DB", "use", "language", "value", "<->", "UI", "use", "language", "value,", "if", "data", "are", "not", "same", "delete", "if(!StringUtils.isEmpty(useLanguageTrnsfrOriginKey)", "&&", "!StringUtils.isEmpty(useLanguageTrnsfrRsltVal)", "&&", "!StringUtils.isEmpty(uiInput.getTrnsfrOriginKeyVal())", "&&", "!StringUtils.isEmpty(uiInput.getTrnsfrRsltVal())", "&&", "!StringUtils.isEmpty(uiInput.getLngCd())", "&&", "uiInput.getTrnsfrOriginKeyVal().equals(useLanguageTrnsfrOriginKey)", "&&", "uiInput.getTrnsfrRsltVal().equals(useLanguageTrnsfrRsltVal)", "&&", "_getCmnContextCore().getLanguageCode().equals(uiInput.getLngCd()))", "{", "++", "useOtherLanguageCount;", "}", "}", "if(useOtherLanguageCount", "==", "0)", "{", "//", "delete", "CaCmMltLngTrnsltnDIO", "temp", "=", "new", "CaCmMltLngTrnsltnDIO();", "_getCmnContextCore().setHeaderColumn(temp);", "temp.setDscd(CCM01.DELETE_STATE);", "temp.setTrnsfrKndCd(dbOutput.getTrnsfrKndCd());", "temp.setTrnsfrOriginKeyVal(dbOutput.getTrnsfrOriginKeyVal());", "temp.setLngCd(dbOutput.getLngCd());", "temp.setTrnsfrRsltVal(dbOutput.getTrnsfrRsltVal());", "tempData.add(temp);", "}", "}", "}", "}", "if(!useLanguageDbHashMap.isEmpty())", "{", "useLanguageDbHashMap.clear();", "}", "String", "paramVal", "=", "_getInstParmProvider().getInstParm(CaInstParamEnum.SITE_LABORATORY_DISTINCTION_CODE.getValue());", "if(logger.isDebugEnabled()){", "logger.debug(\"saveTransferLanguage", "tempData", "=>", "{}\",tempData);", "}", "//", "Insert", "to", "the", "DB.", "for(int", "i", "=", "0;", "i", "<", "tempData.size();", "i++)", "{", "CaCmMltLngTrnsltnDIO", "temp", "=", "tempData.get(i);", "temp.setLastChngId(_getCmnContextCore().getStaffId());", "if(!StringUtils.isEmpty(paramVal))", "{", "temp.setSiteLbrtryDscd(paramVal);", "}", "else", "{", "temp.setSiteLbrtryDscd(\"Z\");", "}", "if(temp.getDscd().equals(CCM01.INSERT_STATE))", "{", "CaCmMltLngTrnsltnDIO", "cmMltLngTrnsltnDIO", "=", "_getCmMltLngTrnsltnDDso().selectAllStatus(temp);", "temp.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue());", "if(cmMltLngTrnsltnDIO", "!=", "null", "&&", "!StringUtils.isEmpty(cmMltLngTrnsltnDIO.getTrnsfrKndCd())){", "_getCmMltLngTrnsltnDDso().update(temp);", "}", "else", "{", "_getCmMltLngTrnsltnDDso().insert(temp);", "}", "}", "else", "if(temp.getDscd().equals(CCM01.UPDATE_STATE))", "{", "//", "update", "temp.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue());", "_getCmMltLngTrnsltnDDso().update(temp);", "}", "else", "if(temp.getDscd().equals(CCM01.DELETE_STATE))", "{", "//", "delete", "_getCmnContextCore().setHeaderColumn(temp);", "temp.setTrnsfrKndCd(temp.getTrnsfrKndCd());", "temp.setTrnsfrOriginKeyVal(temp.getTrnsfrOriginKeyVal());", "temp.setLngCd(temp.getLngCd());", "temp.setActvStsCd(CaActiveStatusEnum.INACTIVITY.getValue());", "_getCmMltLngTrnsltnDDso().update(temp);", "}", "}", "return", "0;", "}"], "docstring_tokens": ["Save", "the", "multi", "language."]}
{"code_tokens": ["public", "String", "transferToJsonString(IOmmObject", "dto)", "throws", "BizApplicationException", "{", "if(dto", "==", "null)", "return", "null;", "String", "jsonString", "=", "null;", "try", "{", "ObjectMapper", "omapper", "=", "new", "ObjectMapper();", "StringWriter", "stringWriter", "=", "new", "StringWriter();", "omapper.writeValue(stringWriter,", "dto);", "jsonString", "=", "stringWriter.toString();", "}", "catch(JsonParseException", "jpe)", "{", "throw", "new", "BizApplicationException(\"AAPCME0000\",", "new", "Object[]{", "\"@trnsfrm\",", "jpe", "});", "}", "catch(JsonMappingException", "jme)", "{", "throw", "new", "BizApplicationException(\"AAPCME0000\",", "new", "Object[]{", "\"@trnsfrm\",", "jme", "});", "}", "catch(IOException", "ioe)", "{", "throw", "new", "BizApplicationException(\"AAPCME0000\",", "new", "Object[]{", "\"@trnsfrm\",", "ioe", "});", "}", "return", "jsonString;", "}"], "docstring_tokens": ["It", "transforms", "DTO", "object", "to", "JSON", "object"]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapXtnInfo()", "throws", "BizApplicationException", "{", "//", "\uc561\ud130", "\ud655\uc7a5\uc815\ubcf4", "\ubc0f", "\ubcf4\uc870\uba85\uc138", "\uc870\ud68c", "Map<String,", "String>", "xtnInfoMap", "=", "getActor().getMapXtnInfo();", "//", "\uace0\uac1d", "\ud655\uc7a5\uc815\ubcf4", "\uc870\ud68c", "xtnInfoMap.putAll(super.getMapXtnInfoByEav());", "//", "\uace0\uac1d", "\ubcf4\uc870\uba85\uc138", "\uc870\ud68c", "xtnInfoMap.putAll(_getPrtnrSubInfoBiz().getMapSubInfo(this));", "return", "xtnInfoMap;", "}"], "docstring_tokens": ["Inquire", "the", "actor", "extended", "information", "map.", "Inquire", "extended", "information", "with", "normal", "extended", "attribute", "status", "code."]}
{"code_tokens": ["public", "CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrListOut", "clone(){", "try{", "CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrListOut", "object=", "(CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrListOut)super.clone();", "if", "(", "this.arrExtrnlIdNbrTpList==", "null", ")", "object.arrExtrnlIdNbrTpList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrDtl>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrDtl>(arrExtrnlIdNbrTpList.size());", "for(", "bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrDtl", "item", ":", "arrExtrnlIdNbrTpList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrExtrnlIdNbrTpInfoMgmtSvcGetExtrnlIdNbrDtl)item.clone());", "}", "object.arrExtrnlIdNbrTpList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "java.lang.String", "getStaffId(){", "return", "staffId;", "}"], "docstring_tokens": ["Inquire", "the", "staff", "identification", "from", "staff", "basic", "information."]}
{"code_tokens": ["public", "CustCmphInqrySvcGetCustGradeOvrvwOut", "clone(){", "try{", "CustCmphInqrySvcGetCustGradeOvrvwOut", "object=", "(CustCmphInqrySvcGetCustGradeOvrvwOut)super.clone();", "if", "(", "this.gradeList==", "null", ")", "object.gradeList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustGradeOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustGradeOut>(gradeList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustGradeOut", "item", ":", "gradeList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustCmphInqrySvcGetCustGradeOut)item.clone());", "}", "object.gradeList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getAssetThingXtnInfo(Integer", "assetThingSeqNbr,", "AssetThingXtnInfoEnum", "assetThingXtnInfoEnum)", "throws", "BizApplicationException", "{", "//", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\uc815\ubcf4\uad00\ub9ac\ubc29\ubc95", "\ud310\ub2e8", "//", "1.", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AS_ASSET_THING_D.getValue(),", "assetThingXtnInfoEnum.getValue()))", "{", "return", "super.getAssetThingXtnInfoByEav(assetThingSeqNbr,", "assetThingXtnInfoEnum.getValue());", "}", "//", "2.", "\ubcf4\uc870\uba85\uc138", "else", "{", "return", "_getAssetThingSubInfoBiz().getSubInfo(assetThingXtnInfoEnum.getValue(),", "this,", "assetThingSeqNbr);", "}", "}"], "docstring_tokens": ["Inquire", "a", "specific", "extended", "information", "of", "the", "asset", "thing."]}
{"code_tokens": ["public", "PrtnrshpArrAtmtcCreationRuleIn", "clone(){", "try{", "PrtnrshpArrAtmtcCreationRuleIn", "object=", "(PrtnrshpArrAtmtcCreationRuleIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "LnLmtRdctnAmtSvcAcctNbrIn", "clone(){", "try{", "LnLmtRdctnAmtSvcAcctNbrIn", "object=", "(LnLmtRdctnAmtSvcAcctNbrIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaCmnCdCheckOut", "getCode(CaCmnCdCheckIn", "in)", "throws", "BizApplicationException", "{", "//", "Validate", "the", "input", "_checkQueryInputArgument(in);", "CaCmnCdCheckOut", "out", "=", "new", "CaCmnCdCheckOut();", "//", "Get", "the", "code", "master", "information", "CaCdNbrInfoIO", "cdMstOut", "=", "_getCodeMasterInformation(in.getCdNbr());", "//", "Get", "the", "code", "detail", "information", "List<CaCdDtlIO>", "cdDtlOutList", "=", "_getCdDtl().getCodeDetail(cdMstOut);", "//", "Find", "the", "output", "value", "same", "as", "an", "input", "value", "for(int", "i", "=", "0;", "i", "<", "cdDtlOutList.size();", "i++)", "{", "CaCdDtlIO", "cdDtlOut", "=", "cdDtlOutList.get(i);", "if(in.getCd().equals(cdDtlOut.getCd()))", "{", "out.setCdNbr(cdDtlOut.getCdNbr());", "out.setCd(cdDtlOut.getCd());", "if(!CCM01.EXTRNL_CD.equals(cdMstOut.getCdNbrTpCd()))", "{", "out.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "cdDtlOut.getCdNbr().concat(cdDtlOut.getCd())));", "}", "else", "{", "out.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "_getCaCmnContext().getInstCode().concat(cdDtlOut.getCdNbr().concat(cdDtlOut.getCd()))));", "}", "}", "}", "return", "out;", "}"], "docstring_tokens": ["It", "get", "the", "code", "that", "meet", "the", "search", "condition.", "Code", "information", "is", "consisted", "of", "CmnCdCheckOut.", "(cdNbr,", "cd,", "cdNm,", "delYn,", "cdAbrvtnNm)"]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "_doTermExtensionAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AprslCore", "aprslCore)", "throws", "BizApplicationException", "{", "_getAprslSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AprslImpl)", "aprslCore);", "}"], "docstring_tokens": ["Save", "an", "asset", "transaction", "subsidiary", "information."]}
{"code_tokens": ["public", "PdCalculationCrRuleCndDtlInfoOut", "clone(){", "try{", "PdCalculationCrRuleCndDtlInfoOut", "object=", "(PdCalculationCrRuleCndDtlInfoOut)super.clone();", "if", "(", "this.cmpsCndList==", "null", ")", "object.cmpsCndList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpsCndOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpsCndOut>(cmpsCndList.size());", "for(", "bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpsCndOut", "item", ":", "cmpsCndList", "){", "clonedList.add(", "(bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpsCndOut)item.clone());", "}", "object.cmpsCndList", "=", "clonedList;", "}", "if", "(", "this.cmpxCndValList==", "null", ")", "object.cmpxCndValList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpxCndValOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpxCndValOut>(cmpxCndValList.size());", "for(", "bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpxCndValOut", "item", ":", "cmpxCndValList", "){", "clonedList.add(", "(bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailCmpxCndValOut)item.clone());", "}", "object.cmpxCndValList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getInstCd()", "{", "return", "pdPdM.getInstCd();", "}"], "docstring_tokens": ["This", "method", "inquire", "institution", "code", "of", "point"]}
{"code_tokens": ["public", "PrtnrXtnAtrbtSvcOut", "clone(){", "try{", "PrtnrXtnAtrbtSvcOut", "object=", "(PrtnrXtnAtrbtSvcOut)super.clone();", "if", "(", "this.xtnAtrbtList==", "null", ")", "object.xtnAtrbtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.partner.query.service.dto.PrtnrXtnAtrbtSvcListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.partner.query.service.dto.PrtnrXtnAtrbtSvcListOut>(xtnAtrbtList.size());", "for(", "bankware.corebanking.partner.query.service.dto.PrtnrXtnAtrbtSvcListOut", "item", ":", "xtnAtrbtList", "){", "clonedList.add(", "(bankware.corebanking.partner.query.service.dto.PrtnrXtnAtrbtSvcListOut)item.clone());", "}", "object.xtnAtrbtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "java.util.List<java.lang.String>", "getList(){", "return", "list;", "}"], "docstring_tokens": ["It", "gets", "self", "authentication", "code", "information", "list."]}
{"code_tokens": ["public", "StaffSelfAuthSvcPrcsIn", "clone(){", "try{", "StaffSelfAuthSvcPrcsIn", "object=", "(StaffSelfAuthSvcPrcsIn)super.clone();", "if", "(", "this.xtnAtrbtList==", "null", ")", "object.xtnAtrbtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.staff.security.service.dto.StaffSelfAuthSvcXtnAtrbtIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.staff.security.service.dto.StaffSelfAuthSvcXtnAtrbtIO>(xtnAtrbtList.size());", "for(", "bankware.corebanking.staff.security.service.dto.StaffSelfAuthSvcXtnAtrbtIO", "item", ":", "xtnAtrbtList", "){", "clonedList.add(", "(bankware.corebanking.staff.security.service.dto.StaffSelfAuthSvcXtnAtrbtIO)item.clone());", "}", "object.xtnAtrbtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<TblXtnAtrbtDtlIO>", "getListAttributeExistData(String", "atrbtNm)", "{", "//", "TODO", "Auto-generated", "method", "stub", "List<TblXtnAtrbtDtlIO>", "out", "=", "new", "ArrayList<TblXtnAtrbtDtlIO>();", "TblXtnAtrbtDtlIO", "outTblAtrbt=", "null;", "List<CmTblAtrbtMIO>", "cmTblAtrbtMIOList", "=", "_getCmTblAtrbtMDso().selectListByName(atrbtNm);", "for", "(CmTblAtrbtMIO", "outDao", ":", "cmTblAtrbtMIOList){", "outTblAtrbt", "=", "new", "TblXtnAtrbtDtlIO();", "outTblAtrbt.setTblNm(outDao.getTblNm());", "out.add(outTblAtrbt);", "}", "List<CmTblXtnAtrDIO>", "cmTblXtnAtrDIOList", "=", "_getCmTblXtnAtrDDso().selectListByAtrbtNm(atrbtNm);", "for", "(CmTblXtnAtrDIO", "outDao", ":", "cmTblXtnAtrDIOList){", "outTblAtrbt", "=", "new", "TblXtnAtrbtDtlIO();", "outTblAtrbt.setTblNm(outDao.getTblNm());", "out.add(outTblAtrbt);", "}", "return", "out;", "}"], "docstring_tokens": ["Check", "whether", "the", "attribute", "is", "exist", "in", "CBB", "table", "attribute"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AprslCore", "aprslCoreImpl,", "Integer", "prfClaimSeqNbr)", "throws", "BizApplicationException", "{", "_getAprslPrfClaimSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AprslImpl)", "aprslCoreImpl,", "prfClaimSeqNbr);", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "ArArrSrvcBlckngRgstPIO", "select(ArArrSrvcBlckngRgstPIO", "arArrSrvcBlckngRgstPIO)", "{", "return", "_getArArrSrvcBlckngRgstP().select(arArrSrvcBlckngRgstPIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "AprslImpl", "aprslImpl,", "Integer", "prfClaimSeqNbr)", "throws", "BizApplicationException", "{", "//", "1.", "\uac10\uc815", "\uac1d\uccb4\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AsAprslPrfClaimSIO", "aprslPrfClaimSubInfo", "=", "getSubInfoCache(aprslImpl,", "prfClaimSeqNbr);", "//", "2.", "\uac10\uc815\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(aprslPrfClaimSubInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\uac10\uc815\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "aprslPrfClaimSubInfo.get(atrbtNm);", "//", "\uc18d\uc131\uac12\uc774", "null\uc778\uacbd\uc6b0", "null\ub9ac\ud134", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "detail", "information."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "ScrtyIntCore", "scrtyInt,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getScrtyIntSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "(ScrtyIntImpl)", "scrtyInt);", "}"], "docstring_tokens": ["Save", "an", "security", "interest", "subsidiary", "information."]}
{"code_tokens": ["public", "int", "getSeqNbr(){", "return", "seqNbr;", "}"], "docstring_tokens": ["This", "method", "get", "sequence", "number.", "If", "the", "arrangement", "condition", "value", "is", "changed,", "it", "is", "increased."]}
{"code_tokens": ["public", "CaScrnMgmtSvcSaveScrnInfoInList", "clone(){", "try{", "CaScrnMgmtSvcSaveScrnInfoInList", "object=", "(CaScrnMgmtSvcSaveScrnInfoInList)super.clone();", "if", "(", "this.inList==", "null", ")", "object.inList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcSaveScrnInfoIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcSaveScrnInfoIn>(inList.size());", "for(", "bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcSaveScrnInfoIn", "item", ":", "inList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcSaveScrnInfoIn)item.clone());", "}", "object.inList", "=", "clonedList;", "}", "if", "(", "this.removeList==", "null", ")", "object.removeList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn>(removeList.size());", "for(", "bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn", "item", ":", "removeList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.ui.service.dto.CaScrnMgmtSvcRemoveScrnInfoIn)item.clone());", "}", "object.removeList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrBalAcmltAmtOut", "getAccumulatedAmount(String", "startDt,", "String", "endDt,", "List<BigDecimal>", "amtList,", "boolean", "isMinusSkip,", "boolean", "isPlusSkip)", "throws", "BizApplicationException", "{", "boolean", "parttnYn", "=", "false;", "/*", "*", "Checking", "partition", "*/", "if(amtList", "!=", "null", "&&", "!amtList.isEmpty()", ")", "parttnYn", "=", "true;", "/*", "*", "Basic", "Input", "Data", "Validation", "*/", "if", "(StringCoreUtils.isEmpty(startDt))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@startDt\"});", "}", "if", "(StringCoreUtils.isEmpty(endDt))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@endDt\"});", "}", "if", "(startDt.compareTo(endDt)", ">", "0)", "{", "throw", "new", "BizApplicationException(\"AAPSTE0180\",", "null);", "//", "error", "(start", "date", ">", "end", "date)", "}", "/*", "*", "Check", "for", "avoid", "that", "(+)", "value", "and", "(-)", "value,", "both", "are", "exist.", "*/", "int", "plusCnt", "=", "0;", "int", "mnsCnt", "=", "0;", "if(parttnYn", "==", "true)", "{", "for(int", "i", "=", "0;", "i", "<", "amtList.size()", "-1;", "i++)", "{", "if(amtList.get(i).compareTo(amtList.get(i+1))", ">=", "0)", "throw", "new", "BizApplicationException(\"AAPSTE0181\",", "null);", "//", "disorder", "or", "duplication", "if(amtList.get(i).compareTo(BigDecimal.ZERO)", ">", "0)", "{", "plusCnt++;", "}else", "if(amtList.get(i).compareTo(BigDecimal.ZERO)", "<", "0)", "{", "mnsCnt++;", "}", "}", "if(amtList.get(amtList.size()", "-1).compareTo(BigDecimal.ZERO)", ">", "0)", "{", "plusCnt++;", "}else", "if(amtList.get(amtList.size()", "-1).compareTo(BigDecimal.ZERO)", "<", "0)", "{", "mnsCnt++;", "}", "}", "if(plusCnt", ">", "0", "&&", "mnsCnt", ">", "0)", "throw", "new", "BizApplicationException(\"AAPSTE0182\",", "null);", "ArrBalAcmltAmtOut", "out", "=", "new", "ArrBalAcmltAmtOut();", "//", "Initialization", "out.setAcmltdAmt(BigDecimal.ZERO);", "out.setLowLmtAcmltdAmt(BigDecimal.ZERO);", "out.setOverUpLmtAcmltdAmt(BigDecimal.ZERO);", "if(parttnYn", "==", "true)", "{", "for(int", "i", "=", "0;", "i", "<", "amtList.size()", "-1;", "i++)", "{", "out.getAmtList().add(BigDecimal.ZERO);", "}", "}", "/*", "*", "Calculate", "accumulated", "amount", "*/", "if(balDt.compareTo(startDt)", "<=", "0)", "{", "//", "just", "use", "MAX", "Data", "(balance", "wasn't", "changed", "in", "term)", "if(sctnStartDt.compareTo(startDt)", "<=", "0", "&&", "endDt.compareTo(sctnEndDt)", "<", "0)", "{", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "startDt,", "endDt,", "balDtBal,", "amtList,", "out);", "}", "}else", "{", "//", "balance", "was", "changed", "in", "term", "(daily", "balance's", "history", "is", "exist)", "StArrDailyBalHIO", "inParam", "=", "new", "StArrDailyBalHIO();", "inParam.setInstCd(arr.getInstCd());", "inParam.setArrId(arr.getArrId());", "inParam.setAmtTpCd(this.amtTpDtlIO.getAmtTpCd());", "inParam.setBalTpCd(this.balTpDtlIO.getBalTpCd());", "inParam.setCrncyCd(crncyCd);", "//", "data", "in", "term", "List<StArrDailyBalHIO>", "outParams", "=", "_getStArrDailyBalHDso().selectList(inParam,", "startDt,", "endDt);", "if(startDt.compareTo((outParams", "!=", "null", "&&", "!outParams.isEmpty())", "?", "outParams.get(0).getBalDt()", ":", "balDt)", "==", "0)", "{", "//", "do", "nothing", "}else", "{", "inParam.setBalDt(startDt);", "//", "Condition", "for", "finding", "data", "before", "this", "term", "//", "data", "before", "this", "term", "StArrDailyBalHIO", "bfParam", "=", "_getStArrDailyBalHDso().selectPreviousBalDt(inParam);", "if(bfParam", "!=", "null)", "{", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "startDt,", "(outParams", "!=", "null", "&&", "!outParams.isEmpty())", "?", "outParams.get(0).getBalDt()", ":", "(endDt.compareTo(balDt)", "<", "0", "?", "endDt", ":", "balDt),", "bfParam.getDayClsgBal(),", "amtList,", "out);", "}", "}", "if(outParams", "!=", "null", "&&", "!outParams.isEmpty())", "{", "while(outParams.size()", ">", "1)", "{", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "outParams.get(0).getBalDt(),", "outParams.get(1).getBalDt(),", "outParams.get(0).getDayClsgBal(),", "amtList,", "out);", "outParams.remove(0);", "}", "try", "{", "//", "must", "be", ":", "Daily", "Balance's", "Last", "Data", "<", "Last", "Balance", "Data", "//", "daily", "balance's", "last", "date", "+", "1", "=", "end", "date", "of", "inquiry", "term", ">>", "don't", "need", "last", "balance", "master", "DB", "//", "End", "date", "of", "inquiry", "period", "<=", "date", "in", "last", "balance", "table,", "then", "don't", "need", "master", "Information", "if", "(!outParams.get(0).getBalDt().equals(endDt))", "{", "if(endDt.compareTo(balDt)", "<=", "0)", "{", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "outParams.get(0).getBalDt(),", "endDt,", "outParams.get(0).getDayClsgBal(),", "amtList,", "out);", "//", "Daily", "Balance", "Last", "Date", "<", "Last", "Balance", "Date", "<=", "end", "date", "of", "inquiry", "term", "}else", "{", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "outParams.get(0).getBalDt(),", "balDt,", "outParams.get(0).getDayClsgBal(),", "amtList,", "out);", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "balDt,", "endDt,", "balDtBal,", "amtList,", "out);", "}", "}", "}catch(Exception", "e)", "{", "logger.info(\"ERROR", ":", "{}\",", "e);", "throw", "e;", "}", "}", "else", "{", "if", "(balDt.compareTo(endDt)", "<", "0)", "_calculateAccumulatedAmt(parttnYn,", "isMinusSkip,", "isPlusSkip,", "balDt,", "endDt,", "balDtBal,", "amtList,", "out);", "}", "}", "if", "(logger.isDebugEnabled()){", "logger.debug(\"getAccumulatedAmount", "is", "called.", "start", "date", ":", "{},", "end", "date", ":", "{}\",startDt,endDt", ");", "logger.debug(\"getAccumulatedAmount", "is", "called.", "arrBal", ":", "{}", "\",", "this.toString());", "logger.debug(\"getAccumulatedAmount", "is", "called.", "out", ":", "{}", "\",", "out.getFieldValues());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "accumulated", "amount", "within", "the", "period", "you", "entered.", "If", "isMinusSkip", "is", "false,", "the", "negative", "amount", "is", "added", "the", "accumulated", "amount."]}
{"code_tokens": ["public", "CaRoleMgmtSvcGetRoleClassificationRelationListOut", "clone(){", "try{", "CaRoleMgmtSvcGetRoleClassificationRelationListOut", "object=", "(CaRoleMgmtSvcGetRoleClassificationRelationListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleClassificationRelationOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleClassificationRelationOut>(tblNm.size());", "for(", "bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleClassificationRelationOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleClassificationRelationOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<BfCustomerRelationIO>", "getListBfCustRelation(BfCustomerRelationIO", "in)", "throws", "BizApplicationException", "{", "BfCustomerRelationListIn", "apiIn", "=", "new", "BfCustomerRelationListIn();", "apiIn.setInstitutionId(bf.getInstCd());", "apiIn.setBfCd(getBfCd());", "apiIn.setBfCustRelationCd(in.getBnftCustRelCd());", "apiIn.setCustId(in.getCustId());", "apiIn.setBaseDate(", "PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyStartDt(),", "_getAplyTmString(in.getAplyStartTm())));", "List<BfCustomerRelationOut>", "apiOut", "=", "_bfApi().getListBfCustomerRelation(apiIn);", "if(CollectionUtils.isEmpty(apiOut))", "{", "return", "Collections.emptyList();", "}", "List<BfCustomerRelationIO>", "out", "=", "new", "ArrayList<>();", "for(BfCustomerRelationOut", "item", ":", "apiOut)", "{", "BfCustomerRelationIO", "temp", "=", "new", "BfCustomerRelationIO();", "temp.setTntInstId(item.getInstitutionId());", "temp.setPdInfoDscd(item.getPdInfoDscd());", "temp.setBnftCd(item.getBfCd());", "temp.setBnftNm(item.getBfName());", "temp.setBnftCustRelCd(item.getBfCustRelationCd());", "temp.setCustId(item.getCustId());", "temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(item.getApplyStartDate()));", "temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(item.getApplyStartDate()));", "temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(item.getApplyEndDate()));", "temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(item.getApplyEndDate()));", "temp.setSaleStartDt(PdUtil.parseDateToYYYYMMDD(item.getSaleStartDate()));", "temp.setSaleStartTm(PdUtil.parseDateToHHMMSS(item.getSaleStartDate()));", "temp.setSaleEndDt(PdUtil.parseDateToYYYYMMDD(item.getSaleEndDate()));", "temp.setSaleEndTm(PdUtil.parseDateToHHMMSS(item.getSaleEndDate()));", "temp.setTotCouponCnt(item.getTotalCouponCnt());", "temp.setIssueCouponCnt(item.getIssueCouponCnt());", "temp.setUsedCouponCnt(item.getUsedCouponCnt());", "temp.setPgNbr(item.getPageNum());", "temp.setPgCnt(item.getPageCnt());", "temp.setPdTmpltCdList(item.getPdTemplateCdList());", "out.add(temp);", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "benefit", "customer", "relation", "list."]}
{"code_tokens": ["public", "StndngOrderAplctnHstInqrySvcOut", "clone(){", "try{", "StndngOrderAplctnHstInqrySvcOut", "object=", "(StndngOrderAplctnHstInqrySvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "close()", "throws", "ItemStreamException", "{", "if", "(logger.isDebugEnabled())", "logger.debug(\"DeptAplyReader", "close\");", "DasUtils.disconnectDasExecutor(iterator);", "}"], "docstring_tokens": ["It", "closes", "the", "customer", "related", "person", "by", "updating", "delYn", "of", "basic", "information", "to", "'Y'."]}
{"code_tokens": ["public", "void", "saveAssetThingXtnInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr,", "AssetCoreImpl", "assetImpl,", "Integer", "assetThingSeqNbr,", "boolean", "isEavOnly)", "throws", "BizApplicationException", "{", "_checkInput(xtnAtrbtNm,", "txDt,", "txSeqNbr);", "//", "1.", "Site", "Base\uc5d0\uc11c", "\ud638\ucd9c\ub41c", "\uacbd\uc6b0,", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138\ub9cc", "\uc800\uc7a5", "if(isEavOnly)", "{", "_saveAssetThingXtnInfoByEav(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "assetImpl,", "assetThingSeqNbr);", "return;", "}", "//", "2.", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\ubc29\ubc95", "\ud310\ub2e8", "//", "2-1.", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if", "(_getTblXtnAtrbtCore().isExtendWayEav(XtnTableEnum.AS_ASSET_THING_D.getValue(),", "xtnAtrbtNm))", "{", "_saveAssetThingXtnInfoByEav(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "assetImpl,", "assetThingSeqNbr);", "//", "2-2.", "EAV\uac00", "\uc544\ub2cc", "\uacbd\uc6b0", "\ubcf4\uc870\uba85\uc138\ub85c", "\uc800\uc7a5", "}", "else", "{", "_getAssetThingXtnInfoCustom().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "assetImpl,", "assetThingSeqNbr,txDt,", "txSeqNbr);", "}", "}"], "docstring_tokens": ["Save", "a", "specific", "extended", "information", "of", "the", "asset", "thing."]}
{"code_tokens": ["public", "Integer", "getListDataCntForConsistency()", "throws", "BizApplicationException", "{", "return", "_getDstbCnstncyCmRoleMDso().selectListCntForConsistency();", "}"], "docstring_tokens": ["Validate", "Query", "Row", "Count", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "CaArrRelRuleMgmtTestSvcIn", "clone(){", "try{", "CaArrRelRuleMgmtTestSvcIn", "object=", "(CaArrRelRuleMgmtTestSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaIpctClInfoIn", "clone(){", "try{", "CaIpctClInfoIn", "object=", "(CaIpctClInfoIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\uae30\uc874", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "ArArrSrvcBlckngSIO", "subInfoCache", "=", "_getSubInfoCache(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "ArArrSrvcBlckngSIO();", "subInfoCache.setArrId(arrRealImpl.getArrId());", "subInfoCache.setArrSrvcBlckngSeqNbr(arrSrvcBlckngSeqNbr);", "subInfoCache.setSeqNbr(seqNbr);", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveArArrSrvcBlckngSubH(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "insert", "_getArArrSrvcBlckngSDso().insert(subInfoCache);", "//", "save", "cache", "_saveSubInfoCache(subInfoCache,", "arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveArArrSrvcBlckngSubH((ArrRealImpl)", "arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "update", "_getArArrSrvcBlckngSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "arrXtnInfoMap,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealCore", "arrRealCore)", "throws", "BizApplicationException", "{", "_getArrSrvcBlckngSubInfoBiz().saveMapSubInfo(arrXtnInfoMap,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "txDt,", "txSeqNbr,", "(ArrRealImpl)arrRealCore);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "CustCheckPwdOut", "login(CustRprsnImpl", "custRprsnImpl,", "AtCustRprsnLoinInfoDIO", "custRprsnLoinInfoIO,", "String", "pswd,", "String", "loinTpCd)", "throws", "BizApplicationException,", "ParseException", "{", "//", "\uae30\uad00\ud30c\ub77c\ubbf8\ud130\uc5d0", "\uc815\uc758\ub41c", "\ub85c\uadf8\uc778\ube44\ubc00\ubc88\ud638\uc624\ub958\ud5c8\uc6a9\ud69f\uc218", "\uc870\ud68c", "String", "pswdErrAllwnCntInstParm", "=", "_getInstParmProvider().getInstParm(InstParamEnum.INST_PARAM_LOIN_PSWD_ALLWNC_CNT.getValue());", "//", "password", "error", "allowance", "count", "if(StringUtils.isEmpty(pswdErrAllwnCntInstParm))", "{", "throw", "new", "BizApplicationException(\"AAPCME0184\",", "new", "Object[]", "{\"@loinPswdErrAllwncCnt\"});", "}", "int", "pswdErrorAllwncCnt", "=", "Integer.parseInt(pswdErrAllwnCntInstParm);", "CustCheckPwdOut", "custCheckPwdOut", "=", "new", "CustCheckPwdOut();", "AtCustRprsnLoinHIO", "atCustRprsnLoinHIO", "=", "new", "AtCustRprsnLoinHIO();", "//", "Customer", "login", "history", "IO", "//", "get", "password", "error", "count", "excess", "yes/no", "Integer", "pswdErrCnt", "=", "custRprsnLoinInfoIO.getPswdErrCnt();", "String", "pswdErrCntExcsYn", "=", "custRprsnLoinInfoIO.getPswdErrCntExcsYn();", "String", "pswdLockExprtnDtm", "=", "custRprsnLoinInfoIO.getPswdLockExprtnDtm();", "//", "\ube44\ubc00\ubc88\ud638", "\uc624\ub958", "\uad00\ub828", "\uc815\ubcf4", "\ubcc0\uacbd", "\uc5ec\ubd80", "\ud310\ub2e8", "boolean", "isChanged", "=", "false;", "//", "2020.07.09", "\ube44\ubc00\ubc88\ud638\uc77c\uce58\uc5ec\ubd80", "\ucd94\uac00", "//", "\ube44\ubc00\ubc88\ud638\uac00", "\uc7a0\uae08\uc0c1\ud0dc\uc778", "\uacbd\uc6b0", "\ub85c\uadf8\uc778\uc744", "\uc2dc\ub3c4\ud588\uc744", "\ub54c", "\ube44\ubc00\ubc88\ud638", "\uc77c\uce58\uc5ec\ubd80\uc5d0", "\ub530\ub77c", "\uc5d0\ub7ec\uba54\uc138\uc9c0\ub97c", "\uad6c\ubd84\ud558\uae30", "\uc704\ud568", "if", "(pswd.equals(custRprsnLoinInfoIO.getEncrptnPswd()))", "{", "custCheckPwdOut.setPswdMatchYn(CCM01.YES);", "}", "//", "If", "password", "error", "count", "is", "large", "then", "password", "error", "allowance", "count", "//", "0.", "\ud328\uc2a4\uc6cc\ub4dc\uac00", "\uc7a0\uae08\uc0c1\ud0dc\uc778", "\uacbd\uc6b0", "if", "(CCM01.YES.equals(pswdErrCntExcsYn))", "{", "long", "rsdlTm", "=", "TimeCalculator.calculateResidualLockTime(pswdLockExprtnDtm);", "if", "(rsdlTm", ">", "0)", "{", "custCheckPwdOut.setPswdErrCnt(pswdErrCnt);", "custCheckPwdOut.setPswdLockTmCd(TimeCalculator.setTimeFormat(rsdlTm));", "custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt);", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_SCRTY_LOCK.getValue());", "return", "custCheckPwdOut;", "}", "}", "//", "1.", "\ud328\uc2a4\uc6cc\ub4dc", "\uc815\ubcf4\uac00", "\uc5c6\ub294", "\uacbd\uc6b0", "if", "(custRprsnLoinInfoIO.getEncrptnPswd()", "==", "null)", "{", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue());", "//", "set", "custLoinHstIO", "atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO);", "atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue());", "//", "2.", "\ud328\uc2a4\uc6cc\ub4dc", "\uc815\ubcf4\uac00", "\uc874\uc7ac\ud558\ub294", "\uacbd\uc6b0", "}", "else", "{", "//", "2-1.", "\ud328\uc2a4\uc6cc\ub4dc\uac00", "\uc77c\uce58\ud558\uc5ec", "\ub85c\uadf8\uc778\uc5d0", "\uc131\uacf5\ud558\ub294", "\uacbd\uc6b0", "if", "(pswd.equals(custRprsnLoinInfoIO.getEncrptnPswd()))", "{", "custCheckPwdOut.setPswdMatchYn(CCM01.YES);", "//", "Set", "password", "error", "count", "allowance", "excess", "true", "or", "not", "=", "\"N\"", "if(!CCM01.NO.equals(pswdErrCntExcsYn))", "{", "isChanged", "=", "true;", "pswdErrCntExcsYn", "=", "CCM01.NO;", "}", "//", "clear", "password", "lock", "time", "if(!StringUtils.isEmpty(pswdLockExprtnDtm))", "{", "isChanged", "=", "true;", "pswdLockExprtnDtm", "=", "\"\";", "}", "//", "clear", "password", "error", "count", "if(pswdErrCnt", "!=", "CCM01.ZERO)", "{", "isChanged", "=", "true;", "pswdErrCnt", "=", "CCM01.ZERO;", "}", "//", "check", "update", "cycle", "-", "if", "update", "password", "is", "necessary", "if", "(_isOutOfDate(custRprsnLoinInfoIO))", "{", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.SUCCESS_OUT_OF_DATE.getValue());", "//", "set", "custLoinHstIO", "atCustRprsnLoinHIO.setLoinRsltYn(CCM01.YES);", "atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.SUCCESS_OUT_OF_DATE.getValue());", "}", "else", "{", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.SUCCESS.getValue());", "//", "set", "custLoinHstIO", "atCustRprsnLoinHIO.setLoinRsltYn(CCM01.YES);", "atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.SUCCESS.getValue());", "}", "//", "2-2.", "\ud328\uc2a4\uc6cc\ub4dc", "\uc624\ub958\ub85c", "\ub85c\uadf8\uc778\uc5d0", "\uc2e4\ud328\ud558\ub294", "\uacbd\uc6b0", "}", "else", "{", "isChanged", "=", "true;", "if", "(pswdErrCnt", "==", "null", "||", "pswdErrCnt", "==", "CCM01.ZERO)", "{", "pswdErrCnt", "=", "1;", "}", "else", "{", "pswdErrCnt++;", "}", "if", "(pswdErrCnt", ">", "pswdErrorAllwncCnt)", "{", "String", "pswdLockTmTrmCntInstParm", "=", "_getInstParmProvider().getInstParm(InstParamEnum.INST_PARAM_LOIN_PSWD_LOCK_TIME.getValue());", "if(StringUtils.isEmpty(pswdLockTmTrmCntInstParm))", "{", "throw", "new", "BizApplicationException(\"AAPCME0184\",", "new", "Object[]", "{\"@loinPswdLockTmCd\"});", "}", "//", "Set", "password", "error", "count", "allowance", "excess", "true", "or", "not", "=", "\"Y\"", "pswdErrCntExcsYn", "=", "CCM01.YES;", "//", "Set", "password", "lock", "expired", "time", "pswdLockExprtnDtm", "=", "TimeCalculator.calculateLockExpirationDateTime(pswdLockTmTrmCntInstParm);", "//", "set", "output", "parameter", "custCheckPwdOut.setPswdLockTmCd(TimeCalculator.setTimeFormat(pswdLockTmTrmCntInstParm));", "custCheckPwdOut.setPswdErrCnt(pswdErrCnt);", "custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt);", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue());", "//", "set", "custLoinHstIO", "atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO);", "atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue());", "}", "else", "{", "//", "set", "output", "parameter", "custCheckPwdOut.setPswdErrCnt(pswdErrCnt);", "custCheckPwdOut.setPswdErrAllwncCnt(pswdErrorAllwncCnt);", "custCheckPwdOut.setPswdChkRsltTpCd(SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue());", "//", "set", "custLoinHstIO", "atCustRprsnLoinHIO.setLoinRsltYn(CCM01.NO);", "atCustRprsnLoinHIO.setLoinRsltCd(SecurityCheckRsltTpEnum.FAIL_ERROR_CNT_EXCS.getValue());", "}", "}", "}", "//", "if", "the", "information", "about", "password", "errors", "changes,", "update", "DB", "if(isChanged)", "{", "custRprsnLoinInfoIO.setPswdErrCnt(pswdErrCnt);", "custRprsnLoinInfoIO.setPswdErrCntExcsYn(pswdErrCntExcsYn);", "custRprsnLoinInfoIO.setPswdLockExprtnDtm(pswdLockExprtnDtm);", "_getAtCustRprsnLoinInfoDDso().update(custRprsnLoinInfoIO);", "}", "//", "Insert", "custRprsn", "Last", "Login", "history", "information", "atCustRprsnLoinHIO.setLoinIdNbr(custRprsnLoinInfoIO.getLoinIdNbr());", "atCustRprsnLoinHIO.setLoinTpCd(loinTpCd);", "atCustRprsnLoinHIO.setLoinSeqNbr(custRprsnLoinInfoIO.getLoinSeqNbr());", "atCustRprsnLoinHIO.setFnlLoinChnlDscd(_getCmnContext().getChannelDscd());", "_getCustRprsnLoinHstBiz().register(custRprsnImpl,", "atCustRprsnLoinHIO);", "return", "custCheckPwdOut;", "}"], "docstring_tokens": ["It", "executes", "login", "process", "of", "the", "customer", "by", "the", "input", "login", "ID,", "password", "and", "login", "type", "code.", "If", "login", "ID", "and", "login", "type", "code", "is", "not", "input,", "main", "login", "information", "will", "be", "applied.", "It", "considers", "password", "error", "count,", "error", "allowance", "count", "exceeded", "YN,", "lock", "time", "and", "password", "update", "cycle.", "It", "leaves", "login", "attempt", "history.", "Exception", "must", "be", "handled", "separately", "at", "the", "service", "level", "according", "to", "the", "login", "result."]}
{"code_tokens": ["public", "List<AsmCrdtChkRsltIO>", "getListCrdtChkRslt(String", "asmId)throws", "BizApplicationException", "{", "return", "getListCrdtChkRslt();", "}"], "docstring_tokens": ["It", "inquiries", "detail", "information", "of", "credit", "check", "result."]}
{"code_tokens": ["public", "boolean", "checkCode(CdNbrInfoIO", "in,", "String", "cd)", "throws", "BizApplicationException", "{", "CdD", "cdDImpl", "=", "_getCdDImpl(in);", "return", "cdDImpl.checkCode(in,", "cd);", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["public", "RqrdDocsRgstSvcGetDocsIn", "clone(){", "try{", "RqrdDocsRgstSvcGetDocsIn", "object=", "(RqrdDocsRgstSvcGetDocsIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isMysql()", "throws", "BizApplicationException", "{", "DbmsVendorNmEnum", "vender", "=", "DbmsVendorNmEnum.getByValue(getDbmsVendorName());", "if", "(vender", "==", "DbmsVendorNmEnum.MYSQL)", "return", "true;", "else", "return", "false;", "}"], "docstring_tokens": ["It", "checks", "whether", "DBMS", "is", "MySQL"]}
{"code_tokens": ["public", "ActorActorRelSvcGetListOut", "clone(){", "try{", "ActorActorRelSvcGetListOut", "object=", "(ActorActorRelSvcGetListOut)super.clone();", "if", "(", "this.custRelList==", "null", ")", "object.custRelList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.ActorActorRelSvcGetOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.ActorActorRelSvcGetOut>(custRelList.size());", "for(", "bankware.corebanking.customer.change.service.dto.ActorActorRelSvcGetOut", "item", ":", "custRelList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.ActorActorRelSvcGetOut)item.clone());", "}", "object.custRelList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "LbltyStsRgstSvcGetIn", "clone(){", "try{", "LbltyStsRgstSvcGetIn", "object=", "(LbltyStsRgstSvcGetIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "clearComAreaMemory()", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled()){", "logger.debug(\"########", "AcctgCoreImpl.clearComAreaMemory", "(COM_AREA)", "########\");", "}", "_getAcctgCommUtil().clearAttribute();", "}", "/*", "(non-Javadoc)", "*", "@see", "bankware.corebanking.core.accounting.journalizing.interfaces.AcctgCore#clearJournalizationArea()", "*/", "@Override", "@SuppressWarnings({\"unchecked\"}"], "docstring_tokens": ["It", "clears", "memory", "from", "common", "area", "(accounting", "area)."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,", "ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled()){", "logger.debug(\"ArrCndInstallmentDateImpl", "doServiceAction\");", "}", "if", "(!this.getArrangementCore().isReal())", "return;", "switch", "(arrSrvcTpCd)", "{", "case", "\"OpenDeposit\":", "case", "\"Deposit\":", "_checkInstallmentDate(arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "specific", "service", "type.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "BigDecimal", "getRngVal(){", "return", "rngVal;", "}"], "docstring_tokens": ["A", "method", "that", "compares", "the", "value", "of", "a", "condition", "class", "to", "the", "value", "of", "a", "range", "condition."]}
{"code_tokens": ["public", "String", "checkPassword(StaffBsicInfoIO", "staffBsicInfo,", "String", "pswd)", "throws", "BizApplicationException", "{", "String", "securityCheckRsltTpCd", "=", "null;", "if", "(staffBsicInfo", "==", "null)", "{", "return", "SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue();", "}", "if", "(staffBsicInfo.getPswd()", "==", "null)", "{", "securityCheckRsltTpCd", "=", "SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue();", "}", "else", "{", "if", "(staffBsicInfo.getPswd().equals(pswd))", "{", "securityCheckRsltTpCd", "=", "SecurityCheckRsltTpEnum.SUCCESS.getValue();", "}", "else", "{", "securityCheckRsltTpCd", "=", "SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue();", "}", "}", "return", "securityCheckRsltTpCd;", "}"], "docstring_tokens": ["It", "checks", "password."]}
{"code_tokens": ["public", "DueDiligenceInqrySvcListOut", "clone(){", "try{", "DueDiligenceInqrySvcListOut", "object=", "(DueDiligenceInqrySvcListOut)super.clone();", "if", "(", "this.dueDlgncList==", "null", ")", "object.dueDlgncList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub>(dueDlgncList.size());", "for(", "bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub", "item", ":", "dueDlgncList", "){", "clonedList.add(", "(bankware.corebanking.customer.kyc.service.dto.DueDiligenceInqrySvcListOutSub)item.clone());", "}", "object.dueDlgncList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrCnd>", "getArrCnd(Class<?>", "clazz)", "throws", "BizApplicationException{", "return", "_getArrXtnUtil().convertArrCndList(super.getArrCndCore(clazz));", "}"], "docstring_tokens": ["Inquire", "effective", "arrangement", "condition", "by", "product", "condition", "code.", "The", "returned", "condition", "object", "can", "be", "cast", "in", "to", "each", "specific", "type", "condition", "object", "such", "as", "{@link", "ArrCndLst}", "and", "{@link", "ArrCndRng}"]}
{"code_tokens": ["public", "CndVal", "getComplexCndValue(int", "tierNbr)", "throws", "BizApplicationException", "{", "//", "If", "isCmpxCnd", "is", "false", "if", "(!isComplexCnd())", "{", "//", "Simple", "condition", "throw", "new", "BizApplicationException(\"AAPPDE0003\",", "null);", "}", "//", "Set", "Input", "PdPdCndUnitComplexSearchIn", "inDao", "=", "_setPdPdCndUnitComplexSearchIn(tierNbr);", "if", "(isListCnd())", "{", "return", "_getComplexListCndValue(inDao);", "}", "else", "if", "(isRngCnd())", "{", "return", "_getComplexRangeCndValue(inDao);", "}", "/*else", "if", "(isIntCnd())", "{", "return", "_getComplexInterestCndValue(inDao);", "}", "else", "if", "(isFeeCnd())", "{", "return", "_getComplexFeeCndValue(inDao);", "}*/", "else", "{", "return", "null;", "}", "}"], "docstring_tokens": ["This", "method", "inquire", "complex", "condition", "value."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "StStlmntCalcnSIO", "stStlmntCalcnSIOIn)", "{", "logger.debug(\"##<ST-StlmntCalcnSubInfoBiz>", "saveMapSubInfo\");", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.create", "a", "new", "instance", "of", "I/F", "VO", "//IValueObject", "subInfoIfVo", "=", "new", "StlmntCalcnSubInfo();", "//", "2.create", "a", "new", "instance", "of", "DBIO", "VO", "StStlmntCalcnSIO", "stStlmntCalcnSIO", "=", "new", "StStlmntCalcnSIO();", "//", "3.set", "primary", "key", "_setKey(stStlmntCalcnSIO,", "stStlmntCalcnSIOIn);", "//", "4.convert", "map", "to", "DBIO", "VO", "DtoUtils.setSubInfoIO(subInfoMap,", "stStlmntCalcnSIO);", "//", "5.insert", "subsidiary", "detail", "_insertSubInfo(stStlmntCalcnSIO);", "}"], "docstring_tokens": ["Save", "the", "asset", "thing", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "void", "saveAssetTxSubInfo(AssetTxSubInfo", "assetTxSubInfo)", "throws", "BizApplicationException", "{", "//", "\ubcf4\uc870\uba85\uc138\ub85c", "\uc800\uc7a5", "(\uc5ec\ub7ec\uac1c\uc758", "\ud655\uc7a5\uc18d\uc131\uc744", "\ud55c", "row\ub85c", "\uc800\uc7a5)", "_getAssetTxSubInfoBiz().saveSubInfo(assetTxSubInfo,", "this);", "}"], "docstring_tokens": ["Save", "subsidiary", "information", "of", "the", "asset", "transaction."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(XtnTableEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "String", "getCrncyCd()", "throws", "BizApplicationException", "{", "return", "this.getOriginArr().getCrncyCd();", "}"], "docstring_tokens": ["Inquire", "currency", "code", "of", "arrangement"]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "String", "txDt,", "Integer", "txSeqNbr,", "AssetImpl", "assetImpl,", "Integer", "assetThingSeqNbr)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\uc790\uc0b0\ubb3c\uac74\ubcf4\uc870\uba85\uc138\uc758", "\uc885\ub958", "\uc870\ud68c", "AssetThingSubInfoKndEnum", "subInfoKnd", "=", "assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr);", "//", "2.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(assetImpl,", "assetThingSeqNbr);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"assetId\",", "assetImpl.getAssetBasicCache().getAssetId());", "//", "PK", "setting", "subInfoCache.set(\"assetThingSeqNbr\",", "assetThingSeqNbr);", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(assetImpl,", "assetThingSeqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "3-1.", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "4.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoKnd,", "subInfoCache,", "assetImpl,", "assetThingSeqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(assetImpl,", "assetThingSeqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "3-2.", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(InsrncCustRelStsCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@insrncCustRelStsCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "int", "getTxSeqNbr()", "throws", "BizApplicationException", "{", "return", "getBasicInfo().getTxSeqNbr();", "}"], "docstring_tokens": ["This", "method", "gets", "the", "sequence", "number", "of", "transaction", "about", "specific", "arrangement.", "-", "It", "gets", "the", "sequence", "number", "of", "transaction", "no", "transaction", "date", "about", "one", "arrangement", "in", "Core.", "-", "This", "function", "can", "be", "customized", "in", "site."]}
{"code_tokens": ["public", "List<String>", "getVariable(String", "inFormula)", "throws", "BizApplicationException", "{", "inFormula", "=", "inFormula.trim();", "if", "(StringUtils.isEmpty(inFormula))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@formula\"});", "}", "List<String>", "variables", "=", "new", "ArrayList<String>();", "for", "(int", "i", "=", "0;", "i", "<", "inFormula.length();", "i++)", "{", "if", "(CaAmOperandPrefix.isValid(inFormula.charAt(i)))", "{", "char[]", "variable", "=", "new", "char[inFormula.length()];", "int", "j", "=", "0;", "variable[j]", "=", "inFormula.charAt(i);", "while", "(++i", "<", "inFormula.length())", "if", "(_isValid(inFormula.charAt(i)))", "variable[++j]", "=", "inFormula.charAt(i);", "else", "break;", "char[]", "variableCopy", "=", "new", "char[j", "+", "1];", "for", "(int", "k", "=", "0;", "k", "<=", "j;", "k++)", "variableCopy[k]", "=", "variable[k];", "variables.add(String.copyValueOf(variableCopy));", "}", "}", "return", "variables;", "}"], "docstring_tokens": ["It", "queries", "the", "list", "of", "variables", "in", "the", "formula."]}
{"code_tokens": ["public", "String", "getAprslThingXtnInfo(AprslCoreImpl", "aprslImpl,", "Integer", "aprslThingSeqNbr,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "//", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if", "(_getTblXtnAtrbtCore().isExtendWayEav(XtnTableEnum.AS_APRSL_THING_D.getValue(),", "xtnAtrbtNm))", "{", "return", "getMapAprslThingXtnInfoCache(aprslImpl,", "aprslThingSeqNbr).get(xtnAtrbtNm);", "}", "//", "2.", "\ubcf4\uc870\uba85\uc138", "return", "_getAprslThingXtnInfoCustom().getSubInfo(xtnAtrbtNm,", "aprslImpl,", "aprslThingSeqNbr);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "extended", "information", "of", "the", "appraisal", "thing."]}
{"code_tokens": ["public", "int", "delete(CaSvCntrlCntrSrvcDIO", "svCntrlCntrSrvcDIO)", "{", "return", "_getSvCntrlCntrSrvcD().delete(svCntrlCntrSrvcDIO);", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "List<ArrIntRtHst>", "getListConfirmedIntRtHistory(ArrIntRtCoreIn", "in)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled()){", "logger.debug(\"##", "<AR>", "getArrApplyInterestRateWithCnfrmtnHst\");", "}", "List<ArrIntRtHst>", "arrRtList", "=", "new", "ArrayList<ArrIntRtHst>();", "if", "(!in.getArrCore().isReal())", "return", "arrRtList;", "ArrangementCore", "arr", "=", "(ArrangementCore)in.getArrCore();", "ArArrAplyIntRtValDIO", "arrAplyIntRtValDIO", "=", "new", "ArArrAplyIntRtValDIO();", "arrAplyIntRtValDIO.setArrId(arr.getArrId());", "arrAplyIntRtValDIO.setArrIntRtTpCd(in.getPdIntRtStrctrClCd());", "arrAplyIntRtValDIO.setAplyStartDt(in.getStartDt());", "arrAplyIntRtValDIO.setAplyEndDt(in.getEndDt());", "_getCmnContextCore().setHeaderColumn(arrAplyIntRtValDIO);", "List<ArArrAplyIntRtValDIO>", "returnRtLst", "=", "_getArArrAplyIntRtValDDso().selectActiveForDuration(arrAplyIntRtValDIO);", "if(returnRtLst", "==", "null){", "return", "arrRtList;", "}", "for", "(ArArrAplyIntRtValDIO", "returnRt", ":", "returnRtLst)", "{", "ArrIntRtHst", "arrIntRt", "=", "new", "ArrIntRtHst();", "arrIntRt.setAplyRt(returnRt.getAplyIntRt());", "arrIntRt.setAplyPrfIntRt(returnRt.getAplyPrfIntRt());", "arrIntRt.setStartDt(returnRt.getAplyStartDt());", "arrIntRt.setEndDt(returnRt.getAplyEndDt());", "arrIntRt.setRtElmntList(_getRateElementList(arr,returnRt));", "ArArrAplyIntRtValStsHIO", "arArrAplyIntRtValStsHIO", "=", "this._getAplyIntRtValHst(returnRt);", "if(arArrAplyIntRtValStsHIO", "!=", "null){", "arrIntRt.setStsChngTxDt(arArrAplyIntRtValStsHIO.getStsChngTxDt());", "arrIntRt.setStsChngTxSeqNbr(arArrAplyIntRtValStsHIO.getStsChngTxSeqNbr());", "}", "if(in.getEndDt().compareTo(arrIntRt.getEndDt())", "<", "0){", "arrIntRt.setEndDt(in.getEndDt());", "}", "arrRtList.add(arrIntRt);", "}", "return", "arrRtList;", "}"], "docstring_tokens": ["Inquiry", "(or/and", "calculate)", "interest", "rate", "using", "formula", "which", "is", "predefined", "for", "request", "arrangement's", "product"]}
{"code_tokens": ["public", "boolean", "isValid(String", "type)", "{", "for", "(FormulaFactorImplCoreEnum", "item", ":", "FormulaFactorImplCoreEnum.values())", "{", "if", "(type.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "boolean", "check(Map<String,", "String>", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"ExclsvOrCmpxVldtnImpl", ":", "{}\",", "atrbtCntnt);", "}", "int", "cnt", "=", "0;", "for(Map.Entry<String,", "String>", "atrbt:", "atrbtCntnt.entrySet())", "{", "if(!StringUtils.isEmpty(atrbt.getValue()))", "{", "cnt++;", "}", "}", "if(cnt", ">", "1)", "{", "//", "It", "is", "only", "one", "required", "of", "input.", "{0}", "throw", "new", "BizApplicationException(\"AAPCME0168\",", "new", "Object[]", "{atrbtCntnt.toString()});", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Complex", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "void", "validate()", "throws", "BizApplicationException", "{", "if", "(!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getRngVal()))){", "//This", "product", "purchasable", "time", "is", "({0}", "~", "{1})", "//\ubcf8\uc0c1\ud488\uc740\uc758", "\ud310\ub9e4", "\uac00\ub2a5", "\uc2dc\uac04\uc740", "({0}", "~", "{1})", "\uc785\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0279\"", ",", "new", "Object[]{getMinVal().setScale(0).toPlainString(),getMaxVal().setScale(0).toPlainString()});", "}", "}"], "docstring_tokens": ["It", "performs", "common", "service", "processing", "rules", "defined", "in", "the", "service", "processing", "rules", "and", "whether", "the", "contract-based", "service", "is", "available,", "based", "on", "the", "service", "type", "input.", "Whether", "contract", "services", "are", "available", "verifies:", "1)", "Verification", "of", "service", "restriction", "based", "on", "product", "information", "of", "contract.", "2)", "Verification", "of", "restriction", "related", "to", "the", "service", "set", "in", "the", "contract", "such", "as", "pledge", "setting.", "3)", "Perform", "verification", "rules", "that", "should", "be", "performed", "in", "common", "as", "the", "requirement", "that", "dead", "customers", "should", "not", "become", "financial", "transactions."]}
{"code_tokens": ["public", "CaSvMenuMIO", "select(CaSvMenuMIO", "svMenuMIO)", "{", "return", "_getSvMenuM().select(svMenuMIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "String", "convertDateJulianGregorian(String", "dscd,", "String", "baseDt)", "throws", "BizApplicationException", "{", "String", "out", "=", "null;", "if", "(\"1\".equals(dscd))", "{", "/*------------------------------------------------------------------", "##", "change", "gregorian", "date", "->", "julian", "date", ":", "if", "Distinction", "code", "is", "a", "'1'.", "##", "\uadf8\ub808\uace0\ub9ac\uc548\uc77c\uc790->\uc904\ub9ac\uc548\uc77c\uc790", "\ubcc0\ud658", ":", "\ucc98\ub9ac\uad6c\ubd84\uc774", "'1'\uc77c", "\uacbd\uc6b0", "-------------------------------------------------------------------*/", "//", "julian", "date", "Computation", "\uc904\ub9ac\uc548\uc77c\uc790", "\uc0b0\ucd9c", "out", "=", "_calculateJulianDate(baseDt);", "}", "else", "if", "(\"2\".equals(dscd))", "{", "/*------------------------------------------------------------------", "##", "change", "julian", "date", "->", "gregorian", "date", ":", "if", "Distinction", "code", "is", "a", "'2'.", "##", "\uc904\ub9ac\uc548\uc77c\uc790->\uadf8\ub808\uace0\ub9ac\uc548\uc77c\uc790", "\ubcc0\ud658", ":", "\ucc98\ub9ac\uad6c\ubd84\uc774", "'2'\uc77c", "\uacbd\uc6b0", "-------------------------------------------------------------------*/", "//", "gregorian", "date", "Computation", "\uadf8\ub808\uace0\ub9ac\uc548\uc77c\uc790", "\uc0b0\ucd9c", "out", "=", "_calculateGregorianDate(baseDt);", "}", "return", "out;", "}"], "docstring_tokens": ["It", "converts", "'julian", "date'", "and", "'gregorian", "date'", "to", "each", "other."]}
{"code_tokens": ["protected", "void", "register(CustImpl", "custImpl,", "CustLoinHstIO", "custLoinHstIO)", "throws", "BizApplicationException", "{", "if", "(custLoinHstIO", "==", "null)", "{", "return;", "}", "AtCustLoinHIO", "atCustLoinHIO", "=", "new", "AtCustLoinHIO();", "atCustLoinHIO.setInstCd(_getCmnContext().getInstCode());", "atCustLoinHIO.setCustId(custImpl.getCustId());", "atCustLoinHIO.setLoinTpCd(custLoinHstIO.getLoinTpCd());", "atCustLoinHIO.setLoinIdNbr(custLoinHstIO.getLoinIdNbr());", "atCustLoinHIO.setLoinSeqNbr(custLoinHstIO.getLoinSeqNbr());", "atCustLoinHIO.setHstSeqNbr(_getCustLoinHstSeqNbr(atCustLoinHIO.getInstCd(),", "custImpl.getCustId(),", "_getCmnContext().getTxDate()));", "atCustLoinHIO.setLoinDt(_getCmnContext().getTxDate());", "atCustLoinHIO.setLoinHms(_getCmnContext().getTxTime());", "atCustLoinHIO.setLoinRsltYn(custLoinHstIO.getLoinRsltYn());", "atCustLoinHIO.setLoinRsltCd(custLoinHstIO.getLoinRsltCd());", "atCustLoinHIO.setFnlLoinChnlDscd(custLoinHstIO.getFnlLoinChnlDscd());", "CbbServiceHeader", "header", "=", "CbbApplicationContext.getCurrentServiceHeader();", "atCustLoinHIO.setLoinIp(((ContextHeader)", "header).getRemoteAddr());", "_PKValidateCustLoinH(atCustLoinHIO);", "_getAtCustLoinHDso().insert(atCustLoinHIO);", "}"], "docstring_tokens": ["It", "registers", "customer", "agreement", "code", "information", "list.", "If", "registered", "information", "by", "the", "same", "institution", "code", "and", "agreement", "type", "code", "exists,", "throws", "exception."]}
{"code_tokens": ["protected", "void", "modifyLastBal(String", "inBalDt,", "BigDecimal", "inLastBal,", "String", "inSctnStartDt,", "String", "inSctnEndDt,", "String", "txDt,", "int", "txSeqNbr)", "throws", "BizApplicationException", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"HHH", "updateLastBal2\");", "}", "this.balDt", "=", "inBalDt;", "this.balDtBal", "=", "inLastBal;", "this.sctnStartDt", "=", "inSctnStartDt;", "this.sctnEndDt", "=", "inSctnEndDt;", "/**", "*", "Set", "today", "balance", "*/", "_setTodayBal();", "/**", "*", "Update", "last", "balance", "*/", "if", "(this.isNew)", "{", "_registerLastBal();", "this.isNew", "=", "false;", "}", "else", "{", "_modifyLastBal();", "}", "}"], "docstring_tokens": ["This", "method", "gets", "the", "current", "balance", "and", "update", "the", "last", "balance."]}
{"code_tokens": ["public", "CaActorRolePSvcRgstListIn", "clone(){", "try{", "CaActorRolePSvcRgstListIn", "object=", "(CaActorRolePSvcRgstListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(", "value))", "{", "for", "(DebtInfoDscdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@scrtyIntStsCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "terminateBlocking(ArrIssmdaBlckngTrmntnIn", "in,", "String", "stsChngBizCdNbr,", "String", "stsChngBizCd,", "ArrIssmdaCoreImpl", "arrIssmdaImpl)", "throws", "BizApplicationException", "{", "//", "\uacc4\uc57d", "\ubc1c\uae09\ub9e4\uccb4", "\uc8fc\uc81c\uc601\uc5ed", "\ubbf8\uc0ac\uc6a9", "\uc2dc", "skip", "if", "(!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.ISSUED_MEDIA))", "{", "return;", "}", "_checkInput(in.getArrIssmdaBlckngSeqNbr());", "//", "Check", "Transaction", "Exist", "//", "\uac70\ub798\uc0dd\uc131\uc5ec\ubd80", "\uac80\uc99d", "_getArrCmnUtil().validateArrTxExist(arrIssmdaImpl.getIssueArrId(),", "in.getStsChngTxDt(),", "in.getStsChngTxSeqNbr());", "ArArrIssmdaBlckngDIO", "sqlIn", "=", "new", "ArArrIssmdaBlckngDIO();", "sqlIn.setInstCd(_getCmnContextCore().getInstCode());", "sqlIn.setIssueArrId(arrIssmdaImpl.getIssueArrId());", "sqlIn.setArrIssmdaTpCd(arrIssmdaImpl.getArrIssmdaTpCd());", "sqlIn.setArrIssmdaInhrncId(arrIssmdaImpl.getArrIssmdaInhrncId());", "sqlIn.setArrIssmdaBlckngSeqNbr(in.getArrIssmdaBlckngSeqNbr());", "ArArrIssmdaBlckngDIO", "arrIssmdaBlckngDIO", "=", "_getArArrIssmdaBlckngDDso().selectBlckngBySeqNbr(sqlIn);", "if", "(arrIssmdaBlckngDIO", "==", "null){", "//", "\uacc4\uc57d\ubc1c\uae09\ub9e4\uccb4({0},", "{1})\uc5d0", "\ub4f1\ub85d\ub41c", "\ubc1c\uae09\ub9e4\uccb4\uc81c\ud55c({2})\uc774", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\uc785\ub825\uac12\uc744", "\ud655\uc778\ud558\uc2ed\uc2dc\uc624.", "throw", "new", "BizApplicationException(\"CAPARE0045\",", "new", "Object[]{", "_getCdCore().getCode(", "ArrIssmdaTpCoreEnum.cdNbr,", "arrIssmdaImpl.getArrIssmdaTpCd()", "),", "arrIssmdaImpl.getArrIssmdaInhrncId(),", "in.getArrIssmdaBlckngSeqNbr()", "});", "}", "if(", "arrIssmdaBlckngDIO.getEfctvStartDt().compareTo(_getCmnContextCore().getTxDate())", ">", "0", ")", "{", "arrIssmdaBlckngDIO.setArrIssmdaBlckngStsCd(ArrIssmdaBlckngStsCoreEnum.IGNORED.getValue());", "arrIssmdaBlckngDIO.setEfctvEndDt(arrIssmdaBlckngDIO.getEfctvStartDt());", "}", "else", "{", "arrIssmdaBlckngDIO", "=", "_readForUpdate(", "arrIssmdaBlckngDIO", ");", "if(", "arrIssmdaBlckngDIO.getEfctvStartDt().compareTo(_getCmnContextCore().getTxDate())", "==", "0", ")", "{", "arrIssmdaBlckngDIO.setArrIssmdaBlckngStsCd(ArrIssmdaBlckngStsCoreEnum.IGNORED.getValue());", "}", "else", "{", "arrIssmdaBlckngDIO.setArrIssmdaBlckngStsCd(ArrIssmdaBlckngStsCoreEnum.TERMINATED.getValue());", "}", "arrIssmdaBlckngDIO.setEfctvEndDt(_getCmnContextCore().getTxDate());", "}", "_getCmnContextCore().setHeaderColumn(arrIssmdaBlckngDIO);", "_getArArrIssmdaBlckngDDso().updateStatus(arrIssmdaBlckngDIO);", "_insertArrIssmdaBlckngStsHistory(", "arrIssmdaBlckngDIO.getArrIssmdaBlckngSeqNbr(),", "ArrIssmdaBlckngStsCoreEnum.TERMINATED.getValue(),", "stsChngBizCdNbr,", "stsChngBizCd,", "in.getStsChngTxDt(),", "in.getStsChngTxSeqNbr(),", "arrIssmdaImpl);", "}"], "docstring_tokens": ["Terminate", "arrangement", "issued", "media", "blocking."]}
{"code_tokens": ["public", "String", "getApplyEndDateTime()", "{", "return", "PdUtil.parseDateToYYYYMMDDHHMMSS(_getAplyEndDt());", "}"], "docstring_tokens": ["This", "method", "inquire", "apply", "end", "date", "and", "time", "of", "benefit", "condition."]}
{"code_tokens": ["protected", "AprslCoreImpl", "getUniqueBusinessBean(String", "instCd,", "String", "aprslId)", "throws", "BizApplicationException", "{", "return", "(AprslCoreImpl)", "ApplicationContextCoreUtils.getUniqueBusinessBean(instCd", "+", "aprslId,", "getAprslImplClass());", "}"], "docstring_tokens": ["get", "unique", "business", "bean", "in", "one", "transaction"]}
{"code_tokens": ["public", "List<XtnCdIO>", "getListCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "List<XtnCdIO>", "xtnCdList", "=", "new", "ArrayList<XtnCdIO>();", "//", "query", "data", "List<DcDocMIO>", "dcDocIdList", "=", "_getDcDocMDso().selectIdList(DocStsEnum.NORMAL.getValue(),", "DocTypEnum.NOTICE_MSG.getValue(),", "null);", "if(dcDocIdList", "!=", "null", "&&", "!dcDocIdList.isEmpty())", "{", "String", "lngCd", "=", "null;", "if(supplInfoVal.containsKey(InstParamEnum.LANGUAGE_CODE.getValue()))", "{", "lngCd", "=", "(String)", "supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue());", "}", "else", "{", "lngCd", "=", "_getCmnContext().getLanguageCode();", "}", "for(DcDocMIO", "dcDocMIOItem", ":", "dcDocIdList)", "{", "XtnCdIO", "xtnCdIO", "=", "new", "XtnCdIO();", "xtnCdIO.setCd(dcDocMIOItem.getDocId());", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_DOC,", "dcDocMIOItem.getDocId(),", "lngCd));", "xtnCdIO.setLngCd(lngCd);", "xtnCdList.add(xtnCdIO);", "}", "}", "return", "xtnCdList;", "}"], "docstring_tokens": ["It", "make", "the", "combo-box", "of", "Code", "that", "meet", "the", "search", "condition.", "Combo-box", "is", "consisted", "of", "CmnCdCheckOut.", "(cdNbr,", "cd,", "cdNm,", "delYn,", "cdAbrvtnNm)"]}
{"code_tokens": ["public", "String", "getCndCd(){", "return", "cndCd;", "}"], "docstring_tokens": ["This", "method", "get", "condition", "code."]}
{"code_tokens": ["public", "CardInfoPopUpOut", "getCardInfoPopUp(CardInfoPopUpIn", "in)", "throws", "BizApplicationException", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"getCardInfoPopUp", "\uc2dc\uc791", ":", "{}\",", "new", "Object[]", "{", "in.toString()", "});", "}", "CardInfoPopUpOut", "out", "=", "new", "CardInfoPopUpOut();", "//", "\ud544\uc218\ud56d\ubaa9", "\uccb4\ud06c", ":", "\uce74\ub4dc\ubc88\ud638", "\ub610\ub294", "\uace0\uac1d\ubc88\ud638", "\ub458\uc911", "\ud558\ub098\ub294", "\ud544\uc218", "if", "(StringUtils.isEmpty(in.getCardNbr())", "&&", "StringUtils.isEmpty(in.getCustNbr()))", "{", "throw", "new", "BizApplicationException(CBA01.ERR_AAPCME0006,", "new", "Object[]", "{", "CBA01.AT_CARDNBR", "});", "}", "//", "\uace0\uac1d\uba85", "PdCardCustMIO", "rtI00", "=", "selectCustInfo(in.getTntInstId(),", "in.getCustNbr());", "if", "(rtI00", "!=", "null)", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"getCardInfoPopUp", "PdCardCustMIO", ":", "{}\",", "new", "Object[]", "{", "rtI00.toString()", "});", "}", "out.setCustNm(rtI00.getCustNm());", "}", "//", "get", "the", "information", "List<CardInfoPopUpSub01>", "rtList1", "=", "selectListCardInfo(in);", "//", "convert", "to", "SVC", "out", "List<CardInfoPopUpSub01>", "svcList1", "=", "new", "ArrayList<CardInfoPopUpSub01>();", "if", "(rtList1", "!=", "null)", "{", "for", "(CardInfoPopUpSub01", "rtRelIO1", ":", "rtList1)", "{", "CardInfoPopUpSub01", "svcRelIO1", "=", "new", "CardInfoPopUpSub01();", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"getCardInfoPopUp", "CardInfoPopUpSub0111111", ":", "{}\",", "new", "Object[]", "{", "rtRelIO1.toString()", "});", "}", "//", "Generated", "by", "code", "generator", "[[", "svcRelIO1.setCardNbr(rtRelIO1.getCardNbr());", "svcRelIO1.setPdCd(rtRelIO1.getPdCd());", "svcRelIO1.setCardKndDscd(rtRelIO1.getCardKndDscd());", "svcRelIO1.setCardIssueDt(rtRelIO1.getCardIssueDt());", "//", "\uc0c1\ud488(\uc11c\ube44\uc2a4)\uc870\ud68c", "Pd", "pd", "=", "_getPd(rtRelIO1.getPdCd(),", "\"01\");", "//", "\uc0c1\ud488", "svcRelIO1.setPdNm(pd.getPdNm());", "//", "Generated", "by", "code", "generator", "]]", "svcList1.add(svcRelIO1);", "}", "out.setCardInfo(svcList1);", "}", "//return", "return", "out;", "}"], "docstring_tokens": ["Method", "for", "displaying", "card", "information", "on", "pop-up", "screen"]}
{"code_tokens": ["public", "void", "register(NoticeBsicInfoIO", "noticeBsicInfoIO)", "throws", "BizApplicationException", "{", "List<NoticeAtchmntDocIssueIO>", "atcmnetIOList", "=", "noticeBsicInfoIO.getActhmntDocIssueList();", "if(atcmnetIOList", "!=", "null", "&&", "!atcmnetIOList.isEmpty())", "{", "AtNoticeAtchmntDocIssueDIO", "atNoticeAtchmntDocIssueDIO", "=", "new", "AtNoticeAtchmntDocIssueDIO();", "_getCmnContext().setHeaderColumn(atNoticeAtchmntDocIssueDIO);", "atNoticeAtchmntDocIssueDIO.setNoticeId(noticeBsicInfoIO.getNoticeId());", "for(NoticeAtchmntDocIssueIO", "aoticeAtchmntDocIssueIOItem", ":", "atcmnetIOList)", "{", "atNoticeAtchmntDocIssueDIO.setDocIssueId(aoticeAtchmntDocIssueIOItem.getDocIssueId());", "_getAtNoticeAtchmntDocIssueDDso().insert(atNoticeAtchmntDocIssueDIO);", "}", "}", "}"], "docstring_tokens": ["It", "registers", "the", "actor", "role", "parameter", "information", "list.", "If", "there", "is", "registered", "actor", "role", "parameter", "information", "by", "the", "same", "institution,", "throws", "exception."]}
{"code_tokens": ["public", "String", "getCndVal()", "throws", "BizApplicationException", "{", "return", "getRngVal()", "==", "null", "?", "null", ":", "getRngVal().setScale(_setScale(),", "RoundingMode.HALF_UP).toPlainString();", "}"], "docstring_tokens": ["This", "method", "inquire", "privide", "condition", "value."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "StaffImpl", "staffImpl)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtStaffSIO", "subInfoIO", "=", "getSubInfoCache(staffImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtStaffSIO();", "subInfoIO.setStaffId(staffImpl.getStaffId());", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_getAtStaffSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(staffImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_getAtStaffSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "staffImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException{", "if(!StringCoreUtils.isEmpty(value))", "{", "for", "(DocCmpntEnum", "enumObject:", "values())", "{", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{", "value,", "\"@docCmpnt\"", "});", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "ArrOpnScrnOut", "clone(){", "try{", "ArrOpnScrnOut", "object=", "(ArrOpnScrnOut)super.clone();", "if", "(", "this.arrStrctrXtnList==", "null", ")", "object.arrStrctrXtnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrXtn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrXtn>(arrStrctrXtnList.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrXtn", "item", ":", "arrStrctrXtnList", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrXtn)item.clone());", "}", "object.arrStrctrXtnList", "=", "clonedList;", "}", "if", "(", "this.arrStrctrCndList==", "null", ")", "object.arrStrctrCndList", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrCnd>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrCnd>(arrStrctrCndList.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrCnd", "item", ":", "arrStrctrCndList", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrCnd)item.clone());", "}", "object.arrStrctrCndList", "=", "clonedList;", "}", "if", "(", "this.arrStrctrRelList==", "null", ")", "object.arrStrctrRelList", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRel>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRel>(arrStrctrRelList.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRel", "item", ":", "arrStrctrRelList", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRel)item.clone());", "}", "object.arrStrctrRelList", "=", "clonedList;", "}", "if", "(", "this.arrStrctrPdDocList==", "null", ")", "object.arrStrctrPdDocList", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrPdDoc>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrPdDoc>(arrStrctrPdDocList.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrPdDoc", "item", ":", "arrStrctrPdDocList", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrPdDoc)item.clone());", "}", "object.arrStrctrPdDocList", "=", "clonedList;", "}", "if", "(", "this.arrStrctrArrDocList==", "null", ")", "object.arrStrctrArrDocList", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrArrDoc>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrArrDoc>(arrStrctrArrDocList.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrArrDoc", "item", ":", "arrStrctrArrDocList", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrArrDoc)item.clone());", "}", "object.arrStrctrArrDocList", "=", "clonedList;", "}", "if", "(", "this.children==", "null", ")", "object.children", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnScrnChildOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnScrnChildOut>(children.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.ArrOpnScrnChildOut", "item", ":", "children", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.ArrOpnScrnChildOut)item.clone());", "}", "object.children", "=", "clonedList;", "}", "if", "(", "this.arrStrctrRltdPdList==", "null", ")", "object.arrStrctrRltdPdList", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRltdPd>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRltdPd>(arrStrctrRltdPdList.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRltdPd", "item", ":", "arrStrctrRltdPdList", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.ArrOpnStrctrRltdPd)item.clone());", "}", "object.arrStrctrRltdPdList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "AaPaRcvSvcOut", "clone(){", "try{", "AaPaRcvSvcOut", "object=", "(AaPaRcvSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(", "value))", "{", "for", "(ReportKndEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@AssetXtnAtrbtNm\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealCore", "arrRealCore)", "throws", "BizApplicationException", "{", "_getArrSrvcBlckngSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "txDt,", "txSeqNbr,", "(ArrRealImpl)arrRealCore);", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "CmBizDayMIO", "select(CmBizDayMIO", "cmBizDayMIO)", "{", "//data", "Cache", "\uc801\uc6a9", "CmCacheProvider", "p", "=", "new", "CmCacheProvider<CmBizDayMIO>(){", "@Override", "public", "CmBizDayMIO", "select(CmBizDayMIO", "cmBizDayMIO){", "return", "_getCmBizDayM().select(cmBizDayMIO);", "}", "};", "CmBizDayMIO", "rtnObj", "=", "super.selectCache(DataCacheCoreConfig.COMMON_BUSINESS_DAY_SELECT_CACHE,", "cmBizDayMIO.getInstCd().concat(cmBizDayMIO.getBaseDt()),", "cmBizDayMIO,", "p);", "return", "rtnObj;", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getAplyStartDt(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "String", "output", "=", "bfCnd.getAplyStartDt();", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "apply", "start", "date", "of", "product", "condition."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "String", "cd", "=", "supplInfoVal", "==", "null", "?", "null", ":", "String.valueOf(supplInfoVal.get(CCM03.CD));", "if(_getCmClHrarcyMDso().select(cd)", "==", "null)", "{", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["public", "List<ArrCndCdChngHst>", "getArrCndChangeHistory(String", "cndCd,", "ArrRealCoreImpl", "arrRealImpl)", "throws", "BizApplicationException{", "if(", "logger.isDebugEnabled()", ")", "{", "logger.debug(", "\"##", "<AR>", "ArrCndMngrImpl", ">", "getArrCndChangeHistory", "Start", "\");", "logger.debug(", "\"##", "<AR>", "cndCd", ":", "{}\",", "cndCd", ");", "logger.debug(", "\"##", "<AR>", "arrRealImpl", ":", "{}\",", "arrRealImpl.getArrId()", ");", "}", "List", "<ArrCndCore>", "arrCndCdList", "=", "new", "ArrayList<ArrCndCore>();", "List<ArArrCndDSelectStsTxIO>", "arrCndCdChngHstList", "=", "new", "ArrayList<ArArrCndDSelectStsTxIO>();", "if(StringCoreUtils.isEmpty(cndCd)){", "arrCndCdList", "=", "arrRealImpl.getListArrCndCoreAllArrLevel();", "//\ud604\uc7ac", "\uc0ac\uc6a9\ub418\uace0\uc788\ub294", "\uc870\uac74", "\uc804\uccb4", "\uc870\ud68c", "}else{", "ArrCndCore", "arrCndCd", "=", "arrRealImpl.getArrCndCore(cndCd);", "//\ud604\uc7ac", "\uc0ac\uc6a9\ub418\uace0\uc788\ub294", "\uc870\uac74", "\uc870\ud68c", "arrCndCdList.add(arrCndCd);", "}", "if(arrCndCdList==null){", "throw", "new", "BizApplicationException(\"AAPPDE0005\",", "new", "Object[]{});", "}", "for(ArrCndCore", "arrCnd", ":", "arrCndCdList){", "//", "\uacc4\uc57d\ub808\ubca8\ub9cc", "\ubcc0\uacbd\uc774\ub825\uc744", "\uc870\ud68c\ud568", "if(", "!arrCnd.isCndValManagedAsArrLevel()", ")", "continue;", "if(", "!arrCnd.hasArrLevelCndVal()", ")", "continue;", "//", "if(", "arrCnd.getSeqNbr()", "==", "null", "||", "arrCnd.getSeqNbr()", "<=", "0", ")", "continue;", "//", "List<ArrCndCore>", "arrCndList", "=", "this.getArrCndHistory(arrCnd.getCndCd(),", "arrRealImpl,", "arrRealImpl.getArrOpnDt(),", "arrCnd.getEfctvEndDt());", "List<ArArrCndDSelectStsTxIO>", "arrCndList", "=", "this.getArrCndHistoryListAllStatus(", "arrCnd.getCndCd(),", "arrRealImpl,", "arrRealImpl.getArrOpnDt()==null?arrCnd.getEfctvStartDt():arrRealImpl.getArrOpnDt(),", "arrCnd.getEfctvEndDt()", ");", "for(ArArrCndDSelectStsTxIO", "arrCndElement", ":", "arrCndList){", "arrCndCdChngHstList.add(arrCndElement);", "}", "}", "List<ArrCndCdChngHst>", "arrCndCdChngHistList", "=", "_postArrCndChangeHistoryList(arrCndCdChngHstList,arrRealImpl);", "if(", "logger.isDebugEnabled()", ")", "{", "logger.debug(", "\"##", "<AR>", "ArrCndMngrImpl", ">", "getArrCndChangeHistory", "END", "\");", "logger.debug(", "\"##", "<AR>", "List<ArrCndCdChngHst>", ":", "{}\",", "arrCndCdChngHistList", ");", "}", "return", "arrCndCdChngHistList;", "}"], "docstring_tokens": ["Inquire", "condition", "value", "change", "history", "arrangement", "level", "condition", "of", "arrangement", "based", "on", "transaction", "which", "changed", "condition", "value."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr,", "ScrtyIntImpl", "scrtyIntImpl)", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm)){", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttribute(xtnAtrbtNm,", "xtnAtrbtCntnt);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsScrtyIntSIO", "subInfoCache", "=", "getSubInfoCache(scrtyIntImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsScrtyIntSIO();", "subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId());", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "2-1.", "insert", "_getAsScrtyIntSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "2-2.", "update", "_getAsScrtyIntSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "security", "interest", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "terminateArrArrRelation(ArrArrRelTrmntnIn", "in)", "throws", "BizApplicationException", "{", "_getArrArrRelBiz().terminateArrArrRelation(in,", "this);", "}"], "docstring_tokens": ["Terminate", "arrangement", "arrangement", "relation"]}
{"code_tokens": ["public", "ActorCmphInqrySvcGetActorXtnInfoOut", "clone(){", "try{", "ActorCmphInqrySvcGetActorXtnInfoOut", "object=", "(ActorCmphInqrySvcGetActorXtnInfoOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "DeptImpl", "deptImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtDeptSIO", "subInfo", "=", "getSubInfoCache(deptImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "subInfo.get(atrbtNm);", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "security", "interest."]}
{"code_tokens": ["public", "void", "checkInputBigDecimalData(String", "errorCd,", "BigDecimal", "inData,", "String", "errorMsg)", "throws", "BizApplicationException", "{", "if", "(null", "==", "inData", "||", "inData.compareTo(BigDecimal.ZERO)", "<=", "0", ")", "{", "throw", "new", "BizApplicationException(errorCd,", "new", "Object[]", "{", "\"@\"+errorMsg", "});", "}", "}"], "docstring_tokens": ["Method", "to", "check", "BigDecimal", "input", "value"]}
{"code_tokens": ["public", "ActorRgstSvcAddrIn", "clone(){", "try{", "ActorRgstSvcAddrIn", "object=", "(ActorRgstSvcAddrIn)super.clone();", "if", "(", "this.ctcptXtnInfoList==", "null", ")", "object.ctcptXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn>(ctcptXtnInfoList.size());", "for(", "bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn", "item", ":", "ctcptXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn)item.clone());", "}", "object.ctcptXtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustRprsnChngSvcElctrncAddrIn", "clone(){", "try{", "CustRprsnChngSvcElctrncAddrIn", "object=", "(CustRprsnChngSvcElctrncAddrIn)super.clone();", "if", "(", "this.ctcptXtnInfoList==", "null", ")", "object.ctcptXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn>(ctcptXtnInfoList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn", "item", ":", "ctcptXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCtcptXtnIn)item.clone());", "}", "object.ctcptXtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DeptSrchSvcGetDeptListIn", "clone(){", "try{", "DeptSrchSvcGetDeptListIn", "object=", "(DeptSrchSvcGetDeptListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AprslCore", "aprslCoreImpl,", "Integer", "prfClaimSeqNbr)", "throws", "BizApplicationException", "{", "_getAprslPrfClaimSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AprslImpl)", "aprslCoreImpl,", "prfClaimSeqNbr);", "}"], "docstring_tokens": ["Save", "an", "security", "interest", "subsidiary", "information."]}
{"code_tokens": ["public", "java.util.List<bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut>", "getChildren(){", "return", "children;", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "child", "arrangement."]}
{"code_tokens": ["public", "AtrbtVldtnWayEnum", "getAttributeValidationWayCode()", "{", "//", "return", "validation", "code", "is", "list(L)", "return", "AtrbtVldtnWayEnum.LENGTH;", "}"], "docstring_tokens": ["Check", "whether", "mandatory"]}
{"code_tokens": ["public", "PdApprovalInfoSvcIn", "clone(){", "try{", "PdApprovalInfoSvcIn", "object=", "(PdApprovalInfoSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaArrSrvcVldtnRuleTestSvcIn", "clone(){", "try{", "CaArrSrvcVldtnRuleTestSvcIn", "object=", "(CaArrSrvcVldtnRuleTestSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaStdSrvcIoMgmtSvcGetStdSrvcIOListOut", "clone(){", "try{", "CaStdSrvcIoMgmtSvcGetStdSrvcIOListOut", "object=", "(CaStdSrvcIoMgmtSvcGetStdSrvcIOListOut)super.clone();", "if", "(", "this.atrbtList==", "null", ")", "object.atrbtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut>(atrbtList.size());", "for(", "bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut", "item", ":", "atrbtList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut)item.clone());", "}", "object.atrbtList", "=", "clonedList;", "}", "if", "(", "this.srvcList==", "null", ")", "object.srvcList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut>(srvcList.size());", "for(", "bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut", "item", ":", "srvcList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut)item.clone());", "}", "object.srvcList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<InterestCalculationSection>", "apply(ApplyInterestCalculationSectionExceptionIn", "in,", "List<InterestCalculationSection>", "intCalIntervals)", "throws", "BizApplicationException", "{", "BigDecimal", "loanBal", "=", "in.getLoanBal();", "String", "addtnlPymntDt", "=", "in.getAddtnlPymntDt();", "//", "\ubd84\ud560\uc9c0\uae09\uc77c", "BigDecimal", "addtnlPymntAmt", "=", "in.getAddtnlPymntAmt();", "//", "\ubd84\ud560\uc9c0\uae09\uae08\uc561", "for", "(InterestCalculationSection", "interval", ":", "intCalIntervals)", "{", "List<CalculationType>", "typeList", "=", "new", "ArrayList<>();", "for", "(CalculationType", "type", ":", "interval.getCalTps())", "{", "String", "calStartDt", "=", "type.getCalStartDt();", "String", "calEndDt", "=", "type.getCalEndDt();", "//", "\uc57d\uc815\uc774\uc790", "&&", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "<", "\ubd84\ud560\uc9c0\uae09\uc77c", "<", "\uacc4\uc0b0\uc885\ub8cc\uc77c", "if", "(type.isAgreementInterest()", "&&", "DateCoreUtils.isDt1BeforeDt2(calStartDt,", "addtnlPymntDt)", "&&", "DateCoreUtils.isDt1BeforeDt2(addtnlPymntDt,", "calEndDt))", "{", "//", "\uacc4\uc0b0\ub300\uc0c1\uae08\uc561", "=", "\ub300\ucd9c\uc794\uc561", "-", "\ubd84\ud560\uc9c0\uae09\uae08\uc561", "BigDecimal", "calTgtAmt", "=", "loanBal.subtract(addtnlPymntAmt);", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "~", "\uacc4\uc0b0\uc885\ub8cc\uc77c", "(\ub300\ucd9c\uc794\uc561", "-", "\ubd84\ud560\uc9c0\uae09\uae08\uc561)", "CalculationType", "t1", "=", "type.clone();", "t1.setCalTgtAmt(calTgtAmt);", "typeList.add(t1);", "//", "\ubd84\ud560\uc9c0\uae09\uc77c", "~", "\uacc4\uc0b0\uc885\ub8cc\uc77c", "(\ubd84\ud560\uc9c0\uae09\uae08\uc561)", "CalculationType", "t2", "=", "type.clone();", "t2.setCalStartDt(addtnlPymntDt);", "t2.setCalTgtAmt(addtnlPymntAmt);", "typeList.add(t2);", "}", "else", "{", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "~", "\uacc4\uc0b0\uc885\ub8cc\uc77c", "(\ub300\ucd9c\uc794\uc561)", "CalculationType", "t1", "=", "type.clone();", "t1.setCalTgtAmt(loanBal);", "typeList.add(t1);", "}", "}", "//", "\ubcc0\uacbd\ub41c", "\uc720\ud615", "\ubc18\uc601", "interval.setCalTps(typeList);", "}", "return", "intCalIntervals;", "}"], "docstring_tokens": ["Change", "the", "status", "of", "arrangement", "into", "\"Applied\",", "while", "change", "product", "of", "arrangement", "based", "on", "product", "code", "input.", "Following", "additional", "arrangement", "information", "can", "be", "registered.", "1)", "Account", "number", "2)", "Whether", "if", "created", "mandatory", "condition", "automatically", "or", "not", "3)", "A", "list", "of", "arrangement", "level", "condition", "4)", "A", "list", "of", "arrangement", "relation", "information", "5)", "A", "list", "of", "arrangement", "extended", "attribute"]}
{"code_tokens": ["public", "BlRgstrnSvcIn", "clone(){", "try{", "BlRgstrnSvcIn", "object=", "(BlRgstrnSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(StlmntCalcnSubInfoInqryIn", "stlmntCalcnSubInfoInqryIn)", "throws", "BizApplicationException", "{", "return", "_getStlmntCalcnSubInfoBiz().getMapSubInfo(_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn));", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "thing", "as", "a", "map."]}
{"code_tokens": ["public", "WorkflowServiceMgmtSvcIO", "clone(){", "try{", "WorkflowServiceMgmtSvcIO", "object=", "(WorkflowServiceMgmtSvcIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<CmpsCnd>", "getComposingCnd(String", "tntInstId,", "String", "cmpxStrctrId)", "throws", "BizApplicationException", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"PdComplexStructureImpl.getComposingCnd.", "cmpxStrctrId", ":", "{}\",", "cmpxStrctrId);", "}", "List<CmpsCnd>", "out", "=", "null;", "/**", "*", "DataCache", "START", "*/", "String", "uKey", "=", "PdUtil.concatenateKeys(Arrays.asList(tntInstId,", "cmpxStrctrId));", "//", "Get", "cache", "data", "List<PdCmpxCmpsCndDIO>", "valList", "=", "_getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE,", "uKey);", "if", "(CollectionCoreUtils.isEmpty(valList))", "{", "List<ComposingCnd>", "apiOutList", "=", "_getComplexStructure().getListComposingCnd(tntInstId,", "cmpxStrctrId);", "//", "Dummy", "\uc800\uc7a5", "if", "(CollectionCoreUtils.isEmpty(apiOutList))", "{", "CmpsCnd", "dummy", "=", "new", "CmpsCnd();", "dummy.setCmpsCndCd(CPD01.DUMMY);", "List<CmpsCnd>", "dummyList", "=", "new", "ArrayList<>();", "dummyList.add(dummy);", "_getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE,", "uKey,", "dummyList);", "}", "else", "{", "out", "=", "new", "ArrayList<>();", "for", "(ComposingCnd", "cmposingCnd", ":", "apiOutList)", "{", "CmpsCnd", "cmpsCnd", "=", "new", "CmpsCnd();", "cmpsCnd.setCmpsCndCd(cmposingCnd.getComposingCndCd());", "cmpsCnd.setCndTpCd(cmposingCnd.getCndTypeCd());", "cmpsCnd.setMsurUnitCd(cmposingCnd.getMeasureUnitCd());", "cmpsCnd.setBlwUndrDscd(cmposingCnd.getBelowUnderDscd());", "cmpsCnd.setCrncyCd(cmposingCnd.getCurrencyCd());", "cmpsCnd.setCmpxCndCmpsSeq(cmposingCnd.getInquirySeq());", "cmpsCnd.setInqrySeq(cmposingCnd.getInquirySeq());", "cmpsCnd.setIsCalculationBaseCnd(cmposingCnd.getIsCalculationBaseCnd());", "cmpsCnd.setListCd(cmposingCnd.getListCd());", "cmpsCnd.setVal(cmposingCnd.getVal());", "out.add(cmpsCnd);", "}", "_getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE,", "uKey,", "out);", "}", "}", "//", "Cache\uc5d0", "\uc800\uc7a5\ub418\uc5b4", "\uc788\ub294\uac8c", "Dummy\uc774\uba74", "null\ub85c", "\ubcc0\ud658", "if", "(CollectionUtils.isEmpty(out)", "||", "CPD01.DUMMY.equals(out.get(0).getCmpsCndCd()))", "{", "out", "=", "null;", "}", "/**", "*", "DataCache", "END", "*/", "//", "Return", "output", "return", "out;", "}"], "docstring_tokens": ["Methods", "to", "query", "configuration", "conditions", "-", "A", "list", "of", "Composing", "conditions", "constituting", "the", "complex", "structure", "is", "inquired."]}
{"code_tokens": ["public", "void", "reject(ArrActvtyChngIn", "arrActvtyChngIn)", "throws", "BizApplicationException", "{", "super.changeStatus(ArrActvtyStsEnum.REJECTED.getValue(),", "arrActvtyChngIn);", "}"], "docstring_tokens": ["Change", "the", "status", "of", "arrangement", "into", "\"Rejected\"."]}
{"code_tokens": ["public", "void", "validate(String", "arrSrvcCd,ArrRealCore", "arrReal,", "CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "if", "(cust.isWalkout()){", "//Customer", "is", "in", "walkout", "program.", "This", "service", "({0})", "could", "not", "be", "finished", "properly", "//\uace0\uac1d\uc774", "\uc6cc\ud06c\uc544\uc6c3\uc0c1\ud0dc\uc785\ub2c8\ub2e4.", "\ubcf8\uc11c\ube44\uc2a4({0})", "\uc2e4\ud589\uc774", "\ubd88\uac00", "\ud569\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0303\",", "new", "Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)});", "}", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "transaction", "is", "possible", "based", "on", "the", "issued", "media."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AprslCore", "aprslCore,", "Integer", "aprslThingSeqNbr)", "throws", "BizApplicationException", "{", "return", "_getAprslThingSubInfoBiz().getMapSubInfo((AprslImpl)aprslCore,", "aprslThingSeqNbr);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "thing", "as", "a", "map."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AprslImpl", "aprslImpl,", "Integer", "prfClaimSeqNbr){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\uac10\uc815\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AsAprslPrfClaimSIO", "subInfo", "=", "getSubInfoCache(aprslImpl,", "prfClaimSeqNbr);", "//", "2.", "\uac10\uc815\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\uac10\uc815\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "business", "column\ub9cc", "put", "if(AprslPrfClaimSubInfo.FIELDS.get(entry.getKey())", "==", "null)", "{", "continue;", "}", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "security", "interest", "as", "a", "map."]}
{"code_tokens": ["public", "CaDstbTgtTaskInfoVO", "getDstbTgtInfo(CaDstbTgtMVO", "in)", "throws", "BizApplicationException{", "CaDstbTgtTaskInfoVO", "resultInfo", "=", "new", "CaDstbTgtTaskInfoVO();", "List<CaCaDstbTgtMIO>", "dstbTgtMIO", "=", "_getSvDstbTgtMDso().selectList(_getDstbTgtReqMIO(in));", "if(dstbTgtMIO", "!=", "null){", "resultInfo", "=", "_getDstbTgtReqInfoIO(dstbTgtMIO.get(0));", "List<CaCaDstbTgtDIO>", "dstbTgtDIO", "=", "_getSvDstbTgtDDso().selectList(_getDstbTgtReqMIO(in));", "resultInfo.setDstbTgtDtl(_getDstbTgtDIO(dstbTgtDIO));", "}", "return", "resultInfo;", "}"], "docstring_tokens": ["Get", "distribution", "target", "information", "Query", "through", "dstbSrvrId,", "dstbRqstId,", "and", "dstbTaskId."]}
{"code_tokens": ["public", "String", "getCmpxCndYn(){", "return", "cmpxCndYn;", "}"], "docstring_tokens": ["This", "method", "inquire", "whether", "it", "is", "a", "complex", "condition."]}
{"code_tokens": ["public", "AmtTpDtlIO", "getAmountType(", "String", "amtTpCd", ")", "throws", "BizApplicationException", "{", "AmtTpDtlIO", "result", "=", "_getAmtTp().getAmountType(amtTpCd);", "if(", "null", "!=", "result", "){", "return", "result;", "}else{", "return", "new", "AmtTpDtlIO();", "}", "}"], "docstring_tokens": ["This", "method", "inquires", "detail", "information", "of", "input", "amount."]}
{"code_tokens": ["public", "CaRoleMgmtSvcGetRoleScreenRelationListOut", "clone(){", "try{", "CaRoleMgmtSvcGetRoleScreenRelationListOut", "object=", "(CaRoleMgmtSvcGetRoleScreenRelationListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleScreenRelationOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleScreenRelationOut>(tblNm.size());", "for(", "bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleScreenRelationOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.role.service.dto.CaRoleMgmtSvcGetRoleScreenRelationOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(BillCtgryFormEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "AplyDstbBatRsltIO", "clone(){", "try{", "AplyDstbBatRsltIO", "object=", "(AplyDstbBatRsltIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "if", "(", "this.dstbReqSrvrDtl==", "null", ")", "object.dstbReqSrvrDtl", "=", "null;", "else{", "java.util.List<bankware.corebanking.applicationcommon.distribution.batch.dto.AplyDstbBatRsltReqSrvrDIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.applicationcommon.distribution.batch.dto.AplyDstbBatRsltReqSrvrDIO>(dstbReqSrvrDtl.size());", "for(", "bankware.corebanking.applicationcommon.distribution.batch.dto.AplyDstbBatRsltReqSrvrDIO", "item", ":", "dstbReqSrvrDtl", "){", "clonedList.add(", "(bankware.corebanking.applicationcommon.distribution.batch.dto.AplyDstbBatRsltReqSrvrDIO)item.clone());", "}", "object.dstbReqSrvrDtl", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "isValidByChnlCode()", "throws", "BizApplicationException", "{", "_getSrvcRstrctnDtlImpl().isValidByChnlCode();", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "channel", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "int", "saveCodeDetail(CaCdNbrInfoIO", "in)", "throws", "BizApplicationException", "{", "int", "out", "=", "0;", "String", "cdNbr", "=", "in.getCdNbr();", "//", "Delete", "the", "ex", "data", "deleteCodeDetail(in);", "//", "Savte", "the", "institution", "subset", "code", "for(int", "i", "=", "0;", "i", "<", "in.getCdDtlList().size();", "i++)", "{", "CaCdDtlIO", "cdDtlIO", "=", "in.getCdDtlList().get(i);", "CaCmInstSbstCdDIO", "daoIn", "=", "new", "CaCmInstSbstCdDIO();", "_getCaCmnContext().setHeaderColumn(daoIn);", "daoIn.setCdNbr(cdNbr);", "daoIn.setInstCd(in.getInstCd());", "daoIn.setCd(cdDtlIO.getCd());", "List<CaCmInstSbstCdDIO>", "rtnList", "=", "_getCmInstSbstCdDDso().selectListByCondition(daoIn);", "if(rtnList", "!=", "null", "&&", "rtnList.size()", ">", "0){", "CaCmInstSbstCdDIO", "item", "=", "rtnList.get(0);", "item.setUpCdNbr(cdDtlIO.getUpCdNbr());", "item.setLastChngId(_getCaCmnContext().getStaffId());", "item.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue());", "out", "+=", "_getCmInstSbstCdDDso().update(daoIn);", "}", "else", "{", "daoIn.setUpCdNbr(cdDtlIO.getUpCdNbr());", "daoIn.setLastChngId(_getCaCmnContext().getStaffId());", "daoIn.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue());", "out", "+=", "_getCmInstSbstCdDDso().insert(daoIn);", "}", "}", "return", "out;", "}"], "docstring_tokens": ["Save", "code", "detail", "information"]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "String", "txDt,", "Integer", "txSeqNbr,", "AssetImpl", "assetImpl)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\uc790\uc0b0\ubcf4\uc870\uba85\uc138\uc758", "\uc885\ub958", "\uc870\ud68c", "AssetSubInfoKndEnum", "subInfoKnd", "=", "assetImpl.getAssetSubInfoKnd();", "//", "2.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(assetImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"assetId\",", "assetImpl.getAssetBasicCache().getAssetId());", "//PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(assetImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "map\uc744", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "3-1.", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(assetImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "map\uc744", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "3-2.", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "//", "4.", "\uce90\uc2dc", "\uc800\uc7a5", "assetImpl.saveSubInfoCache(xtnTable,", "subInfoCache);", "}"], "docstring_tokens": ["Store", "several", "extended", "attributes", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "ArrCndCore", "getArrCndCore(String", "cndCd)", "throws", "BizApplicationException", "{", "//", "\ud574\ub2f9", "\uba54\uc18c\ub4dc\ub294", "({0})", "\ud074\ub798\uc2a4\uc758", "\uc778\uc2a4\ud134\uc2a4\ub85c", "\uc0ac\uc6a9\ud560", "\uc218", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\uacc4\uc57d\ub2f4\ub2f9\uc790\uc5d0\uac8c", "\ubb38\uc758\ubc14\ub78d\ub2c8\ub2e4.", "//", "This", "method", "cannot", "be", "used", "by", "instance", "of", "({0})", "class.", "throw", "new", "BizApplicationException(\"AAPARE0678\",new", "Object[]{", "this.getClass().getName()});", "}"], "docstring_tokens": ["Inquire", "effective", "arrangement", "condition", "by", "product", "condition", "code.", "Perform", "following", "actions", "depending", "on", "negotiation", "level", "of", "condition.", "Caution", ":", "-", "Only", "the", "condition", "codes", "defined", "in", "the", "product", "must", "be", "used.", "-", "How", "to", "handle", "when", "the", "value", "defined", "according", "to", "the", "negotiation", "level", "does", "not", "exist", "product", "level", ":", "check", "if", "return", "value", "is", "null", "arrangement", "level", ":", "check", "if", "return", "value", "is", "null", "or", "check", "if", "return", "value", "of", "hasArrLevelCndVal()", "exists", "Usage", "of", "condition", "value", "-", "Cast", "the", "value", "according", "to", "the", "type", "of", "condition", "range", "type", ":", "{@link", "ArrCndRngCore}", "list", "type", ":", "{@link", "ArrCndLstCore}", "interest", "type", ":", "{@link", "ArrCndIntCore}", "fee", "type", ":", "{@link", "ArrCndFeeCore}"]}
{"code_tokens": ["public", "boolean", "isSalable(String", "baseDt,", "String", "baseTm)", "{", "Date", "baseDate", "=", "PdUtil.parseYyyyMMddHHmmssToDate(baseDt,", "baseTm);", "//", "\uc0c1\ud488\uc2dc\uc791\uc77c\uc2dc", "<=", "\uae30\uc900\uc77c\uc2dc", "<", "\uc0c1\ud488\uc885\ub8cc\uc77c\uc2dc", "return", "(baseDate.after(bf.getSaleStartDt())", "||", "baseDate.equals(bf.getSaleStartDt()))", "&&", "baseDate.before(bf.getSaleEndDt());", "}"], "docstring_tokens": ["This", "Method", "inquire", "whether", "or", "not", "it", "is", "a", "sallable", "point", "on", "the", "input", "date", "and", "time."]}
{"code_tokens": ["public", "int", "countApproveListByStatus(", "CaAprvlGetListByStsIn", "aprvlGetListByStsIn)", "throws", "BizApplicationException", "{", "/*", "*", "\uc870\uac74", "\ucc98\ub9ac", "*/", "CaCmAprvlListByStsIn", "cmAprvlListByStsIn", "=", "_setCmAprvlListByStsIn(aprvlGetListByStsIn);", "/*", "*", "\ud638\ucd9c", "*/", "int", "cnt", "=", "0;", "if(StringUtils.isEmpty(cmAprvlListByStsIn.getDtlAprvlStsCd())){", "cnt", "=", "_getCmApprvMDso().countDemandListByStatus(cmAprvlListByStsIn);", "}else{", "cnt", "=", "_getCmApprvMDso().countListByStatus(cmAprvlListByStsIn);", "}", "return", "cnt;", "}"], "docstring_tokens": ["View", "approval", "list", "by", "approval", "status(for", "paging)"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(CaPrntWayTpEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{", "value,", "\"@prntWayTpCd\"", "});", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "List<ArrTx>", "getListChildTxHistory(ArrTxInqryDtIn", "in,", "ArrReal", "mthrArr)", "throws", "BizApplicationException{", "_checkArr(mthrArr);", "_checkSearchPeriod(in.getInqryStartDt(),in.getInqryEndDt());", "_setPgInfo(in);", "List<StTxMIO>", "txHsts", "=", "_getArrTxXtnBiz().getListByMthrArrId(_setStTxMInByArr(in,mthrArr));", "return", "_convertListArrTx(super.getListArrTxCoreObject(txHsts));", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "transaction", "list", "of", "the", "child", "arrangement", "that", "exists", "under", "the", "specific", "mother", "arrangement."]}
{"code_tokens": ["public", "CustRprsnInqrySvcListGetListOut", "clone(){", "try{", "CustRprsnInqrySvcListGetListOut", "object=", "(CustRprsnInqrySvcListGetListOut)super.clone();", "if", "(", "this.roleList==", "null", ")", "object.roleList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcRoleListIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcRoleListIO>(roleList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcRoleListIO", "item", ":", "roleList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcRoleListIO)item.clone());", "}", "object.roleList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaDstbTaskMListIn", "clone(){", "try{", "CaDstbTaskMListIn", "object=", "(CaDstbTaskMListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "LnAgrmntOpenSvcGridOut", "clone(){", "try{", "LnAgrmntOpenSvcGridOut", "object=", "(LnAgrmntOpenSvcGridOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "setHeaderColumn(IValueObject", "in)", "throws", "BizApplicationException", "{", "this.setColumn(in);", "}"], "docstring_tokens": ["Set", "default", "column", "(for", "OMM)"]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AssetCore", "assetImpl,", "Integer", "assetThingSeqNbr)", "throws", "BizApplicationException", "{", "return", "_getAssetThingSubInfoBiz().getMapSubInfo((AssetImpl)assetImpl,", "assetThingSeqNbr);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "transaction", "as", "a", "map."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "aprslThingSubInfoMap,", "AprslCore", "aprslCore,", "Integer", "aprslThingSeqNbr)", "throws", "BizApplicationException", "{", "_getAprslThingSubInfoBiz().saveMapSubInfo(aprslThingSubInfoMap,", "(AprslImpl)", "aprslCore,", "aprslThingSeqNbr);", "}"], "docstring_tokens": ["Save", "the", "asset", "transaction", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(ArrExtrnlIdNbrStsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,", "ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if(!this.getArrangementCore().isReal())", "return;", "switch", "(arrSrvcTpCd)", "{", "case", "\"PartialWithdrawal\":", "_doPartialWithdrawalAction();", "return;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["This", "function", "execute", "the", "extended", "attribute", "business", "rules", "that", "registered", "in", "the", "Contract", "Services", "Processing", "Rules."]}
{"code_tokens": ["protected", "void", "register(CustImpl", "custImpl,", "CustStsIO", "custStsIO)", "throws", "BizApplicationException", "{", "AtCustMIO", "atCustMIO", "=", "custImpl.getCustBsicCache();", "if", "(custStsIO", "==", "null)", "{", "return;", "}", "AtCustStsDXtnIO", "atCustStsDIO", "=", "new", "AtCustStsDXtnIO();", "atCustStsDIO.setCustId(atCustMIO.getCustId());", "atCustStsDIO.setCustStsSeqNbr(_getAtCustStsDXtnDso().selectNextSeqNbr(atCustMIO.getInstCd(),", "atCustMIO.getCustId()));", "atCustStsDIO.setCustStsCd(custStsIO.getCustStsCd()", "!=", "null", "?", "custStsIO.getCustStsCd()", ":", "CustStsEnum.ACTIVE.getValue());", "atCustStsDIO.setStsChngDt(custStsIO.getStsChngDt());", "atCustStsDIO.setStsChngHms(custStsIO.getStsChngHms());", "atCustStsDIO.setCustStsChngRsnCd(custStsIO.getCustStsChngRsnCd());", "atCustStsDIO.setCustStsChngRsnCntnt(custStsIO.getCustStsChngRsnCntnt());", "atCustStsDIO.setEfctvEndDt(custStsIO.getEfctvEndDt()", "==", "null", "?", "CCM01.MAX_DATE", ":", "custStsIO.getEfctvEndDt());", "atCustStsDIO.setEfctvStartDt(custStsIO.getEfctvStartDt()", "==", "null", "?", "_getCmnContext().getTxDate()", ":", "custStsIO.getEfctvStartDt());", "AtCustStsDXtnIO", "lastAtCustStsDIO", "=", "_getAtCustStsDXtnDso().select(atCustMIO.getCustId(),", "atCustMIO.getInstCd(),", "atCustStsDIO.getEfctvStartDt(),", "CustStsEnum.IGNORE.getValue());", "if", "(lastAtCustStsDIO", "==", "null)", "{", "_PKValidateCustStsD(atCustStsDIO);", "_getAtCustStsDXtnDso().insert(atCustStsDIO);", "}", "else", "{", "atCustStsDIO.setEfctvEndDt(DateUtils.getDateDayBefore(1,", "atCustStsDIO.getEfctvStartDt()));", "_PKValidateCustStsD(atCustStsDIO);", "_getAtCustStsDXtnDso().updateEfctvEndDt(atCustStsDIO,", "CustStsEnum.IGNORE.getValue());", "atCustStsDIO.setEfctvEndDt(custStsIO.getEfctvEndDt()", "==", "null", "?", "CCM01.MAX_DATE", ":", "custStsIO.getEfctvEndDt());", "_PKValidateCustStsD(atCustStsDIO);", "_getAtCustStsDXtnDso().insert(atCustStsDIO);", "}", "}"], "docstring_tokens": ["It", "registers", "the", "document", "notice", "relation", "information.", "Needs", "caution", "as", "the", "registered", "information", "performs", "the", "update", "transaction."]}
{"code_tokens": ["public", "ArrCmphInqrySvcXtnInfoListOut", "clone(){", "try{", "ArrCmphInqrySvcXtnInfoListOut", "object=", "(ArrCmphInqrySvcXtnInfoListOut)super.clone();", "if", "(", "this.xtnInfoList==", "null", ")", "object.xtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.deposit.query.service.dto.ArrCmphInqrySvcXtnInfoItmOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.deposit.query.service.dto.ArrCmphInqrySvcXtnInfoItmOut>(xtnInfoList.size());", "for(", "bankware.corebanking.deposit.query.service.dto.ArrCmphInqrySvcXtnInfoItmOut", "item", ":", "xtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.deposit.query.service.dto.ArrCmphInqrySvcXtnInfoItmOut)item.clone());", "}", "object.xtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "StlmntCrctnMgmtSvcListOut", "clone(){", "try{", "StlmntCrctnMgmtSvcListOut", "object=", "(StlmntCrctnMgmtSvcListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntCrctnMgmtSvcItemOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntCrctnMgmtSvcItemOut>(tblNm.size());", "for(", "bankware.corebanking.accounting.closingaccounts.service.dto.StlmntCrctnMgmtSvcItemOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.closingaccounts.service.dto.StlmntCrctnMgmtSvcItemOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustStaffRelSvcGetDtlIn", "clone(){", "try{", "CustStaffRelSvcGetDtlIn", "object=", "(CustStaffRelSvcGetDtlIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaCustGradeCdSvcDeleteIn", "clone(){", "try{", "CaCustGradeCdSvcDeleteIn", "object=", "(CaCustGradeCdSvcDeleteIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getInstCd()", "{", "return", "arrTxBsicIO.getInstCd();", "}"], "docstring_tokens": ["This", "method", "inquire", "institution", "code", "of", "point"]}
{"code_tokens": ["public", "DuedtMgmtStsQuerySvcGetDuedtMgmtStsListIn", "clone(){", "try{", "DuedtMgmtStsQuerySvcGetDuedtMgmtStsListIn", "object=", "(DuedtMgmtStsQuerySvcGetDuedtMgmtStsListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ActorRoleDeptRIO>", "getListActorRoleDeptRelation()", "throws", "BizApplicationException", "{", "return", "getActor().getListActorRoleDeptRelation();", "}"], "docstring_tokens": ["Inquire", "actor", "role-department", "relation", "information", "list.", "It", "inquires", "the", "effective", "and", "normal", "status", "information", "on", "transaction", "date."]}
{"code_tokens": ["public", "DummyIO", "removeExtrnlIntrfcMsgAuthInfo(CaExtrnlIntrfcMsgAuthInfoMgmtSvcDelIn", "in)", "throws", "BizApplicationException{", "/**", "*", "remove", "external", "interface", "message", "authentication", "information", "*/", "for(CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn", "item", ":", "in.getDeleteList()){", "_getCaExtrnlAuthInfoMgmt().removeExtrnlIntrfcMsgAuthInfo(_setExtrnLIntrfcMsgAuthInfoRgstIn(item));", "}", "return", "new", "DummyIO();", "}", "//", "//", "@BxmServiceOperation(\"getTokenGnrtInfo\")", "//", "@CbbSrvcInfo(srvcCd=\"CAPXP0068500\",srvcNm=\"token\uc0dd\uc131\uc870\ud68c\",srvcAbrvtnNm=\"getTokenGnrtInfo\")", "//", "public", "CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetTokenOut", "getTokenGnrtInfo(CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetTokenIn", "in)", "throws", "BizApplicationException{", "//", "logger.debug(\"================", "getTokenGnrtInfo", "START", "================\");", "//", "logger.debug(\"================", "ServiceIn", ":", "{}\",", "in);", "//", "//", "CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetTokenOut", "out", "=", "new", "CaExtrnlIntrfcMsgAuthInfoMgmtSvcGetTokenOut();", "//", "//", "/**", "//", "*", "token", "\uc0dd\uc131", "//", "*/", "//", "//", "String", "token", "=", "Base64.encodeBase64String(UUID.randomUUID().toString().getBytes()).toString();", "//", "//String", "token", "=", "UUID.randomUUID().toString();", "//", "logger.debug(\"=====================", "UUID.randomUUID()", ":", "{}\",", "UUID.randomUUID());", "//", "logger.debug(\"=====================", "token", ":", "{}\",", "token);", "//", "//", "out.setAuthFldVal(token);", "//", "//", "/**", "//", "*", "assemble", "output", "//", "*/", "//", "return", "out;", "//", "}"], "docstring_tokens": ["It", "removes", "list", "of", "External", "Interface", "Message", "Authentication", "Information."]}
{"code_tokens": ["public", "List<ArArrPsbkEventOut>", "getListPsbkEventOnBaseDt(ArrIssmda", "arrIssmda,", "ArrReal", "arrReal,", "Integer", "arrIssmdaRelSeqNbr,", "String", "baseDt)", "throws", "BizApplicationException{", "_checkInputAndValidate(arrIssmda,arrIssmdaRelSeqNbr,baseDt);", "List<ArArrPsbkEventOut>", "psbkEventOutList", "=", "new", "ArrayList<>();", "List<ArArrPsbkEventDIO>", "selectedPsbkEventList=_selectListFromEfctvOnBaseDt(arrReal,arrIssmda.getArrIssmdaInhrncId(),arrIssmda.getArrIssmdaTpEnum().getValue(),arrIssmdaRelSeqNbr,baseDt);", "_setPsbkEventOutList(psbkEventOutList,selectedPsbkEventList);", "return", "psbkEventOutList;", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "effective", "passbook", "event", "of", "arrangement", "on", "base", "date."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ActorCore", "actorCore)", "throws", "BizApplicationException", "{", "return", "_getActorSubInfoBiz().getMapSubInfo((ActorImpl)", "actorCore);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "thing", "as", "a", "map."]}
{"code_tokens": ["public", "CaSrvcPrflMgmtSvcIO", "clone(){", "try{", "CaSrvcPrflMgmtSvcIO", "object=", "(CaSrvcPrflMgmtSvcIO)super.clone();", "if", "(", "this.children==", "null", ")", "object.children", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcPrflMgmtSvcIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.service.service.dto.CaSrvcPrflMgmtSvcIO>(children.size());", "for(", "bankware.corebanking.configurationadmin.service.service.dto.CaSrvcPrflMgmtSvcIO", "item", ":", "children", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.service.service.dto.CaSrvcPrflMgmtSvcIO)item.clone());", "}", "object.children", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo,", "StStlmntCalcnSIO", "stStlmntCalcnSIOIn)", "{", "logger.debug(\"##<ST-StlmntCalcnSubInfoBiz>", "saveSubInfo\");", "//", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{this.getClass().getSimpleName()});", "}", "logger.debug(\"##<ST-StlmntCalcnSubInfoBiz>", "saveSubInfo", "null", "check", "ok\");", "//", "1.create", "a", "new", "instance", "of", "DB", "IO", "IValueObject", "subInfoDBIO", "=", "new", "StStlmntCalcnSIO();", "//", "2.set", "primary", "key", "_setKey(subInfoDBIO,", "stStlmntCalcnSIOIn);", "//", "3.convert", "IvalueObject", "to", "DBIO", "VO", "DtoUtils.setSubInfoIO(subInfo,", "subInfoDBIO);", "//", "4.insert", "subsidiary", "detail", "_insertSubInfo(subInfoDBIO);", "/*", "*", "settlement\ub294", "\uc18d\uc131\uc744", "\ub300\ubd80\ubd84", "insert", "\ud558\ub294", "\uacbd\uc6b0\uc774\ubbc0\ub85c", "\uc544\ub798", "\ub85c\uc9c1\uc744", "\ub9c9\uc74c", "*/", "//", "IValueObject", "sqlOut", "=", "getSubInfo(stlmnt);", "//", "//", "//", "\ud574\ub2f9", "\uac70\ub798\uad00\ub828", "\ubcf4\uc870\uba85\uc138", "\ub370\uc774\ud130\uac00", "\uc5c6\uc744", "\ub54c", "//", "if(sqlOut", "==", "null)", "{", "//", "_insertSubInfo(subInfoDBIO);", "//", "//", "\ub9f4\ubc84\ubcc0\uc218", "VO", "\uac12", "\uc124\uc815", "//", "Stlmnt.setStlmntSubInfo(subInfo);", "//", "//", "}else", "{", "//", "//", "\uae30", "\uc870\ud68c", "\ub41c", "\uac12\uc5d0", "update\ub418\uc5b4\ud560", "\ud544\ub4dc", "\uc124\uc815", "//", "DtoUtils.setSubInfoIO(subInfo,", "sqlOut);", "//", "//", "DBIO", "IO\uc5d0", "\ub0b4\uc6a9\ud544\ub4dc", "\ubc18\uc601", "//", "DtoUtils.setSubInfoIO(sqlOut,", "subInfoDBIO);", "//", "//", "_updateSubInfo(subInfoDBIO);", "//", "//", "\ub9f4\ubc84\ubcc0\uc218", "VO", "\uac12", "\uc124\uc815(sqlOut\uc740", "\uae30\uc874", "+", "\uc0c8\ub85c", "update\ub418\uc5b4\uc57c", "\ud560", "\ud544\ub4dc", "\ubaa8\ub450", "\ubc18\uc601\ub41c", "\ucd5c\uc2e0", "\ubcf4\uc870\uba85\uc138IO)", "//", "stlmnt.setStlmntSubInfo(sqlOut);", "//", "}", "}"], "docstring_tokens": ["Save", "an", "appraisal", "subsidiary", "information."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(CustTxImpl", "custTxImpl)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtCustTxSIO", "subInfo", "=", "getSubInfoCache(custTxImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "inquiring", "all", "of", "subsidiary", "information", "about", "transaction", "as", "MAP", "type."]}
{"code_tokens": ["public", "String", "getAccountingBaseDate()", "throws", "BizApplicationException", "{", "return", "getBusinessDate();", "}"], "docstring_tokens": ["Accounting", "base", "date", "inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "int", "delete(CaAcJrRulePIO", "acJrRulePIO)", "throws", "BizApplicationException", "{", "//return", "acJrRuleP.delete(acJrRulePIO);", "switch(", "DbmsVendorNmEnum.getByValue(_getSysNonstopCoreUtil().getDbmsVendorName())", ")", "{", "case", "ORACLE:", "return", "_getAcJrRuleP().deleteOracle(acJrRulePIO);", "case", "MYSQL:", "return", "_getAcJrRuleP().deleteMysql(acJrRulePIO);", "default:", "throw", "new", "BizApplicationException(\"AAPCME0202\",", "null);", "}", "}"], "docstring_tokens": ["It", "removes", "document", "information."]}
{"code_tokens": ["public", "int", "saveIpctClInfo(CaIpctClIn", "in)", "throws", "BizApplicationException", "{", "//\ud544\uc218", "\uc785\ub825", "\ud56d\ubaa9", "\uac80\uc99d", "_checkStringValue(in.getIpctClCd(),", "new", "Object[]", "{\"@ipctClCd\"});", "_checkStringValue(in.getActvStsCd(),", "new", "Object[]", "{\"@actvStsCd\"});", "_checkStringValue(in.getNbrgAtrbtNm(),new", "Object[]", "{\"@nbrAtrbtNm\"});", "return", "_getIpctMgmtBiz().saveIpctClInfo(in);", "}"], "docstring_tokens": ["-", "Save", "of", "important", "certificate", "classification", "information", "-", "Functionalities", "Registration", "of", "important", "certificate", "classification", "information", "Modify", "of", "important", "certificate", "classification", "information"]}
{"code_tokens": ["public", "boolean", "check(Map<String,", "String>", "atrbtCntnt)", "throws", "BizApplicationException", "{", "//", "Implement", "Logic", "for", "Validate", "Control", "Center", "ID", "//", "check", "Control", "Center", "Id", "When", "transaction", "is", "not", "ControlCenterRegistration", "if(", "logger.isDebugEnabled()", ")", "{", "logger.debug(", "\"##", "<SHW>", "CntrlCntrIdVldtnImpl", "START", "\");", "}", "String", "instCd", "=", "atrbtCntnt.get(\"instCd\");", "String", "cntrlCntrId", "=", "atrbtCntnt.get(\"cntrlCntrId\");", "if(!StringUtils.isEmpty(cntrlCntrId))", "{", "CntrlCntrMngrSvcGetIO", "mngrIn", "=", "new", "CntrlCntrMngrSvcGetIO();", "mngrIn.setInstCd(instCd);", "//", "institute", "ID", "mngrIn.setCntrlCntrId(cntrlCntrId);", "//", "control", "center", "ID", "CntrlCntrMngrSvcGetIO", "mngrOut", "=", "_getCntrlCntr().getControlCenterBasic(mngrIn);", "if(", "mngrOut", "==", "null", ")", "throw", "new", "BizApplicationException(\"AAPSVE0002\",", "new", "String[]", "{\"@cntrlCntrId\"});", "}", "if(", "logger.isDebugEnabled()", ")", "{", "logger.debug(", "\"##", "<SHW>", "CntrlCntrIdVldtnImpl", "END", "\");", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Simple", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "pdCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "null,", "null,", "null,", "pdCd,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "0,", "0,", "false);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "of", "specific", "product", "hierarchy", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "(Paging)", "Inquire", "modification", "arrangement", "of", "inquired", "arrangement", "if", "hasVrtnArr", "is", "true."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "pdCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "null,", "null,", "null,", "pdCd,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "0,", "0,", "false);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "of", "specific", "product", "code", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "(Paging)", "Inquire", "modification", "arrangement", "of", "inquired", "arrangement", "if", "hasVrtnArr", "is", "true."]}
{"code_tokens": ["public", "String", "getPdRule(String", "arrPdRuleTpCd,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "String", "pdCd,", "Boolean", "isWithoutException)", "throws", "BizApplicationException", "{", "_checkInputValidation(arrPdRuleTpCd,", "bizDscd);", "String", "arrPdRuleCntnt", "=", "_getArArrPdRuleMDso().selectByProduct(_getCmnContextCore().getInstCode(),", "arrPdRuleTpCd,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "pdCd);", "if", "(StringCoreUtils.isEmpty(arrPdRuleCntnt)", "&&", "!isWithoutException)", "{", "String", "pdString", "=", "(pdCd", "==", "null", "?", "(pdTmpltCd", "==", "null", "?", "(pdTpCd", "==", "null", "?", "bizDscd", ":", "bizDscd.concat(pdTpCd))", ":", "pdTmpltCd)", ":", "pdCd);", "throw", "new", "BizApplicationException(\"AAPARE0521\",", "new", "Object[]{arrPdRuleTpCd,pdString,_getPdNm(pdCd)});", "}", "return", "arrPdRuleCntnt;", "}"], "docstring_tokens": ["Inquire", "rule", "contents", "by", "kind", "of", "arrangement", "product", "rule."]}
{"code_tokens": ["public", "IntrnlArrOpnSvcIn", "clone(){", "try{", "IntrnlArrOpnSvcIn", "object=", "(IntrnlArrOpnSvcIn)super.clone();", "if", "(", "this.cndList==", "null", ")", "object.cndList", "=", "null;", "else{", "java.util.List<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrCndIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrCndIn>(cndList.size());", "for(", "bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrCndIn", "item", ":", "cndList", "){", "clonedList.add(", "(bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrCndIn)item.clone());", "}", "object.cndList", "=", "clonedList;", "}", "if", "(", "this.xtnList==", "null", ")", "object.xtnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrXtnIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrXtnIn>(xtnList.size());", "for(", "bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrXtnIn", "item", ":", "xtnList", "){", "clonedList.add(", "(bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrXtnIn)item.clone());", "}", "object.xtnList", "=", "clonedList;", "}", "if", "(", "this.relList==", "null", ")", "object.relList", "=", "null;", "else{", "java.util.List<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrRelIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrRelIn>(relList.size());", "for(", "bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrRelIn", "item", ":", "relList", "){", "clonedList.add(", "(bankware.corebanking.internalaccount.open.service.dto.IntrnlArrOpnSvcArrRelIn)item.clone());", "}", "object.relList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AtrlImpl", "atrlImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\uc561\ud130\uc5ed\ud560\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtAtrlSIO", "subInfoIO", "=", "getSubInfoCache(atrlImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtAtrlSIO();", "subInfoIO.setAtrlId(atrlImpl.getAtrlId());", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "insert", "_getAtAtrlSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(atrlImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "update", "_getAtAtrlSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "atrlImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Save", "an", "appraisal", "preferential", "claim", "subsidiary", "information."]}
{"code_tokens": ["public", "StdCustMemoChngSvcGetOut", "clone(){", "try{", "StdCustMemoChngSvcGetOut", "object=", "(StdCustMemoChngSvcGetOut)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getPdTemplateName(String", "instId,", "String", "pdTmpltCd)", "throws", "BizApplicationException", "{", "String", "mTntInstId", "=", "getMotherInstId(instId);", "/**", "*", "DataCache", "START", "*/", "String", "uKey", "=", "PdUtil", ".concatenateKeys(Arrays.asList(mTntInstId,", "pdTmpltCd,", "PdInformationDscdCoreEnum.PD.getValue()));", "//", "Get", "cache", "data", "String", "pdTemplateName", "=", "_getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_PDT_M_CACHE,", "uKey);", "if", "(pdTemplateName", "==", "null)", "{", "pdTemplateName", "=", "_getPdCore().getPdTemplateName(mTntInstId,", "pdTmpltCd);", "//", "Put", "cache", "data", "_getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_PDT_M_CACHE,", "uKey,", "pdTemplateName);", "}", "//", "Return", "name", "return", "pdTemplateName;", "}"], "docstring_tokens": ["Method", "for", "querying", "the", "product", "template", "name"]}
{"code_tokens": ["public", "boolean", "isChannelInternet(String", "chnlDscd)", "throws", "BizApplicationException", "{", "return", "ChannelEnum.INTERNET.getValue().equals(chnlDscd)", "?", "true", ":", "false;", "}"], "docstring_tokens": ["It", "checks", "internet", "channel."]}
{"code_tokens": ["public", "ArrRealCore", "getVrtnSrcArr()", "throws", "BizApplicationException", "{", "if(this.isArrKindModification()){", "return", "(ArrRealCore)", "((ArrMdfctn)this).getOriginArr();", "}", "if(this.isArrKindAssessment()){", "return", "(ArrRealCore)", "((ArrAsm)this).getOriginArr();", "}", "return", "null;", "}"], "docstring_tokens": ["Inquire", "variation", "source", "arrangement", "of", "modification/assessment", "arrangement."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(MnySndRcvDscdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "ArrCnd", "getArrCnd(String", "cndCd,", "String", "baseDt)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled()){", "logger.debug(", "\"##", "<SHW>", "ArrMdfctnImpl", ">", "getArrCnd", "START", "\");", "}", "ArrCnd", "arrCnd", "=", "getArrCndModified(cndCd,", "baseDt);", "if(logger.isDebugEnabled()){", "logger.debug(", "\"##", "<SHW>", "ArrMdfctnImpl", ">", "getArrCnd", "after", "getArrCndModified", ":", "{}", "\",", "arrCnd", ");", "}", "if", "(arrCnd", "==", "null", "||", "(arrCnd.isCndValManagedAsArrLevel()", "&&", "!arrCnd.hasArrLevelCndVal())", ")", "{", "arrCnd", "=", "getArrCndOrigin(cndCd);", "if(logger.isDebugEnabled()){", "logger.debug(", "\"##", "<SHW>", "ArrMdfctnImpl", ">", "getArrCnd", "after", "getArrCndOrigin", ":", "{}", "\",", "arrCnd", ");", "}", "}", "if(logger.isDebugEnabled()){", "logger.debug(", "\"##", "<SHW>", "ArrMdfctnImpl", ">", "getArrCnd", "END", ":", "{}\",", "arrCnd);", "}", "return", "arrCnd;", "}"], "docstring_tokens": ["Inquire", "effective", "arrangement", "condition", "by", "product", "condition", "code.", "The", "returned", "condition", "object", "can", "be", "cast", "in", "to", "each", "specific", "type", "condition", "object", "such", "as", "{@link", "ArrCndLst}", "and", "{@link", "ArrCndRng}"]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "CaCaDstbEnvCdMIO", "svDstbEnvMIO", "=", "new", "CaCaDstbEnvCdMIO();", "if(supplInfoVal.get(CCM03.CD)", "!=", "null)", "{", "if(supplInfoVal.get(CCM03.INST_CD)", "==", "null", "||", "StringUtils.isEmpty(supplInfoVal.get(CCM03.CD).toString())){", "svDstbEnvMIO.setInstCd(_getCaCmnContext().getInstCode());", "}", "else", "{", "svDstbEnvMIO.setInstCd(supplInfoVal.get(CCM03.INST_CD).toString());", "}", "svDstbEnvMIO.setDstbEnvrnmntCd(supplInfoVal.get(CCM03.CD).toString());", "}", "svDstbEnvMIO.setActvStsCd(\"01\");", "List<CaCaDstbEnvCdMIO>", "svDstbEnvMList", "=", "_getSvDstbEnvMDso().selectEnvCdList(svDstbEnvMIO);", "if(svDstbEnvMList", "==", "null)", "{", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value", "by", "cdDtlIO", "DTO.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter."]}
{"code_tokens": ["public", "CustInfoUseAgrmntSvcSrchOut", "clone(){", "try{", "CustInfoUseAgrmntSvcSrchOut", "object=", "(CustInfoUseAgrmntSvcSrchOut)super.clone();", "if", "(", "this.infoUseAgrmntTpCdList==", "null", ")", "object.infoUseAgrmntTpCdList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.security.service.dto.CustInfoUseAgrmntSvcInfoUseAgrmntTpOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.security.service.dto.CustInfoUseAgrmntSvcInfoUseAgrmntTpOut>(infoUseAgrmntTpCdList.size());", "for(", "bankware.corebanking.customer.security.service.dto.CustInfoUseAgrmntSvcInfoUseAgrmntTpOut", "item", ":", "infoUseAgrmntTpCdList", "){", "clonedList.add(", "(bankware.corebanking.customer.security.service.dto.CustInfoUseAgrmntSvcInfoUseAgrmntTpOut)item.clone());", "}", "object.infoUseAgrmntTpCdList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["private", "BfTestSvcOut", "getSaleStartDateTime(BfTestSvcIn", "in)", "throws", "BizApplicationException", "{", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "String", "output", "=", "bf.getSaleStartDateTime();", "BfTestSvcOut", "out", "=", "new", "BfTestSvcOut();", "if(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "sale", "start", "date", "time", "of", "benefit"]}
{"code_tokens": ["public", "void", "setSubInfoKnd(AssetCore", "asset,", "Integer", "assetThingSeqNbr)", "throws", "BizApplicationException{", "((AssetImpl)asset).setAssetThingSubInfoKnd(assetThingSeqNbr,", "AssetThingSubInfoKndEnum.AS_ASSET_THING_S);", "((AssetImpl)asset).getAssetBasicCache().getAssetTpCd();", "/*", "*", "ref.)", "\uc790\uc0b0\uc720\ud615\ubcc4\ub85c", "\ubcf4\uc870\uba85\uc138\ub97c", "\uad00\ub9ac\ud558\ub294", "\uacbd\uc6b0", "\uc544\ub798\uc640", "\uac19\uc774", "\ubd84\uae30\ud55c\ub2e4.", "switch", "(AssetTpEnum.getByValue(asset.getAssetBasicCache().getAssetTpCd()))", "{", "case", "REAL_ESTATE:", "((AssetImpl)", "asset).setAssetThingSubInfoKnd(assetThingSeqNbr,", "AssetThingSubInfoKndEnum.AS_ASSET_THING_RLSTT_S);", "break;", "case", "MOVABLES:", "((AssetImpl)", "asset).setAssetThingSubInfoKnd(assetThingSeqNbr,", "AssetThingSubInfoKndEnum.AS_ASSET_THING_MVBLS_S);", "....", "default:", "break;", "}", "*/", "}"], "docstring_tokens": ["Depending", "on", "the", "kind", "of", "asset,", "an", "appraisal", "thing", "subsidiary", "information", "kind", "can", "be", "set", "differently.", "This", "method", "is", "used", "when", "an", "asset", "object", "sets", "up", "an", "appraisal", "thing", "subsidiary", "information", "kind.", "This", "method", "is", "used", "within", "the", "core", "area."]}
{"code_tokens": ["public", "ArrCndSvcIn", "clone(){", "try{", "ArrCndSvcIn", "object=", "(ArrCndSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getInstCd()", "{", "return", "instCd;", "}"], "docstring_tokens": ["This", "method", "inquire", "institution", "code."]}
{"code_tokens": ["public", "DpstLnAccrualTrgtIO", "clone(){", "try{", "DpstLnAccrualTrgtIO", "object=", "(DpstLnAccrualTrgtIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isExtendAttribute()", "{", "return", "stdDtoClassAtrbt.isExtendAttribute();", "}"], "docstring_tokens": ["Check", "whether", "extend", "attribute"]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "//", "query", "data", "return", "!(_getDcDocMDso().select(null,", "String.valueOf(supplInfoVal.get(CCM03.CD)),", "null)", "==", "null);", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value", "by", "cdDtlIO", "DTO.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter."]}
{"code_tokens": ["public", "ArrIssmda", "openArrIssmda(ArrIssmdaCrtnIn", "arrIssmdaCrtnIn,", "String", "issueArrId)", "throws", "BizApplicationException", "{", "_checkInput(arrIssmdaCrtnIn,", "issueArrId);", "//", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138/\ubcf4\uc870\uba85\uc138", "\ubd84\ub958", "Map<String,", "String>", "subInfoCrtnMap", "=", "_getArrIssmdaSubInfoBiz().getMapSubInfoCrtn(arrIssmdaCrtnIn.getXtnInfoList());", "ArrIssmdaImpl", "arrIssmda", "=", "new", "ArrIssmdaImpl();", "arrIssmda.createArrIssmda(arrIssmdaCrtnIn,", "issueArrId);", "//", "\ubcf4\uc870\uba85\uc138", "\uc800\uc7a5", "_getArrIssmdaSubInfoBiz().saveMapSubInfo(subInfoCrtnMap,", "(ArrIssmdaImpl)", "arrIssmda,", "arrIssmdaCrtnIn.getStsChngTxDt(),", "arrIssmdaCrtnIn.getStsChngTxSeqNbr());", "super.saveUniqueBusinessBean(arrIssmda.getArrIssmdaTpCd(),", "arrIssmda.getArrIssmdaInhrncId(),", "arrIssmda);", "return", "arrIssmda;", "}"], "docstring_tokens": ["Create", "and", "return", "arrangement", "issue", "media", "object", "in", "\"Active\"", "status."]}
{"code_tokens": ["public", "List<XtnCdIO>", "getListCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "List<XtnCdIO>", "xtnCdIOs", "=", "new", "ArrayList<XtnCdIO>();", "String", "lngCd", "=", "supplInfoVal", "==", "null", "?", "null", ":", "String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue()));", "List<ArArrSrvcBlckngMIO>", "sqlOutList", "=", "_getArArrSrvcBlckngMDso().selectAllCd();", "if(", "sqlOutList", "==", "null", "||", "sqlOutList.isEmpty()", ")", "return", "xtnCdIOs;", "for(ArArrSrvcBlckngMIO", "out", ":", "sqlOutList)", "{", "XtnCdIO", "xtnCdIO", "=", "new", "XtnCdIO();", "xtnCdIO.setCd(out.getArrSrvcBlckngCd());", "if(StringCoreUtils.isEmpty(lngCd))", "{", "xtnCdIO.setCdNm(_getTrnsfrLngCore().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "ArrSrvcBlockingCoreEnum.cdNbr", "+", "out.getArrSrvcBlckngCd()));", "}", "else", "{", "xtnCdIO.setCdNm(_getTrnsfrLngCore().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "ArrSrvcBlockingCoreEnum.cdNbr", "+", "out.getArrSrvcBlckngCd(),", "lngCd));", "}", "xtnCdIOs.add(xtnCdIO);", "}", "return", "xtnCdIOs;", "}"], "docstring_tokens": ["This", "method", "returns", "the", "list", "of", "code", "corresponding", "to", "the", "search", "condition"]}
{"code_tokens": ["public", "List<CaArrIssmdaTmpltIO>", "getListArrIssmdaTmplt(String", "instCd,", "String", "arrIssmdaTpCd,", "String", "prflAtrbtNm,", "String", "prflAtrbtVal)", "throws", "BizApplicationException", "{", "List<CaArrIssmdaTmpltIO>", "arrIssmdaTempltList", "=", "new", "ArrayList<CaArrIssmdaTmpltIO>();", "List<CaArArrIssmdaTmpltMIO>", "arrIssmdaTmpltMIOList", "=", "new", "ArrayList<CaArArrIssmdaTmpltMIO>();", "//", "2020.11.12", "//", "\uacc4\uc57d\ubc1c\uae09\ub9e4\uccb4\ud15c\ud50c\ub9bf\uc740", "\uac1c\ubcc4\uae30\uad00\uc758", "\uc815\ubcf4\ub9cc\uc744", "\uc870\ud68c", "arrIssmdaTmpltMIOList", "=", "_getArArrIssmdaTmpltMDso().selectListByPrflAtrbt(instCd,", "arrIssmdaTpCd,", "prflAtrbtNm,", "prflAtrbtVal);", "for", "(CaArArrIssmdaTmpltMIO", "arArrIssmdaTmpltMIO", ":", "arrIssmdaTmpltMIOList)", "{", "CaArrIssmdaTmpltIO", "arrIssmdaTmplt", "=", "_setArrIssmdaTmpltIO(arArrIssmdaTmpltMIO);", "List<CaArrIssmdaPrflAtrbt>", "prflAtrbtList", "=", "_getCaArrIssmdaPrflMgmt().getCaArrIssmdaProfileList(instCd,", "arArrIssmdaTmpltMIO.getArrIssmdaTmpltId());", "arrIssmdaTmplt.setPrflAtrbtList(prflAtrbtList);", "arrIssmdaTempltList.add(arrIssmdaTmplt);", "}", "return", "arrIssmdaTempltList;", "}", "//", "\uc2e0\uaddc\uae30\uad00\uc0dd\uc131\uc6a9", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "Get", "the", "list", "of", "issued", "media", "template-passbook", "message", "relation.", "*", "</pre>", "*", "@seealso", "{@link", "#registerPsbkMsgRelation(CaArrPsbkMsgRgstrnIn)}", ":", "Register", "issued", "media", "template", "-", "passbook", "message", "relation.", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\uacc4\uc57d\ubc1c\uae09\ub9e4\uccb4", "\ud1b5\uc7a5\uba54\uc138\uc9c0", "\uad00\uacc4", "\uc815\ubcf4", "\ubaa9\ub85d\uc744", "\uc870\ud68c\ud55c\ub2e4.", "*", "</pre>", "*", "@seealso", "{@link", "#registerPsbkMsgRelation(CaArrPsbkMsgRgstrnIn)}"], "docstring_tokens": ["Get", "a", "list", "of", "arrangement", "issued", "media", "template", "in", "specific", "type", "by", "profile", "attribute."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AprslCore", "aprslCore,", "Integer", "aprslThingSeqNbr)", "throws", "BizApplicationException", "{", "_getAprslThingSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AprslImpl)", "aprslCore,", "aprslThingSeqNbr);", "}"], "docstring_tokens": ["Save", "an", "appraisal", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "List<CmpsCnd>", "getCmpsCnd()", "throws", "BizApplicationException", "{", "if", "(!isComplexCnd())", "{", "throw", "new", "BizApplicationException(\"AAPPDE0003\",", "null);", "//\ub2e8\uc21c\uc870\uac74", "simple", "condition", "}", "//", "Return", "output", "return", "getCmpsCnd(getCmpxStrctrId());", "}"], "docstring_tokens": ["This", "method", "inquire", "all", "composing", "condition", "list", "of", "complex", "condition.", "if", "simple", "condition,", "throws", "Exception.", "DataCache", "has", "been", "applied."]}
{"code_tokens": ["public", "int", "delete(String", "tblNm)", "{", "return", "_getCmTblM().delete(tblNm);", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "void", "saveAprslRqstXtnInfo(AprslRqstXtnInfoEnum", "aprslRqstXtnAInfoEnum,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "//", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\uc815\ubcf4\uad00\ub9ac\ubc29\ubc95", "\ud310\ub2e8", "//", "1.", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AS_APRSL_RQST_M.getValue(),", "aprslRqstXtnAInfoEnum.getValue()))", "{", "super.saveAprslRqstXtnInfoByEav(aprslRqstXtnAInfoEnum.getValue(),", "xtnAtrbtCntnt);", "}", "//", "2.", "\ubcf4\uc870\uba85\uc138", "else", "{", "_getAprslRqstSubInfoBiz().saveSubInfo(aprslRqstXtnAInfoEnum.getValue(),", "xtnAtrbtCntnt,", "this);", "}", "}"], "docstring_tokens": ["Save", "a", "specific", "extended", "information", "of", "the", "appraisal", "request."]}
{"code_tokens": ["public", "List<CaCrncyOut>", "getListCurrency(CaCrncyIn", "in)", "throws", "BizApplicationException", "{", "List<CaCrncyOut>", "out", "=", "new", "ArrayList<CaCrncyOut>();", "CaCmCrncyCdMIO", "inParm", "=", "new", "CaCmCrncyCdMIO();", "inParm.setInstCd(StringUtils.isEmpty(in.getInstCd())", "?", "_getCmnContext().getInstCode()", ":", "in.getInstCd());", "//\uae30\uad00\ucf54\ub4dc", "inParm.setCrncyCd(in.getCrncyCd());", "//\ud1b5\ud654\ucf54\ub4dc", "inParm.setAncmntCrncyDscd(in.getAncmntCrncyDscd());", "//\uace0\uc2dc\ud1b5\ud654\uad6c\ubd84\ucf54\ub4dc", "//", "Get", "the", "code", "detail", "information", "List<CaCmCrncyCdMIO>", "crncyCdOutList", "=", "_getCmCrncyCdDso().selectListByCondition(inParm);", "for", "(CaCmCrncyCdMIO", "cmCrncyCdIO", ":", "crncyCdOutList)", "{", "CaCrncyOut", "crnCyGetOut", "=", "_setCurrencyInformationToOutput(cmCrncyCdIO);", "out.add(crnCyGetOut);", "}", "return", "out;", "}"], "docstring_tokens": ["It", "inquiries", "currency", "information", "list."]}
{"code_tokens": ["public", "IValueObject", "getSubInfo(StStlmntSIO", "stlmntS)", "{", "logger.debug(\"##<ST-StlmntSubInfoBiz>", "getSubInfo\");", "//", "1.Interface", "IO", "\uc2e0\uaddc", "IValueObject", "subInfoIntrfcIO", "=", "new", "StlmntSubInfo();", "//", "2.DBIO", "VO", "\uc2e0\uaddc", "StStlmntSIO", "stStlmntSIO", "=", "new", "StStlmntSIO();", "//", "3.\uc815\uc0b0\ubcf4\uc870\uba85\uc138", "\uc870\ud68c", "stStlmntSIO", "=", "_getStlmntSDso().select(stlmntS);", "//", "4.DBIO", "VO", "\ub97c", "I/F", "VO\ub85c", "\ubcc0\ud658", "if(stStlmntSIO", "==", "null)", "{", "return", "null;", "}else", "{", "DtoUtils.setSubInfoIO(stStlmntSIO,", "subInfoIntrfcIO);", "}", "//", "5.I/F", "VO", "\ubc18\ud658", "return", "subInfoIntrfcIO;", "}"], "docstring_tokens": ["Get", "a", "extended", "information", "of", "Subsidiary", "Information(CTI)"]}
{"code_tokens": ["public", "void", "validate()", "throws", "BizApplicationException", "{", "switch", "(isValidCndValue(getSuperListCd()))", "{", "case", "NoError:", "return;", "default:", "throw", "new", "BizApplicationException(\"AAPARE0158\"", ",", "new", "Object[]{", "getCndCd(),", "getPdCnd().getCndNm(),", "getArrangementCore().getPd().getPdNm(),", "getListCdList(),", "getSuperListCd()});", "}", "}"], "docstring_tokens": ["Check", "if", "the", "issued", "media", "is", "available.", "Throw", "error", "if", "it", "is", "unavailable."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(SrvcStatusEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CndVal", "getCndVal()", "throws", "BizApplicationException", "{", "if", "(isComplexCnd())", "{", "//", "Error", "if", "complex", "condition", "throw", "new", "BizApplicationException(\"AAPPDE0004\",", "null);", "}", "CndVal", "cndVal", "=", "null;", "//", "Set", "input", "PdPdCndSimpleSearchIn", "inDao", "=", "new", "PdPdCndSimpleSearchIn();", "inDao.setTntInstId(getInstCd());", "inDao.setAplyStartDt(_getAplyStartDt());", "inDao.setCndCd(getCndCd());", "inDao.setCndGrpCd(getCndGrpCd());", "inDao.setCndGrpTmpltCd(getCndGrpTmpltCd());", "if", "(isListCnd())", "{", "cndVal", "=", "_getListCndValue(inDao);", "}", "else", "if", "(isRngCnd())", "{", "cndVal", "=", "_getRangeCndValue(inDao);", "}", "else", "if", "(isIntCnd())", "{", "cndVal", "=", "_getInterestCndValue(inDao);", "}", "else", "if", "(isFeeCnd())", "{", "cndVal", "=", "_getFeeCndValue(inDao);", "}", "//", "Return", "CndVal", "return", "cndVal;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "value."]}
{"code_tokens": ["public", "void", "saveAssetXtnInfo", "(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getAssetXtnInfoBiz().saveAssetXtnInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "this,", "false);", "}"], "docstring_tokens": ["Save", "a", "specific", "extended", "information", "of", "the", "asset."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "String", "txDt,", "Integer", "txSeqNbr,", "ScrtyIntImpl", "scrtyIntImpl)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsScrtyIntSIO", "subInfoCache", "=", "getSubInfoCache(scrtyIntImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsScrtyIntSIO();", "subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId());", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-1.", "insert", "_getAsScrtyIntSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-2.", "update", "_getAsScrtyIntSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "the", "security", "interest", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "List<ArrActvtyXtnInfo>", "getListXtnInfo()", "throws", "BizApplicationException", "{", "return", "_getArrActvtyBasic().getListXtnAtrbt(this);", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "all", "extended", "attributes", "of", "arrangement", "activity."]}
{"code_tokens": ["public", "Integer", "getTxSeqNbr(String", "arrId)", "throws", "BizApplicationException", "{", "/*", "*", "Get", "sequence", "number", "*/", "StTxSeqDIO", "in", "=", "new", "StTxSeqDIO();", "_getCmnContextCore().setHeaderColumn(in);", "in.setArrId(arrId);", "in.setTxDt(_getCmnContextCore().getTxDate());", "StTxSeqDIO", "out", "=", "null;", "/*", "*", "Activity", "#20144", "*", "selectForUpdate", "\uc2dc", "\ud574\ub2f9", "primary", "key\ub85c", "\ub370\uc774\ud130\uac00", "\uc870\ud68c", "\ub418\uc9c0", "\uc54a\uc744", "\uacbd\uc6b0", "GapLock\ubc1c\uc0dd(\uc804\uccb4", "row\uc5d0", "\ub300\ud55c", "lock\uc774", "\uac78\ub9bc),", "\ub530\ub77c\uc11c", "insert", "\uc2dc", "deadLock\ubc1c\uc0dd", "*", "deadLock\ubc29\uc9c0\ub97c", "\uc704\ud574", "\uc77c\ubc18", "select", "\ud6c4", "\ub370\uc774\ud130\uac00", "\uc788\uc744", "\uacbd\uc6b0\ub9cc", "selectForUpdate(\ud574\ub2f9", "row\uc5d0", "\ub300\ud574\uc11c\ub9cc", "lock)", "*/", "out", "=", "_getStTxSeqDDso().select(in);", "if(out", "==", "null)", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"##", "_setTxSeqNbrAndUpdateTable", "-->", "no", "data", "\");", "}", "in.setTxSeqNbr(CCM01.ONE);", "_getStTxSeqDDso().insert(in);", "}else", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"##", "_setTxSeqNbrAndUpdateTable", "-->", "exist", "data\");", "}", "//", "select", "with", "lock", "try", "{", "out", "=", "_getStTxSeqDDso().selectWithLock(in);", "}", "catch(DasCannotAcquireLockException", "e)", "{", "logger.info(\"ERROR", ":", "{}\",", "e);", "//", "Lock", "acquisition", "failed", "(arrangement", "id:", "{0},", "transaction", "date:", "{1})", "Please", "try", "the", "transaction", "again.", "throw", "new", "BizApplicationException(\"AAPSTE0179\",", "new", "Object[]", "{arrId,", "_getCmnContextCore().getTxDate()});", "}", "in.setTxSeqNbr(out.getTxSeqNbr()", "+", "1);", "in.setOracleRowId(out.getOracleRowId());", "_getStTxSeqDDso().update(in);", "}", "return", "in.getTxSeqNbr();", "}"], "docstring_tokens": ["This", "method", "inquires", "a", "transaction", "sequence", "number", "of", "the", "transaction."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(BalTpEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(AssetThingStsCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@assetThingStsCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "_doOpenLoanAction(arrSrvcTpCd,arrCndActionRequiredValue);", "//", "switch", "(arrSrvcTpCd)", "{", "//", "case", "\"Application\":", "//", "case", "\"OpenLoan\":", "//", "break;", "//", "default:", "//", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "//", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "//", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "DepoBnkArrMgmtSvcInqryIn", "clone(){", "try{", "DepoBnkArrMgmtSvcInqryIn", "object=", "(DepoBnkArrMgmtSvcInqryIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrStsChngHst>", "getArrStatusChangeHistory(ArrRealCoreImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//\uac70\ub798\uacc4\uc57d\ubd84\ub9ac\ucc98\ub9ac", "List<ArArrStsHIO>", "arArrStsHIOList;", "if(ArrKndCoreEnum.TEMPORARY.getValue().equals(arrRealImpl.getArrKindCd())){", "arArrStsHIOList", "=", "_getArArrTmpryStsHDso().selectEffectiveStatusChangeHistory(arrRealImpl.getInstCd(),arrRealImpl.getArrId());", "}else{", "arArrStsHIOList", "=", "_getArArrStsHDso().selectEffectiveStatusChangeHistory(arrRealImpl.getInstCd(),arrRealImpl.getArrId());", "}", "List<ArrStsChngHst>", "arrStsChngHstList", "=", "new", "ArrayList<ArrStsChngHst>();", "for", "(ArArrStsHIO", "arArrStsHIO", ":", "arArrStsHIOList)", "{", "ArrStsChngHst", "arrStsChngHst", "=", "new", "ArrStsChngHst();", "String", "arrStsCd", "=", "arArrStsHIO.getArrStsCd();", "arrStsChngHst.setArrStsCd(arrStsCd);", "arrStsChngHst.setArrStsNm(_getCdCore().getCode(ArrStsCoreEnum.cdNbr,arrStsCd));", "arrStsChngHst.setStsStartDt(arArrStsHIO.getStsStartDt());", "arrStsChngHst.setStsChngTxDt(arArrStsHIO.getStsChngTxDt());", "arrStsChngHst.setStsChngTxSeqNbr(arArrStsHIO.getStsChngTxSeqNbr());", "arrStsChngHst.setStsChngTxHms(arArrStsHIO.getStsChngTxHms());", "arrStsChngHstList.add(arrStsChngHst);", "}", "return", "arrStsChngHstList;", "}"], "docstring_tokens": ["Inquire", "arrangement", "status", "change", "history"]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(CustRprsnCore", "custRprsnCore)", "throws", "BizApplicationException", "{", "return", "_getCustRprsnSubInfoBiz().getMapSubInfo((CustRprsnImpl)", "custRprsnCore);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "detail", "information."]}
{"code_tokens": ["public", "boolean", "isActive()", "{", "return", "(getArrActvtyStsCd().equals(ArrActvtyStsEnum.ACTIVE.getValue()));", "}"], "docstring_tokens": ["Check", "whether", "if", "the", "status", "of", "arrangement", "is", "\"ACTIVE\"."]}
{"code_tokens": ["public", "Integer", "getListDataCntForConsistency()", "throws", "BizApplicationException", "{", "return", "_getDstbCnstncyAmAsmItmTblDDso().selectListCntForConsistency();", "}"], "docstring_tokens": ["Validate", "Query", "Row", "Count", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "java.lang.String", "getCndValDcsnLvlCd(){", "return", "cndValDcsnLvlCd;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "value", "decision", "level", "code."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(ChannelTestKbankEnum", "item", ":", "ChannelTestKbankEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}", "return", "false;", "//", "throw", "new", "BizApplicationException(\"APATE0028\",", "new", "Object[]", "{value,", "\"@cdNbr\"});", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AssetImpl", "asset,", "Integer", "assetThingSeqNbr){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "subInfo", "=", "getSubInfoCache(asset,", "assetThingSeqNbr);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(!_isSubInfoContainsField(asset.getAssetThingSubInfoKnd(assetThingSeqNbr),", "entry.getKey()))", "{", "continue;", "}", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null", ")", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "as", "a", "map."]}
{"code_tokens": ["public", "void", "delete()", "throws", "BizApplicationException", "{", "docBsicIO.setDocStsCd(CaDocStsEnum.DELETE.getValue());", "_getDocBsic().modifyStatus(docBsicIO);", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["public", "IValueObject", "getSubInfo(StStlmntCalcnSIO", "stlmntCalcnS)", "{", "logger.debug(\"##<ST-StlmntCalcnSubInfoBiz>", "getSubInfo\");", "//", "1.Interface", "IO", "\uc2e0\uaddc", "IValueObject", "subInfoIntrfcIO", "=", "new", "StlmntCalcnSubInfo();", "//", "2.DBIO", "VO", "\uc2e0\uaddc", "StStlmntCalcnSIO", "stlmntCalcnSIO", "=", "new", "StStlmntCalcnSIO();", "//", "3.\uc815\uc0b0\uacc4\uc0b0\uadfc\uae30\ubcf4\uc870\uba85\uc138", "\uc870\ud68c", "stlmntCalcnSIO", "=", "_getStlmntCalcnSDso().select(stlmntCalcnS);", "if(stlmntCalcnSIO", "==", "null)", "{", "return", "null;", "}", "//", "4.DBIO", "VO", "\ub97c", "I/F", "VO\ub85c", "\ubcc0\ud658", "DtoUtils.setSubInfoIO(stlmntCalcnSIO,", "subInfoIntrfcIO);", "//", "5.I/F", "VO", "\ubc18\ud658", "return", "subInfoIntrfcIO;", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "asset", "thing."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AssetTxCore", "assetTx)", "throws", "BizApplicationException", "{", "return", "_getAssetTxSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AssetTxImpl)assetTx);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "asset", "thing."]}
{"code_tokens": ["public", "List<AtCustLoinInfoDIO>", "selectList(String", "instCd,", "String", "infoStsCd,", "String", "custId,", "String", "txDt)", "{", "return", "_getAtCustLoinInfoD().selectList(instCd,", "infoStsCd,", "custId,", "txDt);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "CustCheckPwdOut", "login(String", "pswd)", "throws", "BizApplicationException,", "ParseException", "{", "//check", "required", "inputs", "if", "(StringUtils.isEmpty(pswd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@pswd\"});", "}", "return", "login(null,", "pswd,", "null);", "}"], "docstring_tokens": ["It", "executes", "login", "process", "of", "the", "customer", "by", "the", "input", "login", "ID,", "password", "and", "login", "type", "code.", "If", "login", "ID", "and", "login", "type", "code", "is", "not", "input,", "main", "login", "information", "will", "be", "applied.", "It", "considers", "password", "error", "count,", "error", "allowance", "count", "exceeded", "YN,", "lock", "time", "and", "password", "update", "cycle.", "It", "leaves", "login", "attempt", "history.", "Exception", "must", "be", "handled", "separately", "at", "the", "service", "level", "according", "to", "the", "login", "result."]}
{"code_tokens": ["public", "DpstBsicQrySvcOut", "clone(){", "try{", "DpstBsicQrySvcOut", "object=", "(DpstBsicQrySvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<String>", "getVariable(String", "inFormula)", "throws", "BizApplicationException", "{", "inFormula", "=", "inFormula.trim();", "if", "(StringCoreUtils.isEmpty(inFormula))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@formula\"});", "}", "List<String>", "variables", "=", "new", "ArrayList<String>();", "for", "(int", "i", "=", "0;", "i", "<", "inFormula.length();", "i++)", "{", "if", "(AmOperandPrefix.isValid(inFormula.charAt(i)))", "{", "char[]", "variable", "=", "new", "char[inFormula.length()];", "int", "j", "=", "0;", "variable[j]", "=", "inFormula.charAt(i);", "while", "(++i", "<", "inFormula.length())", "if", "(_isValid(inFormula.charAt(i)))", "variable[++j]", "=", "inFormula.charAt(i);", "else", "break;", "char[]", "variableCopy", "=", "new", "char[j", "+", "1];", "for", "(int", "k", "=", "0;", "k", "<=", "j;", "k++)", "variableCopy[k]", "=", "variable[k];", "variables.add(String.copyValueOf(variableCopy));", "}", "}", "return", "variables;", "}"], "docstring_tokens": ["It", "queries", "the", "list", "of", "variables", "in", "the", "formula."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "ArrTxCore", "arrTx)throws", "BizApplicationException{", "_getArrTxSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,(ArrTxImpl)arrTx);", "}"], "docstring_tokens": ["Save", "an", "appraisal", "preferential", "claim", "subsidiary", "information."]}
{"code_tokens": ["public", "List<CmNbrgRuleCmpsDIO>", "selectList(String", "instCd,", "String", "nbrgAtrbtNm)", "{", "String", "cacheKey", "=", "instCd", "+", "nbrgAtrbtNm;", "Object", "cmNbrgRuleCmpsCacheObj", "=", "_getCmDataCacheManager().getCacheData(DataCacheCoreConfig.COMMON_NUMBER_RULE_COMPOSITE_SELECT_LIST_CACHE,", "cacheKey);", "List<CmNbrgRuleCmpsDIO>", "returnObj", "=", "new", "ArrayList<CmNbrgRuleCmpsDIO>();", "if(cmNbrgRuleCmpsCacheObj", "==", "null)", "{", "returnObj", "=", "_getCmNbrgRuleCmpsD().selectList(instCd,", "nbrgAtrbtNm);", "if(returnObj", "==", "null", "||", "returnObj.isEmpty()){", "_getCmDataCacheManager().saveCache(DataCacheCoreConfig.COMMON_NUMBER_RULE_COMPOSITE_SELECT_LIST_CACHE,", "cacheKey,", "CCM02.NO_OPINION);", "}else{", "_getCmDataCacheManager().saveCache(DataCacheCoreConfig.COMMON_NUMBER_RULE_COMPOSITE_SELECT_LIST_CACHE,", "cacheKey,", "returnObj);", "}", "}else", "{", "if(cmNbrgRuleCmpsCacheObj.equals(CCM02.NO_OPINION)){", "return", "returnObj;", "}", "returnObj", "=", "(List<CmNbrgRuleCmpsDIO>)cmNbrgRuleCmpsCacheObj;", "}", "return", "returnObj;", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "CrspndntBnkMgmtSvcInqryIn", "clone(){", "try{", "CrspndntBnkMgmtSvcInqryIn", "object=", "(CrspndntBnkMgmtSvcInqryIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "activate(ArrStsChngIn", "arrStsChngIn)", "throws", "BizApplicationException", "{", "_setArrStatus(", "ArrStsEnum.ACTIVE,", "arrStsChngIn", ");", "_changeStatus(", "arrStsChngIn,", "null);", "}"], "docstring_tokens": ["It", "activates", "self", "authentication.", "It", "removes", "special", "characters(-.)", "if", "authentication", "type", "is", "mobile", "phone."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value){", "for", "(CalcnBaseAmtTpEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "List<ArrCnd>", "getArrCnd(Class<?>", "clazz)", "throws", "BizApplicationException{", "return", "_getArrXtnUtil().convertArrCndList(super.getArrCndCore(clazz));", "}"], "docstring_tokens": ["Inquire", "effective", "arrangement", "condition", "on", "specific", "base", "date", "by", "product", "condition", "code.", "Detail", "function", "description", "refers", "to", "{@link", "#getArrCnd(String)}"]}
{"code_tokens": ["public", "CaStdSrvcIoMgmtSvcGetServiceAllInfoOut", "clone(){", "try{", "CaStdSrvcIoMgmtSvcGetServiceAllInfoOut", "object=", "(CaStdSrvcIoMgmtSvcGetServiceAllInfoOut)super.clone();", "if", "(", "this.atrbtList==", "null", ")", "object.atrbtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut>(atrbtList.size());", "for(", "bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut", "item", ":", "atrbtList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut)item.clone());", "}", "object.atrbtList", "=", "clonedList;", "}", "if", "(", "this.prflList==", "null", ")", "object.prflList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcPrflDtlOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcPrflDtlOut>(prflList.size());", "for(", "bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcPrflDtlOut", "item", ":", "prflList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcPrflDtlOut)item.clone());", "}", "object.prflList", "=", "clonedList;", "}", "if", "(", "this.rstrctnList==", "null", ")", "object.rstrctnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcRstrctnDtlOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcRstrctnDtlOut>(rstrctnList.size());", "for(", "bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcRstrctnDtlOut", "item", ":", "rstrctnList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcRstrctnDtlOut)item.clone());", "}", "object.rstrctnList", "=", "clonedList;", "}", "if", "(", "this.outpList==", "null", ")", "object.outpList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut>(outpList.size());", "for(", "bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut", "item", ":", "outpList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOStdAtrbtRuleListOut)item.clone());", "}", "object.outpList", "=", "clonedList;", "}", "if", "(", "this.inpSrvcList==", "null", ")", "object.inpSrvcList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut>(inpSrvcList.size());", "for(", "bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut", "item", ":", "inpSrvcList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetStdSrvcIOSrvcListOut)item.clone());", "}", "object.inpSrvcList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo", ",", "StStlmntSIO", "stStlmntSIOIn)", "{", "logger.debug(\"##<ST-StlmntSubInfoBiz>", "saveSubInfo\");", "//", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{this.getClass().getSimpleName()});", "}", "logger.debug(\"##<ST-StlmntSubInfoBiz>", "saveSubInfo", "null", "check", "ok\");", "//", "1.create", "a", "new", "instance", "of", "DB", "IO", "IValueObject", "subInfoDBIO", "=", "new", "StStlmntSIO();", "//", "2.set", "primary", "key", "_setKey(subInfoDBIO,", "stStlmntSIOIn);", "//", "3.convert", "IvalueObject", "to", "DBIO", "VO", "DtoUtils.setSubInfoIO(subInfo,", "subInfoDBIO);", "//", "4.save", "subsidiary", "detail(\ubcf4\uc870\uba85\uc138)", "_insertSubInfo(subInfoDBIO);", "/*", "*", "settlement\ub294", "\uc18d\uc131\uc744", "\ub300\ubd80\ubd84", "insert", "\ud558\ub294", "\uacbd\uc6b0\uc774\ubbc0\ub85c", "\uc544\ub798", "\ub85c\uc9c1\uc744", "\ub9c9\uc74c", "*/", "//", "IValueObject", "sqlOut", "=", "getSubInfo(stlmnt);", "//", "//", "//", "\ud574\ub2f9", "\uac70\ub798\uad00\ub828", "\ubcf4\uc870\uba85\uc138", "\ub370\uc774\ud130\uac00", "\uc5c6\uc744", "\ub54c", "//", "if(sqlOut", "==", "null)", "{", "//", "_insertSubInfo(subInfoDBIO);", "//", "//", "\ub9f4\ubc84\ubcc0\uc218", "VO", "\uac12", "\uc124\uc815", "//", "Stlmnt.setStlmntSubInfo(subInfo);", "//", "//", "}else", "{", "//", "//", "\uae30", "\uc870\ud68c", "\ub41c", "\uac12\uc5d0", "update\ub418\uc5b4\ud560", "\ud544\ub4dc", "\uc124\uc815", "//", "DtoUtils.setSubInfoIO(subInfo,", "sqlOut);", "//", "//", "DBIO", "IO\uc5d0", "\ub0b4\uc6a9\ud544\ub4dc", "\ubc18\uc601", "//", "DtoUtils.setSubInfoIO(sqlOut,", "subInfoDBIO);", "//", "//", "_updateSubInfo(subInfoDBIO);", "//", "//", "\ub9f4\ubc84\ubcc0\uc218", "VO", "\uac12", "\uc124\uc815(sqlOut\uc740", "\uae30\uc874", "+", "\uc0c8\ub85c", "update\ub418\uc5b4\uc57c", "\ud560", "\ud544\ub4dc", "\ubaa8\ub450", "\ubc18\uc601\ub41c", "\ucd5c\uc2e0", "\ubcf4\uc870\uba85\uc138IO)", "//", "stlmnt.setStlmntSubInfo(sqlOut);", "//", "}", "}", "//", "//", "/**", "//", "*", "set", "primary", "key", "of", "subsidiary", "table", "//", "*", "@param", "stlmntSIO", "//", "*", "@param", "Stlmnt", "//", "*/", "//", "private", "IValueObject", "_setKey(IValueObject", "stlmntSIO,", "String", "arrId,", "String", "txDt,", "int", "txSeqNbr,", "String", "amtTpCd,", "String", "prchsRtrnYn)", "{", "//", "stlmntSIO.set(\"instCd\",", "_getCmnContext().getInstCode());", "//", "stlmntSIO.set(\"arrId\",", "arrId);", "//", "stlmntSIO.set(\"txDt\",", "txDt);", "//", "stlmntSIO.set(\"txSeqNbr\",", "txSeqNbr);", "//", "stlmntSIO.set(\"amtTpCd\",", "amtTpCd);", "//", "stlmntSIO.set(\"prchsRtrnYn\",", "prchsRtrnYn);", "//", "//", "return", "stlmntSIO;", "//", "//", "}"], "docstring_tokens": ["Save", "an", "appraisal", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "List<PdAdtlInfoOut>", "getAdtnlInfo(PdAdtlInfoIn", "in)", "throws", "BizApplicationException", "{", "List<PdAdtlInfoOut>", "out", "=", "new", "ArrayList<>();", "//", "\uc0c1\ud488\ucf54\ub4dc,", "\uc0c1\ud488\ubd80\uac00\uc815\ubcf4\uc720\ud615,", "\uc801\uc77c\uc77c\uc790\ub97c", "\uc785\ub825\ud558\uc5ec", "\ud574\ub2f9", "\uc0c1\ud488\uc5d0", "\uad00\ub828\ub41c", "\uc0c1\ud488\ubd80\uac00\uc815\ubcf4\ub97c", "\uc870\ud68c\ud568", "//", "Enter", "the", "product", "code,", "product", "additional", "information", "type", "code,", "//", "apply", "date", "and", "inquiry", "product", "additional", "information", "related", "to", "the", "//", "product", "PdAdditionalInfoListIn", "additionalIn", "=", "new", "PdAdditionalInfoListIn();", "additionalIn.setInstitutionId(pdPdM.getInstCd());", "additionalIn.setPdCd(pdPdM.getPdCd());", "additionalIn.setAdditionalInfoCd(in.getAdtnlInfoCd());", "additionalIn.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(),", "_getAplyTmString(in.getAplyTm())));", "List<PdAdditionalInfoOut>", "additionalOut", "=", "_getPdCore().getListAdditionalInfo(additionalIn);", "for(PdAdditionalInfoOut", "item", ":", "CollectionUtils.emptyIfNull(additionalOut))", "{", "PdAdtlInfoOut", "temp", "=", "new", "PdAdtlInfoOut();", "temp.setAdtnlInfoCd(item.getAdditionalInfoCd());", "temp.setPdRelStsCd(item.getPdRelationStatusCd());", "temp.setAdtnlInfoCntnt(item.getAdditionalInfoContent());", "temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(item.getApplyStartDate()));", "temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(item.getApplyEndDate()));", "temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(item.getApplyStartDate()));", "temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(item.getApplyEndDate()));", "out.add(temp);", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "additional", "information", "related", "to", "benefit.", "if", "there", "is", "no", "additional", "information", "code,", "all", "additional", "information", "inquire"]}
{"code_tokens": ["public", "String", "getMthrArrId()", "{", "return", "arrTxBsicIO.getMthrArrId();", "}"], "docstring_tokens": ["This", "method", "inquires", "a", "mother", "arrangement", "identification", "of", "the", "transaction."]}
{"code_tokens": ["public", "String", "getClosingAfterYn()", "throws", "BizApplicationException", "{", "return", "_getContextHeader().getClsgAfYn();", "}"], "docstring_tokens": ["Closing", "after", "Yn", "inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "AplctnRgstSvcSubInfoIn", "clone(){", "try{", "AplctnRgstSvcSubInfoIn", "object=", "(AplctnRgstSvcSubInfoIn)super.clone();", "if", "(", "this.cndCdList==", "null", ")", "object.cndCdList", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdCndIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdCndIn>(cndCdList.size());", "for(", "bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdCndIn", "item", ":", "cndCdList", "){", "clonedList.add(", "(bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdCndIn)item.clone());", "}", "object.cndCdList", "=", "clonedList;", "}", "if", "(", "this.xtnList==", "null", ")", "object.xtnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdXtnIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdXtnIn>(xtnList.size());", "for(", "bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdXtnIn", "item", ":", "xtnList", "){", "clonedList.add(", "(bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdXtnIn)item.clone());", "}", "object.xtnList", "=", "clonedList;", "}", "if", "(", "this.relList==", "null", ")", "object.relList", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdRelIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdRelIn>(relList.size());", "for(", "bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdRelIn", "item", ":", "relList", "){", "clonedList.add(", "(bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcPdRelIn)item.clone());", "}", "object.relList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "FrgnCrncyChkClctnSvcIn", "clone(){", "try{", "FrgnCrncyChkClctnSvcIn", "object=", "(FrgnCrncyChkClctnSvcIn)super.clone();", "if", "(", "this.chkInfoList==", "null", ")", "object.chkInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn>(chkInfoList.size());", "for(", "bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn", "item", ":", "chkInfoList", "){", "clonedList.add(", "(bankware.corebanking.foreignexchange.currencyexchange.service.dto.FrgnCrncyChkInfoListIn)item.clone());", "}", "object.chkInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"OpenDeposit\":", "_doOpenAction(arrSrvcTpCd,arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "BigDecimal", "getCndRngVal(ArrangementCore", "arr,", "String", "cndCd)", "throws", "BizApplicationException", "{", "ArrCndRngCore", "arrCnd", "=", "(ArrCndRngCore)", "arr.getArrCndCore(cndCd);", "if(arrCnd", "==", "null", "||", "arrCnd.getRngVal()", "==", "null)", "throw", "new", "BizApplicationException(\"AAPARE0090\",", "new", "Object[]", "{arr.getPdCd(),", "cndCd});", "return", "arrCnd.getRngVal();", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "basic", "range", "condition", "value", "of", "arrangement", "by", "specific", "condition", "code."]}
{"code_tokens": ["public", "CustChngSvcGetIndvInfoOut", "clone(){", "try{", "CustChngSvcGetIndvInfoOut", "object=", "(CustChngSvcGetIndvInfoOut)super.clone();", "if", "(", "this.actorCntctPntList==", "null", ")", "object.actorCntctPntList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustChngSvcCntctPntListIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustChngSvcCntctPntListIO>(actorCntctPntList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustChngSvcCntctPntListIO", "item", ":", "actorCntctPntList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustChngSvcCntctPntListIO)item.clone());", "}", "object.actorCntctPntList", "=", "clonedList;", "}", "if", "(", "this.actorXtnInfList==", "null", ")", "object.actorXtnInfList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustChngSvcXtnInfoListIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustChngSvcXtnInfoListIO>(actorXtnInfList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustChngSvcXtnInfoListIO", "item", ":", "actorXtnInfList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustChngSvcXtnInfoListIO)item.clone());", "}", "object.actorXtnInfList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<XtnCdIO>", "getListCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "List<XtnCdIO>", "xtnCdIOs", "=", "new", "ArrayList<XtnCdIO>();", "List<CmBnkMIO>", "cmBnkMList", "=", "new", "ArrayList<CmBnkMIO>();", "String", "natCd", "=", "null;", "String", "lngCd", "=", "supplInfoVal", "==", "null", "?", "null", ":", "String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue()));", "String", "instParmNatCd", "=", "_getInstParmProvider().getInstParm(InstParamEnum.NATION_CODE.getValue());", "//", "nation", "code", "if", "(!StringCoreUtils.isEmpty(instParmNatCd))", "{", "natCd", "=", "instParmNatCd;", "}", "//", "natCd", "cmBnkMList", "=", "_getCmBnkMDso().selectListByNatCd(natCd);", "if(", "cmBnkMList", "==", "null", "||", "cmBnkMList.isEmpty()", ")", "return", "xtnCdIOs;", "for(CmBnkMIO", "out", ":", "cmBnkMList)", "{", "XtnCdIO", "xtnCdIO", "=", "new", "XtnCdIO();", "xtnCdIO.setCd(out.getBnkCd());", "if(StringCoreUtils.isEmpty(lngCd))", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CdNbrCoreEnum.BANK_CODE.getValue().concat(natCd).concat(out.getBnkCd())));", "}", "else", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CdNbrCoreEnum.BANK_CODE.getValue().concat(natCd).concat(out.getBnkCd()),", "lngCd));", "}", "xtnCdIOs.add(xtnCdIO);", "}", "return", "xtnCdIOs;", "}"], "docstring_tokens": ["Make", "the", "combo-box", "of", "Code", "that", "meet", "the", "search", "condition.", "Combo-box", "is", "consisted", "of", "CaCmnCdCheckOut.", "(cdNbr,", "cd,", "cdNm,", "delYn,", "cdAbrvtnNm)"]}
{"code_tokens": ["public", "CaArrCndCntrlSrvcInqryIn", "clone(){", "try{", "CaArrCndCntrlSrvcInqryIn", "object=", "(CaArrCndCntrlSrvcInqryIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ScrtyIntListInqrySvcGetScrtyIntListIn", "clone(){", "try{", "ScrtyIntListInqrySvcGetScrtyIntListIn", "object=", "(ScrtyIntListInqrySvcGetScrtyIntListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DummyIO", "registerStandardAbbreviation(CaStdAbrvtnMgmtSvcRegisterStdAbrvtnIn", "in)", "throws", "BizApplicationException", "{", "DummyIO", "out", "=", "new", "DummyIO();", "//", "Call", "standard", "abbreviation", "BO", "CaStdAbrvtnItmIO", "inBo", "=", "new", "CaStdAbrvtnItmIO();", "inBo.setStdEngAbrvtnNm(in.getStdEngAbrvtnNm());", "inBo.setVrtnEngAbrvtnNm(in.getVrtnEngAbrvtnNm());", "inBo.setEngWrdNm(in.getEngWrdNm());", "inBo.setUseLngWrdNm2(in.getUseLngWrdNm2());", "inBo.setUseLngWrdNm3(in.getUseLngWrdNm3());", "_getStdAbrvtn().registerStandardAbbreviation(inBo);", "return", "out;", "}"], "docstring_tokens": ["Register", "standard", "abbreviation(word)."]}
{"code_tokens": ["public", "Integer", "getListArrBasedOnStsHistoryCount(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistoryCount(deptId,", "null,", "null,", "null,", "null,", "arrDeptRel,", "curArrSts,", "arrSts,", "inqryStartDt,", "inqryEndDt,", "false);", "}"], "docstring_tokens": ["Inquire", "total", "count", "of", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "Inquire", "modification", "arrangement", "of", "inquired", "arrangement", "if", "hasVrtnArr", "is", "true."]}
{"code_tokens": ["public", "CaNbrgRuleMgmtSvcGetNbrgRuleDtlOut", "clone(){", "try{", "CaNbrgRuleMgmtSvcGetNbrgRuleDtlOut", "object=", "(CaNbrgRuleMgmtSvcGetNbrgRuleDtlOut)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getMndtryNegCndYn()", "{", "if", "(pdPdCndM", "==", "null)", "{", "return", "null;", "}", "return", "pdPdCndM.getMndtryNegCndYn();", "}"], "docstring_tokens": ["This", "method", "inquire", "mandatory", "negotiation", "condition", "yes", "or", "no."]}
{"code_tokens": ["public", "DtiDsrRgstSvcCmptnIn", "clone(){", "try{", "DtiDsrRgstSvcCmptnIn", "object=", "(DtiDsrRgstSvcCmptnIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AprslRqstCore", "aprslRqstCore)", "throws", "BizApplicationException", "{", "return", "_getAprslRqstSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AprslRqstImpl)aprslRqstCore);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "security", "interest."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "{", "for", "(MinusLnTxDscdEnum", "item", ":", "MinusLnTxDscdEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblListOut", "clone(){", "try{", "CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblListOut", "object=", "(CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblListOut)super.clone();", "if", "(", "this.atrbtList==", "null", ")", "object.atrbtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblOut>(atrbtList.size());", "for(", "bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblOut", "item", ":", "atrbtList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.servicemanagement.service.dto.CaStdSrvcIoMgmtSvcGetSrvcIOFromPhsclTblOut)item.clone());", "}", "object.atrbtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getNumbering(String", "instCd,String", "nbrgAtrbtNm,Map<String,", "Object>", "inpParmMap)", "throws", "BizApplicationException", "{", "return", "getNumbering(instCd,", "nbrgAtrbtNm,", "inpParmMap,", "false);", "}"], "docstring_tokens": ["It", "calculates", "next", "number.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'instCd'", "value", "is", "replaced", "by", "instCd", "in", "Common", "Context.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'isReUseSameTxNbrg'", "value", "is", "replaced", "by", "false.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'inpParmMap'", "value", "is", "replaced", "by", "null."]}
{"code_tokens": ["protected", "AprslRqstCoreImpl", "getUniqueBusinessBean(String", "instCd,", "String", "aprslRqstId)", "throws", "BizApplicationException", "{", "return", "(AprslRqstCoreImpl)", "ApplicationContextCoreUtils.getUniqueBusinessBean(instCd", "+", "aprslRqstId,", "getAprslRqstImplClass());", "}"], "docstring_tokens": ["get", "unique", "business", "bean", "in", "one", "transaction"]}
{"code_tokens": ["public", "Object", "getAttribute(String", "atrbtNm)", "throws", "BizApplicationException", "{", "if(isContainAttribute(atrbtNm))", "{", "HashMap<String,Object>", "mainMap", "=", "_getDataContainerItem();", "return", "(mainMap", "==", "null)", "?", "null", ":", "mainMap.get(atrbtNm);", "}else", "{", "return", "null;", "}", "}"], "docstring_tokens": ["Get", "the", "DTO", "attribute"]}
{"code_tokens": ["public", "void", "saveSubInfo(ActorCore", "actorCore,", "String", "dueDlgncDscd,", "int", "dueDlgncSeqNbr,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "_getActorDueDlgncSubInfoBiz().saveSubInfo((ActorImpl)", "actorCore,", "dueDlgncDscd,", "dueDlgncSeqNbr,", "xtnAtrbtNm,", "xtnAtrbtCntnt);", "}"], "docstring_tokens": ["Save", "an", "insurance", "subsidiary", "information."]}
{"code_tokens": ["public", "PdCardNbrMIO", "selectCardNbrInfo(String", "tntInstId,", "String", "cardNbr)", "throws", "BizApplicationException", "{", "//", "\uc870\ud68c", "PdCardNbrMIO", "out", "=", "_getPdServiceDso().selectCardNbrInfo(tntInstId,", "cardNbr);", "//return", "return", "out;", "}"], "docstring_tokens": ["Methods", "to", "query", "card", "number", "information"]}
{"code_tokens": ["public", "String", "getTxAblStartHms()", "{", "return", "txAblStartHms;", "}"], "docstring_tokens": ["Inquire", "Transaction", "Able", "Start", "HMS."]}
{"code_tokens": ["public", "List<CmpsCnd>", "getCmpsCnd(String", "cmpxStrctrId)", "throws", "BizApplicationException", "{", "/**", "*", "DataCache", "START", "*/", "String", "uKey", "=", "PdUtil.concatenateKeys(Arrays.asList(getInstCd(),", "cmpxStrctrId));", "//", "Get", "cache", "data", "List<CmpsCnd>", "out", "=", "_getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE,", "uKey);", "if", "(CollectionCoreUtils.isEmpty(out))", "{", "String", "aplyDate", "=", "(StringCoreUtils.isEmpty(aplyDt))", "?", "_getCmnContext().getTxDate()", ":", "aplyDt;", "String", "aplyTime", "=", "(StringCoreUtils.isEmpty(aplyTm))", "?", "CPD01.START_TM", ":", "aplyTm;", "ComposingCndListIn", "composingCndListIn", "=", "new", "ComposingCndListIn();", "composingCndListIn.setInstitutionId(getInstCd());", "composingCndListIn.setPdCd(pd", "!=", "null", "?", "pd.getPdCd()", ":", "null);", "composingCndListIn.setComplexStructureId(StringUtils.isNotBlank(cmpxStrctrId)", "?", "cmpxStrctrId:", "getCmpxStrctrId());", "composingCndListIn.setCndCd(cndCd);", "composingCndListIn.setBaseDate(PdUtil.parseStringToDate(aplyDate", "+", "aplyTime));", "List<ComposingCnd>", "composingCndList", "=", "_getPdCndCore().getListComposingCnd(composingCndListIn);", "if", "(CollectionUtils.isNotEmpty(composingCndList))", "{", "out", "=", "new", "ArrayList<>();", "for", "(ComposingCnd", "cmposingCnd", ":", "composingCndList)", "{", "CmpsCnd", "cmpsCnd", "=", "new", "CmpsCnd();", "cmpsCnd.setCmpsCndCd(cmposingCnd.getComposingCndCd());", "cmpsCnd.setCndTpCd(cmposingCnd.getCndTypeCd());", "cmpsCnd.setMsurUnitCd(cmposingCnd.getMeasureUnitCd());", "cmpsCnd.setBlwUndrDscd(cmposingCnd.getBelowUnderDscd());", "cmpsCnd.setCrncyCd(cmposingCnd.getCurrencyCd());", "cmpsCnd.setCmpxCndCmpsSeq(cmposingCnd.getInquirySeq());", "cmpsCnd.setInqrySeq(cmposingCnd.getInquirySeq());", "cmpsCnd.setIsCalculationBaseCnd(cmposingCnd.getIsCalculationBaseCnd());", "out.add(cmpsCnd);", "}", "}", "//", "Dummy", "\uc800\uc7a5", "if", "(CollectionCoreUtils.isEmpty(out))", "{", "CmpsCnd", "dummy", "=", "new", "CmpsCnd();", "dummy.setCmpsCndCd(CPD01.DUMMY);", "List<CmpsCnd>", "dummyList", "=", "new", "ArrayList<>();", "dummyList.add(dummy);", "_getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE,", "uKey,", "dummyList);", "}", "else", "{", "_getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_CX_CMPS_D_LIST_CACHE,", "uKey,", "out);", "}", "}", "//", "Cache\uc5d0", "\uc800\uc7a5\ub418\uc5b4", "\uc788\ub294\uac8c", "Dummy\uc774\uba74", "null\ub85c", "\ubcc0\ud658", "if", "(CPD01.DUMMY.equals(out.get(0).getCmpsCndCd()))", "{", "out", "=", "Collections.emptyList();", "}", "//", "Return", "output", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "all", "composing", "condition", "list", "of", "complex", "condition.", "if", "simple", "condition,", "throws", "Exception.", "DataCache", "has", "been", "applied."]}
{"code_tokens": ["public", "ExRtMarginMgmtSvcIO", "clone(){", "try{", "ExRtMarginMgmtSvcIO", "object=", "(ExRtMarginMgmtSvcIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CndVal", "getComplexCndValue(int", "tierNbr)", "throws", "BizApplicationException", "{", "//", "If", "isCmpxCnd", "is", "false", "if", "(!isComplexCnd())", "{", "//", "Simple", "condition", "throw", "new", "BizApplicationException(\"AAPPDE0003\",", "null);", "}", "//", "Set", "Input", "PdPdCndUnitComplexSearchIn", "inDao", "=", "_setPdPdCndUnitComplexSearchIn(tierNbr);", "if", "(isListCnd())", "{", "return", "_getComplexListCndValue(inDao);", "}", "else", "if", "(isRngCnd())", "{", "return", "_getComplexRangeCndValue(inDao);", "}", "/*else", "if", "(isIntCnd())", "{", "return", "_getComplexInterestCndValue(inDao);", "}", "else", "if", "(isFeeCnd())", "{", "return", "_getComplexFeeCndValue(inDao);", "}*/", "else", "{", "return", "null;", "}", "}"], "docstring_tokens": ["This", "method", "inquire", "complex", "condition", "value", "of", "the", "composing", "value", "input", "value."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(", "value))", "{", "for", "(AssetStsChngRsnEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@assetStsCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "ArrBsicQrySvcGetAcctListByPdOut", "clone(){", "try{", "ArrBsicQrySvcGetAcctListByPdOut", "object=", "(ArrBsicQrySvcGetAcctListByPdOut)super.clone();", "if", "(", "this.acctList==", "null", ")", "object.acctList", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetAcctListByPd>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetAcctListByPd>(acctList.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetAcctListByPd", "item", ":", "acctList", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.ArrBsicQrySvcGetAcctListByPd)item.clone());", "}", "object.acctList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "custId,", "ArrCustRelEnum", "arrCustRelEnum,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId,", "arrCustRelEnum,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "null,", "curArrSts,", "arrSts,", "inqryStartDt,", "inqryEndDt);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "of", "specific", "product", "hierarchy", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "other", "specific", "status.", "(Paging)", "Inquire", "modification", "arrangement", "of", "inquired", "arrangement", "if", "hasVrtnArr", "is", "true."]}
{"code_tokens": ["public", "PdServiceApplyBenefitForCardSvcIn", "clone(){", "try{", "PdServiceApplyBenefitForCardSvcIn", "object=", "(PdServiceApplyBenefitForCardSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "java.util.List<java.lang.String>", "getCndCd(){", "return", "cndCd;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "code."]}
{"code_tokens": ["public", "List<?", "extends", "IOmmObject>", "getListDataForConsistency(Integer", "pgNbr,", "Integer", "pgCnt)", "throws", "BizApplicationException", "{", "int", "pageOffSet", "=", "PaginationCoreUtils.getPgOffset(pgNbr,", "pgCnt);", "return", "_getDstbCnstncyArArrIssmdaTmpltMDso().selectListForConsistency(pageOffSet,", "pgCnt);", "}"], "docstring_tokens": ["Validate", "Query", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "void", "setSubInfoKnd(ActorSubInfoKndEnum", "subInfoKnd)", "throws", "BizApplicationException", "{", "this.actorSubInfoKnd", "=", "subInfoKnd;", "}"], "docstring_tokens": ["There", "are", "several", "kinds", "of", "subsidiary", "information.", "This", "method", "provides", "to", "set", "the", "kind", "of", "subsidiary", "information", "to", "the", "transaction", "object."]}
{"code_tokens": ["public", "List<StTxCmprhnsvInfoIO>", "getListArrTxCmprhnsvInfoByAcctgItmCd(String", "deptId,", "String", "baseDt,", "String", "acctgItmCd,", "String", "crncyCd)", "throws", "BizApplicationException", "{", "//", "\ubd80\uc11c\ubcc4", "\uac70\ub798", "sum", "\uc870\ud68c", "if(StringUtils.isEmpty(deptId))", "{", "return", "_getStTxMByDeptDso().selectListSpecificAcctgItmRltdArrTxInfo(_getCmnContext().getInstCode(),", "baseDt,", "acctgItmCd,", "crncyCd);", "}else", "{", "//", "\ud2b9\uc815", "\ubd80\uc11c", "\uad00\ub828", "\uac70\ub798\ub0b4\uc5ed", "\uc870\ud68c", "return", "_getStTxMByDeptDso().selectListSpecificDeptAcctgItmRltdArrTxInfo(_getCmnContext().getInstCode(),", "deptId,", "baseDt,", "acctgItmCd,", "crncyCd);", "}", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "transaction", "and", "entry", "information", "by", "specific", "accounting", "item", "code."]}
{"code_tokens": ["public", "RepeatStatus", "execute(StepContribution", "stepContribution,", "ChunkContext", "chunkContext)", "throws", "Exception", "{", "if(", "logger.isDebugEnabled()", ")", "{", "logger.debug(\"#####################################################################################\");", "logger.debug(\"##", "DpstDailyAcrlPrprtnXtrct.execute\");", "logger.debug(\"##", "JobId", "=", "{}\",", "BatchApplicationContext.getJobId());", "logger.debug(\"##", "JobInstanceId", "=", "{}\",", "BatchApplicationContext.getJobInstanceId());", "logger.debug(\"##", "StepName", "=", "{}\",", "BatchApplicationContext.getCurrentStepName());", "logger.debug(\"##", "JobParameters", "=", "{}\",", "BatchApplicationContext.getJobParameters());", "logger.debug(\"#####################################################################################\");", "}", "_initialize();", "String", "instCd", "=", "BatchApplicationContext.getJobParameter(DailyAcrlConstant.P_INST_CD);", "String", "baseDt", "=", "BatchApplicationContext.getJobParameter(DailyAcrlConstant.P_BASE_DT);", "String", "dailyAcrlDt", "=", "DateUtils.getDateDayBefore(1,", "baseDt);", "if(", "logger.isDebugEnabled()", ")", "{", "logger.debug(\"##", "baseDt", "=", "{}\",", "baseDt);", "logger.debug(\"##", "DailyAcrlDt", "=", "{}\",", "dailyAcrlDt);", "}", "//", "\uc77c\uc77c\uacb0\uc0b0\uc801\uc6a9\uc5ec\ubd80", "\uccb4\ud06c", "_checkDailyAccrualBasis();", "//", "\uae30\uad00\ud30c\ub77c\ubbf8\ud130", "-", "\uc694\uad6c\ubd88\uc77c\ub2e8\ub9ac\uc774\uc790\uc801\uc6a9\uc5ec\ubd80\uc5d0", "\ub530\ub77c", "\uc0c1\ud488\uc720\ud615", "-", "\uc694\uad6c\ubd88", "\uc81c\uc678/\ud3ec\ud568", "\ud310\ub2e8", "String", "dpstDailySimpleIntRtApplyYn", "=", "instParmProvider.getInstParm(InstParamEnum.DEPOSIT_DAILY_SIMPLE_INTEREST_RATE_APPLY_YN.getValue());", "DpstArrInfoIO", "in", "=", "new", "DpstArrInfoIO();", "in.setInstCd(instCd);", "in.setBaseDt(baseDt);", "in.setDailyAcrlDt(dailyAcrlDt);", "in.setBizDscd(DailyAcrlConstant.V_BIZ_DSCD);", "//", "\uc5c5\ubb34\uad6c\ubd84\ucf54\ub4dc", "=", "01-\uc218\uc2e0", "//", "\uc77c\ub2e8\ub9ac\uc774\uc790\uacc4\uc0b0\uc744", "\uc801\uc6a9\ud558\ub294", "\uacbd\uc6b0\ub9cc", "\uc694\uad6c\ubd88\uc0c1\ud488", "\uc720\ud615", "\uc81c\uc678", "if(", "CCM01.YES.equals(dpstDailySimpleIntRtApplyYn)", ")", "{", "in.setPdTpCd(DailyAcrlConstant.V_DPST_PD_TP_CD);", "//", "\uc0c1\ud488\uc720\ud615\ucf54\ub4dc", "=", "10-\uc694\uad6c\ubd88", "(\ucd94\ucd9c\uc5d0\uc11c", "\uc81c\uc678)", "}", "//", "2020-07-06", "\uae40\uc131\ud658", "\ud14c\uc2a4\ud2b8", "\uc2e4\ud589\uc744", "\uc704\ud574", "\uacc4\uc57dID\ub97c", "\ud30c\ub77c\ubbf8\ud130\ub85c", "\uc804\ub2ec\ud558\ub294", "\uacbd\uc6b0", "\ud574\ub2f9", "\uacc4\uc57dID", "\uc815\ubcf4\ub9cc", "\ucd94\ucd9c", "if(", "!StringUtils.isEmpty(BatchApplicationContext.getJobParameter(DailyAcrlConstant.P_ARR_ID))", ")", "{", "in.setArrId(BatchApplicationContext.getJobParameter(DailyAcrlConstant.P_ARR_ID));", "}", "//", "\uc218\uc2e0\uc0c1\ud488-\uc77c\uc77c\uacb0\uc0b0", "\ucd94\ucd9c", "\ub300\uc0c1", "\ucd1d", "\uac74\uc218", "\uc870\ud68c", "int", "totCnt", "=", "dailyAcrlPrcsBat.selectCountDpstDailyAcrlTrgt(in);", "if(", "logger.isDebugEnabled()", ")", "{", "logger.debug(\"##", "DpstDailyAcrl", "extract", "count", "=", "{}\",", "totCnt);", "}", "//", "\ub2e4\uc74c", "Step", "\uc804\ub2ec", "//", "\uc2e4\ud589\uc77c\uc790", "chunkContext.getStepContext().getStepExecution().getJobExecution().getExecutionContext().put(DailyAcrlConstant.P_BASE_DT,", "baseDt);", "//", "\uc77c\uc77c\uacb0\uc0b0\uc77c\uc790", "chunkContext.getStepContext().getStepExecution().getJobExecution().getExecutionContext().put(DailyAcrlConstant.P_DAILY_ACCRUAL_DT,", "dailyAcrlDt);", "//", "\ucd1d\uac74\uc218", "chunkContext.getStepContext().getStepExecution().getJobExecution().getExecutionContext().put(DailyAcrlConstant.P_TOTAL_COUNT,", "totCnt);", "return", "RepeatStatus.FINISHED;", "}"], "docstring_tokens": ["Data", "is", "generated", "for", "new", "institutions", "in", "each", "area."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(DeptCore", "deptCore)", "throws", "BizApplicationException", "{", "return", "_getDeptSubInfoBiz().getMapSubInfo((DeptImpl)deptCore);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "thing", "as", "a", "map."]}
{"code_tokens": ["public", "void", "saveListAssetThingXtnInfo(Integer", "assetThingSeqNbr,", "List<AssetThingXtnInfoCrtnIn>", "xtnInfoList,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException{", "//EAV", ",", "CTI", "\ubd84\ub9ac", "Map<String,", "String>", "subInfoMap", "=", "_getAssetThingSubInfoBiz().getMapSubInfoCrtn(xtnInfoList);", "super.saveListAssetThingXtnInfoByEav(assetThingSeqNbr,", "xtnInfoList,", "txDt,", "txSeqNbr);", "_getAssetThingSubInfoBiz().saveMapSubInfo(subInfoMap,", "txDt,", "txSeqNbr,", "this,", "assetThingSeqNbr);", "}"], "docstring_tokens": ["Save", "extended", "information", "of", "the", "asset", "thing."]}
{"code_tokens": ["public", "CaNoticeMsgCdSvcGetListOut", "clone(){", "try{", "CaNoticeMsgCdSvcGetListOut", "object=", "(CaNoticeMsgCdSvcGetListOut)super.clone();", "if", "(", "this.noticeMsgCdList==", "null", ")", "object.noticeMsgCdList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaNoticeMsgCdSvcGetOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.actor.service.dto.CaNoticeMsgCdSvcGetOut>(noticeMsgCdList.size());", "for(", "bankware.corebanking.configurationadmin.actor.service.dto.CaNoticeMsgCdSvcGetOut", "item", ":", "noticeMsgCdList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.actor.service.dto.CaNoticeMsgCdSvcGetOut)item.clone());", "}", "object.noticeMsgCdList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "register(SelfAuthBsicInfoIO", "selfAuthBsicInfoIO,", "SelfAuthCdIO", "selfAuthCdIO)", "throws", "BizApplicationException", "{", "//", "create", "self", "authorization", "id", "selfAuthBsicInfoIO.setSelfAuthId(_getNbrg().getNumbering(NumberingCoreEnum.SELF_AUTH_IDENTIFICATION.getValue()));", "//", "insert", "self", "authorization", "data", "AtSelfAuthDIO", "atSelfAuthDIO", "=", "new", "AtSelfAuthDIO();", "_getCmnContext().setHeaderColumn(atSelfAuthDIO);", "atSelfAuthDIO.setSelfAuthId(selfAuthBsicInfoIO.getSelfAuthId());", "atSelfAuthDIO.setAuthCd(selfAuthBsicInfoIO.getAuthCd());", "atSelfAuthDIO.setAuthStsCd(selfAuthBsicInfoIO.getAuthStsCd());", "atSelfAuthDIO.setNoticeId(selfAuthBsicInfoIO.getNoticeId());", "atSelfAuthDIO.setEfctvEndTmstmp(_calculateEffectiveEndTimestamp(selfAuthCdIO));", "atSelfAuthDIO.setAuthTrgtTpCd(selfAuthBsicInfoIO.getAuthTrgtTpCd());", "atSelfAuthDIO.setAuthErrAllwncCnt(selfAuthBsicInfoIO.getAuthErrAllwncCnt()", "==", "null", "?", "CCM01.ZERO", ":", "selfAuthBsicInfoIO.getAuthErrAllwncCnt());", "atSelfAuthDIO.setAuthErrAtmptCnt(selfAuthBsicInfoIO.getAuthErrAtmptCnt()", "==", "null", "?", "CCM01.ZERO", ":", "selfAuthBsicInfoIO.getAuthErrAtmptCnt());", "if(AuthTrgtTpEnum.MOBILE.getValue().equals(selfAuthBsicInfoIO.getAuthTrgtTpCd())", "&&", "!StringUtils.isEmpty(selfAuthBsicInfoIO.getAuthTrgtId()))", "{", "atSelfAuthDIO.setAuthTrgtId(selfAuthBsicInfoIO.getAuthTrgtId().replace(\"-\",", "\"\").replace(\".\",", "\"\"));", "}", "else", "{", "atSelfAuthDIO.setAuthTrgtId(selfAuthBsicInfoIO.getAuthTrgtId());", "}", "if(selfAuthBsicInfoIO.getAuthDemandTmstmp()", "!=", "null", ")", "atSelfAuthDIO.setAuthDemandTmstmp(selfAuthBsicInfoIO.getAuthDemandTmstmp());", "else", "atSelfAuthDIO.setAuthDemandTmstmp(_getCmnContext().getSystemTimestamp());", "_getAtSelfAuthDDso().insert(atSelfAuthDIO);", "//", "insert", "self", "authorization", "extend", "info", "_getSelfAuthXtnInfo().register(selfAuthBsicInfoIO);", "}"], "docstring_tokens": ["It", "registers", "customer", "agreement", "code", "information", "list.", "If", "registered", "information", "by", "the", "same", "institution", "code", "and", "agreement", "type", "code", "exists,", "throws", "exception."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "String", "natCd", "=", "null;", "String", "bnkCd", "=", "null;", "if(supplInfoVal.get(CCM03.CD)", "!=", "null)", "{", "bnkCd", "=", "supplInfoVal.get(CCM03.CD).toString();", "}", "String", "instParmNatCd", "=", "_getInstParmProvider().getInstParm(InstParamEnum.NATION_CODE.getValue());", "//", "nation", "code", "if", "(!StringCoreUtils.isEmpty(instParmNatCd))", "{", "natCd", "=", "instParmNatCd;", "}", "CmBnkMIO", "cmBnkMIOOut", "=", "_getCmBnkMDso().select(natCd,", "bnkCd);", "if(cmBnkMIOOut", "==", "null){", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "ArrRealCore", "arrReal,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getArrSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "(ArrRealImpl)", "arrReal);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "xtnAtrbtNm", "and", "xtnAtrbtCntnt."]}
{"code_tokens": ["public", "LcOpnSvcIn", "clone(){", "try{", "LcOpnSvcIn", "object=", "(LcOpnSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "AprslBsicInfoIO", "getBasicInfo()", "throws", "BizApplicationException", "{", "if(aprslBasicCache", "==", "null)", "{", "return", "null;", "}", "AprslBsicInfoIO", "aprslBsicInfoIO", "=", "new", "AprslBsicInfoIO();", "DtoCoreUtils.setSubInfoIO(aprslBasicCache,", "aprslBsicInfoIO);", "return", "aprslBsicInfoIO;", "}"], "docstring_tokens": ["Inquire", "the", "assessment", "basic", "information"]}
{"code_tokens": ["public", "CrncyCnvrtrSvcListOut", "clone(){", "try{", "CrncyCnvrtrSvcListOut", "object=", "(CrncyCnvrtrSvcListOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrRelPrtnrInfoOut>", "getListArrPrtnrRelation(", "String", "arrPrtnrRelCd,", "String", "prtnrId,", "String", "prtnrTpCd,", "String", "prtnrDtlTpCd,", "String", "baseDt,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "//", "\uacc4\uc57d", "\uc790\uc0b0\uad00\uacc4", "\uc8fc\uc81c\uc601\uc5ed", "\ubbf8\uc0ac\uc6a9", "\uc2dc", "skip", "if", "(!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.PARTNER_RELATION)", "||", "ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())", ")", "{", "return", "new", "ArrayList<ArrRelPrtnrInfoOut>();", "}", "arrPrtnrRelCd", "=", "ArrRelCoreUtil.getEmptyCheckValue(arrPrtnrRelCd);", "prtnrId", "=", "ArrRelCoreUtil.getEmptyCheckValue(prtnrId);", "List<ArArrPrtnrRIO>", "arArrPrtnrRIOList", "=", "_getArArrPrtnrRDso().selectListEffective(arrReal.getInstCd(),", "arrReal.getArrId(),", "prtnrId,", "arrPrtnrRelCd,", "prtnrTpCd,", "prtnrDtlTpCd,", "baseDt);", "return", "_buildListArrRelInfoOut(arArrPrtnrRIOList);", "}"], "docstring_tokens": ["Inquire", "list", "of", "arrangement/partner", "relation", "information."]}
{"code_tokens": ["public", "List<AprslAddrOut>", "getListAddress(String", "aprslId)throws", "BizApplicationException", "{", "List<AsAprslAddrDIO>", "list", "=", "_getAsAprslAddrDDso().selectList(_getCmnContextCore().getInstCode(),", "aprslId);", "//\ucd9c\ub825\ubd80\uc870\ub9bd", "List<AprslAddrOut>", "returnList", "=", "new", "ArrayList<AprslAddrOut>();", "if(list.size()", ">", "0){", "for(AsAprslAddrDIO", "temp", ":", "list){", "AprslAddrOut", "addTemp", "=", "_getAsAprslAddrOut(temp);", "returnList.add(addTemp);", "}", "}", "return", "returnList;", "}", "/**", "*", "DBIO(AsAprslAddrDIO)\uc5d0\uc11c", "BizIO(AsAprslAddrDIO)", "\uc124\uc815\ud55c\ub2e4.", "*", "@param", "in", ":", "{@link", "AsAprslAddrDIO}", "*", "@return", "AsAprslAddrDIO", ":", "{@link", "AsAprslAddrDIO}"], "docstring_tokens": ["The", "address", "information", "list", "of", "the", "asset", "is", "inquired", "according", "to", "the", "asset", "address", "type."]}
{"code_tokens": ["public", "List<CndCndROut>", "getCndCndRelation(CndCndRelIn", "in)", "throws", "BizApplicationException", "{", "List<CndCndROut>", "out", "=", "new", "ArrayList<>();", "CndValCndValRelationListIn", "cndValIn", "=", "new", "CndValCndValRelationListIn();", "cndValIn.setInstitutionId(getInstCd());", "cndValIn.setPdCd(in.getPdCd());", "cndValIn.setCndCd(in.getCndCd());", "cndValIn.setListCd(in.getListCd());", "cndValIn.setCndBetweenRelationTypeCd(in.getCndBtwnRelTpCd());", "cndValIn.setBaseDate(in.getAplyDt());", "List<CndCndRelationOut>", "relationList", "=", "_getPntCndCore().getListCndValCndValRelation(cndValIn);", "if(relationList", "!=", "null)", "{", "for(CndCndRelationOut", "item", ":", "relationList)", "{", "out.add(_convertCndCndRelationOutToCndCndROut(item));", "}", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "condition", "relation."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "ArrRealCore", "arrRealCore)", "throws", "BizApplicationException", "{", "return", "_getArrSrvcBlckngSubInfoBiz().getMapSubInfo(arrSrvcBlckngSeqNbr,", "seqNbr,", "(ArrRealImpl)arrRealCore);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "thing", "as", "a", "map."]}
{"code_tokens": ["public", "int", "delete(CaCmAprvlTmpltMIO", "cmAprvlTmpltMIO)", "{", "return", "_getCmAprvlTmpltM().delete(cmAprvlTmpltMIO);", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt,", "boolean", "hasVrtnArr)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "null,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt,", "hasVrtnArr);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "(Paging)", "Inquire", "modification", "arrangement", "of", "inquired", "arrangement", "if", "hasVrtnArr", "is", "true."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AprslCore", "aprslCore)", "throws", "BizApplicationException", "{", "return", "_getAprslSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AprslImpl)aprslCore);", "}"], "docstring_tokens": ["get", "a", "extended", "information", "of", "subsidiary", "information(CTI)"]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo", ",", "StlmntCalcnSubInfoInqryIn", "stlmntCalcnSubInfoInqryIn)", "throws", "BizApplicationException", "{", "_getStlmntCalcnSubInfoBiz().saveSubInfo(subInfo,", "_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn));", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "TblXtnAtrXtnAtrOut", "getExtendAttributeExtendAttributeDetail(String", "instCd,", "String", "tblNm,", "String", "atrbtNm)", "throws", "BizApplicationException", "{", "CmTblXtnAtrDIO", "cmTblXtnAtrDIO", "=", "_getExtendAttributeDetail(instCd,", "tblNm,", "atrbtNm);", "if(cmTblXtnAtrDIO", "!=", "null)", "{", "return", "_getExtendAttributeExtendAttributeDetail(instCd,", "tblNm,", "atrbtNm,", "cmTblXtnAtrDIO);", "}", "return", "null;", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "extend", "attribute", "list.", "table", "extend", "attribute", "extend", "attribute", "meaning", "the", "actual", "value", "of", "the", "item", "defined", "in", "the", "table", "extend", "attribute", "validation", "composition"]}
{"code_tokens": ["public", "List<TblXtnAtrbtOut>", "getTableExtendAttribute(String", "instCd,", "String", "tblNm)", "throws", "BizApplicationException", "{", "return", "this.getTableExtendAttribute(instCd,", "tblNm,", "XtnAtrbtVrtnCmpsEnum.NA,", "null);", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "input", "condition(cmnContext", "institution)", "basic", "method", "reference", ":", "{@link", "TblXtnAtrbtCore", "getTableExtendAttribute(String,", "String,", "XtnAtrbtVrtnCmpsEnum,", "Map<String,", "String>)}"]}
{"code_tokens": ["public", "DummyIO", "removeControlCenterBasic(", "CaCntrlCntrMgmtSvcCntrlCntrBsicIn", "in", ")", "throws", "BizApplicationException", "{", "CaCntrlCntrMngrSvcGetIO", "mngrIn", "=", "new", "CaCntrlCntrMngrSvcGetIO();", "mngrIn.setInstCd(in.getInstCd());", "//", "\uae30\uad00\ucf54\ub4dc", "mngrIn.setCntrlCntrId(in.getCntrlCntrId());", "//", "\uc81c\uc5b4\uc13c\ud130\uc2dd\ubcc4\uc790", "_getCntrlCntr().removeControlCenterBasic(", "mngrIn", ");", "return", "new", "DummyIO();", "}"], "docstring_tokens": ["Delete", "a", "control", "center", "basic", "information."]}
{"code_tokens": ["public", "boolean", "isCancelled()", "{", "return", "this.arrGrpStsCd.equals(ArrGrpStsCoreEnum.CANCELED.getValue());", "}"], "docstring_tokens": ["Check", "if", "the", "status", "of", "arrangement", "activity", "is", "\"Cancelled\"."]}
{"code_tokens": ["public", "void", "activate(ScrtyIntStsChngIn", "scrtyIntStsChngIn)", "throws", "BizApplicationException", "{", "throw", "new", "BizApplicationException(\"AAPASE0064\",null);", "}"], "docstring_tokens": ["Change", "status", "of", "arrangement", "issued", "media", "into", "\"Active\"."]}
{"code_tokens": ["public", "String", "getNumbering(String", "nbrgAtrbtNm,Map<String,", "Object>", "inpParmMap)", "throws", "BizApplicationException", "{", "return", "getNumbering(_getCmnContext().getInstCode(),", "nbrgAtrbtNm,", "inpParmMap,", "false);", "}"], "docstring_tokens": ["It", "calculates", "next", "number.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'isReUseSameTxNbrg'", "value", "is", "replaced", "by", "false.", "Compared", "to", "the", "default", "method,", "the", "omitted", "'inpParmMap'", "value", "is", "replaced", "by", "null."]}
{"code_tokens": ["public", "LogInSvcGetLoginUserRoleOut", "clone(){", "try{", "LogInSvcGetLoginUserRoleOut", "object=", "(LogInSvcGetLoginUserRoleOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getInstParm(String", "parmAtrbtNm", ")", "throws", "BizApplicationException", "{", "String", "instCd", "=", "_getCmnContextCore().getInstCode();", "String", "instParm", "=", "getInstitutionParameterValue(instCd,", "parmAtrbtNm);", "//", "2020.11.02", "//", "\uae30\uad00\ud30c\ub77c\ubbf8\ud130\uac12", "\uc870\ud68c", "\uc2dc", "\ud574\ub2f9", "\uae30\uad00\uc758", "\uac12\ub9cc\uc744", "\uc870\ud68c\ud558\ub3c4\ub85d", "\uc218\uc815", "//", "\uae30\uc874\uc5d0\ub294", "\ud574\ub2f9", "\uae30\uad00\uc5d0", "\uac12\uc774", "\uc815\uc758\ub418\uc9c0", "\uc54a\uc740", "\uacbd\uc6b0", "STDA\uc758", "\uac12\uc744", "\ucc38\uc870\ud588\uc74c", "return", "instParm;", "}"], "docstring_tokens": ["It", "query", "institution", "parameter", "attribute", "value", "simply.", "if", "want", "to", "get", "the", "value", "of", "attribute", "for", "each", "institution,", "use", "the", "method", "instead", "of", "instParmMngr.getInstParm", "method."]}
{"code_tokens": ["public", "StlmntManualEntryMgmtSvcListOut", "clone(){", "try{", "StlmntManualEntryMgmtSvcListOut", "object=", "(StlmntManualEntryMgmtSvcListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcItemOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcItemOut>(tblNm.size());", "for(", "bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcItemOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.closingaccounts.service.dto.StlmntManualEntryMgmtSvcItemOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "delete(CaCmTblXtnAtrXtnAtrValDIO", "cmTblXtnAtrXtnAtrValDIO)", "{", "super.clearCache(DataCacheCoreConfig.COMMON_TBL_XTN_ATR_XTN_ATR_VAL_BY_CMPS_CD_CACHE);", "return", "_getCmTblXtnAtrXtnAtrValD().delete(cmTblXtnAtrXtnAtrValDIO);", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "Dept", "getDept(String", "deptId)", "throws", "BizApplicationException", "{", "Dept", "dept", "=", "(Dept)", "super.getDeptCore(deptId);", "return", "dept;", "}"], "docstring_tokens": ["Inquire", "department", "object", "from", "this", "institution", "by", "department", "identification."]}
{"code_tokens": ["public", "List<TaxRtIO>", "getListTaxRate(String", "isoNatCd,", "String", "aplyStartDt)", "throws", "BizApplicationException", "{", "return", "_getListTaxRate(isoNatCd,", "\"\",", "\"\",", "aplyStartDt,", "\"\");", "}"], "docstring_tokens": ["This", "method", "provides", "a", "list", "of", "tax", "rate", "information", "by", "ISO", "country", "code,", "start/end", "date."]}
{"code_tokens": ["public", "boolean", "isExistArrBnftRelation(String", "bnftId,", "String", "baseDt,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "if", "(!_getArrCustom().isSubDmnUsed(ArrSubDmnEnum.BENEFIT_RELATION)", "||", "ArrKndCoreEnum.TEMPORARY.getValue().equals(arrReal.getArrKindCd())", ")", "{", "return", "false;", "}", "bnftId", "=", "ArrRelCoreUtil.getEmptyCheckValue(bnftId);", "bizDscd", "=", "ArrRelCoreUtil.getEmptyCheckValue(bizDscd);", "pdTpCd", "=", "ArrRelCoreUtil.getEmptyCheckValue(pdTpCd);", "pdTmpltCd", "=", "ArrRelCoreUtil.getEmptyCheckValue(pdTmpltCd);", "String", "existYn", "=", "_getArArrBnftRDso().selectExistYn(arrReal.getInstCd(),", "arrReal.getArrId(),", "bnftId,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "_getInqBaseDt(baseDt)", ");", "return", "(", "CCM01.YES.equals(existYn)", "?", "true", ":", "false", ");", "}"], "docstring_tokens": ["Inquire", "existence", "of", "arrangement/benefit", "relation."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(CaInstParamEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "DocInstIO", "modify(DocInstIO", "docInstIO)", "throws", "BizApplicationException", "{", "//", "query", "registration", "data", "DcDocInstDIO", "dcDocInstDIO", "=", "new", "DcDocInstDIO();", "_getCmnContext().setHeaderColumn(dcDocInstDIO);", "if(docInstIO.getInstCd()", "!=", "null)", "dcDocInstDIO.setInstCd(docInstIO.getInstCd());", "dcDocInstDIO.setDocId(docInstIO.getDocId());", "dcDocInstDIO.setEfctvStartDt(StringCoreUtils.isEmpty(docInstIO.getEfctvStartDt())", "?", "_getCmnContext().getTxDate()", ":", "docInstIO.getEfctvStartDt());", "if(!StringCoreUtils.isEmpty(docInstIO.getDocStylesheetCntnt()))", "{", "dcDocInstDIO.setDocStylesheetUrl(docInstIO.getDocStylesheetCntnt());", "}", "else", "{", "dcDocInstDIO.setDocStylesheetUrl(docInstIO.getDocStylesheetUrl());", "}", "DcDocInstDIO", "rgstrnDcDocInstDIO", "=", "_getDcDocInstDDso().select(dcDocInstDIO.getInstCd(),", "dcDocInstDIO.getDocId(),", "dcDocInstDIO.getEfctvStartDt());", "dcDocInstDIO.setDocCntnt(docInstIO.getDocCntnt());", "//", "if(docInstIO.getDocCntnt()", "!=", "null)", "{", "//", "dcDocInstDIO.setDocCntnt(docInstIO.getDocCntnt().getBytes());", "//", "}", "dcDocInstDIO.setEfctvEndDt(StringCoreUtils.isEmpty(docInstIO.getEfctvEndDt())", "?", "CCM01.MAX_DATE", ":", "docInstIO.getEfctvEndDt());", "//", "If", "document", "exists,", "update", "registration", "information", "set", "effective", "end", "date", "boolean", "insertFlag", "=", "true;", "if(rgstrnDcDocInstDIO", "!=", "null)", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"_modify()", ":", "1", "=", "{}\",", "rgstrnDcDocInstDIO.getEfctvStartDt());", "logger.debug(\"_modify()", ":", "2", "=", "{}\",", "docInstIO.getEfctvStartDt());", "logger.debug(\"_modify()", ":", "3", "=", "{}\",", "DateCoreUtils.getCurrentDate(DateCoreUtils.EMPTY_DATE_TYPE));", "logger.debug(\"_modify()", ":", "4", "=", "{}\",", "rgstrnDcDocInstDIO.getEfctvStartDt());", "}", "if(rgstrnDcDocInstDIO.getEfctvStartDt().equals(docInstIO.getEfctvStartDt())", "&&", "DateCoreUtils.getCurrentDate(DateCoreUtils.EMPTY_DATE_TYPE).compareTo(rgstrnDcDocInstDIO.getEfctvStartDt())", "<=", "0)", "{", "_getDcDocInstDDso().updateDocCntnt(dcDocInstDIO);", "insertFlag", "=", "false;", "}", "else", "if(rgstrnDcDocInstDIO.getEfctvStartDt().equals(docInstIO.getEfctvStartDt()))", "{", "String", "newEfctvEndDt", "=", "dcDocInstDIO.getEfctvEndDt();", "dcDocInstDIO.setEfctvEndDt(DateCoreUtils.getDateDayBefore(1,", "_getCmnContext().getTxDate()));", "//_getDcDocInstDDso().updateEfctvEndDt(dcDocInstDIO);", "_getDcDocInstDDso().update(dcDocInstDIO);", "dcDocInstDIO.setEfctvEndDt(newEfctvEndDt);", "dcDocInstDIO.setEfctvStartDt(_getCmnContext().getTxDate());", "}", "else", "{", "String", "newEfctvEndDt", "=", "dcDocInstDIO.getEfctvEndDt();", "dcDocInstDIO.setEfctvEndDt(DateCoreUtils.getDateDayBefore(1,", "dcDocInstDIO.getEfctvStartDt()));", "//_getDcDocInstDDso().updateEfctvEndDt(dcDocInstDIO);", "_getDcDocInstDDso().update(dcDocInstDIO);", "dcDocInstDIO.setEfctvEndDt(newEfctvEndDt);", "}", "//", "if(!rgstrnDcDocInstDIO.getEfctvStartDt().equals(docInstIO.getEfctvStartDt()))", "{", "//", "throw", "new", "BizApplicationException(\"AAPATE0065\",", "new", "Object[]", "{", "\"@docTmplt\"", "});", "//", "}", "//", "else", "if(DateCoreUtils.getCurrentDate(DateCoreUtils.EMPTY_DATE_TYPE).compareTo(rgstrnDcDocInstDIO.getEfctvStartDt())", ">", "0)", "{", "//", "throw", "new", "BizApplicationException(\"AAPATE0106\",", "null);", "//", "}", "//", "else", "{", "//", "_getDcDocInstDDso().updateDocCntnt(dcDocInstDIO);", "//", "}", "}", "if(insertFlag)", "{", "//", "insert", "data", "_getDcDocInstDDso().insert(dcDocInstDIO);", "}", "return", "_setOutInformationByRegistration(docInstIO,", "dcDocInstDIO);", "}"], "docstring_tokens": ["It", "modifies", "customer", "agreement", "code", "information", "list.", "If", "registered", "information", "by", "the", "same", "institution", "code", "and", "agreement", "type", "code", "exists,", "throws", "exception."]}
{"code_tokens": ["public", "void", "close()", "throws", "ItemStreamException", "{", "if(", "logger.isDebugEnabled()", ")", "{", "logger.debug(\"##", "[{}]", "DmndDailyAcrlTrgtXtrct.close\",", "this.seqNbr);", "}", "if(", "this.fileWriter", "!=", "null", ")", "{", "this.fileWriter.close();", "}", "DasUtils.disconnectDasExecutor(iterator);", "}"], "docstring_tokens": ["It", "closes", "the", "customer", "related", "person", "by", "updating", "delYn", "of", "basic", "information", "to", "'Y'."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "String", "pdCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt,", "int", "pgNbr,", "int", "pgCnt,", "boolean", "hasVrtnArr)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistory(deptId,", "null,", "null,", "null,", "pdCd,", "arrDeptRel,", "curArrSts,", "arrSts,", "null,", "inqryStartDt,", "inqryEndDt,", "pgNbr,", "pgCnt,", "hasVrtnArr);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "of", "specific", "product", "code", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "(Paging)"]}
{"code_tokens": ["public", "void", "validate(String", "inputPswd,", "ArrRealImpl", "arrReal,", "ArrPswdTpEnum", "arrPswdTpEnum)", "throws", "BizApplicationException", "{", "//", "\ube44\ubc00\ubc88\ud638", "\uac80\uc99d\ub300\uc0c1", "\uc5ec\ubd80", "\ud655\uc778", "if(", "!_isPasswordCheckTarget(inputPswd,", "arrReal)", "){", "return;", "}", "//", "\ube44\ubc00\ubc88\ud638", "Block", "\uc5ec\ubd80", "\uac80\uc99d", "\ud6c4", "\ud604\uc7ac", "\uc624\ub958\ud69f\uc218", "\uc870\ud68c", "Integer", "errCnt", "=", "this._checkWhetherOverPswdErrCntLimit(arrReal,", "arrPswdTpEnum);", "//", "\uacc4\uc57d\uc5d0", "\ub4f1\ub85d\ub41c", "\ube44\ubc00\ubc88\ud638", "\uc870\ud68c", "String", "arrPswd", "=", "getArrPassword(arrPswdTpEnum,", "arrReal);", "if(_isPasswordEmpty(arrPswd,", "inputPswd)){", "return;", "}", "//", "\ube44\ubc00\ubc88\ud638", "\uc77c\uce58\uc5ec\ubd80", "boolean", "isValidPswd", "=", "!StringUtils.isEmpty(inputPswd)", "&&", "inputPswd.equals(arrPswd);", "//", "\ube44\ubc00\ubc88\ud638", "\uac80\uc99d", "\uc131\uacf5", "\uc2dc,", "\ud604\uc7ac", "\uc624\ub958\ud69f\uc218", "\ucd08\uae30\ud654", "if(isValidPswd){", "if(errCnt", ">", "CCM01.ZERO", "){", "this._resetPasswordErrorCount(arrReal,", "arrPswdTpEnum);", "}", "//", "\ube44\ubc00\ubc88\ud638", "\uac80\uc99d", "\uc2e4\ud328", "\uc2dc,", "\ud604\uc7ac", "\uc624\ub958\ud69f\uc218", "+", "1", "}", "else", "{", "errCnt", "=", "this._addPasswordErrorCount(arrReal,", "arrPswdTpEnum);", "//", "\uc624\ub958\ud5c8\uc6a9\ud69f\uc218", "\ucd08\uacfc\ub85c", "\ube44\ubc00\ubc88\ud638\uac00", "\uc7a0\uae08\uc0c1\ud0dc\ub85c", "\ubc14\ub00c\ub294", "\uacbd\uc6b0", "if", "(errCnt", ">=", "_getPswdErrAllwncCnt(arrPswdTpEnum))", "{", "//", "{0}\uac00", "\uc7a0\uaca8", "\uc788\uc5b4", "\uac70\ub798\uac00", "\ubd88\uac00\ud569\ub2c8\ub2e4.", "The", "{0}", "is", "locked.", "throw", "new", "BizApplicationException(\"AAPARE0215\",", "new", "Object[]{_getArrPswdTpAtrbtNm(arrPswdTpEnum)});", "}", "//", "\ube44\ubc00\ubc88\ud638", "\uc624\ub958\uc778", "\uacbd\uc6b0", "//", "\uacc4\uc88c\ubc88\ud638", "\ub610\ub294", "{0}", "\uc624\ub958\uc785\ub2c8\ub2e4.", "It", "is", "{0}", "or", "account", "number", "error.", "throw", "new", "BizApplicationException(\"AAPARE0573\",", "new", "Object[]{_getArrPswdTpAtrbtNm(arrPswdTpEnum)});", "}", "}"], "docstring_tokens": ["Check", "if", "the", "issued", "media", "is", "available.", "Throw", "error", "if", "it", "is", "unavailable."]}
{"code_tokens": ["public", "List<StTaxOut>", "getListTaxGeneratedAccount(StTaxIn", "stTaxIn)", "throws", "BizApplicationException", "{", "//logger.debug(\"StlmntCoreImpl==>getListTaxGeneratedAccount", ":", "stTaxIn", "{}", "\",", "stTaxIn);", "_checkInputValue(stTaxIn.getCustId(),", "\"custId\");", "_checkInputValue(stTaxIn.getInqryStartYm(),", "\"inqryStartYrMnth\");", "_checkInputValue(stTaxIn.getInqryEndYm(),", "\"inqryEndYrMnth\");", "_checkInputDate(stTaxIn.getInqryStartYm(),", "\"yyyyMM\");", "_checkInputDate(stTaxIn.getInqryEndYm(),", "\"yyyyMM\");", "/*", "*", "set", "inst", "code", "if", "input", "is", "null", "*/", "if(StringUtils.isEmpty(stTaxIn.getInstCd())){", "stTaxIn.setInstCd(_getCmnContext().getInstCode());", "}", "StTaxMIO", "stTaxMIO", "=", "_getTaxBasicIn(stTaxIn);", "List<StTaxMIO>", "result", "=", "_getStTaxMDso().selectTaxGeneratedAccountList(stTaxMIO);", "List<StTaxOut>", "outList", "=", "new", "ArrayList<StTaxOut>();", "for(StTaxMIO", "in", ":", "result){", "outList.add(_getTaxBasicOut(in));", "}", "return", "outList;", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "This", "method", "gets", "list", "of", "tax", "details", "that", "occurred", "on", "specific", "transaction.", "*", "</pre>", "*", "*", "@note", "{@link", "StTaxIn}", ":", "required", "fields", "-", "instCd,", "arrId,", "txDt,", "txSeqNbr", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\uc774", "\uba54\uc18c\ub4dc\ub294", "\ud2b9\uc815\uac70\ub798\uc5d0\uc11c", "\ubc1c\uc0dd\ud55c", "\uc218\uc785\uc81c\uc138\ub0b4\uc5ed\uc744", "\uc870\ud68c\ud55c\ub2e4.", "*", "</pre>", "*", "*", "@note", "{@link", "StTaxIn}"], "docstring_tokens": ["This", "method", "inquires", "arrangement", "list", "which", "generates", "tax", "during", "certain", "period."]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(CustSnpshtTpEnum", "enumObject:", "values())", "{", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{", "value,", "\"@custStaffRelCd\"", "});", "}", "return", "true;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "ArrBsicQrySvcOut", "clone(){", "try{", "ArrBsicQrySvcOut", "object=", "(ArrBsicQrySvcOut)super.clone();", "if", "(", "this.xtnList==", "null", ")", "object.xtnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.arrangementservice.query.service.dto.ArrXtnInfo>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.arrangementservice.query.service.dto.ArrXtnInfo>(xtnList.size());", "for(", "bankware.corebanking.arrangementservice.query.service.dto.ArrXtnInfo", "item", ":", "xtnList", "){", "clonedList.add(", "(bankware.corebanking.arrangementservice.query.service.dto.ArrXtnInfo)item.clone());", "}", "object.xtnList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaActorRolePSvcChngListIn", "clone(){", "try{", "CaActorRolePSvcChngListIn", "object=", "(CaActorRolePSvcChngListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "java.util.List<bankware.corebanking.configurationadmin.actor.service.dto.CaDeptSrchSvcGetDeptOut>", "getChildren(){", "return", "children;", "}"], "docstring_tokens": ["Inquire", "children", "arrangement", "structure", "including", "mandatory", "and", "optional."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AprslCore", "aprslCore)", "throws", "BizApplicationException", "{", "return", "_getAprslSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AprslImpl)aprslCore);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "security", "interest."]}
{"code_tokens": ["public", "ArrExtrnlIdNbrInfo", "getArrExtrnlIdNbrInfo(ArrExtrnlIdNbrTpEnum", "arrExtrnlIdNbrTp)", "throws", "BizApplicationException", "{", "return", "super.getArrExtrnlIdNbrInfo(arrExtrnlIdNbrTp.getValue());", "}"], "docstring_tokens": ["Inquire", "external", "id", "number", "information", "of", "specific", "type", "registerd", "to", "arrangement."]}
{"code_tokens": ["public", "String", "getNumbering(String", "instCd,String", "nbrgAtrbtNm,Map<String,", "Object>", "inpParmMap)", "throws", "BizApplicationException", "{", "return", "getNumbering(instCd,", "nbrgAtrbtNm,", "inpParmMap,", "false);", "}"], "docstring_tokens": ["It", "calculates", "next", "number."]}
{"code_tokens": ["public", "CashTransitSvcDtlOut", "clone(){", "try{", "CashTransitSvcDtlOut", "object=", "(CashTransitSvcDtlOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "delete(CaAtDeptRoleTmpltDIO", "atDeptRoleTmpltDIO){", "return", "_getCaAtDeptRoleTmpltD().delete(atDeptRoleTmpltDIO);", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "//", "query", "data", "return", "!(_getDcDocMDso().select(null,", "String.valueOf(supplInfoVal.get(CCM03.CD)),", "DocTypEnum.STYLESHEET_FOR_PRINTING.getValue())", "==", "null);", "}"], "docstring_tokens": ["This", "method", "check", "the", "code", "number.", "If", "code", "is", "exist", "return", "true,", "else", "return", "false."]}
{"code_tokens": ["public", "ArrReal", "getMthrArr(){", "return", "(ArrReal)", "super.getMthrArrCore();", "}"], "docstring_tokens": ["Inquire", "mother", "arrangement", "of", "arrangement.", "Mother-child", "relation", "of", "arrangement", ":", "Arrangement", "of", "products", "defined", "as", "mother-child", "relation.", "The", "mother", "arrangement", "id", "is", "managed", "by", "the", "child", "arrangement."]}
{"code_tokens": ["public", "boolean", "isTableAttributeValid(String", "xtnTblNm,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AtrbtCheckPdInfo", "pd)", "throws", "BizApplicationException", "{", "return", "_getAtrbt().isTableAttributeValid(xtnTblNm,", "xtnAtrbtNm,", "xtnAtrbtCntnt,", "pd);", "}"], "docstring_tokens": ["Validate", "Table", "Extension", "Attribute", "Effectiveness"]}
{"code_tokens": ["public", "int", "delete(String", "trnsfrKnd,", "String", "trnsfrOriginKeyVal,", "String", "lngCd)", "throws", "BizApplicationException", "{", "_getCmDataCacheManager().clearInstanceCache(DataCacheCoreConfig.TRANSLATE_LANGUAGE_CACHE,", "lngCd.concat(trnsfrKnd).concat(trnsfrOriginKeyVal));", "return", "_getCmMltLngTrnsltnD().delete(trnsfrKnd,", "trnsfrOriginKeyVal,", "lngCd);", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "String", "getCrncyCd(){", "return", "crncyCd;", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "currency", "code."]}
{"code_tokens": ["public", "ArrReal", "getHotspotArr(ArrReal", "arrReal)", "throws", "BizApplicationException", "{", "return", "_getArrMngrAgent().getHotspotArr(arrReal);", "}"], "docstring_tokens": ["This", "method", "inquires", "one", "at", "random", "among", "the", "child", "arrangements", "of", "accounts", "that", "are", "concentrated", "in", "many", "transactions,", "such", "as", "a", "funds", "settlement", "account.", "There", "are", "accounts", "that", "are", "concentrated", "in", "many", "transactions,", "such", "as", "a", "funds", "settlement", "account.", "The", "performance", "of", "these", "accounts", "is", "very", "important.", "In", "order", "to", "solve", "this", "performance", "problem,", "it", "plays", "a", "role", "to", "determine", "the", "target", "arrangement", "object", "in", "real", "time", "according", "to", "the", "existing", "contracted", "condition"]}
{"code_tokens": ["public", "List<CaArrIssmdaTmpltIO>", "getListArrIssmdaTmplt(String", "instCd)", "throws", "BizApplicationException", "{", "return", "getListArrIssmdaTmplt(instCd,", "null);", "}"], "docstring_tokens": ["Get", "a", "list", "of", "arrangement", "issued", "media", "template", "in", "specific", "type", "by", "profile", "attribute."]}
{"code_tokens": ["public", "String", "getPdCd()", "{", "return", "pdCd;", "}"], "docstring_tokens": ["Inquire", "product", "code", "of", "arrangement", "product.", "Product", "classification", "hierarchy", ":", "business", "distinction", "code", ">", "product", "type", "code", ">", "product", "template", "code", ">", "product", "code"]}
{"code_tokens": ["public", "int", "registerPrfClaim(AprslPrfClaimCrtnIn", "aprslPrfClaimCrtnIn)", "throws", "BizApplicationException", "{", "//", "1.", "\ud655\uc7a5\uc815\ubcf4\uc640", "\ubcf4\uc870\uba85\uc138", "\ubd84\ub9ac", "Map<String,", "String>", "subInfoMap", "=", "_getAprslPrfClaimSubInfoBiz().getMapSubInfoCrtn(aprslPrfClaimCrtnIn.getPrfClaimXtnList());", "//", "2.", "\uc120\uc21c\uc704\ucc44\uad8c", "\ub4f1\ub85d", "Integer", "prfClaimSeqNbr", "=", "super.registerPrfClaim(aprslPrfClaimCrtnIn);", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uc800\uc7a5", "_getAprslPrfClaimSubInfoBiz().saveMapSubInfo(subInfoMap,", "this,", "prfClaimSeqNbr);", "return", "prfClaimSeqNbr;", "}"], "docstring_tokens": ["Register", "the", "preferential", "claim", "information", "for", "the", "appraisal."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapXtnInfo(String", "aprslId,", "String", "custId,", "String", "relCd)", "throws", "BizApplicationException{", "AsAprslCustXtnInfoDIO", "input", "=", "new", "AsAprslCustXtnInfoDIO();", "input.setInstCd(_getCmnContextCore().getInstCode());", "input.setAprslId(aprslId);", "input.setCustId(custId);", "input.setAprslCustRelCd(relCd);", "Map<String,", "String>", "xtnAtrbtMap", "=", "new", "HashMap<String,", "String>();", "for(AsAprslCustXtnInfoDIO", "xtnInfo", ":", "_getAsAprslCustXtnInfoDDso().selectList(input))", "{", "xtnAtrbtMap.put(xtnInfo.getXtnAtrbtNm(),", "xtnInfo.getXtnAtrbtCntnt());", "}", "return", "xtnAtrbtMap;", "}"], "docstring_tokens": ["Inquire", "the", "actor", "extended", "information", "map.", "Inquire", "extended", "information", "with", "normal", "extended", "attribute", "status", "code."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "ArrRealCore", "arrRealCore)", "throws", "BizApplicationException", "{", "return", "_getArrSrvcBlckngSubInfoBiz().getMapSubInfo(arrSrvcBlckngSeqNbr,", "seqNbr,", "(ArrRealImpl)arrRealCore);", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "subsidiary", "information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(LimitProcessTypeDscdCoreEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "ArrRealCore", "arrReal)", "throws", "BizApplicationException", "{", "return", "_getArrSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(ArrRealImpl)", "arrReal);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "security", "interest."]}
{"code_tokens": ["public", "List<StaffTxMgmtJournalXtnOut>", "getListJournalizationExtendResult(StaffTxMgmtJournalSrchKeyIn", "in)", "throws", "BizApplicationException{", "_validateInput(in);", "/**", "*", "Inquiry", "Journal", "Entry", "(extend", "result", ":", "display", "debit", "information", "and", "credit", "information", "in", "a", "row)", "*/", "List<AcJrnzEntryDXtnOut>", "listOut", "=", "_getAcJrnzEntryDXtnDso().selectListExtendJrnzRslt(_getAcJrnzEntryDXtnIn(in));", "//", "\uacb0\uacfc\uac12\uc774", "\uc5c6\uc73c\uba74", "\uadf8\ub300\ub85c", "\ub9ac\ud134", "if(listOut", "==", "null)", "{", "return", "null;", "}", "if(logger.isDebugEnabled()){", "logger.debug(\"##", "StaffTxImpl....getListJournalizationExtendResult()", "listOut", "\uac74\uc218", ":", "{}\",", "listOut.size());", "}", "/**", "*", "Set", "Result", "value", "*/", "List<StaffTxMgmtJournalXtnOut>", "outs", "=", "new", "ArrayList<StaffTxMgmtJournalXtnOut>();", "for", "(AcJrnzEntryDXtnOut", "item", ":", "listOut)", "{", "outs.add(_setStaffTxMgmtJournalXtnOut(item));", "}", "return", "outs;", "}", "/**", "*", "Numgering", "staff", "transaction", "sequence", "number", "*", "\uc2a4\ud0dc\ud504\uac70\ub798\uc77c\ub828\ubc88\ud638", "\ucc44\ubc88", "*", "(random", "numbering", "-", "CBP", "5.3)", "*", "(random", "numbering", "-", "CBP", "5.3", "\uc7ac\uc218\uc815", "sonar)", "*", "*", "CBP", "5.9.2.20220314", "*", "\uc0ac\uc774\ud2b8\uc5d0\uc11c", "\ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5", "\ud560", "\uc218", "\uc788\ub3c4\ub85d", "private", "\uc5d0\uc11c", "protected", "\ub85c", "\ubcc0\uacbd", "*", "\ucc44\ubc88\uaddc\uce59", "\uc4f0\ub3c4\ub85d", "\uad8c\uc7a5\ud569\ub2c8\ub2e4.", "*", "(\ucc44\ubc88\uaddc\uce59\uc5d0", "\uac00\ub2a5\ud558\uba74", "\uc2dc\ud000\uc2a4\ub97c", "\uc0ac\uc6a9\ud558\uc2dc\uace0", "\uadf8\ub807\uc9c0", "\uc54a\uc740", "\uacbd\uc6b0", "\uae30\uc874\uacfc", "\uac19\uc774", "\ubcd1\ubaa9\ud604\uc0c1\uc774", "\ubc1c\uc0dd\ud560", "\uacbd\uc6b0", "\ub79c\ub364", "\ucc44\ubc88\uc744", "\uace0\ub824\ud558\uc2ed\uc2dc\uc624.", "*", "\uc0ac\uc774\ud2b8\ubcc4", "\uc0c1\ud669\uc5d0", "\ub9de\ucd94\uc5b4", "\uc815\uc758\ud558\uc2ed\uc2dc\uc624.)", "*", "@param", "CmnJrnzArea", "cmnJrnzArea", "*", "@return", "int", "staffTxSeqNbr", "*", "@throws", "BizApplicationException", "*", "*", "@example", "*", "<pre>", "*", "\ucc44\ubc88\uaddc\uce59", "\uc0ac\uc6a9:", "*", "Map<String,", "Object>", "inpParmMap", "=", "new", "HashMap<String,", "Object>();", "*", "inpParmMap.put(\"txDt\",", "cmnJrnzArea.getTxDt());", "//", "\uac70\ub798\uc77c", "*", "inpParmMap.put(\"deptId\",", "cmnJrnzArea.getTxDeptId());", "//", "\uac70\ub798\ubd80\uc11c\ucf54\ub4dc", "*", "inpParmMap.put(\"staffId\",", "cmnJrnzArea.getTxStaffId());", "//", "\uac70\ub798\uc2a4\ud0dc\ud504\uc2dd\ubcc4\uc790", "*", "String", "txSeqNbr", "=", "_getNbrg().getNumbering(NumberingEnum.STAFF_TRANSACTION_SEQUENCE_NUMBER.getValue(),", "inpParmMap);", "*", "*", "private", "Nbrg", "_getNbrg()", "{", "*", "if", "(nbrg", "==", "null)", "{", "*", "nbrg", "=", "(Nbrg)", "CbbApplicationContext.getBean(Nbrg.class,", "nbrg);", "*", "}", "*", "return", "nbrg;", "*", "}"], "docstring_tokens": ["It", "inquires", "journalization", "result", "of", "staff's", "specific", "financial", "transaction", "history", "using", "GUID", "and", "transaction", "date.", "It", "inquires", "debit", "information", "and", "credit", "information", "in", "a", "row."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(CustActvtyStsEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"APATE0028\",", "new", "Object[]", "{value,", "\"@custActionTpCd\"});", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(", "value))", "{", "for", "(AprslPrfClaimXtnInfoEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@AssetXtnAtrbtNm\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CaDeptChngSvcGetChildCntIn", "clone(){", "try{", "CaDeptChngSvcGetChildCntIn", "object=", "(CaDeptChngSvcGetChildCntIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "delete(CaSvSrvcMIO", "svSrvcMIO)", "{", "return", "_getSvSrvcM().delete(svSrvcMIO);", "}"], "docstring_tokens": ["It", "removes", "document", "information."]}
{"code_tokens": ["public", "CaSysSrvcLogInqrySvcOut", "clone(){", "try{", "CaSysSrvcLogInqrySvcOut", "object=", "(CaSysSrvcLogInqrySvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "activate(ArrIssmdaStsChngIn", "arrIssmdaStsChngIn)", "throws", "BizApplicationException", "{", "super.changeStatus(ArrIssmdaStsEnum.ACTIVATED.getValue(),", "arrIssmdaStsChngIn.getStsChngRsnCntnt(),", "arrIssmdaStsChngIn.getIssmdaStsChngBizCdNbr(),", "arrIssmdaStsChngIn.getIssmdaStsChngBizCd(),", "arrIssmdaStsChngIn.getXtnInfoList(),", "arrIssmdaStsChngIn.getStsChngTxDt(),", "arrIssmdaStsChngIn.getStsChngTxSeqNbr());", "}"], "docstring_tokens": ["Change", "status", "of", "arrangement", "issued", "media", "into", "\"Active\"."]}
{"code_tokens": ["public", "List<InterestCalculationSection>", "apply(ApplyInterestCalculationSectionExceptionIn", "in,", "List<InterestCalculationSection>", "intCalIntervals)", "throws", "BizApplicationException", "{", "int", "agrmntPymntDD", "=", "Integer.parseInt(in.getAgrmntPymntDay());", "for(InterestCalculationSection", "interval", ":", "intCalIntervals)", "{", "_checkIntervalInput(interval);", "boolean", "isTrmCalcnTrgt", "=", "true;", "//", "\uae30\uac04\uc0b0\ucd9c\ub300\uc0c1\uc5ec\ubd80", "boolean", "isEndofMonth", "=", "false;", "//", "\uc6d4\ub9d0\uc77c\uc5ec\ubd80", "int", "calStartDD", "=", "Integer.parseInt(interval.getCalStartDt().substring(6,", "8));//", "\uacc4\uc0b0\uc2dc\uc791\uc77c\uc758", "\uc77c", "int", "calEndDD", "=", "Integer.parseInt(interval.getCalEndDt().substring(6,", "8));", "//", "\uacc4\uc0b0\uc885\ub8cc\uc77c\uc758", "\uc77c", "int", "pymntCyclDD", "=", "Integer.parseInt(interval.getPymntCyclCorrespdngDt().substring(6,", "8));", "//", "\ub0a9\uc785\uc8fc\uae30\uc751\ub2f9\uc77c\uc758", "\uc77c", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c\uc758", "\uc77c", "=", "\uacc4\uc0b0\uc885\ub8cc\uc77c\uc758", "\uc77c", "&", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c\uc758", "\uc77c", "=", "\ub0a9\uc785\uc8fc\uae30\uc751\ub2f9\uc77c\uc758", "\uc77c", "if(calStartDD", "==", "calEndDD", "&&", "calStartDD", "==", "pymntCyclDD)", "{", "isTrmCalcnTrgt", "=", "false;", "}", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c\uc758", "\uc77c", "<", "\uacc4\uc0b0\uc885\ub8cc\uc77c\uc758", "\uc77c", "else", "if(calStartDD", "<", "pymntCyclDD)", "{", "String", "oneMonthPrvDt", "=", "DateCoreUtils.getDateMonthBeforeString(1,", "interval.getCalEndDt());", "//", "\uacc4\uc0b0\uc885\ub8cc\uc77c\uc758", "1\uac1c\uc6d4", "\uc804", "\uc77c\uc790", "=", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "ex)", "4\uc6d430\uc77c,", "5\uc6d431\uc77c", "if(oneMonthPrvDt.equals(interval.getCalStartDt()))", "{", "isTrmCalcnTrgt", "=", "false;", "}", "oneMonthPrvDt", "=", "DateCoreUtils.getDateMonthBeforeString(1,", "interval.getPymntCyclCorrespdngDt());", "//", "\ub0a9\uc785\uc8fc\uae30\uc751\ub2f9\uc77c\uc758", "1\uac1c\uc6d4", "\uc804", "\uc77c\uc790", "=", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "ex)", "2\uc6d428\uc77c,", "3\uc6d431\uc77c", "if(oneMonthPrvDt.equals(interval.getCalStartDt()))", "{", "isEndofMonth", "=", "true;", "}", "}", "//\uacc4\uc0b0\uc2dc\uc791\uc77c\uc758", "\uc77c", ">", "\uacc4\uc0b0\uc885\ub8cc\uc77c\uc758", "\uc77c", "else", "if(calStartDD", ">", "pymntCyclDD)", "{", "String", "oneMonthAfterDt", "=", "DateCoreUtils.getDateMonthAfterString(1,", "interval.getCalStartDt());", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c\uc758", "1\uac1c\uc6d4", "\ud6c4", "\uc77c\uc790", "=", "\uacc4\uc0b0\uc885\ub8cc\uc77c", "ex)", "5\uc6d431\uc77c,", "6\uc6d4", "30\uc77c", "if(oneMonthAfterDt.equals(interval.getCalEndDt()))", "{", "isTrmCalcnTrgt", "=", "false;", "}", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c\uc758", "1\uac1c\uc6d4", "\ud6c4", "\uc77c\uc790", "=", "\ub0a9\uc785\uc8fc\uae30\uc751\ub2f9\uc77c", "ex)", "1\uc6d429\uc77c,", "2\uc6d428\uc77c", "if(oneMonthAfterDt.equals(interval.getPymntCyclCorrespdngDt()))", "{", "isEndofMonth", "=", "true;", "}", "//", "\uc6d4\ub9d0\uc77c\uc5d0", "\uc2e0\uaddc", "\uccab\ud68c\ucc28", "\ub9d0\uc77c\uc774", "\uc0c1\ud658\uc608\uc815\uc77c\uc778", "\uacbd\uc6b0", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "ex)", "3\uc6d431\uc77c", "\uc2e0\uaddc", "30\uc77c", "\uc57d\uc815\ub0a9\uc785\uc77c", "\uc9c0\uc815\uc2dc", "\uc77c\uacc4\uc0b0", "if", "(isEndofMonth", "&&", "interval.getCalBaseTrmCnt()", "==", "12", "&&", "in.getOpenAcctDt().equals(interval.getCalStartDt())", "&&", "calStartDD", ">", "agrmntPymntDD)", "{", "isTrmCalcnTrgt", "=", "true;", "}", "}", "//\uc0c1\ud658", "\ub610\ub294", "\uacb0\uc0b0", "\uc774\uc790\uacc4\uc0b0\uc2dc", "\uacc4\uc0b0\uc2dc\uc791\uc77c\uc758", "\uc77c", "=", "\uacc4\uc0b0\uc885\ub8cc\uc77c\uc758", "\uc77c", "&", "\ub0a9\uc785\uc8fc\uae30\uc751\ub2f9\uc77c\uacfc", "\ub2e4\ub978", "\uacbd\uc6b0", "//", "if(calStartDD", "==", "calEndDD", "&&", "calStartDD", "!=", "pymntCyclDD)", "else", "{", "if(calStartDD", "<", "pymntCyclDD)", "{", "String", "oneMonthPrvDt", "=", "DateCoreUtils.getDateMonthBeforeString(1,", "interval.getPymntCyclCorrespdngDt());", "//", "\ub0a9\uc785\uc8fc\uae30\uc751\ub2f9\uc77c\uc758", "1\uac1c\uc6d4", "\uc804", "\uc77c\uc790", "=", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "ex)", "2\uc6d428\uc77c,", "3\uc6d431\uc77c", "if(oneMonthPrvDt.equals(interval.getCalStartDt()))", "{", "isEndofMonth", "=", "true;", "}", "}", "if(calStartDD", ">", "pymntCyclDD)", "{", "String", "oneMonthAfterDt", "=", "DateCoreUtils.getDateMonthAfterString(1,", "interval.getCalStartDt());", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c\uc758", "1\uac1c\uc6d4", "\ud6c4", "\uc77c\uc790", "=", "\ub0a9\uc785\uc8fc\uae30\uc751\ub2f9\uc77c", "ex)", "1\uc6d430\uc77c,", "2\uc6d428\uc77c", "if(oneMonthAfterDt.equals(interval.getPymntCyclCorrespdngDt()))", "{", "isEndofMonth", "=", "true;", "}", "}", "}", "boolean", "isChangeTarget", "=", "false;", "//", "2019-07-11", "if(!isTrmCalcnTrgt", "&&", "interval.getCalBaseTrmCnt()", "!=", "12)", "{", "isTrmCalcnTrgt", "=", "true;", "isChangeTarget", "=", "true;", "}", "List<CalculationType>", "newCalTpList", "=", "new", "ArrayList<CalculationType>();", "for(CalculationType", "calTp", ":", "interval.getCalTps())", "{", "//", "\uae30\uac04\uc0b0\ucd9c\ub300\uc0c1\uc5ec\ubd80\uac00", "false", "\uc774\uac70\ub098", "\uc774\uc790\uacc4\uc0b0\uc720\ud615\uad6c\ubd84\uc774", "121\uc774", "\uc544\ub2cc", "\uacbd\uc6b0", "if(!isTrmCalcnTrgt", "||", "!\"121\".equals(calTp.getIntCalTpCd()))", "{", "newCalTpList.add(calTp);", "}", "//", "\uae30\uac04\uc0b0\ucd9c\ub300\uc0c1\uc5ec\ubd80\uac00", "true", "\uc774\uac70\ub098", "\uc774\uc790\uacc4\uc0b0\uc720\ud615\uad6c\ubd84\uc774", "121\uc778", "\uacbd\uc6b0", "else", "{", "boolean", "isOneMonthBefore", "=", "_isDifferenceOneMonthBefore(interval.getCalStartDt(),", "interval.getCalEndDt());", "//", "\ud55c\ub2ec", "\ubbf8\ub9cc", "if(isOneMonthBefore)", "{", "CalculationType", "t1", "=", "calTp.clone();", "t1.setIntCalTpCd(\"111\");", "//", "\uc774\uc790\uacc4\uc0b0\uc720\ud615", "'111'", "-", "\uc6d4\ub2e8\uc704\uacc4\uc0b0\uc57d\uc815", "t1.setCalBaseTrmCnt(365);", "//", "\uacc4\uc0b0\uae30\uc900", "-", "365", "newCalTpList.add(t1);", "}", "//", "\uc6d4\ub9d0\uc77c\uc774", "\uc0c1\ud658\uc608\uc815\uc77c\uc778", "\uacbd\uc6b0", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "ex)", "2\uc6d428\uc77c,", "3\uc6d430\uc77c", "else", "if", "(isEndofMonth", "&&", "interval.getCalBaseTrmCnt()", "!=", "12){", "CalculationType", "t1", "=", "calTp.clone();", "t1.setIntCalTpCd(\"111\");", "//", "\uc774\uc790\uacc4\uc0b0\uc720\ud615", "'111'", "-", "\uc6d4\ub2e8\uc704\uacc4\uc0b0\uc57d\uc815", "t1.setCalBaseTrmCnt(365);", "//", "\uacc4\uc0b0\uae30\uc900", "-", "365", "newCalTpList.add(t1);", "}", "//", "\uc6d4\ub9d0\uc77c\uc5d0", "\uc2e0\uaddc", "\uccab\ud68c\ucc28", "\ub9d0\uc77c\uc774", "\uc0c1\ud658\uc608\uc815\uc77c\uc778", "\uacbd\uc6b0", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "ex)", "3\uc6d431\uc77c", "\uc2e0\uaddc", "30\uc77c", "\uc57d\uc815\ub0a9\uc785\uc77c", "\uc9c0\uc815\uc2dc", "\uc77c\uacc4\uc0b0", "else", "if", "(isEndofMonth", "&&", "interval.getCalBaseTrmCnt()", "==", "12", "&&", "in.getOpenAcctDt().equals(interval.getCalStartDt())", "&&", "calStartDD", ">", "agrmntPymntDD)", "{", "CalculationType", "t1", "=", "calTp.clone();", "t1.setIntCalTpCd(\"111\");", "//", "\uc774\uc790\uacc4\uc0b0\uc720\ud615", "'111'", "-", "\uc6d4\ub2e8\uc704\uacc4\uc0b0\uc57d\uc815", "t1.setCalBaseTrmCnt(365);", "//", "\uacc4\uc0b0\uae30\uc900", "-", "365", "newCalTpList.add(t1);", "}", "//", "\ud55c\ub2ec", "\uc774\ud6c4", "else", "{", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c\uc758", "1\uac1c\uc6d4", "\ud6c4", "\uc77c\uc790", "\uc0b0\ucd9c", "String", "oneMonthAfterStartDt", "=", "DateCoreUtils.getDateMonthAfterString(1,", "calTp.getCalStartDt());", "//", "\uc0b0\ucd9c\uc77c\uc790\uc758", "\uc804\uc77c", "String", "oneDayBeforeOneMonthAfter", "=", "DateCoreUtils.getDateDayBeforeString(1,", "oneMonthAfterStartDt);", "CalculationType", "t1", "=", "calTp.clone();", "t1.setCalEndDt(DateCoreUtils.getDateDayBeforeString(1,", "oneMonthAfterStartDt));", "//", "\uacc4\uc0b0\uc885\ub8cc\uc77c", "=", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "\ud55c\ub2ec", "\ud6c4\uc758", "\uc804\uc77c", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c1\uac1c\uc6d4\ud6c4", "<", "\ub0a9\uc785\uc8fc\uae30\uc751\ub2f9\uc77c", "&", "\uacc4\uc0b0\uc720\ud615\uc758", "\uacc4\uc0b0\uc885\ub8cc\uc77c", "<", "\uc0b0\ucd9c\uc77c\uc790\uc758", "\uc804\uc77c", "2019-07-24", "if(DateCoreUtils.isDt1AfterDt2(interval.getPymntCyclCorrespdngDt(),", "oneMonthAfterStartDt)", "&&", "DateCoreUtils.isDt1BeforeDt2(calTp.getCalEndDt(),", "oneDayBeforeOneMonthAfter))", "{", "//", "||", "TxTpDscdEnum.PARTIAL_REDEMPTION.getCode().equals(in.getTxTpDscd()))", "{", "t1.setIntCalTpCd(\"111\");", "//", "\uc774\uc790\uacc4\uc0b0\uc720\ud615", "'111'", "-", "\uc6d4\ub2e8\uc704\uacc4\uc0b0\uc57d\uc815", "t1.setCalBaseTrmCnt(365);", "//", "\uacc4\uc0b0\uae30\uc900", "-", "365", "newCalTpList.add(t1);", "}", "else", "{", "//", "121\uc774", "\ub9d0\uc77c\uc774\uba74", "\ub9d0\uc77c\uc758", "\uc804\uc77c\ub85c", "\uc2dc\uc791\uc77c", "\ubcc0\uacbd", "String", "endOfOneMonthAfter", "=", "\"\";", "//", "\uc775\uc6d4\uc758", "\ub9d0\uc77c", "boolean", "isEndOfMonth", "=", "false;", "if", "(\"121\".equals(t1.getIntCalTpCd())", "&&", "t1.getCalStartDt().equals(DateCoreUtils.getEndDateOfMonth(t1.getCalStartDt())))", "{", "isEndOfMonth", "=", "true;", "endOfOneMonthAfter", "=", "DateCoreUtils.getEndDateOfMonth(oneMonthAfterStartDt);", "t1.setCalEndDt(DateCoreUtils.getDateDayBeforeString(1,", "endOfOneMonthAfter));", "//", "\uc775\uc6d4\uc758", "\ub9d0\uc77c", "\uc804\uc77c", "}", "t1.setCalBaseTrmCnt(12);", "//", "\uacc4\uc0b0\uae30\uc900", "-", "12", "newCalTpList.add(t1);", "if(!isChangeTarget)", "{", "CalculationType", "t2", "=", "calTp.clone();", "t2.setIntCalTpCd(\"111\");", "//", "\uc774\uc790\uacc4\uc0b0\uc720\ud615", "'111'", "-", "\uc6d4\ub2e8\uc704\uacc4\uc0b0\uc57d\uc815", "t2.setCalStartDt(isEndOfMonth", "?", "endOfOneMonthAfter", ":", "oneMonthAfterStartDt);", "//", "121\uc774", "\ub9d0\uc77c\uc774\uba74", "\uc775\uc6d4\uc758", "\ub9d0\uc77c,", "\uc544\ub2c8\uba74", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "\ud55c\ub2ec", "\ud6c4", "t2.setCalBaseTrmCnt(365);", "//", "\uacc4\uc0b0\uae30\uc900", "-", "365", "newCalTpList.add(t2);", "if(IntCalDtlTpEnum.CHANGE_INTEREST_RATE.getCode().equals(in.getIntCalDtlTpDscd()))", "{", "interval.setNthCalTgtDscd(NthCalculationTargetDscdEnum.IGNORE_RECALCULATION.getCode());", "}", "}", "}", "}", "}", "}", "interval.setCalTps(newCalTpList);", "}"], "docstring_tokens": ["Change", "the", "status", "of", "arrangement", "into", "\"Applied\",", "while", "change", "product", "of", "arrangement", "based", "on", "product", "code", "input.", "Following", "additional", "arrangement", "information", "can", "be", "registered.", "1)", "Account", "number", "2)", "Whether", "if", "created", "mandatory", "condition", "automatically", "or", "not", "3)", "A", "list", "of", "arrangement", "level", "condition", "4)", "A", "list", "of", "arrangement", "relation", "information", "5)", "A", "list", "of", "arrangement", "extended", "attribute"]}
{"code_tokens": ["public", "String", "getApprovalId(String", "wflowInstncId)", "throws", "BizApplicationException", "{", "return", "_getCmApprvMDso().selectAprvlId(wflowInstncId);", "}"], "docstring_tokens": ["query", "approval", "identification"]}
{"code_tokens": ["public", "List<PdAdtlInfoOut>", "getAdtnlInfo(PdAdtlInfoIn", "in)", "throws", "BizApplicationException", "{", "List<PdAdtlInfoOut>", "out", "=", "new", "ArrayList<>();", "//", "\uc0c1\ud488\ucf54\ub4dc,", "\uc0c1\ud488\ubd80\uac00\uc815\ubcf4\uc720\ud615,", "\uc801\uc77c\uc77c\uc790\ub97c", "\uc785\ub825\ud558\uc5ec", "\ud574\ub2f9", "\uc0c1\ud488\uc5d0", "\uad00\ub828\ub41c", "\uc0c1\ud488\ubd80\uac00\uc815\ubcf4\ub97c", "\uc870\ud68c\ud568", "//", "Enter", "the", "product", "code,", "product", "additional", "information", "type", "code,", "//", "apply", "date", "and", "inquiry", "product", "additional", "information", "related", "to", "the", "//", "product", "PdAdditionalInfoListIn", "additionalIn", "=", "new", "PdAdditionalInfoListIn();", "additionalIn.setInstitutionId(pdPdM.getInstCd());", "additionalIn.setPdCd(pdPdM.getPdCd());", "additionalIn.setAdditionalInfoCd(in.getAdtnlInfoCd());", "additionalIn.setBaseDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyDt(),", "_getAplyTmString(in.getAplyTm())));", "List<PdAdditionalInfoOut>", "additionalOut", "=", "_getPdCore().getListAdditionalInfo(additionalIn);", "for(PdAdditionalInfoOut", "item", ":", "CollectionUtils.emptyIfNull(additionalOut))", "{", "PdAdtlInfoOut", "temp", "=", "new", "PdAdtlInfoOut();", "temp.setAdtnlInfoCd(item.getAdditionalInfoCd());", "temp.setPdRelStsCd(item.getPdRelationStatusCd());", "temp.setAdtnlInfoCntnt(item.getAdditionalInfoContent());", "temp.setAplyStartDt(PdUtil.parseDateToYYYYMMDD(item.getApplyStartDate()));", "temp.setAplyEndDt(PdUtil.parseDateToYYYYMMDD(item.getApplyEndDate()));", "temp.setAplyStartTm(PdUtil.parseDateToHHMMSS(item.getApplyStartDate()));", "temp.setAplyEndTm(PdUtil.parseDateToHHMMSS(item.getApplyEndDate()));", "out.add(temp);", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "additional", "information", "related", "to", "point.", "if", "there", "is", "no", "additional", "information", "code,", "all", "additional", "information", "inquire"]}
{"code_tokens": ["public", "String", "getInstParm(String", "instCd,", "String", "parmAtrbtNm", ")", "throws", "BizApplicationException", "{", "return", "_getInstParm(instCd,", "parmAtrbtNm);", "}"], "docstring_tokens": ["It", "query", "institution", "parameter", "attribute", "value", "simply.", "if", "want", "to", "get", "the", "value", "of", "attribute", "for", "each", "institution,", "use", "the", "method", "instead", "of", "instParmMngr.getInstParm", "method."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(DeptImpl", "dept){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtDeptSIO", "subInfo", "=", "getSubInfoCache(dept);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "security", "interest", "as", "a", "map."]}
{"code_tokens": ["public", "List<CaAsmItmIO>", "getAsmItmList(String", "instCd,", "String", "asmItmNm)throws", "BizApplicationException", "{", "List<CaAsmItmIO>", "outList", "=", "new", "ArrayList<CaAsmItmIO>();", "List<CaAmAsmItmMIO>", "asmItmList", "=_getAmAsmItmMDso().selectListByAsmItmNm(instCd,", "asmItmNm);", "for", "(CaAmAsmItmMIO", "asmItm", ":", "asmItmList)", "{", "outList.add(_setAsmItm(asmItm));", "}", "return", "outList;", "}"], "docstring_tokens": ["It", "inquiries", "assessment", "item", "information", "list."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(CustTxImpl", "custTxImpl)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtCustTxSIO", "subInfo", "=", "getSubInfoCache(custTxImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "Subsidiary", "Information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["public", "boolean", "isAcctgPrcsgPossiblityAtOnce()", "throws", "BizApplicationException", "{", "return", "_getAcctgCommUtil().isContainAttribute(\"AcctgPrcsngAtOnce\")?", "true", ":", "false;", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "It", "executes", "journalizing.", "*", "It", "supports", "to", "execute", "a", "list", "of", "multiple", "journalizing", "entries", "to", "be", "processed", "at", "once.", "*", "It", "is", "typically", "executed", "as", "post", "processing", "after", "online", "trnasaction.", "*", "This", "method", "provides", "the", "function", "to", "create", "general", "ledger,", "staff", "transaction", "accounting", "summation,", "and", "*", "journalizing", "entry", "in", "real", "time", "using", "accounting", "journalizing", "service", "after", "online", "service", "termination.", "*", "</pre>", "*", "@note", "This", "function", "should", "be", "performed", "in", "the", "accounting", "deferred", "processing", "service", "of", "the", "distributed", "environment.", "*", "@note", "If", "there", "isn't", "a", "input", "value,", "then", "it", "will", "process", "journalizing", "by", "internally", "inquiring", "data", "to", "be", "journaled.", "{@link", "#getListJournalProcessing()}", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\ud68c\uacc4\uc694\uc18c\uc758", "\ubd84\uac1c\ucc98\ub9ac\ub97c", "\uc2e4\ud589\ud558\ub294", "\uba54\uc18c\ub4dc\uc774\ub2e4.", "*", "\ub2e4\uac74\uc758", "\ubd84\uac1c\ucc98\ub9ac\ub300\uc0c1", "\ubaa9\ub85d\uc744", "\ud55c\uaebc\ubc88\uc5d0", "\ucc98\ub9ac\ud55c\ub2e4.", "*", "\uc77c\ubc18\uc801\uc73c\ub85c", "\uc628\ub77c\uc778\uac70\ub798", "\uc774\ud6c4", "\ud6c4\ucc98\ub9ac\ub85c", "\uc2e4\ud589\ub41c\ub2e4.", "*", "\uc628\ub77c\uc778\uc11c\ube44\uc2a4", "\uc885\ub8cc", "\ud6c4", "\ud6c4\ud589\ucc98\ub9ac", "\uc11c\ube44\uc2a4\ub97c", "\uc774\uc6a9\ud558\uc5ec", "\uc2e4\uc2dc\uac04\uc73c\ub85c", "\ucd1d\uacc4\uc815\uc6d0\uc7a5,", "\uc77c\uacc4\uc6d0\uc7a5,", "\ubd84\uac1c\ub0b4\uc5ed\uc744", "\uc0dd\uc131\ud55c\ub2e4.", "*", "</pre>", "*", "@note", "\ubcf8", "\uae30\ub2a5\uc740", "\ubd84\uc0b0\ud658\uacbd\uc758", "\ud68c\uacc4", "\ub514\ud37c\ub4dc\ucc98\ub9ac", "\uc11c\ube44\uc2a4\uc5d0\uc11c", "\uc218\ud589\ud574\uc57c", "\ud55c\ub2e4.", "*", "@note", "\uc785\ub825\uac12\uc774", "\uc5c6\uc744", "\uacbd\uc6b0,", "\ubd84\uac1c\ucc98\ub9ac\ub418\uc9c0", "\uc54a\uc740", "\ub370\uc774\ud130\ub97c", "\ub0b4\ubd80\uc801\uc73c\ub85c", "\uc870\ud68c\ud558\uc5ec", "\ubd84\uac1c\ucc98\ub9ac\ud55c\ub2e4.", "{@link", "#getListJournalProcessing()}"], "docstring_tokens": ["It", "inquires", "the", "attribute", "of", "accounting", "processing", "possibility", "all", "at", "once.", "If", "the", "attribute", "is", "Y,", "then", "accounting", "processing", "will", "be", "executed", "without", "post", "service", "handler", "when", "settlement", "component", "create", "arrangement", "transaction."]}
{"code_tokens": ["public", "CaTaxRtCdMgmtSvcSaveTaxRateCodeIn", "clone(){", "try{", "CaTaxRtCdMgmtSvcSaveTaxRateCodeIn", "object=", "(CaTaxRtCdMgmtSvcSaveTaxRateCodeIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Cust", "getCustByLoginIdNbr(String", "loginIdNbr,", "String", "actorUnqIdNbrTpCd,", "String", "actorUnqIdNbr)", "throws", "BizApplicationException", "{", "Cust", "cust", "=", "_getCustMngr().getCustByLoginIdNbr(loginIdNbr);", "if(cust", "==", "null){", "return", "null;", "}", "/**", "*", "Check", "unique", "id", "number", "*/", "if(!cust.getUniqueIdNbr(actorUnqIdNbrTpCd).equals(actorUnqIdNbr))", "{", "throw", "new", "BizApplicationException(\"AAPATE0045\",", "null);", "}", "return", "cust;", "}"], "docstring_tokens": ["Inquire", "customer", "object", "by", "login", "identification", "number."]}
{"code_tokens": ["public", "void", "activate(String", "arrIssmdaStsChngRsnCd,", "String", "stsChngRsnCntnt,", "List<ArrIssmdaXtnInfo>", "xtnInfoList,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "super.activate(arrIssmdaStsChngRsnCd,", "stsChngRsnCntnt,", "xtnInfoList,", "txDt,", "txSeqNbr);", "super.changeStatus(ArrIssmdaStsEnum.ACTIVATED.getValue(),", "stsChngRsnCntnt,", "ArrIssmdaStsChngRsnCoreEnum.cdNbr,", "arrIssmdaStsChngRsnCd,", "xtnInfoList,", "txDt,", "txSeqNbr);", "}"], "docstring_tokens": ["Change", "the", "status", "of", "arrangement", "into", "\"Active\"."]}
{"code_tokens": ["public", "Integer", "getListArrBasedOnStsHistoryCount(String", "deptId,", "ArrDeptRelEnum", "arrDeptRel,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrDeptRelImpl().getArrListBasedOnArrStatusHistoryCount(deptId,", "null,", "null,", "null,", "null,", "arrDeptRel,", "curArrSts,", "arrSts,", "inqryStartDt,", "inqryEndDt,", "false);", "}"], "docstring_tokens": ["Inquire", "total", "count", "of", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "of", "specific", "product", "hierarchy", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "other", "specific", "status.", "(Paging)", "Inquire", "modification", "arrangement", "of", "inquired", "arrangement", "if", "hasVrtnArr", "is", "true."]}
{"code_tokens": ["public", "static", "String", "getLastDateOfMonth(String", "date){", "String", "lastDateOfTheMonth", "=", "null;", "int", "daysOfTheMonth", "=", "DateCoreUtils.getDayOfMonth(date);", "lastDateOfTheMonth", "=", "date.substring(", "0,", "4)", "+", "date.substring(", "4,", "6)", "+", "String.valueOf(daysOfTheMonth);", "return", "lastDateOfTheMonth;", "}"], "docstring_tokens": ["It", "returns", "this", "the", "end", "of", "the", "month", "of", "the", "date", "of", "the", "date."]}
{"code_tokens": ["public", "MbrshpArrStsChngHstInqrySvcIn", "clone(){", "try{", "MbrshpArrStsChngHstInqrySvcIn", "object=", "(MbrshpArrStsChngHstInqrySvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "PntCndImpl", "getCnd(String", "cndCd)", "throws", "BizApplicationException", "{", "//", "\uc870\uac74\ucf54\ub4dc\ub9cc", "\uc785\ub825\ub41c", "\uacbd\uc6b0,", "\uc0c1\ud488\uc870\ud68c\uae30\uc900\uc77c\uc790\ub97c", "\uc785\ub825\ud558\uc5ec", "\uc720\ud6a8\uc870\uac74\uc870\ud68c", "//", "if", "the", "apply", "date", "was", "not", "inputed,", "use", "the", "product", "input", "date", "to", "//", "inquiry", "condition", "PntCndIn", "in", "=", "new", "PntCndIn();", "in.setCndCd(cndCd);", "in.setAplyDt(aplyDt);", "in.setAplyTm(aplyTm);", "//", "Return", "Output", "return", "getCnd(in);", "}"], "docstring_tokens": ["This", "Method", "create", "a", "condition", "object.", "condition", "information", "initialization.", "condition", "object", "has", "condition", "defined", "in", "benefit", "or", "common", "condition", "information."]}
{"code_tokens": ["public", "void", "modifyDueDiligenceInfo(ActorDueDlgncMdfyIn", "dueDlgncMdfyIn)", "throws", "BizApplicationException", "{", "getActor().modifyDueDiligenceInfo(dueDlgncMdfyIn);", "}"], "docstring_tokens": ["It", "modifies", "the", "actor's", "due", "diligence", "information.", "It", "terminates", "the", "registered", "information", "and", "register", "the", "new", "input", "information.", "It", "calculates", "the", "effective", "end", "date", "by", "the", "effective", "due", "diligence", "term", "defined", "in", "configuration."]}
{"code_tokens": ["public", "PdCndQuerySvcGetCndDetailIn", "clone(){", "try{", "PdCndQuerySvcGetCndDetailIn", "object=", "(PdCndQuerySvcGetCndDetailIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "FvrtAcctMgmtSvcGetFvrtAcctOut", "clone(){", "try{", "FvrtAcctMgmtSvcGetFvrtAcctOut", "object=", "(FvrtAcctMgmtSvcGetFvrtAcctOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<String>", "getListSrvcCdBySrvcPrflAtrbtNmAndCntnt(String", "instCd,", "String", "srvcPrflAtrbtNm,", "String", "srvcPrflCntnt)", "throws", "BizApplicationException{", "return", "_getSvInstSrvcPrflDDso().selectListBySrvcPrflAtrbtNmAndCntnt(_getCaCmnContext().getStandardInstCode(),", "instCd,", "srvcPrflAtrbtNm,", "srvcPrflCntnt);", "}"], "docstring_tokens": ["Get", "List", "of", "service", "code", "by", "service", "profile", "attribute", "name", "and", "service", "profile", "content."]}
{"code_tokens": ["public", "CaCdMgmtSvcCdInfoOut", "clone(){", "try{", "CaCdMgmtSvcCdInfoOut", "object=", "(CaCdMgmtSvcCdInfoOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(ActorCore", "actorCore,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getActorSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(ActorImpl)", "actorCore);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "detail", "information."]}
{"code_tokens": ["public", "String", "getBfName(String", "bnftCd)", "throws", "BizApplicationException", "{", "if", "(StringCoreUtils.isEmpty(bnftCd))", "{", "throw", "new", "BizApplicationException(\"AAPATE0067\",", "new", "String[]", "{", "\"bnftCd\"", "});", "}", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setInstCd(_getCmnContext().getInstCode());", "bfIn.setPdInfoDscd(PdInformationDscdCoreEnum.SERVICE.getValue());", "bfIn.setBfCd(bnftCd);", "bfIn.setAplyDt(_getCmnContext().getTxDate());", "//", "\uc0c1\ud488\uc870\ud68c", "Bf", "bf", "=", "getBf(bfIn);", "//", "Return", "\uc0c1\ud488\uba85", "return", "(bf", "==", "null)", "?", "\"\"", ":", "bf.getBfNm();", "}"], "docstring_tokens": ["Methods", "for", "inquiry", "benefit", "names"]}
{"code_tokens": ["public", "String", "getArrAgrmntChnlDscd(){", "return", "arrAgrmntChnlDscd;", "}"], "docstring_tokens": ["Inquire", "the", "channel", "code", "which", "the", "arrangement", "was", "agreed."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AssetTxImpl", "assetTx){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\ud5d8\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AsAssetTxSIO", "subInfo", "=", "getSubInfoCache(assetTx);", "//", "2.", "\ubcf4\ud5d8\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\ud5d8\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(AssetTxSubInfo.FIELDS.get(entry.getKey())", "==", "null)", "{", "continue;", "}", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "preferential", "claim", "as", "a", "map."]}
{"code_tokens": ["public", "CaScrnMgmtSvcGetScrnInfoOut", "clone(){", "try{", "CaScrnMgmtSvcGetScrnInfoOut", "object=", "(CaScrnMgmtSvcGetScrnInfoOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "terminate(ArrGrpChngIn", "arrGrpChngIn)", "throws", "BizApplicationException", "{", "_getArrGrpBasicImpl().modifyArrStatus(arrGrpChngIn,", "ArrGrpStsCoreEnum.TERMINATED.getValue(),", "this);", "_getArrGrpArrRelImpl().terminateAllArGrpRelation(this);", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "Register", "arrangement", "to", "the", "arrangement", "group.", "*", "</pre>", "*", "@seealso", "{@link", "#terminateArrGrpRel(ArrGrpCoreRelChngIn)}", ":", "Terminate", "the", "relation", "of", "arrangement", "and", "arrangement", "group.", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\uae30\ub4f1\ub85d\ub41c", "\uacc4\uc57d\uadf8\ub8f9\uc5d0", "\uacc4\uc57d\uc744", "\ub4f1\ub85d\ud55c\ub2e4.", "*", "</pre>", "*", "@seealso", "{@link", "#terminateArrGrpRel(ArrGrpCoreRelChngIn)}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "terminate", "status"]}
{"code_tokens": ["public", "String", "getTxTime()", "throws", "BizApplicationException", "{", "return", "_getContextHeader().getMsgDemandTmstmp().substring(8,", "14);", "}"], "docstring_tokens": ["Transaction", "time", "Inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "CaDstbTaskMIO", "createDstbTaskMaster(CaDstbTaskMIO", "in)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled()){", "logger.debug(\"CaDstbMgmtSvc", "createDstbTaskMaster", "inParam", "=>", "{}\",in);", "}", "CaDstbTaskMVO", "param", "=", "_getDstbTaskMIO(in);", "//", "param.setDstbFinYn(CCM01.NO);", "//_getDistributionUtil().setHeaderColumn(param);", "param.set(\"lastChngGuid\",", "_getCmnContext().getGuid());", "param.set(\"lastChngTmstmp\",", "_getCmnContext().getSystemTimestamp());", "param.set(\"lastChngId\",", "_getCmnContext().getStaffId());", "CaDstbTaskMVO", "out", "=", "_getDstbTask().createDstbTaskMaster(param);", "return", "_getDstbTaskMIO(out);", "}"], "docstring_tokens": ["Create", "distribution", "task", "information."]}
{"code_tokens": ["public", "AtrbtTpEnum", "getAttributeType()", "throws", "BizApplicationException", "{", "return", "(stdAtrbt", "==", "null)", "?", "null", ":", "AtrbtTpEnum.getEnum(stdAtrbt.getAtrbtTpCd());", "}"], "docstring_tokens": ["Get", "attribute", "type"]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "DeptImpl", "deptImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtDeptSIO", "subInfo", "=", "getSubInfoCache(deptImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "subInfo.get(atrbtNm);", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["Get", "a", "extended", "information", "of", "Subsidiary", "Information(CTI)"]}
{"code_tokens": ["public", "void", "removeAssetXtnInfo(AssetXtnInfoEnum", "assetXtnInfoEnum,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\uc815\ubcf4\uad00\ub9ac\ubc29\ubc95", "\ud310\ub2e8", "//", "1.", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if(_getTblXtnAtrbt().isExtendWayEav(XtnTableEnum.AS_ASSET_M.getValue(),", "assetXtnInfoEnum.getValue()))", "{", "super.removeAssetXtnInfoByEav(assetXtnInfoEnum.getValue(),", "txDt,", "txSeqNbr);", "}", "//", "2.", "\ubcf4\uc870\uba85\uc138", "else", "{", "_getAssetSubInfoBiz().saveSubInfo(assetXtnInfoEnum.getValue(),", "null,", "txDt,", "txSeqNbr,", "this);", "}", "}"], "docstring_tokens": ["Remove", "a", "specific", "extended", "information", "of", "the", "asset."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"PartialWithdrawal\":", "_checkInput(arrSrvcTpCd,arrCndActionRequiredValue);", "_doPartialWithdrawalAction(arrSrvcTpCd,arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["static", "boolean", "isValid(char", "charValue){", "for", "(AmOperandPrefix", "enumObject:", "values()){", "if(enumObject.getCharValue()", "==", "charValue)", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "StaffTxMgmtSvcJournalSrchListOut", "clone(){", "try{", "StaffTxMgmtSvcJournalSrchListOut", "object=", "(StaffTxMgmtSvcJournalSrchListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcJournalSrchOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcJournalSrchOut>(tblNm.size());", "for(", "bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcJournalSrchOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcJournalSrchOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(ValCmptnMthdDscdEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "StaffTxMgmtSvcListOut", "clone(){", "try{", "StaffTxMgmtSvcListOut", "object=", "(StaffTxMgmtSvcListOut)super.clone();", "if", "(", "this.tblNm==", "null", ")", "object.tblNm", "=", "null;", "else{", "java.util.List<bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcItemOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcItemOut>(tblNm.size());", "for(", "bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcItemOut", "item", ":", "tblNm", "){", "clonedList.add(", "(bankware.corebanking.accounting.cashaccounting.service.dto.StaffTxMgmtSvcItemOut)item.clone());", "}", "object.tblNm", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "DeptImpl", "deptImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtDeptSIO", "subInfo", "=", "getSubInfoCache(deptImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "subInfo.get(atrbtNm);", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "asset", "thing."]}
{"code_tokens": ["public", "boolean", "isRequiredDoc(String", "docId,", "String", "clHrarcyCd)", "throws", "BizApplicationException", "{", "for", "(String", "listCd", ":", "getListCdList())", "{", "List<Doc>", "docList", "=", "_getDocMngr().getListDocByClassification(listCd,", "clHrarcyCd);", "for", "(Doc", "doc", ":", "docList){", "if", "(doc.getDocId().equals(docId))", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "if", "specific", "document", "is", "required", "for", "the", "condition."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "ArrRealCoreImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "IValueObject", "subInfo", "=", "_getSubInfoCache((ArrRealImpl)", "arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "as", "a", "map."]}
{"code_tokens": ["public", "OthrCltrlMgmtSvcSaveIn", "clone(){", "try{", "OthrCltrlMgmtSvcSaveIn", "object=", "(OthrCltrlMgmtSvcSaveIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "custId,", "ArrCustRelEnum", "arrCustRelEnum,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId,", "arrCustRelEnum,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "null,", "curArrSts,", "arrSts,", "inqryStartDt,", "inqryEndDt);", "}"], "docstring_tokens": ["Inquire", "specific", "department", "own", "(as", "accounting", "department)", "arrangements", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status.", "Current", "Status", "/", "Base", "Status", "/", "Inquiry", "Period(Start", "Date", "/", "End", "Date)", "Approved", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "approved", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Applied", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "applied", "within", "1/1", "~", "3/1", "and", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired.", "Active", "/", "Active", "/", "1/1", "~", "3/1", ":", "Inquire", "arrangement", "activated", "within", "1/1", "~", "3/1", "and", "still", "activated", "currently.", "Arrangement", "whose", "status", "was", "changed", "into", "other", "status", "on", "1/1", "is", "not", "inquired."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(CaRoleAthrtyAplyRngEnum", "item", ":", "CaRoleAthrtyAplyRngEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "IpctMgmtSvcGetIpctTxEntryListOut", "clone(){", "try{", "IpctMgmtSvcGetIpctTxEntryListOut", "object=", "(IpctMgmtSvcGetIpctTxEntryListOut)super.clone();", "if", "(", "this.ipctMgmtSvcGetIpctTxEntryList==", "null", ")", "object.ipctMgmtSvcGetIpctTxEntryList", "=", "null;", "else{", "java.util.List<bankware.corebanking.common.importantcertificate.service.dto.IpctMgmtSvcGetIpctTxEntryList>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.common.importantcertificate.service.dto.IpctMgmtSvcGetIpctTxEntryList>(ipctMgmtSvcGetIpctTxEntryList.size());", "for(", "bankware.corebanking.common.importantcertificate.service.dto.IpctMgmtSvcGetIpctTxEntryList", "item", ":", "ipctMgmtSvcGetIpctTxEntryList", "){", "clonedList.add(", "(bankware.corebanking.common.importantcertificate.service.dto.IpctMgmtSvcGetIpctTxEntryList)item.clone());", "}", "object.ipctMgmtSvcGetIpctTxEntryList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrRealCore", "getArrRealCoreByAcctNbr(String", "acctNbr,", "String", "acctNbrDstpCd)", "throws", "BizApplicationException", "{", "ArrRealGetIn", "arrRealGetIn", "=", "new", "ArrRealGetIn();", "arrRealGetIn.setArrIdNbr(acctNbr);", "arrRealGetIn.setAcctNbrDstpCd(acctNbrDstpCd);", "arrRealGetIn.setArrExtrnlIdNbrTpCd(ArrExtrnlIdNbrTpCoreEnum.ACCOUNT_NUMBER.getValue());", "return", "getArrRealCore(arrRealGetIn);", "}"], "docstring_tokens": ["Inquire", "real", "arrangement", "using", "account", "number", "and", "nth", "number."]}
{"code_tokens": ["public", "CaArrCndCntrlClassItmListOut", "clone(){", "try{", "CaArrCndCntrlClassItmListOut", "object=", "(CaArrCndCntrlClassItmListOut)super.clone();", "if", "(", "this.tblList==", "null", ")", "object.tblList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrCndCntrlClassItmOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrCndCntrlClassItmOut>(tblList.size());", "for(", "bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrCndCntrlClassItmOut", "item", ":", "tblList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrCndCntrlClassItmOut)item.clone());", "}", "object.tblList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AprslCore", "aprslCore,", "Integer", "aprslThingSeqNbr)", "throws", "BizApplicationException", "{", "return", "_getAprslThingSubInfoBiz().getMapSubInfo((AprslImpl)aprslCore,", "aprslThingSeqNbr);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "request", "as", "a", "map."]}
{"code_tokens": ["public", "List<CaCustGradeCdMgmtIO>", "getListBasic(CaCustGradeCdMgmtIO", "custGradeCdMgmtIO)", "throws", "BizApplicationException", "{", "List<CaCustGradeCdMgmtIO>", "custGradeCdOutList", "=", "null;", "if(custGradeCdMgmtIO", "!=", "null)", "{", "//check", "required", "inputs", "if(StringUtils.isEmpty(custGradeCdMgmtIO.getInstCd())){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "String[]", "{\"@instCd\"});", "}", "List<CaAtCustGradeMIO>", "atCustGradeMgmtdMgmtIOList", "=", "_getAtCustGradeMDso().selectBasicList(custGradeCdMgmtIO.getInstCd(),", "CCM01.YES);", "if(atCustGradeMgmtdMgmtIOList", "!=", "null", "&&", "!atCustGradeMgmtdMgmtIOList.isEmpty())", "{", "custGradeCdOutList", "=", "new", "ArrayList<CaCustGradeCdMgmtIO>();", "for(CaAtCustGradeMIO", "atCustGradeMgmtdMgmtIOItem:", "atCustGradeMgmtdMgmtIOList)", "{", "CaCustGradeCdMgmtIO", "custGradeCdOut", "=", "new", "CaCustGradeCdMgmtIO();", "custGradeCdOut.setCustGradeKndTpCd(atCustGradeMgmtdMgmtIOItem.getCustGradeKndTpCd());", "custGradeCdOut.setCustGradeCd(atCustGradeMgmtdMgmtIOItem.getCustGradeCd());", "custGradeCdOut.setCustGradeCdCntnt(atCustGradeMgmtdMgmtIOItem.getCustGradeCdCntnt());", "custGradeCdOut.setCustGradeClBaseCntnt(atCustGradeMgmtdMgmtIOItem.getCustGradeClBaseCntnt());", "custGradeCdOutList.add(custGradeCdOut);", "}", "}", "}", "return", "custGradeCdOutList;", "}"], "docstring_tokens": ["Inquire", "customer", "basic", "grade", "code", "list", "of", "which", "basicValYn", "is", "'Y'."]}
{"code_tokens": ["public", "String", "getPdCndValAsJson()", "throws", "BizApplicationException", "{", "if", "(this.isMock()||(getArrangementCore().isStructure()", "&&", "this.isComplex()))", "{", "return", "\"\";", "}", "String", "listVal", "=", "\"[\";", "List<ListCndVal>", "listCndValList", "=", "_getPdCndListCodeListValueWithName();", "for", "(ListCndVal", "listCndVal", ":", "listCndValList)", "{", "listVal", "=", "listVal.concat(\"{\").concat(_makeKeyValue(LIST_CD,listCndVal.getListCd())).concat(\",\");", "//", "List", "Code", "listVal", "=", "listVal.concat(_makeKeyValue(LIST_CD_NAME,listCndVal.getListNm())).concat(\"},\");", "//", "List", "Name", "}", "//", "make", "the", "list", "value", "json", "array", "if", "(listVal.length()", "==", "1)", "{", "return", "null;", "}", "else", "{", "listVal", "=", "listVal.substring(0,listVal.length()-1).concat(\"]\");", "}", "String", "ValString", "=", "\"{\\\"\".concat(LIST_CD_LIST).concat(\"\\\":\").concat(listVal);", "if", "(!StringCoreUtils.isEmpty(getBsicVal()))", "{", "ValString", "=", "ValString.concat(\",\").concat(_makeKeyValue(BASIC_LIST_CD,getBsicVal()));", "}", "ValString", "=", "ValString.concat(\"}\");", "return", "ValString;", "}"], "docstring_tokens": ["This", "method", "get", "the", "product", "condition", "value", "information", "as", "JSON", "string."]}
{"code_tokens": ["public", "KrRoadAddrOut", "getKrRoadAddr(String", "addrId)", "throws", "BizApplicationException", "{", "CmKrRoadAddrMIO", "cmKrRoadAddrMIO", "=", "_getCmKrRoadAddrMDso().select(AddrHrarcyEnum.KOREA_ROAD_NAME_ADDRESS_CODE.getValue(),", "addrId);", "return", "_getKrRoadAddrOut(cmKrRoadAddrMIO);", "}"], "docstring_tokens": ["It", "inquiries", "the", "Korea", "Road", "address."]}
{"code_tokens": ["public", "List<CdDtlIO>", "getCodeNbrDetail(CdNbrInfoIO", "in)", "throws", "BizApplicationException", "{", "//", "Get", "the", "code", "master", "information", "CdNbrInfoIO", "cdMstOut", "=", "_getCodeMasterInformation(in);", "String", "cdNbrTpCd", "=", "cdMstOut.getCdNbrTpCd();", "String", "instCd", "=", "in.getInstCd();", "if(StringCoreUtils.isEmpty(instCd))", "{", "instCd", "=", "_getCmnContextCore().getInstCode();", "}", "cdMstOut.setInstCd(instCd);", "//", "Get", "the", "code", "detail", "information", "List<CdDtlIO>", "cdDtlOutList", "=", "_getCdDtl().getCodeDetail(cdMstOut);", "//", "Trnaslate", "the", "language", "if(!CCM01.XTN_CD.equals(cdNbrTpCd))", "{", "String", "engCdNm", "=", "null;", "String", "cdNm", "=", "null;", "for(int", "i", "=", "0;", "i", "<", "cdDtlOutList.size();", "i++)", "{", "CdDtlIO", "cdDtlOut", "=", "cdDtlOutList.get(i);", "if(logger.isDebugEnabled()){", "logger.debug(\"cdNbrTpCd", "=>", "{}\",cdNbrTpCd);", "logger.debug(\"cdDtlOutList", "=>", "{}\",cdDtlOut);", "}", "if", "(CCM01.EXTRNL_CD.equals(cdNbrTpCd))", "{", "engCdNm", "=", "_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "instCd.concat(cdDtlOut.getCdNbr().concat(cdDtlOut.getCd())),", "CCM01.LNG_ENG);", "cdNm", "=", "_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "instCd.concat(cdDtlOut.getCdNbr().concat(cdDtlOut.getCd())));", "}", "else", "if", "(CCM01.STD_SBST_CD.equals(cdNbrTpCd))", "{", "engCdNm", "=", "_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "cdMstOut.getUpCdNbr().concat(cdDtlOut.getCd()),", "CCM01.LNG_ENG);", "cdNm", "=", "_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "cdMstOut.getUpCdNbr().concat(cdDtlOut.getCd()));", "}", "else", "{", "engCdNm", "=", "_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "cdDtlOut.getCdNbr().concat(cdDtlOut.getCd()),", "CCM01.LNG_ENG);", "cdNm", "=", "_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "cdDtlOut.getCdNbr().concat(cdDtlOut.getCd()));", "}", "cdDtlOut.setEngCdNm(engCdNm);", "cdDtlOut.setCdNm(cdNm);", "cdDtlOutList.set(i,", "cdDtlOut);", "}", "}", "return", "cdDtlOutList;", "}"], "docstring_tokens": ["Query", "the", "list", "of", "Code", "information", "that", "meet", "the", "search", "condition."]}
{"code_tokens": ["protected", "AptMarketPriceOut", "getAptInfo(String", "aprslId)throws", "BizApplicationException", "{", "return", "_getAsAprslAptMarketPriceRDso().selectAptInfo(_getCmnContext().getInstCode(),", "aprslId);", "}"], "docstring_tokens": ["It", "inquires", "apartment", "market", "price", "information."]}
{"code_tokens": ["public", "BnkVrtlAcctRegtSvcIn", "clone(){", "try{", "BnkVrtlAcctRegtSvcIn", "object=", "(BnkVrtlAcctRegtSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(SndRcvTrgtDscdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "List<ArrReal>", "getListArrBasedOnStsHistory(String", "custId,", "ArrCustRelEnum", "arrCustRelEnum,", "String", "bizDscd,", "String", "pdTpCd,", "String", "pdTmpltCd,", "ArrStsEnum", "curArrSts,", "ArrStsEnum", "arrSts,", "String", "inqryStartDt,", "String", "inqryEndDt)", "throws", "BizApplicationException", "{", "return", "_getArrCustRelQryBizImpl().getArrRealListBasedOnArrStatusHistory(custId,", "arrCustRelEnum,", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "null,", "curArrSts,", "arrSts,", "inqryStartDt,", "inqryEndDt);", "}"], "docstring_tokens": ["Inquire", "specific", "customer", "own", "(as", "main", "contractor)", "arrangements", "of", "specific", "product", "hierarchy", "whose", "status", "changed", "into", "specific", "status", "within", "inquiry", "period", "and", "currently", "in", "another", "specific", "status."]}
{"code_tokens": ["public", "BillCtgryCashMgmtSvcGetCrncyCashHldStsOut", "clone(){", "try{", "BillCtgryCashMgmtSvcGetCrncyCashHldStsOut", "object=", "(BillCtgryCashMgmtSvcGetCrncyCashHldStsOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaStdAtrbtMgmtSvcGetStdAtrbtOut", "clone(){", "try{", "CaStdAtrbtMgmtSvcGetStdAtrbtOut", "object=", "(CaStdAtrbtMgmtSvcGetStdAtrbtOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrCndChngMdfctnCndIn", "clone(){", "try{", "ArrCndChngMdfctnCndIn", "object=", "(ArrCndChngMdfctnCndIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ActorElctrncAddrOut>", "getListElctrncAddrInfo()", "throws", "BizApplicationException", "{", "return", "getActor().getListElctrncAddrInfo();", "}"], "docstring_tokens": ["Inquire", "the", "actor's", "electronic", "address", "information", "list.", "It", "inquires", "the", "effective", "information", "on", "transaction", "date."]}
{"code_tokens": ["public", "String", "getLastValidTxDt(StTxMIO", "in,", "ArrReal", "arr)", "throws", "BizApplicationException", "{", "switch(ArrTxKndEnum.getEnum(_getArrTxCustom().getArrTxKnd((ArrRealCore)arr)))", "{", "case", "ARR_TX_DEMAND:", "return", "_getStTxDemandMDso().selectLastValidTxDt(in);", "case", "ARR_TX_INTERNAL:", "return", "_getStTxIntrnlMXtnDso().selectLastValidTxDt(in);", "case", "ARR_TX_TEMPRARY:", "return", "_getStTxTmpryMXtnDso().selectLastValidTxDt(in);", "default", ":", "return", "_getStTxMXtnDso().selectLastValidTxDt(in);", "}", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "inquiring", "the", "last", "valid", "transaction", "date."]}
{"code_tokens": ["public", "List<ArrIntRt>", "getArrDepositInterestRate(Arrangement", "arr,", "ArrSrvcEnum", "arrSrvcTp,", "String", "prcsDt)", "throws", "BizApplicationException{", "String", "arrIntRtTpCd", "=", "PdIntRtStrctrClCdEnum.DEPOSIT_NORMAL.getValue();", "String", "arrSrvcTpCd", "=", "null;", "if(arrSrvcTp", "!=", "null){", "arrSrvcTpCd", "=", "arrSrvcTp.getValue();", "}", "ArrIntRtIn", "arrIntRtIn", "=", "new", "ArrIntRtIn();", "arrIntRtIn.setArr(arr);", "arrIntRtIn.setArrSrvcTpCd(arrSrvcTpCd);", "arrIntRtIn.setPdIntRtStrctrClCd(arrIntRtTpCd);", "arrIntRtIn.setIsGenerate(false);", "arrIntRtIn.setPrcsDt(prcsDt);", "return", "super.getListArrIntRtCore(arrIntRtIn);", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "deposit", "normal", "interest", "rate", "applied", "to", "the", "arrangement", "from", "the", "open", "date", "to", "the", "maturity", "date."]}
{"code_tokens": ["public", "void", "setCupldTxCntnt(String", "cupldTxCntnt){", "this.cupldTxCntnt=", "cupldTxCntnt;", "}"], "docstring_tokens": ["Set", "coupled", "transaction", "content."]}
{"code_tokens": ["public", "List<RoleClRIO>", "getListRoleClassificationRelation(String", "instCd,", "String", "roleId,", "String", "clHrarcyId,", "String", "clId)", "throws", "BizApplicationException", "{", "StringCoreUtils.checkStringParm(instCd,", "\"@\".concat(CCM03.INST_CD));", "List<CmRoleClRIO>", "cmRoleClList", "=", "_getCmRoleClRDso().selectRoleList(instCd,", "roleId,", "clHrarcyId,", "clId);", "List<RoleClRIO>", "roleClrList", "=", "new", "ArrayList<RoleClRIO>();", "for(CmRoleClRIO", "cmRoleClRIO", ":", "cmRoleClList)", "{", "roleClrList.add(_getRoleClRIO(cmRoleClRIO));", "}", "return", "roleClrList;", "}"], "docstring_tokens": ["It", "inquires", "role", "classification", "relation", "list"]}
{"code_tokens": ["public", "void", "saveSubInfo(Map<String,", "String>", "subInfoMap,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(subInfoMap", "==", "null", "||", "subInfoMap.isEmpty()){", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ArrSubInfoKndEnum", "subInfoKnd", "=", "arrRealImpl.getSubInfoKnd();", "//", "2.", "\uacc4\uc57d\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(arrRealImpl);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"arrId\",", "arrRealImpl.getArrId());", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "save", "cache", "arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(),", "subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "String", "instCd", "=", "\"\";", "if(supplInfoVal.get(CCM03.CD)", "!=", "null)", "{", "instCd", "=", "supplInfoVal.get(CCM03.CD).toString();", "}", "if(logger.isDebugEnabled())", "{", "logger.debug(\"#########", "CaInstMgmt", "checkCode", "in", "instCd", ":", "{}\",", "instCd);", "}", "CaCmInstMIO", "cmInstMIO", "=", "new", "CaCmInstMIO();", "cmInstMIO.setInstCd(instCd);", "if(null", "==", "_getCmInstMDso().select(cmInstMIO))", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"#########", "CaInstMgmt", "checkCode", "false", "is", "null", "!!!\");", "}", "}", "else", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"#########", "CaInstMgmt", "checkCode", "true", ":", "{}\",", "cmInstMIO.getFieldValues());", "}", "}", "return", "true;", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(CaDstbTaskChngStatusCdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "CaCmStdAtrMIO", "select(CaCmStdAtrMIO", "cmStdAtrMIO)", "{", "return", "_getCmStdAtrM().select(cmStdAtrMIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "BalVrfctnMsmtchSvcIn", "clone(){", "try{", "BalVrfctnMsmtchSvcIn", "object=", "(BalVrfctnMsmtchSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AssetTxCore", "assetTx)", "throws", "BizApplicationException", "{", "return", "_getAssetTxSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AssetTxImpl)assetTx);", "}"], "docstring_tokens": ["Inquire", "a", "extended", "information", "of", "Subsidiary", "Information(CTI)."]}
{"code_tokens": ["public", "String", "getFaxNbr(){", "return", "faxNbr;", "}"], "docstring_tokens": ["Inquire", "department", "fax", "number", "from", "basic", "information."]}
{"code_tokens": ["public", "java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocTreeDtlOut>", "getChildren(){", "return", "children;", "}"], "docstring_tokens": ["Inquire", "children", "arrangement", "structure", "including", "mandatory", "and", "optional."]}
{"code_tokens": ["public", "String", "getCndGrpTmpltCd(){", "return", "cndGrpTmpltCd;", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "group", "template", "code."]}
{"code_tokens": ["protected", "List<AtStaffDlgtnRoleDIO>", "getListStaffDelegation(String", "dlgtnDeptId,", "String", "dlgtnStaffId)", "throws", "BizApplicationException", "{", "//", "Set", "search", "condition", "List<AtStaffDlgtnRoleDIO>", "atStaffDlgtnRoleDIOList", "=", "_getAtStaffDlgtnRoleDDso().selectListDlgtnRole(_getCmnContext().getInstCode(),", "dlgtnDeptId,", "dlgtnStaffId,", "StaffDlgtnStsEnum.ACTIVE.getValue(),", "_getCmnContext().getTxDate());", "return", "atStaffDlgtnRoleDIOList;", "}", "//", "//", "/**", "//", "*", "Get", "staff", "delegation", "info", "list", "//", "*", "//", "*", "@param", "actorBsicInfoIO", "(required)", "StaffDlgtnRoleIO", "information(institution", "code,", "staff", "id,", "role", "id,", "start", "date)", "//", "*", "@return", "List<StaffDlgtnRoleIO>", "staff", "delegation", "info", "list", "//", "*", "@throws", "BizApplicationException", "//", "*/", "//", "@BxmCategory(logicalName=\"Get", "staff", "delegation", "info", "list\")", "//", "protected", "List<StaffDlgtnRoleIO>", "getStaffDelegationDynamicList(StaffDlgtnRoleIO", "in)", "throws", "BizApplicationException", "{", "//", "//", "//", "List<StaffDlgtnRoleIO>", "outList", "=", "null;", "//", "//", "//", "if(in", "!=", "null)", "{", "//", "//", "//", "List<AtStaffDlgtnRoleDIO>", "atStaffDlgtnRoleDIOList", "=", "_getAtStaffDlgtnRoleDDso().selectDynamic(in.getInstCd(),", "in.getStaffId(),", "in.getRoleId(),", "in.getEfctvStartDt());", "//", "//", "//", "if(atStaffDlgtnRoleDIOList", "!=", "null", "&&", "!atStaffDlgtnRoleDIOList.isEmpty())", "{", "//", "//", "//", "outList", "=", "new", "ArrayList<StaffDlgtnRoleIO>();", "//", "//", "//", "for(AtStaffDlgtnRoleDIO", "atStaffDlgtnRoleDIOItem:", "atStaffDlgtnRoleDIOList)", "{", "//", "StaffDlgtnRoleIO", "staffDlgtnRoleIO", "=", "new", "StaffDlgtnRoleIO();", "//", "//", "//", "staffDlgtnRoleIO.setChngRsnCntnt(atStaffDlgtnRoleDIOItem.getChngRsnCntnt());", "//", "staffDlgtnRoleIO.setDeptId(atStaffDlgtnRoleDIOItem.getDeptId());", "//", "staffDlgtnRoleIO.setDlgtnDeptId(atStaffDlgtnRoleDIOItem.getDlgtnDeptId());", "//", "staffDlgtnRoleIO.setDlgtnStaffId(atStaffDlgtnRoleDIOItem.getDlgtnStaffId());", "//", "staffDlgtnRoleIO.setEfctvEndDt(atStaffDlgtnRoleDIOItem.getEfctvEndDt());", "//", "staffDlgtnRoleIO.setEfctvStartDt(atStaffDlgtnRoleDIOItem.getEfctvStartDt());", "//", "staffDlgtnRoleIO.setInstCd(atStaffDlgtnRoleDIOItem.getInstCd());", "//", "staffDlgtnRoleIO.setRoleId(atStaffDlgtnRoleDIOItem.getRoleId());", "//", "staffDlgtnRoleIO.setStaffId(atStaffDlgtnRoleDIOItem.getStaffId());", "//", "//", "//", "outList.add(staffDlgtnRoleIO);", "//", "}", "//", "}", "//", "}", "//", "return", "outList;", "//", "}"], "docstring_tokens": ["Inquire", "staff", "delegation", "role", "information", "list", "that", "matches", "the", "input", "institution", "code,", "department", "identification", "and", "role", "identification."]}
{"code_tokens": ["public", "boolean", "isExistArrPrtnrRelation(String", "arrPrtnrRelCd,", "String", "prtnrId,", "String", "prtnrTpCd,", "String", "prtnrDtlTpCd,", "String", "baseDt)", "throws", "BizApplicationException", "{", "return", "_getArrPrtnrRelBiz().isExistArrPrtnrRelation(arrPrtnrRelCd,", "prtnrId,", "prtnrTpCd,", "prtnrDtlTpCd,", "baseDt,", "this);", "}"], "docstring_tokens": ["Inquire", "existence", "of", "arrangement/partner", "relation."]}
{"code_tokens": ["public", "String", "getPdTypeName()", "throws", "BizApplicationException", "{", "/**", "*", "DataCache", "START", "*/", "String", "uKey", "=", "PdUtil", ".concatenateKeys(Arrays.asList(getInstCd(),", "pdPdM.getPdInfoDscd(),", "getBizDscd(),", "getPdTpCd()));", "//", "Get", "cache", "data", "String", "pdTypeName", "=", "_getPdDataCacheManager().getCacheData(DataCacheCoreConfig.PD_PD_TYP_M_CACHE,", "uKey);", "if", "(pdTypeName", "==", "null)", "{", "//", "\ud3ec\uc778\ud2b8\uc720\ud615\uc870\ud68c", "pdTypeName", "=", "_getPdCore().getPdTypeName(getInstCd(),", "getBizDscd(),", "getPdTpCd());", "//", "Put", "cache", "data", "_getPdDataCacheManager().saveCache(DataCacheCoreConfig.PD_PD_TYP_M_CACHE,", "uKey,", "pdTypeName);", "}", "//", "Return", "name", "return", "pdTypeName;", "}"], "docstring_tokens": ["This", "method", "inquire", "product", "type", "name"]}
{"code_tokens": ["public", "CaDstbSystemColumnIO", "clone(){", "try{", "CaDstbSystemColumnIO", "object=", "(CaDstbSystemColumnIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "getManualEntryTotalCount(ManualEntrySrchIn", "in)", "throws", "BizApplicationException", "{", "return", "_getAcManualEntryTxMDso().selectTotalCount(_setAcManualEntrySelectListIn(in));", "}"], "docstring_tokens": ["It", "inquires", "the", "total", "count", "of", "manual", "entry", "processing", "result."]}
{"code_tokens": ["public", "void", "isValidByPdCode(", "String", "pdCd", ")", "throws", "BizApplicationException", "{", "_getSrvcRstrctnDtlImpl().isValidByPdCode(pdCd);", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "product", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0014)."]}
{"code_tokens": ["public", "boolean", "isAlive()", "{", "switch", "(ArrGrpStsCoreEnum.getEnum(getArrGrpStsCd()))", "{", "case", "CANCELED:", "case", "TERMINATED:", "return", "false;", "default:", "return", "true;", "}", "}"], "docstring_tokens": ["Check", "if", "arrangement", "group", "is", "in", "alive", "status", "Alive", "status", ":", "Every", "status", "except", "\"Cancelled\"", "and", "\"Terminated\"", "ref", ":", "{@link", "ArrGrpStsEnum}"]}
{"code_tokens": ["public", "BalMgmtPIO", "getBalMgmtP(String", "bizDscd,String", "pdTpCd,String", "pdTmpltCd,String", "pdCd,String", "amtTpCd,String", "balTpCd)", "throws", "BizApplicationException{", "String", "key", "=", "_getKeyString(pdCd,amtTpCd,balTpCd,", "null);", "BalMgmtPIO", "out", "=", "_getStDataCacheManager().getCacheData(DataCacheCoreConfig.BALANCE_PARAMETER_CACHE,", "key);", "if", "(out", "==", "null){", "//", "Inquiry", "Balance", "Management", "Parameter", "from", "DB", "StPdBalMgmtPIO", "stPdBalMgmtPIO", "=", "_getStPdBalMgmtPDso().selectByAmtTp(_getStPdBalMgmtPIO(bizDscd,pdTpCd,pdTmpltCd,pdCd,amtTpCd,balTpCd));", "out", "=", "(stPdBalMgmtPIO", "==", "null)?", "null", ":", "_getBalMgmtPIO(stPdBalMgmtPIO);", "if", "(out", "!=", "null)", "_getStDataCacheManager().saveCache(DataCacheCoreConfig.BALANCE_PARAMETER_CACHE,key,out);", "}else{", "if", "(logger.isDebugEnabled()){", "logger.debug(\"getBalMgmtP", "from", "memory", ":", "{}\",out);", "}", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "provides", "balance", "management", "parameter", "information."]}
{"code_tokens": ["public", "void", "modifyDueDiligenceInfo(ActorDueDlgncMdfyIn", "dueDlgncMdfyIn)", "throws", "BizApplicationException", "{", "//", "\uc561\ud130", "\ud655\uc7a5\uc815\ubcf4", "\ubd84\ub9ac", "List<ActorXtnAtrbtRgstIn>", "actorXtnInfoList", "=", "_getActorSubInfoBiz().getListActorXtnInfoRgst(this,", "dueDlgncMdfyIn.getDueDlgncXtnInfoList());", "//", "\uc561\ud130", "\ud655\uc7a5\uc815\ubcf4", "\uc800\uc7a5", "this.saveListXtnInfo(actorXtnInfoList);", "//", "\ud655\uc778\uc758\ubb34", "\ud655\uc7a5\uc815\ubcf4", "\ubd84\ub9ac", "separate", "subsidiary", "information", "from", "extend", "information", "Map<String,", "String>", "subInfoMap", "=", "_getActorDueDlgncSubInfoBiz().getMapSubInfoCrtn(dueDlgncMdfyIn.getDueDlgncXtnInfoList());", "//", "\ud655\uc778\uc758\ubb34", "EAV", "\uc800\uc7a5", "save", "extend", "information", "super.modifyDueDiligenceInfoByEav(dueDlgncMdfyIn,", "null);", "//", "\ud655\uc778\uc758\ubb34", "CTI", "\uc800\uc7a5", "save", "subsidiary", "information", "_getActorDueDlgncSubInfoBiz().saveMapSubInfo(this,", "dueDlgncMdfyIn.getDueDlgncDscd(),", "dueDlgncMdfyIn.getDueDlgncSeqNbr(),", "subInfoMap);", "}"], "docstring_tokens": ["It", "modifies", "the", "actor's", "due", "diligence", "information.", "It", "terminates", "the", "registered", "information", "and", "register", "the", "new", "input", "information.", "It", "calculates", "the", "effective", "end", "date", "by", "the", "effective", "due", "diligence", "term", "defined", "in", "configuration."]}
{"code_tokens": ["public", "DocPrntIO", "printTemporaryDocIssue(DocPrntIO", "docPrntIO)", "throws", "BizApplicationException", "{", "return", "_transferDocIssue(docPrntIO);", "}", "/**", "*", "<div", "class='en'>", "*", "@description", "*", "<pre>", "*", "It", "registers", "status", "change", "history", "of", "issued", "document.", "*", "</pre>", "*", "@seealso", "*", "</div>", "*", "*", "<div", "class='ko'>", "*", "@description", "*", "<pre>", "*", "\ubc1c\uae09\ubb38\uc11c\uc758", "\ubc1c\uae09\uc0c1\ud0dc\ubcc0\uacbd", "\uc774\ub825\uc744", "\ub4f1\ub85d\ud55c\ub2e4.", "*", "</pre>", "*", "@seealso", "*", "</div>", "*", "*", "@param", "docCore", "(required)", ":", "document", "object", "*", "@param", "stylesheetDoc", "(required)", ":", "stylesheet", "document", "object", "*", "@param", "docIssueIO", "(required)", ":", "document", "information", "for", "issue", "*", "@return", "*", "@throws", "BizApplicationException", "*", "@since", "3.0.0", "*", "@example", "*", "<pre>", "*", "DocIssueIO", "docIssueIO", "=", "_getDocIssueBsic().getInformation(instCd,", "docIssueId);", "*", "DocCore", "docCore", "=", "getDocCore(instCd,", "docIssueIO.getDocId());", "*", "DocCore", "stylesheetDoc", "=", "null;", "*", "if(isDocId(docIssueIO.getDocStylesheetUrl()))", "{", "*", "stylesheetDoc", "=", "getDocCore(docIssueIO.getDocStylesheetUrl());", "*", "}"], "docstring_tokens": ["It", "prints", "temporary", "issued", "document."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(AsmArrRelStsCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["private", "BfCndTestSvcOut", "getCmpsCnd(BfCndTestSvcIn", "in)", "throws", "BizApplicationException", "{", "//", "Set", "input", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "//", "BF", "\uac1d\uccb4\uc0dd\uc131", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "//", "\uc870\uac74\uac1d\uccb4", "\uc0dd\uc131", "BfCnd", "bfCnd", "=", "bf.getCnd(in.getCndCd());", "List<CmpsCnd>", "output", "=", "bfCnd.getCmpsCnd();", "BfCndTestSvcOut", "out", "=", "new", "BfCndTestSvcOut();", "if", "(CollectionUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "method", "inquire", "all", "composing", "condition", "list", "in", "input", "value", "complex", "structure", "identity.", "if", "simple", "condition,", "throws", "Exception.", "DataCache", "has", "been", "applied."]}
{"code_tokens": ["public", "DtoClassAtrbt", "getStandardDtoClassAttribute()", "{", "return", "stdDtoClassAtrbt;", "}"], "docstring_tokens": ["Get", "standard", "DTO", "class", "attribute"]}
{"code_tokens": ["public", "List<CaXpExtrnlIntrfcMsgInfoDIO>", "selectMsgFldLvlValList(CaXpExtrnlIntrfcMsgInfoDIO", "xpExtrnlIntrfcMsgInfoDIO)", "{", "return", "_getCaXpExtrnlMsgInfoD().selectMsgFldLvlValList(xpExtrnlIntrfcMsgInfoDIO);", "}"], "docstring_tokens": ["It", "gets", "level", "value", "of", "fields", "in", "one", "message."]}
{"code_tokens": ["public", "List<CaArArrPsbkMsgMIO", ">", "selectList(String", "instCd){", "return", "_getCaArArrPsbkMsgM().selectList(instCd);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "Integer", "getNthNbr()", "{", "return", "nthNbr;", "}"], "docstring_tokens": ["Get", "child", "arrangement", "sequence", "number.", "This", "number", "is", "created", "when", "the", "arrangement", "is", "created", "as", "child", "of", "the", "other", "arrangement", "(", "mother", "arrangement", ")"]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AtrlImpl", "atrlImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\uc561\ud130\uc5ed\ud560\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtAtrlSIO", "subInfoIO", "=", "getSubInfoCache(atrlImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtAtrlSIO();", "subInfoIO.setAtrlId(atrlImpl.getAtrlId());", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "insert", "_getAtAtrlSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(atrlImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "update", "_getAtAtrlSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "atrlImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "interface", "VO"]}
{"code_tokens": ["public", "boolean", "checkCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "//", "query", "data", "return", "!(_getDcDocMDso().select(null,", "String.valueOf(supplInfoVal.get(CCM03.CD)),", "null)", "==", "null);", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter"]}
{"code_tokens": ["protected", "void", "register(CustImpl", "custImpl,", "AtCustCrtfctAplctnDIO", "atCustCrtfctAplctnDIO)", "throws", "BizApplicationException", "{", "AtCustMIO", "atCustMIO", "=", "custImpl.getCustBsicCache();", "if", "(atCustCrtfctAplctnDIO", "==", "null)", "{", "return;", "}", "atCustCrtfctAplctnDIO.setInstCd(atCustMIO.getInstCd());", "atCustCrtfctAplctnDIO.setCustId(atCustMIO.getCustId());", "if", "(StringUtils.isEmpty(atCustCrtfctAplctnDIO.getAplctnDt()))", "{", "atCustCrtfctAplctnDIO.setAplctnDt(_getCmnContext().getTxDate());", "}", "if", "(StringUtils.isEmpty(atCustCrtfctAplctnDIO.getAplctnHms()))", "{", "atCustCrtfctAplctnDIO.setAplctnHms(_getCmnContext().getTxTime());", "}", "//", "get", "report", "sequence", "number", "atCustCrtfctAplctnDIO.setAplctnSeqNbr(_getAtCustCrtfctAplctnDDso().selectNextAplctnSeqNbr(atCustMIO.getInstCd(),", "atCustCrtfctAplctnDIO.getAplctnDt()));", "//", "insert", "customer", "certificate", "application", "information", "_checkPKValidation(atCustCrtfctAplctnDIO);", "_getAtCustCrtfctAplctnDDso().insert(atCustCrtfctAplctnDIO);", "}"], "docstring_tokens": ["It", "registers", "or", "modifies", "the", "customer", "grade", "code."]}
{"code_tokens": ["public", "CustCmphInqrySvcGetCustCntctPntOut", "clone(){", "try{", "CustCmphInqrySvcGetCustCntctPntOut", "object=", "(CustCmphInqrySvcGetCustCntctPntOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "aprslSubInfoMap,", "AprslCore", "aprslCore)", "throws", "BizApplicationException", "{", "_getAprslSubInfoBiz().saveMapSubInfo(aprslSubInfoMap,", "(AprslImpl)", "aprslCore);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "String", "getSaleEndTime()", "{", "if", "(pdPdM", "==", "null)", "{", "return", "CPD01.END_TM;", "}", "//", "Return", "output", "return", "(pdPdM.getSaleEndDt()", "==", "null)", "?", "CPD01.END_TM", ":", "PdUtil.parseDateToHHMMSS(pdPdM.getSaleEndDt());", "}"], "docstring_tokens": ["This", "Method", "inquire", "sale", "end", "time", "of", "benefit"]}
{"code_tokens": ["public", "String", "getLstVal(CndClassIn", "in)", "throws", "BizApplicationException", "{", "String", "out", "=", "PdCndAplyTmDscdCoreEnum.AM.getValue();", "if", "(logger.isDebugEnabled())", "{", "logger.debug(", "\"DailyLimitCountImpl", "getBnftGrpRngLimitVal", "out", ":", "{},", "tntInstId", ":", "{},", "custId", ":", "{},", "remainingCount", ":", "{}\",", "new", "Object[]", "{", "out,", "in.getTntInstId(),", "in.getCustId(),", "out", "});", "}", "return", "out;", "}"], "docstring_tokens": ["A", "method", "that", "compares", "the", "value", "of", "a", "condition", "class", "to", "the", "value", "of", "a", "list", "condition."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,", "ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"ArrangementConditionTest\":", "case", "\"IntraRealTmTrnsfr\":", "case", "\"InterRealTmTrnsfrOut\":", "_doMoneyTransferAction(arrSrvcTpCd,arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "condition", "related", "actions", "for", "input", "service", "according", "to", "product", "condition", "value", "or", "negotiated", "value.", "For", "example,", "the", "\"Required", "document\"", "condition", "has", "the", "product", "required", "document", "type", "for", "loan", "application", "service.", "The", "arrangement", "condition", "action", "validate", "the", "required", "document", "type", "is", "received", "(presented)", "or", "not.", "Another", "example", "is", "the", "deposit", "open", "service,", "\"Interest", "capitalization", "YN\"", "condition", "dose", "the", "action", "to", "make", "an", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date.", "This", "method", "performs", "the", "function", "of", "performing", "product", "condition", "management", "rule", "registered", "on", "system.", "Implementation", "of", "condition", "management", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "according", "to", "the", "arrangement", "condition", "class", "implementation", "method,", "and", "the", "implemented", "arrangement", "condition", "class", "should", "specify", "the", "process", "target", "class", "by", "condition.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", "Caution", ":", "-", "To", "define", "condition", "management", "rule", "by", "service", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", ">", "Select", "service"]}
{"code_tokens": ["public", "UndrExmntnAprvlSvcAprvlInfoIn", "clone(){", "try{", "UndrExmntnAprvlSvcAprvlInfoIn", "object=", "(UndrExmntnAprvlSvcAprvlInfoIn)super.clone();", "if", "(", "this.aplctnInfo==null", ")", "object.aplctnInfo", "=", "null;", "else", "object.aplctnInfo", "=", "(bankware.corebanking.loan.open.service.dto.LnAgrmntOpenSvcAplctnIn)this.aplctnInfo.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getDeptId()", "{", "return", "tlrDtlIO.getDeptId();", "}"], "docstring_tokens": ["Department", "number", "inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "java.lang.String", "getArrMtrtyDt(){", "return", "arrMtrtyDt;", "}"], "docstring_tokens": ["Inquire", "maturity", "date", "of", "arrangement."]}
{"code_tokens": ["public", "boolean", "isOceanbase()", "throws", "BizApplicationException", "{", "DbmsVendorNmEnum", "vender", "=", "DbmsVendorNmEnum.getByValue(getDbmsVendorName());", "if", "(vender", "==", "DbmsVendorNmEnum.OCEANBASE)", "return", "true;", "else", "return", "false;", "}"], "docstring_tokens": ["It", "checks", "whether", "DBMS", "is", "Oceanbase"]}
{"code_tokens": ["public", "List<InterestCalculationSection>", "apply(ApplyInterestCalculationSectionExceptionIn", "in,", "List<InterestCalculationSection>", "intCalIntervals)", "throws", "BizApplicationException", "{", "int", "advPymntDayCnt", "=", "in.getAdvPymntDayCnt();", "String", "maturityDt", "=", "in.getMaturityDt();", "String", "advPymntAplyMthdDscd", "=", "in.getAdvPymntAplyMthdDscd();", "//", "\uc9c0\uc5f0\uc774\uc790", "\uba74\uc81c", "Option", "CalculationType", "delayInt", "=", "new", "CalculationType();", "delayInt.setInstCd(in.getInstCd());", "delayInt.setIntCalTpCd(\"212\");", "delayInt.setIntCalTgt(false);", "//", "\uc120\ub0a9\uc77c\uc218", "\uc801\uc6a9", "\uc57d\uc815\uc774\uc790", "Option", "(\uc794\uc561\uc5f0\uccb4)", "CalculationType", "agrmntBalOvrduInt", "=", "new", "CalculationType();", "agrmntBalOvrduInt.setInstCd(in.getInstCd());", "agrmntBalOvrduInt.setIntCalTpCd(\"152\");", "//", "\uc120\ub0a9\uc77c\uc218", "\uc801\uc6a9", "\uc57d\uc815\uc774\uc790", "Option", "(\uc0c1\ud658\uc6d0\uae08)", "CalculationType", "agrmntPrncplInt", "=", "new", "CalculationType();", "agrmntPrncplInt.setInstCd(in.getInstCd());", "agrmntPrncplInt.setIntCalTpCd(\"159\");", "for", "(InterestCalculationSection", "interval", ":", "intCalIntervals)", "{", "List<CalculationType>", "typeList", "=", "new", "ArrayList<>();", "for", "(CalculationType", "type", ":", "interval.getCalTps())", "{", "int", "intCalTp", "=", "Integer.parseInt(type.getIntCalTpCd());", "//", "\uacc4\uc0b0\uc720\ud615", "String", "calStartDt", "=", "type.getCalStartDt();", "String", "calEndDt", "=", "type.getCalEndDt();", "CalculationType", "option", "=", "null;", "if", "(intCalTp", "==", "201", "||", "intCalTp", "==", "202", "||", "intCalTp", "==", "203)", "{", "//", "\uc9c0\uc5f0\uc774\uc790", "\uba74\uc81c", "option", "=", "delayInt;", "}", "else", "if", "(!AdvPymntAplyMthdDscdEnum.ONLY_APPLY_FOR_DELAY_INT.getCode()", ".equals(advPymntAplyMthdDscd))", "{", "//", "\uc120\ub0a9\uc77c\uc218\uc801\uc6a9\ubc29\ubc95\uad6c\ubd84", "=", "\uc9c0\uc5f0\uc774\uc790", "\uad6c\uac04\ub9cc", "\uc801\uc6a9\uc778", "\uacbd\uc6b0", "\uc794\uc561\uc5f0\uccb4\uc774\uc790", "\uc120\ub0a9", "\uc801\uc6a9\ud558\uc9c0", "\uc54a\uc74c", "if", "(intCalTp", "==", "302)", "{", "//", "\uc794\uc561\uc5f0\uccb4\uc774\uc790", "\uc57d\uc815\uae08\ub9ac", "\uc801\uc6a9", "(\uc0c1\ud658\uc6d0\uae08)", "option", "=", "agrmntPrncplInt;", "}", "else", "if", "(intCalTp", "==", "301", "||", "intCalTp", "==", "309)", "{", "//", "\uc794\uc561\uc5f0\uccb4\uc774\uc790", "\uc57d\uc815\uae08\ub9ac", "\uc801\uc6a9", "(\uc794\uc561)", "option", "=", "agrmntBalOvrduInt;", "}", "}", "if", "(option", "!=", "null", "&&", "advPymntDayCnt", ">", "0)", "{", "String", "advPymntPossibleDt", "=", "calEndDt;", "//", "\ub9cc\uae30\uc77c", "\ud6c4", "\uc120\ub0a9\uc77c\uc218", "\uc801\uc6a9", "\uc548\ud568", "if", "(intCalTp", "==", "301", "||", "intCalTp", "==", "302", "||", "intCalTp", "==", "309)", "{", "String", "calStartPrvDt", "=", "DateCoreUtils.getDateDayBeforeString(1,", "calStartDt);", "advPymntPossibleDt", "=", "DateCoreUtils.max(calStartPrvDt,", "DateCoreUtils.min(maturityDt,", "calEndDt));", "}", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "~", "\uc120\ub0a9\uc77c\uc218\uc801\uc6a9\uac00\ub2a5\uc77c", "\uc77c\uc218\uc0b0\ucd9c", "int", "calDayCnt", "=", "DateCoreUtils.getPeriodBetweenString(calStartDt,", "advPymntPossibleDt)", "+", "1;", "int", "aplyDayCnt", "=", "Math.min(advPymntDayCnt,", "calDayCnt);", "//", "\uc801\uc6a9\uc77c\uc218", "//", "\uacc4\uc0b0\uc2dc\uc791\uc77c", "~", "\uc801\uc6a9\uc120\ub0a9\uc77c\uc218", "\uacbd\uacfc", "\ud6c4\uc758", "\uc77c\uc790\uc0b0\ucd9c", "String", "aplyEndDt", "=", "DateCoreUtils.getDateDayAfterString(aplyDayCnt", "-", "1,", "calStartDt);", "//", "\ubd84\ud560", "\uc801\uc6a9", "typeList.addAll(CalculationTypeUtil.split(type,", "calStartDt,", "aplyEndDt,", "option));", "advPymntDayCnt", "-=", "aplyDayCnt;", "}", "else", "{", "typeList.add(type);", "}", "}", "//", "\ubcc0\uacbd\ub41c", "\uc720\ud615", "\ubc18\uc601", "interval.setCalTps(typeList);", "}", "//", "\uc120\ub0a9\uc77c\uc218", "\ubc18\uc601", "in.setAdvPymntDayCnt(advPymntDayCnt);", "return", "intCalIntervals;", "}"], "docstring_tokens": ["This", "method", "Applies", "the", "initiated", "arrangement,", "and", "change", "the", "arrangement", "status", "to", "applied."]}
{"code_tokens": ["public", "List<AddrDtlIO>", "getListGuGun(AddrHrarcyEnum", "addrHrarcyEnum,", "String", "cityPrvncCd)", "throws", "BizApplicationException", "{", "List<AddrDtlIO>", "addrDtlIOList", "=", "new", "ArrayList<AddrDtlIO>();", "if", "(StringUtils.isEmpty(cityPrvncCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@cityPrvncCd\"", "});", "}", "switch", "(addrHrarcyEnum)", "{", "case", "KOREA_ROAD_NAME_ADDRESS_CODE:", "addrDtlIOList", "=", "_getKoreaGuGunList(cityPrvncCd);", "break;", "default:", "break;", "}", "return", "addrDtlIOList;", "}"], "docstring_tokens": ["It", "inquiries", "gu", "gun", "address", "list."]}
{"code_tokens": ["public", "List<CndGrpTmpltCndTmpltRel>", "getListCndGrpTmpltCndTmpltRel(String", "tntInstId,", "String", "cndGrpTmpltTpCd)", "throws", "BizApplicationException", "{", "return", "this.getListCndGrpTmpltCndTmpltRel(tntInstId,", "cndGrpTmpltTpCd", ",", "_getCmnContext().getTxDate()", "+", "_getCmnContext().getTxTime());", "}"], "docstring_tokens": ["Methods", "for", "querying", "the", "relationship", "between", "condition", "group", "template", "and", "condition", "template"]}
{"code_tokens": ["public", "List<ArrIssmdaTmpltIO>", "getListArrIssmdaTmplt(String", "instCd,", "String", "arrIssmdaTpCd)", "throws", "BizApplicationException", "{", "List<ArrIssmdaTmpltIO>", "arrIssmdaTempltList", "=", "new", "ArrayList<ArrIssmdaTmpltIO>();", "List<ArArrIssmdaTmpltMIO>", "arrIssmdaTmpltMIOList", "=", "new", "ArrayList<ArArrIssmdaTmpltMIO>();", "if", "(StringCoreUtils.isEmpty(instCd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]{\"@instCd\"});", "}", "//", "2020.11.12", "//", "\uacc4\uc57d\ubc1c\uae09\ub9e4\uccb4\ud15c\ud50c\ub9bf\uc740", "\uac1c\ubcc4\uae30\uad00\uc758", "\uc815\ubcf4\ub9cc\uc744", "\uc870\ud68c", "arrIssmdaTmpltMIOList", "=", "_getArArrIssmdaTmpltMDso().selectListByTpCd(instCd,", "StringCoreUtils.isEmpty(arrIssmdaTpCd)", "?", "null", ":", "arrIssmdaTpCd);", "for", "(ArArrIssmdaTmpltMIO", "arArrIssmdaTmpltMIO", ":", "arrIssmdaTmpltMIOList)", "{", "ArrIssmdaTmpltIO", "arrIssmdaTmplt", "=", "_setArrIssmdaTmpltIO(arArrIssmdaTmpltMIO);", "List<ArrIssmdaPrflAtrbt>", "prflAtrbtList", "=", "_getArrIssmdaPrflCore().getListArrIssmdaProfile(instCd,", "arArrIssmdaTmpltMIO.getArrIssmdaTmpltId());", "arrIssmdaTmplt.setPrflAtrbtList(prflAtrbtList);", "arrIssmdaTempltList.add(arrIssmdaTmplt);", "}", "return", "arrIssmdaTempltList;", "}"], "docstring_tokens": ["Get", "the", "list", "of", "issued", "media", "template."]}
{"code_tokens": ["public", "int", "isContentValid(AtrbtTpEnum", "atrbtTpcd,", "AtrbtVldtnWayEnum", "atrbtVldtnWayCd,", "String", "vldtnRule,", "String", "atrbtCntnt)", "throws", "BizApplicationException", "{", "//", "Type", "validation", "if", "(!_getAtrbt().isValidType(atrbtTpcd,", "atrbtCntnt))", "{", "return", "AtrbtVldRsltEnum.VLD_NO_T.getValue();", "}", "//", "Check", "the", "contents", "validation", "according", "to", "validation", "way", "if", "(atrbtVldtnWayCd", "!=", "null)", "{", "int", "result", "=", "_getAtrbt().isValidContent(atrbtTpcd,", "atrbtVldtnWayCd,", "vldtnRule,", "atrbtCntnt);", "if", "(result", "!=", "AtrbtVldRsltEnum.VLD_OK.getValue())", "{", "return", "result;", "}", "}", "return", "AtrbtVldRsltEnum.VLD_OK.getValue();", "}"], "docstring_tokens": ["validate", "by", "variable", "type", "and", "validation", "rule."]}
{"code_tokens": ["public", "void", "registerBalanceVerificationMsmtchCntnt(List<BalVrfctnMsmtchOut>", "balVrfctnMsmtchOutList)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"", "#############", "registerBalanceVerificationMsmtchCntnt", ":", "{}\",", "balVrfctnMsmtchOutList);", "}", "for", "(BalVrfctnMsmtchOut", "balVrfctnMsmtchOut", ":", "balVrfctnMsmtchOutList)", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"", "#############", "registerBalanceVerificationMsmtchCntnt", "loop", ":", "{}\",", "balVrfctnMsmtchOut);", "}", "//\uc785\ub825\ud56d\ubaa9", "\uccb4\ud06c", "_checkInputValue(balVrfctnMsmtchOut);", "//DBIO", "VO\ub85c", "\ubcc0\ud658", "AcBalVrfctnMsmtchDIO", "acBalVrfctnMsmtchDIO", "=", "new", "AcBalVrfctnMsmtchDIO();", "_setAcBalVrfctnMsmtchDIO(acBalVrfctnMsmtchDIO,", "balVrfctnMsmtchOut);", "//\uc794\uc561\ub300\uc0ac\ubd88\uc77c\uce58\uad00\ub9ac", "(\ubd88\uc77c\uce58\ub0b4\uc6a9", "\uac31\uc2e0)", "_getAcBalVrfctnMsmtchDDso().updateMsmtchCntnt(acBalVrfctnMsmtchDIO);", "}", "}"], "docstring_tokens": ["This", "method", "provide", "the", "function", "that", "inquires", "balance", "verification", "result", "by", "accounting", "item", "code."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvCd,ArrActionRequiredValue", "arrActionRequiredValue)", "throws", "BizApplicationException", "{", "//", "\uace0\uac1d\ub808\ubca8\ud55c\ub3c4\uad00\ub9ac\uc5ec\ubd80\uac00", "\"Y\"\uc778", "\uacbd\uc6b0", "\uc870\uac74\ud589\ub3d9(\ud55c\ub3c4\uc870\uac74)", "\ubc0f", "\ud55c\ub3c4\uc794\uc561\uad00\ub9ac\ub97c", "\uc704\ud574", "\ud68c\uc6d0\uacc4\uc57d\uc744", "\ubaa8\uacc4\uc57d\uc73c\ub85c", "\uc784\uc2dc\uc9c0\uc815\ud55c\ub2e4.", "if(_isTargetArrForSettingMthrArr(arrActionRequiredValue))", "{", "this.setMthrArrId(_getArrCustCoreMngr().getMembershipArrCore(this.getMainArrCustId()).getArrId());", "}", "super.doServiceAction(arrSrvCd,", "arrActionRequiredValue);", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "specific", "service", "type.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "AssetRegionClIO", "getAssetRegionClassification(AssetRegionClIO", "in)", "throws", "BizApplicationException", "{", "AsAssetRegionClMIO", "input", "=", "new", "AsAssetRegionClMIO();", "input.setInstCd(_getCmnContextCore().getInstCode());", "input.setAddrHrarcyCd(in.getAddrHrarcyCd());", "input.setAddrId(in.getAddrId());", "input.setAssetAddrRegionClCrtrCd(in.getAssetAddrRegionClCrtrCd());", "if(in.getAplyStartDt()", "==", "null)", "{", "input.setAplyStartDt(_getCmnContextCore().getTxDate());", "}", "else", "{", "input.setAplyStartDt(in.getAplyStartDt());", "}", "AssetRegionClIO", "out", "=", "new", "AssetRegionClIO();", "AsAssetRegionClMIO", "asAssetRegionClMIO", "=", "_AsAssetRegionClMDso().selectMax(input);", "if(asAssetRegionClMIO", "!=", "null){", "out.setAddrHrarcyCd(asAssetRegionClMIO.getAddrHrarcyCd());//", "set", "[\uc8fc\uc18c\uccb4\uacc4\ucf54\ub4dc]", "out.setAddrId(asAssetRegionClMIO.getAddrId());//", "set", "[\uc8fc\uc18c\uc2dd\ubcc4\uc790]", "out.setAssetAddrRegionClCrtrCd(asAssetRegionClMIO.getAssetAddrRegionClCrtrCd());//", "set", "[\uc790\uc0b0\uc9c0\uc5ed\ubd84\ub958\uae30\uc900\ucf54\ub4dc]", "out.setAplyStartDt(asAssetRegionClMIO.getAplyStartDt());//", "set", "[\uc801\uc6a9\uc2dc\uc791\ub144\uc6d4\uc77c]", "out.setAplyEndDt(asAssetRegionClMIO.getAplyEndDt());//", "set", "[\uc801\uc6a9\uc885\ub8cc\ub144\uc6d4\uc77c]", "out.setAssetAddrRegionClCd(asAssetRegionClMIO.getAssetAddrRegionClCd());//", "set", "[\uc790\uc0b0\uc9c0\uc5ed\ubd84\ub958\ucf54\ub4dc]", "}", "return", "out;", "}"], "docstring_tokens": ["It", "inquiries", "asset", "region", "classification", "information."]}
{"code_tokens": ["public", "List<CaCoaDtlIO>", "getListManualEntryCoa(CaCoaDtlIO", "coaDtlIO,", "Integer", "pageNum,", "Integer", "pageCount)", "throws", "BizApplicationException", "{", "if(pageNum", "==", "null", "||", "pageNum", "==", "0)", "pageNum", "=", "1;", "if(pageCount", "==", "null", "||", "pageCount", "==", "0)", "pageCount", "=", "1000;", "Integer", "pageOffset", "=", "PaginationUtils.getPgOffset(pageNum,", "pageCount);", "if(logger.isDebugEnabled()){", "logger.debug(\"##", "pageOffset:{}\",", "pageOffset);", "logger.debug(\"##", "pageCount:{}\",", "pageCount);", "}", "/**", "*", "Inquiry", "Coa", "List", "*/", "List<CaAcCoaMIO>", "listAcCoaMIO", "=", "_getAcCoaMDso().selectManualEntryListCoa(_getAcCoaMIO(coaDtlIO),pageOffset,", "pageCount);", "/**", "*", "Result", "set", "*/", "List<CaCoaDtlIO>", "outs", "=", "new", "ArrayList<CaCoaDtlIO>();", "for", "(CaAcCoaMIO", "acCoaMIO", ":", "listAcCoaMIO)", "{", "outs.add(_getManualEntryCoaDtlIO(acCoaMIO));", "}", "return", "outs;", "}"], "docstring_tokens": ["[Get", "the", "list", "of", "manual", "entry", "accounting", "item", "code]", "Inquire", "the", "list", "of", "manual", "entry", "accounting", "item", "code.", "Manual", "entry", "accounting", "item", "code", "is", "a", "accounting", "item", "code", "processing", "financial", "transaction", "that", "do", "not", "manage", "balances", "in", "each", "business", "team.", "It", "supports", "to", "inquire", "the", "list", "of", "accounting", "item", "code", "that", "is", "registered", "as", "a", "real", "title", "accounting", "and", "manual", "entry", "permission", "is", "EXCLUSIVE", "or", "COMMON."]}
{"code_tokens": ["public", "CaInstSrvcIO", "getInstService(String", "instCd,", "String", "srvcCd)", "throws", "BizApplicationException", "{", "//", "Mandatory", "Input", "if", "(StringUtils.isEmpty(instCd))", "instCd", "=", "_getCaCmnContext().getInstCode();", "if", "(StringUtils.isEmpty(srvcCd))", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]{\"@srvcCd\"});", "CaInstSrvcIO", "instSrvc", "=", "_getInstitutionService(instCd,", "srvcCd);", "//", "Check", "service", "status", "if(instSrvc", "!=", "null", "&&", "instSrvc.getSrvc()", "!=", "null", "&&", "!CaCSV01.SRVC_STS_ACTIVE.equals(instSrvc.getSrvc().getSrvcStsCd()))", "{", "throw", "new", "BizApplicationException(\"AAPCME0186\",", "new", "Object[]{srvcCd,", "instSrvc.getSrvc().getSrvcStsCd()});", "}", "//", "\uc11c\ube44\uc2a4", "\ub2e4\uad6d\uc5b4", "\uac80\uc99d", "if(CbbApplicationContext.isTestServer())", "{", "if", "(StringUtils.isEmpty(_getTrnsfrLng().getTransferLanguage(srvcCd)))", "{", "throw", "new", "BizApplicationException(\"AAPCME0177\",", "new", "Object[]", "{", "srvcCd", "});", "}", "}", "return", "instSrvc;", "}"], "docstring_tokens": ["Inquiry", "institution", "service."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AprslCore", "aprslCore,", "Integer", "aprslThingSeqNbr)", "throws", "BizApplicationException", "{", "_getAprslThingSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AprslImpl)", "aprslCore,", "aprslThingSeqNbr);", "}"], "docstring_tokens": ["Save", "an", "insurance", "subsidiary", "information."]}
{"code_tokens": ["public", "PrtnrDeptSrchSvcTreeListOut", "clone(){", "try{", "PrtnrDeptSrchSvcTreeListOut", "object=", "(PrtnrDeptSrchSvcTreeListOut)super.clone();", "if", "(", "this.children==", "null", ")", "object.children", "=", "null;", "else{", "java.util.List<bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut>(children.size());", "for(", "bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut", "item", ":", "children", "){", "clonedList.add(", "(bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut)item.clone());", "}", "object.children", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CnsltnSrchSvcOut", "clone(){", "try{", "CnsltnSrchSvcOut", "object=", "(CnsltnSrchSvcOut)super.clone();", "if", "(", "this.cnsltnList==", "null", ")", "object.cnsltnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.underexamination.query.service.dto.CnsltnSrchSvcGetSts>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.underexamination.query.service.dto.CnsltnSrchSvcGetSts>(cnsltnList.size());", "for(", "bankware.corebanking.underexamination.query.service.dto.CnsltnSrchSvcGetSts", "item", ":", "cnsltnList", "){", "clonedList.add(", "(bankware.corebanking.underexamination.query.service.dto.CnsltnSrchSvcGetSts)item.clone());", "}", "object.cnsltnList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CmCdMIO", "select(CmCdMIO", "cmCdMIO)", "{", "return", "_getCmCdM().selectByCondition(cmCdMIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "CaStyleSvcTextStyleIO", "clone(){", "try{", "CaStyleSvcTextStyleIO", "object=", "(CaStyleSvcTextStyleIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Object", "getCndClassObject(String", "cndCd)", "{", "Class<?>", "cndClass", "=", "BaCndClassMapEnum.getEnumByCode(cndCd).getClazz();", "try", "{", "return", "cndClass.newInstance();", "}", "catch", "(InstantiationException", "|", "IllegalAccessException", "e)", "{", "throw", "new", "BizApplicationException(\"AAPPDE0021\",", "new", "Object[]", "{", "cndCd", "});", "}", "}"], "docstring_tokens": ["A", "method", "that", "calls", "a", "class", "that", "is", "associated", "with", "a", "condition", "code", "-", "class", "calls", "Engine"]}
{"code_tokens": ["public", "List<TblXtnAtrbtOut>", "getTableExtendAttribute(String", "instCd,", "String", "tblNm,", "XtnAtrbtVrtnCmpsEnum", "xtnAtrbtVrtnCmpsCd,", "Map<String,", "String>", "mapCnd)", "throws", "BizApplicationException", "{", "//", "Check", "input", "if", "(StringCoreUtils.isEmpty(instCd))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@instCd\"", "});", "}", "if", "(StringCoreUtils.isEmpty(tblNm))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@tblNm\"", "});", "}", "if", "(xtnAtrbtVrtnCmpsCd", "==", "null", "||", "StringCoreUtils.isEmpty(xtnAtrbtVrtnCmpsCd.getValue()))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "if", "(!XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)", "&&", "!XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)", "&&", "(mapCnd", "==", "null", "||", "mapCnd.isEmpty()))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "List<TblXtnAtrbtOut>", "out", "=", "new", "ArrayList<TblXtnAtrbtOut>();", "List<String>", "itmList", "=", "new", "ArrayList<String>();", "//", "Set", "condition", "if", "(XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd))", "{", "//", "skip;", "}", "else", "if", "(XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd))", "{", "itmList.add(\"", "\");", "}", "else", "if", "(XtnAtrbtVrtnCmpsEnum.PD_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb1", "=", "new", "StringBuilder();", "sb1.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdTmpltCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTmpltCd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdCd\")).append(\"\\\"}\");", "itmList.add(sb1.toString());", "StringBuilder", "sb2", "=", "new", "StringBuilder();", "sb2.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdTmpltCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTmpltCd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb2.toString());", "StringBuilder", "sb3", "=", "new", "StringBuilder();", "sb3.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb3.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb3.append(\"\\\"pdTmpltCd\\\":\\\"\\\",\").append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb3.toString());", "StringBuilder", "sb4", "=", "new", "StringBuilder();", "sb4.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb4.append(\"\\\"pdTpCd\\\":\\\"\\\",\").append(\"\\\"pdTmpltCd\\\":\\\"\\\",\").append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb4.toString());", "}", "else", "if", "(XtnAtrbtVrtnCmpsEnum.ACTOR_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"actorTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"actorTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_ARR_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrArrRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrArrRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_CUST_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrCustRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrCustRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "/*", "2016.03.29", "hongun.song", "\ucd94\uac00*/", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_ACTVTY_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrActvtyTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrActvtyTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_SRVC_BLCKNG_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrSrvcBlckngCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrSrvcBlckngCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_ISSMDA_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrIssmdaTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrIssmdaTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.DUE_DLGNC_DSCD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"dueDlgncDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"dueDlgncDscd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "if(mapCnd.get(\"actorTpCd\")", "!=", "null){", "StringBuilder", "sbAct", "=", "new", "StringBuilder();", "sbAct.append(\"{\").append(\"\\\"actorTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"actorTpCd\")).append(\"\\\"}\");", "itmList.add(sbAct.toString());", "}", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.ARR_DOC_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrDocRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrDocRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(XtnAtrbtVrtnCmpsEnum.PRTNR_DTL_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"prtnrDtlTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"prtnrDtlTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}else", "{", "//", "Input", "field", "is", "incorrect.", "Information", "for", "Checking", ":", "{0}", "throw", "new", "BizApplicationException(\"AAPSVE0001\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn", "inDao", "=", "new", "CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn();", "inDao.setStdInstCd(_getCmnContextCore().getStandardInstCode());", "inDao.setInstCd(instCd);", "inDao.setTblNm(tblNm);", "inDao.setJsonKeyValCntnt(itmList);", "if", "(XtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd))", "{", "inDao.setXtnAtrbtVrtnCmpsCd(\"\");", "}", "else", "if", "(XtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd))", "{", "inDao.setXtnAtrbtVrtnCmpsCd(XtnAtrbtVrtnCmpsEnum.NA.getValue());", "}", "else", "{", "inDao.setXtnAtrbtVrtnCmpsCd(xtnAtrbtVrtnCmpsCd.getValue());", "}", "/*", "//", "[AS-IS]", "1.", "\uac1c\ubcc4+\ud45c\uc900", "\uae30\uad00", "\ub370\uc774\ud130", "\uc870\ud68c", "//", "2.", "\uc870\ud68c\uacb0\uacfc", "\uac80\uc99d\ucc98\ub9ac(\ud45c\uc900\uae30\uad00\uc778", "\uacbd\uc6b0", "\ud45c\uc900\uae30\uad00\uc758", "\ud655\uc7a5\uc18d\uc774", "\uc815\uc758", "\uc5ec\ubd80", "\ud655\uc778", "//", "3.", "(\uac1c\ubcc4+\ud45c\uc900", "\uae30\uad00", "\ub370\uc774\ud130", "\ubbf8", "\uc874\uc7ac\uc2dc", ")\ud45c\uc900\uae30\uad00\uc758", "\ub370\uc774\ud130", "\uc870\ud68c", "//", "execute", "query", "List<CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut>", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "for(CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut", "xtnAtrbtOut", ":", "xtnAtrbtList)", "{", "if(_getCmnContextCore().getStandardInstCode().equals(xtnAtrbtOut.getInstCd()))", "{", "CmTblXtnAtrDIO", "cmTblXtnAtrDIO", "=", "_getCmTblXtnAtrDDso().select(_getCmnContextCore().getStandardInstCode(),", "tblNm,", "xtnAtrbtOut.getXtnAtrbtNm());", "if(cmTblXtnAtrDIO", "!=", "null", "&&", "StringCoreUtils.isEmpty(cmTblXtnAtrDIO.getInstIndvDfntnMndtryYn())", "&&", "CCM01.YES.equals(_getCmTblXtnAtrDDso().select(_getCmnContextCore().getStandardInstCode(),", "tblNm,", "xtnAtrbtOut.getXtnAtrbtNm()).getInstIndvDfntnMndtryYn()))", "{", "throw", "new", "BizApplicationException(\"AAPCME0182\",", "new", "Object[]", "{", "xtnAtrbtOut.getXtnAtrbtNm()", "});", "}", "}", "}", "//", "one", "more", "try", "with", "standard", "institution", "if(xtnAtrbtList.isEmpty())", "{", "inDao.setInstCd(_getCmnContextCore().getStandardInstCode());", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "}", "*/", "//", "[TO-BE]", "1.", "\uac1c\ubcc4+\ud45c\uc900", "\uae30\uad00", "\ub370\uc774\ud130", "\uc870\ud68c", "//", "2.", "\uc870\ud68c\uacb0\uacfc", "\uac80\uc99d\ucc98\ub9ac(\ud45c\uc900\uae30\uad00\uc778", "\uacbd\uc6b0", "\ud45c\uc900\uae30\uad00\uc758", "\ud655\uc7a5\uc18d\uc774", "\uc815\uc758", "\uc5ec\ubd80", "\ud655\uc778", "//", "3.", "(\uac1c\ubcc4+\ud45c\uc900", "\uae30\uad00", "\ub370\uc774\ud130", "\ubbf8", "\uc874\uc7ac\uc2dc", ")\ud45c\uc900\uae30\uad00\uc758", "\ub370\uc774\ud130", "\uc870\ud68c", "//", "execute", "query", "List<CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut>", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "//", "//\uccb4\ud06c\ub85c\uc9c1", "\uc81c\uc678\ud568", "(cm_tbl_xtn_atr_d.INST_INDV_DFNTN_MNDTRY_YN", "\uae30\uad00\uac1c\ubcc4\uc815\uc758\ud544\uc218\uc5ec\ubd80)", "//", "for(CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut", "xtnAtrbtOut", ":", "xtnAtrbtList)", "{", "//", "}", "//\uac1c\ubcc4", "\uc870\ud68c\uc2dc", "\ud45c\uc900\uae30\uad00", "\ub370\uc774\ud130\ub3c4", "\uc870\ud68c\ud574", "\uc624\ubbc0\ub85c", "\uc758\ubbf8\uc5c6\ub294", "\ucffc\ub9ac\ub77c\uc11c", "\uc0ad\uc81c\ud568", "//", "//", "one", "more", "try", "with", "standard", "institution", "//", "if(xtnAtrbtList.isEmpty())", "{", "//", "inDao.setInstCd(_getCmnContextCore().getStandardInstCode());", "//", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "//", "}", "//", "set", "output", "for", "(CmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut", "xtnAtrbt", ":", "xtnAtrbtList)", "{", "TblXtnAtrbtOut", "outParm", "=", "new", "TblXtnAtrbtOut();", "outParm.setTblNm(xtnAtrbt.getTblNm());", "outParm.setXtnAtrbtNm(xtnAtrbt.getXtnAtrbtNm());", "outParm.setMndtryYn(xtnAtrbt.getMndtryYn());", "outParm.setScrnInpYn(xtnAtrbt.getScrnInpYn());", "outParm.setScrnChngAblYn(xtnAtrbt.getScrnChngAblYn());", "outParm.setCustInqryTrgtYn(xtnAtrbt.getCustInqryTrgtYn());", "outParm.setIntrnlInqryTrgtYn(xtnAtrbt.getIntrnlInqryTrgtYn());", "outParm.setAtrbtTpCd(xtnAtrbt.getAtrbtTpCd());", "outParm.setCdNbr(xtnAtrbt.getCdNbr());", "outParm.setClHrarcyId(xtnAtrbt.getClHrarcyId());", "if(StringCoreUtils.isEmpty(xtnAtrbt.getAtrbtTpCd()))", "{", "StdAtrbtIO", "stdAtrbt", "=", "_getStdAtrbtProvider().getStandardAttribute(xtnAtrbt.getXtnAtrbtNm());", "if(stdAtrbt", "!=", "null", "&&", "stdAtrbt.getAtrbtTpCd()", "!=", "null)", "{", "outParm.setAtrbtTpCd(stdAtrbt.getAtrbtTpCd());", "}", "}", "out.add(outParm);", "}", "return", "out;", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "no", "condition(cmnContext", "institution)", "basic", "method", "reference", ":", "{@link", "TblXtnAtrbtCore", "getTableExtendAttribute(String,", "String,", "XtnAtrbtVrtnCmpsEnum,", "Map<String,", "String>)}"]}
{"code_tokens": ["public", "String", "getTxRmkCntnt()", "{", "return", "arrTxBsicIO.getTxRmkCntnt();", "}", "public", "String", "getCrncyCd()", "{", "return", "arrTxBsicIO.getCrncyCd();", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "currency", "code."]}
{"code_tokens": ["public", "List<XtnCdIO>", "getListCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "//", "2018.09.04", "keewoong.hong", "add", "Sonar", "\uc815\uc801\ubd84\uc11d", "\uacb0\uacfc", "\ubc18\uc601", "List<XtnCdIO>", "xtnCdIOs", "=", "new", "ArrayList<XtnCdIO>();", "if(supplInfoVal", "==", "null)", "return", "xtnCdIOs;", "CaCaDstbEnvCdMIO", "svDstbEnvMIO", "=", "new", "CaCaDstbEnvCdMIO();", "if(supplInfoVal.get(CCM03.INST_CD)", "==", "null){", "svDstbEnvMIO.setInstCd(_getCaCmnContext().getInstCode());", "}", "else", "{", "svDstbEnvMIO.setInstCd(supplInfoVal.get(CCM03.INST_CD).toString());", "}", "svDstbEnvMIO.setActvStsCd(\"01\");", "List<CaCaDstbEnvCdMIO>", "svDstbEnvMList", "=", "_getSvDstbEnvMDso().selectEnvCdList(svDstbEnvMIO);", "String", "lngCd", "=", "String.valueOf(supplInfoVal.get(CaInstParamEnum.LANGUAGE_CODE.getValue()));", "if(", "svDstbEnvMList", "==", "null", "||", "svDstbEnvMList.isEmpty()", ")", "return", "xtnCdIOs;", "for(CaCaDstbEnvCdMIO", "out", ":", "svDstbEnvMList)", "{", "XtnCdIO", "xtnCdIO", "=", "new", "XtnCdIO();", "xtnCdIO.setCd(out.getDstbEnvrnmntCd());", "if(StringUtils.isEmpty(lngCd))", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CaCCA01.DSTB_ENV_CD", "+", "out.getDstbEnvrnmntCd()));", "}", "else", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CaCCA01.DSTB_ENV_CD", "+", "out.getDstbEnvrnmntCd(),", "lngCd));", "}", "xtnCdIOs.add(xtnCdIO);", "}", "return", "xtnCdIOs;", "}"], "docstring_tokens": ["It", "make", "the", "combo-box", "of", "Code", "that", "meet", "the", "search", "condition.", "Combo-box", "is", "consisted", "of", "CaCmnCdCheckOut.", "(cdNbr,", "cd,", "cdNm,", "delYn,", "cdAbrvtnNm)"]}
{"code_tokens": ["public", "ActorChngSvcIn", "clone(){", "try{", "ActorChngSvcIn", "object=", "(ActorChngSvcIn)super.clone();", "if", "(", "this.actorXtnInfoList==", "null", ")", "object.actorXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.ActorChngSvcXtnInfoListIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.ActorChngSvcXtnInfoListIn>(actorXtnInfoList.size());", "for(", "bankware.corebanking.customer.change.service.dto.ActorChngSvcXtnInfoListIn", "item", ":", "actorXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.ActorChngSvcXtnInfoListIn)item.clone());", "}", "object.actorXtnInfoList", "=", "clonedList;", "}", "if", "(", "this.actorNmList==", "null", ")", "object.actorNmList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.ActorChngSvcActorNmListIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.ActorChngSvcActorNmListIn>(actorNmList.size());", "for(", "bankware.corebanking.customer.change.service.dto.ActorChngSvcActorNmListIn", "item", ":", "actorNmList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.ActorChngSvcActorNmListIn)item.clone());", "}", "object.actorNmList", "=", "clonedList;", "}", "if", "(", "this.actorRelList==", "null", ")", "object.actorRelList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.ActorChngSvcActorRelListIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.ActorChngSvcActorRelListIn>(actorRelList.size());", "for(", "bankware.corebanking.customer.change.service.dto.ActorChngSvcActorRelListIn", "item", ":", "actorRelList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.ActorChngSvcActorRelListIn)item.clone());", "}", "object.actorRelList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ArrPlanIO", "getArrPlan(Integer", "plnSeqNbr,ArrRealCoreImpl", "arrReal)", "throws", "BizApplicationException", "{", "return", "_getArrPlanImpl().getArrPlan(plnSeqNbr,arrReal);", "}"], "docstring_tokens": ["Inquire", "arrangement", "plan", "with", "plan", "sequence", "number."]}
{"code_tokens": ["public", "String", "getPntName(String", "pntCd)", "throws", "BizApplicationException", "{", "if", "(StringCoreUtils.isEmpty(pntCd))", "{", "throw", "new", "BizApplicationException(\"AAPATE0067\",", "new", "String[]", "{", "\"pdCd\"", "});", "}"], "docstring_tokens": ["Methods", "for", "inquiry", "point", "names"]}
{"code_tokens": ["public", "String", "getInstCd()", "{", "return", "pdPdM.getInstCd();", "}"], "docstring_tokens": ["Inquire", "financial", "institution", "code", "where", "the", "arrangement", "is", "created", "and", "managed."]}
{"code_tokens": ["public", "BalTpDtlIO", "getBalType(String", "balTpCd)", "throws", "BizApplicationException", "{", "_checkBalTypeCode(balTpCd);", "StBalTpMIO", "stBalTpCdIO", "=", "_getStDataCacheManager().getCacheData(DataCacheCoreConfig.BALANCE_TYPE_CACHE,", "balTpCd);", "if(stBalTpCdIO", "==", "null){", "stBalTpCdIO", "=", "_getStBalTpCdDso().select(balTpCd);", "if(stBalTpCdIO", "==", "null){", "//Balance", "type", "code", "is", "not", "exist", "throw", "new", "BizApplicationException(\"AAPSTE0005\",", "new", "Object[]", "{balTpCd});", "}", "_getStDataCacheManager().saveCache(DataCacheCoreConfig.BALANCE_TYPE_CACHE,balTpCd,stBalTpCdIO);", "}else{", "if", "(logger.isDebugEnabled()){", "logger.debug(\"getBalanceType", "from", "memory", ":", "{}\",stBalTpCdIO);", "}", "}", "return", "_setBalTpDtlIO(stBalTpCdIO);", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "information", "of", "balance", "type."]}
{"code_tokens": ["public", "void", "saveAddrInfo(List<ActorAddrRgstIn>", "actorAddrInList)", "throws", "BizApplicationException", "{", "getActor().saveAddrInfo(actorAddrInList);", "}"], "docstring_tokens": ["When", "the", "staffActorInfoUseYn", "is", "'Y',", "It", "registers/modifies", "actor", "address", "information", "list", "from", "actor", "information.", "Address", "information", "includes", "address", "hierarchy", "code,", "address", "basic", "and", "detail", "contents,", "representing", "contact", "point", "YN,", "contact", "prohibition", "type", "code", "and", "authenticated", "YN.", "If", "the", "input", "representing", "contact", "method", "is", "duplicated", "with", "the", "already", "registered", "information,", "it", "throws", "exception."]}
{"code_tokens": ["public", "void", "modify(ArrMdfctnIn", "arrMdfctnIn,", "ArrRealImpl", "originArrReal)", "throws", "BizApplicationException", "{", "ArrMdfctn", "arrMdfctn", "=", "_getArrMngrImpl().createArrMdfctn(arrMdfctnIn,", "false,", "originArrReal);", "adaptArrMdfctn(arrMdfctn,arrMdfctnIn.getRqstDt(),arrMdfctnIn.getTxDt(),arrMdfctnIn.getTxSeqNbr(),", "originArrReal);", "}"], "docstring_tokens": ["It", "modifies", "customer", "agreement", "code", "information", "list.", "If", "registered", "information", "by", "the", "same", "institution", "code", "and", "agreement", "type", "code", "exists,", "throws", "exception."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AprslRqstCore", "aprslRqstCore)", "throws", "BizApplicationException", "{", "return", "_getAprslRqstSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AprslRqstImpl)aprslRqstCore);", "}"], "docstring_tokens": ["Get", "a", "extended", "information", "of", "Subsidiary", "Information(CTI)"]}
{"code_tokens": ["public", "String", "getXtnInfo(ArrTxCoreImpl", "arrTx,", "String", "xtnAtrbtNm,", "boolean", "isEavOnly)", "throws", "BizApplicationException", "{", "//", "1.", "Site", "Base\uc5d0\uc11c", "\ud638\ucd9c\ub41c", "\uacbd\uc6b0", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138\ub9cc", "\uc870\ud68c", "if", "(isEavOnly)", "{", "return", "_getXtnInfo(arrTx,", "xtnAtrbtNm);", "}", "//", "2.", "\uc18d\uc131\uba85", "\uae30\uc900\uc73c\ub85c", "\ud655\uc7a5\ubc29\ubc95", "\ud310\ub2e8", "//", "2-1.", "\ud655\uc7a5\uc815\ubcf4\uba85\uc138", "if", "(!_getTblXtnAtrbt().isExtendWayEav(_getArrTxClsfctnCustom().getArrTxKndTblNm(arrTx.getArrCore()),xtnAtrbtNm))", "{", "return", "_getXtnInfo(arrTx,", "xtnAtrbtNm);", "}", "//", "2-2.", "\ubcf4\uc870\uc6d0\uc7a5", "return", "_getArrTxXtnInfoCustom().getSubInfo(xtnAtrbtNm,", "arrTx);", "}"], "docstring_tokens": ["Inquire", "arrangement", "activity", "extend", "attribute", "by", "attribute", "name."]}
{"code_tokens": ["public", "TrnsRsrvtnSvcOut", "clone(){", "try{", "TrnsRsrvtnSvcOut", "object=", "(TrnsRsrvtnSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaXpExtrnlIntrfcMsgCdMappingDIO", "clone(){", "try{", "CaXpExtrnlIntrfcMsgCdMappingDIO", "object=", "(CaXpExtrnlIntrfcMsgCdMappingDIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "AsmCore", "asm)", "{", "return", "_getAsmSubInfoBiz().getSubInfo(atrbtNm,", "(AsmImpl)asm);", "}"], "docstring_tokens": ["This", "method", "inquires", "settlement", "subsidiary", "detail", "information", "list", "(inquire", "all", "subsidiary", "detail", "information", "of", "a", "given", "settlement", "master", "by", "using", "the", "key", "value", "other", "than", "the", "detail", "sequence", "number)."]}
{"code_tokens": ["private", "BfTestSvcOut", "getBizDscd(BfTestSvcIn", "in)", "throws", "BizApplicationException", "{", "BfIn", "bfIn", "=", "new", "BfIn();", "bfIn.setBfCd(in.getPdCd());", "bfIn.setAplyDt(in.getAplyDt());", "Bf", "bf", "=", "_getBfMngr().getBf(bfIn);", "String", "output", "=", "bf.getBizDscd();", "BfTestSvcOut", "out", "=", "new", "BfTestSvcOut();", "if(StringUtils.isEmpty(output))", "{", "out.setChkYn(false);", "}", "else", "{", "out.setChkYn(true);", "out.setCntnt(output.toString());", "}", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "point", "business", "distinction", "code"]}
{"code_tokens": ["public", "List<CaTblXtnAtrbtOut>", "getTableExtendAttribute(String", "instCd,", "String", "tblNm,", "CaXtnAtrbtVrtnCmpsEnum", "xtnAtrbtVrtnCmpsCd,", "Map<String,", "String>", "mapCnd)", "throws", "BizApplicationException", "{", "//", "Check", "input", "if", "(StringUtils.isEmpty(instCd))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@instCd\"", "});", "}", "if", "(StringUtils.isEmpty(tblNm))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@tblNm\"", "});", "}", "if", "(xtnAtrbtVrtnCmpsCd", "==", "null", "||", "StringUtils.isEmpty(xtnAtrbtVrtnCmpsCd.getValue()))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "if", "(!CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd)", "&&", "!CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd)", "&&", "(mapCnd", "==", "null", "||", "mapCnd.isEmpty()))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "List<CaTblXtnAtrbtOut>", "out", "=", "new", "ArrayList<CaTblXtnAtrbtOut>();", "List<String>", "itmList", "=", "new", "ArrayList<String>();", "//", "Set", "condition", "if", "(CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd))", "{", "//", "skip;", "}", "else", "if", "(CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd))", "{", "itmList.add(\"", "\");", "}", "else", "if", "(CaXtnAtrbtVrtnCmpsEnum.PD_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb1", "=", "new", "StringBuilder();", "sb1.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdTmpltCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTmpltCd\")).append(\"\\\",\");", "sb1.append(\"\\\"pdCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdCd\")).append(\"\\\"}\");", "itmList.add(sb1.toString());", "StringBuilder", "sb2", "=", "new", "StringBuilder();", "sb2.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdTmpltCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTmpltCd\")).append(\"\\\",\");", "sb2.append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb2.toString());", "StringBuilder", "sb3", "=", "new", "StringBuilder();", "sb3.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb3.append(\"\\\"pdTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"pdTpCd\")).append(\"\\\",\");", "sb3.append(\"\\\"pdTmpltCd\\\":\\\"\\\",\").append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb3.toString());", "StringBuilder", "sb4", "=", "new", "StringBuilder();", "sb4.append(\"{\").append(\"\\\"bizDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"bizDscd\")).append(\"\\\",\");", "sb4.append(\"\\\"pdTpCd\\\":\\\"\\\",\").append(\"\\\"pdTmpltCd\\\":\\\"\\\",\").append(\"\\\"pdCd\\\":\\\"\\\"}\");", "itmList.add(sb4.toString());", "}", "else", "if", "(CaXtnAtrbtVrtnCmpsEnum.ACTOR_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"actorTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"actorTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_ARR_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrArrRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrArrRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_CUST_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrCustRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrCustRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "/*", "2016.03.29", "hongun.song", "\ucd94\uac00*/", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_ACTVTY_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrActvtyTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrActvtyTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_SRVC_BLCKNG_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrSrvcBlckngCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrSrvcBlckngCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_ISSMDA_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrIssmdaTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrIssmdaTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.DUE_DLGNC_DSCD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"dueDlgncDscd\\\":\").append(\"\\\"\").append(mapCnd.get(\"dueDlgncDscd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "if(mapCnd.get(\"actorTpCd\")", "!=", "null){", "StringBuilder", "sbAct", "=", "new", "StringBuilder();", "sbAct.append(\"{\").append(\"\\\"actorTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"actorTpCd\")).append(\"\\\"}\");", "itmList.add(sbAct.toString());", "}", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.ARR_DOC_REL_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"arrDocRelCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"arrDocRelCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}", "else", "if(CaXtnAtrbtVrtnCmpsEnum.PRTNR_DTL_TP_CD.equals(xtnAtrbtVrtnCmpsCd))", "{", "StringBuilder", "sb", "=", "new", "StringBuilder();", "sb.append(\"{\").append(\"\\\"prtnrDtlTpCd\\\":\").append(\"\\\"\").append(mapCnd.get(\"prtnrDtlTpCd\")).append(\"\\\"}\");", "itmList.add(sb.toString());", "}else", "{", "//", "Input", "field", "is", "incorrect.", "Information", "for", "Checking", ":", "{0}", "throw", "new", "BizApplicationException(\"AAPSVE0001\",", "new", "Object[]", "{", "\"@xtnAtrbtVrtnCmpsCd\"", "});", "}", "CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn", "inDao", "=", "new", "CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdIn();", "inDao.setStdInstCd(_getCaCmnContext().getStandardInstCode());", "inDao.setInstCd(instCd);", "inDao.setTblNm(tblNm);", "inDao.setJsonKeyValCntnt(itmList);", "if", "(CaXtnAtrbtVrtnCmpsEnum.ALL.equals(xtnAtrbtVrtnCmpsCd))", "{", "inDao.setXtnAtrbtVrtnCmpsCd(\"\");", "}", "else", "if", "(CaXtnAtrbtVrtnCmpsEnum.NA.equals(xtnAtrbtVrtnCmpsCd))", "{", "inDao.setXtnAtrbtVrtnCmpsCd(CaXtnAtrbtVrtnCmpsEnum.NA.getValue());", "}", "else", "{", "inDao.setXtnAtrbtVrtnCmpsCd(xtnAtrbtVrtnCmpsCd.getValue());", "}", "//", "execute", "query", "List<CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut>", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "for(CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut", "xtnAtrbtOut", ":", "xtnAtrbtList)", "{", "if(_getCaCmnContext().getStandardInstCode().equals(xtnAtrbtOut.getInstCd()))", "{", "CaCmTblXtnAtrDIO", "cmTblXtnAtrDIO", "=", "_getCmTblXtnAtrDDso().select(_getCaCmnContext().getStandardInstCode(),", "tblNm,", "xtnAtrbtOut.getXtnAtrbtNm());", "if(cmTblXtnAtrDIO", "!=", "null", "&&", "StringUtils.isEmpty(cmTblXtnAtrDIO.getInstIndvDfntnMndtryYn())", "&&", "CCM01.YES.equals(_getCmTblXtnAtrDDso().select(_getCaCmnContext().getStandardInstCode(),", "tblNm,", "xtnAtrbtOut.getXtnAtrbtNm()).getInstIndvDfntnMndtryYn()))", "{", "throw", "new", "BizApplicationException(\"AAPCME0182\",", "new", "Object[]", "{", "xtnAtrbtOut.getXtnAtrbtNm()", "});", "}", "}", "}", "//", "one", "more", "try", "with", "standard", "institution", "if(xtnAtrbtList.isEmpty())", "{", "inDao.setInstCd(_getCaCmnContext().getStandardInstCode());", "xtnAtrbtList", "=", "_getCmTblXtnAtrXtnAtrValDDso().selectListXtnAtrbtXtnAtrbtByCmpsCd(inDao);", "}", "//", "set", "output", "for", "(CaCmTblXtnAtrXtnAtrValDSelectListXtnAtrbtXtnArtbtByCmpsCdOut", "xtnAtrbt", ":", "xtnAtrbtList)", "{", "CaTblXtnAtrbtOut", "outParm", "=", "new", "CaTblXtnAtrbtOut();", "outParm.setTblNm(xtnAtrbt.getTblNm());", "outParm.setXtnAtrbtNm(xtnAtrbt.getXtnAtrbtNm());", "outParm.setMndtryYn(xtnAtrbt.getMndtryYn());", "outParm.setScrnInpYn(xtnAtrbt.getScrnInpYn());", "outParm.setScrnChngAblYn(xtnAtrbt.getScrnChngAblYn());", "outParm.setCustInqryTrgtYn(xtnAtrbt.getCustInqryTrgtYn());", "outParm.setIntrnlInqryTrgtYn(xtnAtrbt.getIntrnlInqryTrgtYn());", "outParm.setAtrbtTpCd(xtnAtrbt.getAtrbtTpCd());", "outParm.setCdNbr(xtnAtrbt.getCdNbr());", "outParm.setClHrarcyId(xtnAtrbt.getClHrarcyId());", "if(StringUtils.isEmpty(xtnAtrbt.getAtrbtTpCd()))", "{", "CaStdAtrbtIO", "stdAtrbt", "=", "_getStdAtrbtMgmt().getStandardAttribute(xtnAtrbt.getXtnAtrbtNm());", "if(stdAtrbt", "!=", "null", "&&", "stdAtrbt.getAtrbtTpCd()", "!=", "null)", "{", "outParm.setAtrbtTpCd(stdAtrbt.getAtrbtTpCd());", "}", "}", "out.add(outParm);", "}", "return", "out;", "}"], "docstring_tokens": ["Query", "table", "extend", "attribute", "list", "by", "input", "condition(cmnContext", "institution)", "basic", "method", "reference", ":", "{@link", "TblXtnAtrbtCore", "getTableExtendAttribute(String,", "String,", "XtnAtrbtVrtnCmpsEnum,", "Map<String,", "String>)}"]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo,", "AsmImpl", "asm)", "{", "//", "1.", "\uc785\ub825\uac12", "\uac80\uc99d", "if(subInfo", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{AsmSubInfo.class.getSimpleName()});", "}", "//", "2.", "\uc18d\uc131", "\uac80\uc99d", "(\ucf54\ub4dc\uac12", "\uac80\uc99d)", "for(Entry<String,Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(entry.getValue()!=null)", "{", "_getAtrbtChk().checkStandardAttribute(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "//", "3.", "\uc2ec\uc0ac\ubcf4\uc870\uba85\uc138\uc815\ubcf4", "\uc870\ud68c(\uce90\uc2dc\ub85c\ubd80\ud130)", "IValueObject", "oldCache", "=", "getSubInfoCache(asm);", "//", "5.", "DB", "\ubc18\uc601", "if(oldCache", "==", "null)", "{", "//", "4.1.1", "DBIO", "VO", "\uc0dd\uc131", "&", "set", "primary", "key", "oldCache", "=", "new", "AmAsmSIO();", "oldCache.set(\"instCd\",_getCmnContext().getInstCode());", "oldCache.set(\"asmId\",asm.getBasicInfo().getAsmId());", "//", "4.1.2", "Interface", "VO", "->", "DBIO", "VO", "DtoUtils.setSubInfoIO(subInfo,", "oldCache);", "//", "4.1.3", "insert", "_getAmAsmSDso().insert((AmAsmSIO)oldCache);", "asm.setAsmSubInfoCache(oldCache);", "}else", "{", "//", "4.2.1", "\uc18d\uc131\ubcc0\uacbd", "\uc5ec\ubd80", "\uac80\uc99d(\ubcc0\uacbd\ub41c", "\uc18d\uc131\uc774", "\uc5c6\uc74c", "\ub9ac\ud134)", "if", "(!DtoUtils.isValChanged(subInfo,", "oldCache))", "{", "return;", "}", "DtoUtils.setSubInfoIO(subInfo,", "oldCache);", "//", "4.2.4", "update", "_getAmAsmSDso().update((AmAsmSIO)oldCache);", "}", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "calculation", "detail", "information", "using", "interface", "VO"]}
{"code_tokens": ["public", "List<CaSrvcPrflGetInstSrvcDtlIO>", "getListInstServiceByProfile(CaSrvcPrflGetInstSrvcIO", "in)", "throws", "BizApplicationException", "{", "List<CaSrvcPrflGetInstSrvcDtlIO>", "out", "=", "new", "ArrayList<CaSrvcPrflGetInstSrvcDtlIO>();", "List<CaSvSrvcMIO>", "daoList", "=", "_getListInstitutionServiceBasic(in);", "for(", "CaSvSrvcMIO", "tmpList", ":", "daoList", ")", "{", "CaSrvcPrflGetInstSrvcDtlIO", "srvcBsicIO", "=", "new", "CaSrvcPrflGetInstSrvcDtlIO();", "srvcBsicIO.setSrvcCd(tmpList.getSrvcCd());", "//\uc11c\ube44\uc2a4\ucf54\ub4dc", "srvcBsicIO.setSrvcNm(tmpList.getSrvcNm());", "//\uc11c\ube44\uc2a4\uba85", "srvcBsicIO.setSrvcAbrvtnNm(tmpList.getSrvcAbrvtnNm());", "//\uc11c\ube44\uc2a4\uc57d\uc5b4\uba85", "srvcBsicIO.setCmpntCd(tmpList.getCmpntCd());", "//\ucef4\ud3ec\ub10c\ud2b8\ucf54\ub4dc", "srvcBsicIO.setSrvcClassNm(tmpList.getSrvcClassNm());", "//\uc11c\ube44\uc2a4\ud074\ub798\uc2a4\uba85", "srvcBsicIO.setSrvcFtrCntnt(tmpList.getSrvcFtrCntnt());", "//\uc11c\ube44\uc2a4\ud2b9\uc131\ub0b4\uc6a9", "srvcBsicIO.setOprtnNm(tmpList.getOprtnNm());", "//\uc624\ud37c\ub808\uc774\uc158\uba85", "srvcBsicIO.setInpDtoNm(tmpList.getInpDtoNm());", "//\uc785\ub825DTO\uba85", "srvcBsicIO.setOutpDtoNm(tmpList.getOutpDtoNm());", "//\ucd9c\ub825DTO\uba85", "out.add(", "srvcBsicIO", ");", "}", "return", "out;", "}"], "docstring_tokens": ["Inquire", "institute", "service", "lists", "by", "profile."]}
{"code_tokens": ["public", "void", "registerArrPlanExecutionResultAsDeactivated(Integer", "plnSeqNbr)", "throws", "BizApplicationException", "{", "_getArrPlanXtnBiz().registerArrPlanExecutionAsDeactivated(plnSeqNbr,", "false,", "this);", "}"], "docstring_tokens": ["Register", "execution", "result", "of", "arrangement", "plan", "and", "execute", "additional", "business", "process", "implemented", "in", "condition", "class", "of", "related", "condition", "such", "as", "next", "execution", "date", "change,", "arrangement", "status", "change,", "and", "saving", "arrangement", "plan", "extended", "attribute.", "Change", "the", "status", "of", "arrangement", "plan", "into", "\"Terminated\"."]}
{"code_tokens": ["public", "CustCmphInqrySvcGetCustRelCdIn", "clone(){", "try{", "CustCmphInqrySvcGetCustRelCdIn", "object=", "(CustCmphInqrySvcGetCustRelCdIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "checkPassword(StaffBsicInfoIO", "staffBsicInfo,", "String", "pswd)", "throws", "BizApplicationException", "{", "String", "securityCheckRsltTpCd", "=", "null;", "if", "(staffBsicInfo", "==", "null)", "{", "return", "SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue();", "}", "if", "(staffBsicInfo.getPswd()", "==", "null)", "{", "securityCheckRsltTpCd", "=", "SecurityCheckRsltTpEnum.FAIL_NO_SCRTY_DATA.getValue();", "}", "else", "{", "if", "(staffBsicInfo.getPswd().equals(pswd))", "{", "securityCheckRsltTpCd", "=", "SecurityCheckRsltTpEnum.SUCCESS.getValue();", "}", "else", "{", "securityCheckRsltTpCd", "=", "SecurityCheckRsltTpEnum.FAIL_DIFF_SCRTY_DATA.getValue();", "}", "}", "return", "securityCheckRsltTpCd;", "}"], "docstring_tokens": ["It", "checks", "if", "the", "input", "password", "equals", "the", "staff's", "login", "password.", "Unlike", "staff's", "login", "process,", "it", "only", "verifies", "the", "input", "password", "regardless", "of", "error", "count", "or", "lock", "time", "etc."]}
{"code_tokens": ["public", "CustGrpMgmtSvcIn", "clone(){", "try{", "CustGrpMgmtSvcIn", "object=", "(CustGrpMgmtSvcIn)super.clone();", "if", "(", "this.custGrpList==", "null", ")", "object.custGrpList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustGrpMgmtSvcDtlIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustGrpMgmtSvcDtlIO>(custGrpList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustGrpMgmtSvcDtlIO", "item", ":", "custGrpList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustGrpMgmtSvcDtlIO)item.clone());", "}", "object.custGrpList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DlgtnRoleMgmtSvcGetDelegationRoleListIn", "clone(){", "try{", "DlgtnRoleMgmtSvcGetDelegationRoleListIn", "object=", "(DlgtnRoleMgmtSvcGetDelegationRoleListIn)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,", "ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "Cust", "mainCust", "=_getCustMngr().getCust(super.getArr().getMainArrCustId());", "if", "(mainCust", "==", "null){", "return;", "}", "//", "\uac1c\uc778\uace0\uac1d\uc774", "\uc544\ub2cc", "\uacbd\uc6b0", "\uac00\uc785\uac00\ub2a5\uace0\uac1d\uc9c1\uc5c5\uc720\ud615", "\uac80\uc99d\uc744", "\uc218\ud589\ud558\uc9c0", "\uc54a\ub294\ub2e4.", "if(!mainCust.isIndividual()){", "return;", "}", "if", "(StringUtils.isEmpty(getListCd()))", "{", "//Customer", "job", "type", "is", "not", "exist", "To", "make", "decision", "whether", "This", "product", "({0},{1})", "purchase", "is", "allowed", "or", "Not", "//\ubcf8", "\uc0c1\ud488({0},{1})\uc758", "\ud310\ub9e4\uac00\ub2a5", "\uc5ec\ubd80", "\ud655\uc778\uc744", "\uc704\ud55c", "\uace0\uac1d\uc758", "\uc9c1\uc5c5\uc720\ud615\uc774", "\uc874\uc7ac\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4.", "throw", "new", "BizApplicationException(\"AAPARE0724\"", ",", "new", "Object[]{getArrangementCore().getPd().getPdCd(),getArrangementCore().getPd().getPdNm()});", "}", "if", "(!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){", "//This", "product", "purchase", "is", "not", "allowed", "to", "customer", "gender", "type", "({0},{1})", "//\ubcf8", "\uc0c1\ud488\uc758", "\ud310\ub9e4\ub294", "\uace0\uac1d\uc9c1\uc5c5\uc720\ud615", "({0},{1})\uc5d0\uac8c", "\ud5c8\uc6a9\ub418\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0693\"", ",", "new", "Object[]{getListCd(),_getCd().getCode(\"A0295\",getListCd())});", "}", "}"], "docstring_tokens": ["Perform", "the", "condition", "action", "related", "to", "the", "specific", "service", "type.", "For", "example", "1", ",", "In", "case", "of", "loan", "installment", "disbursement", "possible", "condition", ",the", "loan", "disbursement", "possible", "condition", "class'", "\"doServiceAction\"", "method", "dose", "the", "validation", "step", "like", "1.investigates", "disbursed", "amount,", "2.get", "product", "condition", "value", "whether", "installment", "disbursement", "is", "allowed,", "3.", "make", "decision", "whether", "the", "service", "is", "permitted", "or", "not.", "The", "other", "example,", "the", "interest", "capitalization", "YN", "condition", "class", "do", "the", "action", "to", "make", "a", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date", "when", "arrangement", "open", "service", "is", "executed."]}
{"code_tokens": ["public", "CaSysIntrfcInfoInsertResultOut", "clone(){", "try{", "CaSysIntrfcInfoInsertResultOut", "object=", "(CaSysIntrfcInfoInsertResultOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getCndVal()", "throws", "BizApplicationException", "{", "return", "getRngVal()", "==", "null", "?", "null", ":", "getRngVal().setScale(_setScale(),", "RoundingMode.HALF_UP).toPlainString();", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "value."]}
{"code_tokens": ["public", "ActorRgstSvcElctrncAddrIn", "clone(){", "try{", "ActorRgstSvcElctrncAddrIn", "object=", "(ActorRgstSvcElctrncAddrIn)super.clone();", "if", "(", "this.ctcptXtnInfoList==", "null", ")", "object.ctcptXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn>(ctcptXtnInfoList.size());", "for(", "bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn", "item", ":", "ctcptXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.open.service.dto.ActorRgstSvcCtcptXtnIn)item.clone());", "}", "object.ctcptXtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AssetCore", "assetImpl,", "Integer", "assetThingSeqNbr,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "_getAssetThingSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr,", "(AssetImpl)", "assetImpl,", "assetThingSeqNbr);", "}"], "docstring_tokens": ["Save", "an", "security", "interest", "subsidiary", "information."]}
{"code_tokens": ["public", "void", "getBizApplicationException(String", "errorCd,", "String", "msg1,", "String", "msg2,", "String", "msg3,", "String", "msg4)", "throws", "BizApplicationException", "{", "throw", "new", "BizApplicationException(errorCd,", "new", "String[]", "{", "msg1,", "msg2,", "msg3,", "msg4", "});", "}"], "docstring_tokens": ["Methods", "for", "Exception", "Handling"]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if(", "logger.isDebugEnabled()", ")", "{", "logger.debug(\"#@#", "N0026", "ArrCndLoanInterestGraceOneTimePermittedTermImpl", "Start\");", "}", "switch", "(arrSrvcTpCd)", "{", "case", "\"InterestGrace\":", "_doInterestGraceAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "return;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "CaDeptChngSvcClsrIn", "clone(){", "try{", "CaDeptChngSvcClsrIn", "object=", "(CaDeptChngSvcClsrIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaNoticeMsgCdSvcRgstRelIn", "clone(){", "try{", "CaNoticeMsgCdSvcRgstRelIn", "object=", "(CaNoticeMsgCdSvcRgstRelIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaDstbTgtDIO", "clone(){", "try{", "CaDstbTgtDIO", "object=", "(CaDstbTgtDIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DummyIO", "modifyExtrnlIntrfcMsgAuthInfo(CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn", "in)", "throws", "BizApplicationException{", "logger.debug(\"==========", "modifyExtrnlIntrfcMsgAuthInfo", "IN:", "{}\",", "in);", "_getCaExtrnlAuthInfoMgmt().modifyExtrnlIntrfcMsgAuthInfo(_setExtrnLIntrfcMsgAuthInfoRgstIn(in));", "return", "new", "DummyIO();", "}"], "docstring_tokens": ["It", "modifies", "external", "interface", "message", "authentication", "information"]}
{"code_tokens": ["public", "boolean", "isPreferentialInterestProvideCndApplyRulePass(List<ProvideCnd>", "prvdCndList)", "throws", "BizApplicationException", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"<pd>", "isPreferentalIntPrvdCndRulePass", "input", "prvdCndListSize", ":", "{}\",", "prvdCndList.size());", "for", "(ProvideCnd", "inPrvdCnd", ":", "prvdCndList)", "{", "logger.debug(\"<pd>", "isPreferentalIntPrvdCndRulePass", "input", "cndCd", ":", "{}\",", "inPrvdCnd.getCndCd());", "logger.debug(\"<pd>", "isPreferentalIntPrvdCndRulePass", "input", "cndVal", ":", "{}\",", "inPrvdCnd.getVal());", "logger.debug(\"<pd>", "isPreferentalIntPrvdCndRulePass", "input", "cndVal", ":", "{}\",", "inPrvdCnd.getListCd());", "}", "}", "PrefInterestProvideCndPassApplyRuleIn", "prefInterestProvideCndPassApplyRuleIn", "=", "new", "PrefInterestProvideCndPassApplyRuleIn();", "prefInterestProvideCndPassApplyRuleIn.setInstitutionId(getInstCd());", "prefInterestProvideCndPassApplyRuleIn.setBaseDate(PdUtil.parseStringToDate(_getCmnContext().getTxDate()", "+", "_getCmnContext().getTxTime()));", "prefInterestProvideCndPassApplyRuleIn.setCndGroupTemplateCd(getCndGrpTmpltCd());", "prefInterestProvideCndPassApplyRuleIn.setCndGroupCd(getCndGrpCd());", "prefInterestProvideCndPassApplyRuleIn.setCndCd(getCndCd());", "//", "prefInterestProvideCndPassApplyRuleIn.setPdCd(pd.getPdCd());", "if", "(CollectionUtils.isNotEmpty(prvdCndList))", "{", "List<com.bankware.pf.product.api.models.ProvideCnd>", "apiProvideCndList", "=", "new", "ArrayList<>();", "for", "(ProvideCnd", "provideCnd", ":", "prvdCndList)", "{", "com.bankware.pf.product.api.models.ProvideCnd", "apiProvideCnd", "=", "new", "com.bankware.pf.product.api.models.ProvideCnd();", "apiProvideCnd.setProvideCndSeqNum(provideCnd.getProvidedCndSeqNbr());", "apiProvideCnd.setCndCd(provideCnd.getCndCd());", "apiProvideCnd.setCndTypeCd(provideCnd.getCndTpCd());", "if", "(provideCnd.getCndTpCd().equals(CndTypeCoreEnum.RANGE.getValue()))", "{", "apiProvideCnd.setMeasureUnitCd(provideCnd.getMsurUnitCd());", "apiProvideCnd.setCurrencyCd(provideCnd.getCrncyCd());", "apiProvideCnd.setVal(provideCnd.getVal());", "}", "else", "if", "(provideCnd.getCndTpCd().equals(CndTypeCoreEnum.LIST.getValue()))", "{", "apiProvideCnd.setListCd(provideCnd.getListCd());", "}", "if", "(CollectionUtils.isNotEmpty(provideCnd.getProvideCndAdtnlInfoOutList()))", "{", "List<com.bankware.pf.product.api.models.ProvideCndAdditionalInfoOut>", "apiProvideCndAdditionalInfoOutList", "=", "new", "ArrayList<>();", "for", "(ProvideCndAdditionalInfoOut", "provideCndAdditionalInfoOut", ":", "provideCnd.getProvideCndAdtnlInfoOutList())", "{", "com.bankware.pf.product.api.models.ProvideCndAdditionalInfoOut", "apiProvideCndAdditionalInfoOut", "=", "new", "com.bankware.pf.product.api.models.ProvideCndAdditionalInfoOut();", "apiProvideCndAdditionalInfoOut.setAdditionalInfoTypeDscd(provideCndAdditionalInfoOut.getAdditionalInfoTypeDscd());", "if", "(CollectionUtils.isNotEmpty(provideCndAdditionalInfoOut.getAdditionalInfoValList()))", "{", "List<String>", "additionalInfoValList", "=", "new", "ArrayList<>();", "for", "(String", "additionalInfoVal", ":", "provideCndAdditionalInfoOut.getAdditionalInfoValList())", "{", "additionalInfoValList.add(additionalInfoVal);", "}", "apiProvideCndAdditionalInfoOut.setAdditionalInfoValList(additionalInfoValList);", "}", "apiProvideCndAdditionalInfoOutList.add(apiProvideCndAdditionalInfoOut);", "}", "apiProvideCnd.setProvideCndAdditionalInfoOutList(apiProvideCndAdditionalInfoOutList);", "}", "apiProvideCndList.add(apiProvideCnd);", "}", "prefInterestProvideCndPassApplyRuleIn.setProvideCndList(apiProvideCndList);", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"<pd>", "isPreferentalIntPrvdCndRulePass", "PD", "API", "input", "apiProvideCndList", "size", ":", "{}\",", "apiProvideCndList.size());", "for", "(com.bankware.pf.product.api.models.ProvideCnd", "apiPrvdCnd", ":", "apiProvideCndList)", "{", "logger.debug(\"<pd>", "isPreferentalIntPrvdCndRulePass", "PD", "API", "input", "cndCd", ":", "{}\",", "apiPrvdCnd.getCndCd());", "logger.debug(\"<pd>", "isPreferentalIntPrvdCndRulePass", "PD", "API", "input", "cndVal", ":", "{}\",apiPrvdCnd.getVal());", "logger.debug(\"<pd>", "isPreferentalIntPrvdCndRulePass", "PD", "API", "input", "cndVal", ":", "{}\",apiPrvdCnd.getListCd());", "}", "}", "}", "return", "_getPdCndCore().isPrefInterestProvideCndPassApplyRule(prefInterestProvideCndPassApplyRuleIn);", "}"], "docstring_tokens": ["This", "Method", "inquire", "whether", "Preferential", "Interest", "provide", "condition", "pass", "apply", "rule."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "arrXtnInfoMap,", "Integer", "arrSrvcBlckngSeqNbr,", "Integer", "seqNbr,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if", "(arrXtnInfoMap", "==", "null", "||", "arrXtnInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\uae30\uc874", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "ArArrSrvcBlckngSIO", "subInfoCache", "=", "_getSubInfoCache(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "ArArrSrvcBlckngSIO();", "subInfoCache.setArrId(arrRealImpl.getArrId());", "subInfoCache.setArrSrvcBlckngSeqNbr(arrSrvcBlckngSeqNbr);", "subInfoCache.setSeqNbr(seqNbr);", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveArArrSrvcBlckngSubH(arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(arrXtnInfoMap,", "subInfoCache);", "//", "insert", "_getArArrSrvcBlckngSDso().insert(subInfoCache);", "//", "save", "cache", "_saveSubInfoCache(subInfoCache,", "arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(arrXtnInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveArArrSrvcBlckngSubH((ArrRealImpl)", "arrRealImpl,", "arrSrvcBlckngSeqNbr,", "seqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(arrXtnInfoMap,", "subInfoCache);", "//", "update", "_getArArrSrvcBlckngSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "the", "appraisal", "preferential", "claim", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "CaExtrnlIntrfcMsgAuthInfoMgmtSvcDelIn", "clone(){", "try{", "CaExtrnlIntrfcMsgAuthInfoMgmtSvcDelIn", "object=", "(CaExtrnlIntrfcMsgAuthInfoMgmtSvcDelIn)super.clone();", "if", "(", "this.deleteList==", "null", ")", "object.deleteList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.externalproxy.service.dto.CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.externalproxy.service.dto.CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn>(deleteList.size());", "for(", "bankware.corebanking.configurationadmin.externalproxy.service.dto.CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn", "item", ":", "deleteList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.externalproxy.service.dto.CaExtrnlIntrfcMsgAuthInfoMgmtSvcRgstIn)item.clone());", "}", "object.deleteList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaRoleMgmtSvcGetRoleScreenRelationOut", "clone(){", "try{", "CaRoleMgmtSvcGetRoleScreenRelationOut", "object=", "(CaRoleMgmtSvcGetRoleScreenRelationOut)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "registerControlCenterBasic(CaCntrlCntrMngrSvcGetIO", "in)", "throws", "BizApplicationException", "{", "//", "\uc785\ub825\ud56d\ubaa9", "\ub9e4\ud551", "CaSvCntrlCntrMIO", "daoIn", "=", "_setInputControlCenterBasic(", "in", ");", "//", "\uc81c\uc5b4\uc13c\ud130\uc2dd\ubcc4\uc790", "\ucc44\ubc88", "//", "\ucc44\ubc88\uaddc\uce59", ":", "\uc81c\uc5b4\uc13c\ud130\ucf54\ub4dc(2)", "+", "\uc77c\ub828\ubc88\ud638", "String", "cntrlCntrId", "=", "_getSvCntrlCntrMDso().selectMaxCntrlCntrId(", "daoIn", ");", "cntrlCntrId", "=", "daoIn.getCntrlCntrTpCd()", "+", "\"0000000000000\".substring(0,", "13", "-", "cntrlCntrId.length())", "+", "cntrlCntrId;", "//", "\uc81c\uc5b4\uc13c\ud130\uc2dd\ubcc4\uc790", "\ucc44\ubc88", "daoIn.setCntrlCntrId(", "cntrlCntrId", ");", "_getSvCntrlCntrMDso().insert(daoIn);", "return", "daoIn.getCntrlCntrId();", "//", "\uc81c\uc5b4\uc13c\ud130\uc2dd\ubcc4\uc790", "\ub9ac\ud134", "}"], "docstring_tokens": ["Register", "a", "control", "center", "basic", "information."]}
{"code_tokens": ["public", "void", "registerDocReferenceAttributeList(List<CaDocRefAtrbtIO>", "docRefAtrbtList)", "throws", "BizApplicationException", "{", "_getDocRefAtrbt().create(getDocInst(),", "docRefAtrbtList);", "setReferenceObjectList(docRefAtrbtList);", "}"], "docstring_tokens": ["It", "registers", "document", "reference", "attribute", "list."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "String", "txDt,", "Integer", "txSeqNbr,", "InsrncImpl", "insrncImpl)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsInsrncSIO", "subInfoCache", "=", "getSubInfoCache(insrncImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsInsrncSIO();", "subInfoCache.setInsrncId(insrncImpl.getInsrncBasicCache().getInsrncId());", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(insrncImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-1.", "insert", "_getAsInsrncSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "insrncImpl.setInsrncSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(insrncImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4map\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "2-2.", "update", "_getAsInsrncSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "the", "asset", "transaction", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "List<CaStPdXtnAmtTpMIO>", "selectList(CaStPdXtnAmtTpMIO", "stPdXtnAmtTpCdIO)", "throws", "BizApplicationException", "{", "return", "_getStPdXtnAmtTpCd().selectList(stPdXtnAmtTpCdIO);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "validate(String", "arrSrvcCd,ArrRealCore", "arrReal,", "CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "if", "(cust.isClosingBzman()){", "//Customer's", "business", "is", "closed.", "This", "service", "({0})", "could", "not", "be", "finished", "properly", "//\uace0\uac1d\uc774", "\ud3d0\uc5c5\uc0c1\ud0dc\uc785\ub2c8\ub2e4.", "\ubcf8\uc11c\ube44\uc2a4({0})", "\uc2e4\ud589\uc774", "\ubd88\uac00", "\ud569\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0297\",", "new", "Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)});", "}", "}"], "docstring_tokens": ["Processing", "rules", "should", "be", "commonly", "performed", "according", "to", "the", "rules", "defined", "in", "the", "service", "processing", "rule,", "based", "on", "the", "service", "type", "input."]}
{"code_tokens": ["public", "List<CaAssetKndBaseIO>", "getListAssetKind(String", "instCd,String", "assetTpCd,", "String", "higherAssetKndCd)", "throws", "BizApplicationException{", "List<CaAssetKndBaseIO>", "assetKndList", "=", "new", "ArrayList<CaAssetKndBaseIO>();", "CaAsAssetKndMIO", "asAssetKndMIn", "=", "new", "CaAsAssetKndMIO();", "asAssetKndMIn.setInstCd(instCd);", "asAssetKndMIn.setAssetTpCd(assetTpCd);", "asAssetKndMIn.setHighAssetKndCd(higherAssetKndCd);", "for(CaAsAssetKndMIO", "assetKndM", ":", "_getAsAssetKndMDso().selectList(asAssetKndMIn)){", "CaAssetKndBaseIO", "assetKndBaseIO", "=", "_setAssetKndBaseIO(assetKndM);", "assetKndList.add(assetKndBaseIO);", "}", "return", "assetKndList;", "}"], "docstring_tokens": ["It", "inquiries", "asset", "kind", "list", "by", "higher", "asset", "type", "code."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled()){", "logger.debug(\"ArrCndPdArrChnlImpl", "-", "getListCd", ":", "{}\",", "getListCd());", "logger.debug(\"ArrCndPdArrChnlImpl", "-", "isValidCndValue(getListCd()", "\",", "isValidCndValue(getListCd()));", "}", "if", "(!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){", "//", "This", "product", "is", "not", "allowed", "to", "trade", "channel", ".", "Target", "Products", ":", "{0}", "please", "contact", "help", "desk", "//", "\ucde8\uae09\ud558\uace0\uc790", "\ud558\ub294", "\uc0c1\ud488\uc774", "\uac70\ub798", "\uac00\ub2a5\ud55c", "\ucc44\ub110\uc774", "\uc544\ub2d9\ub2c8\ub2e4.", "\ub300\uc0c1\uc0c1\ud488", ":", "{0}", "throw", "new", "BizApplicationException(\"AAPARE0328\"", ",", "new", "String[]{getArrangementCore().getPd().getPdNm()});", "}", "}"], "docstring_tokens": ["Perform", "the", "condition", "action", "related", "to", "the", "specific", "service", "type.", "For", "example", "1", ",", "In", "case", "of", "loan", "installment", "disbursement", "possible", "condition", ",the", "loan", "disbursement", "possible", "condition", "class'", "\"doServiceAction\"", "method", "dose", "the", "validation", "step", "like", "1.investigates", "disbursed", "amount,", "2.get", "product", "condition", "value", "whether", "installment", "disbursement", "is", "allowed,", "3.", "make", "decision", "whether", "the", "service", "is", "permitted", "or", "not.", "The", "other", "example,", "the", "interest", "capitalization", "YN", "condition", "class", "do", "the", "action", "to", "make", "a", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date", "when", "arrangement", "open", "service", "is", "executed."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "CustImpl", "custImpl)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(subInfoMap", "==", "null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustSIO", "subInfoIO", "=", "getSubInfoCache(custImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtCustSIO();", "subInfoIO.setCustId(custImpl.getCustId());", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_getAtCustSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(custImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_getAtCustSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "preferential", "claim", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo,", "String", "txDt,", "Integer", "txSeqNbr,", "AssetImpl", "assetImpl,", "Integer", "assetThingSeqNbr)", "throws", "BizApplicationException{", "//", "0.", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{_getNewSubInfo(assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr)).getClass().getSimpleName()});", "}", "logger.debug(\"##", "<AS>", "saveSubInfo", "->", "subInfo", "=", "{}", "::", "\",", "subInfo.getFieldValues());", "//", "1.", "\uc790\uc0b0\ubb3c\uac74\ubcf4\uc870\uba85\uc138\uc758", "\uc885\ub958", "\uc870\ud68c", "AssetThingSubInfoKndEnum", "subInfoKnd", "=", "assetImpl.getAssetThingSubInfoKnd(assetThingSeqNbr);", "//", "2.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "for(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(entry.getValue()", "!=", "null)", "{", "_getAtrbtChk().checkStandardAttribute(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(assetImpl,", "assetThingSeqNbr);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"assetId\",", "assetImpl.getAssetBasicCache().getAssetId());", "//", "PK", "setting", "subInfoCache.set(\"assetThingSeqNbr\",", "assetThingSeqNbr);", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(assetImpl,", "assetThingSeqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "3-1.", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "4.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoKnd,", "subInfoCache,", "assetImpl,", "assetThingSeqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(assetImpl,", "assetThingSeqNbr,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "3-2.", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "asset", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "ResetMembershipTransactionPasswordIn", "clone(){", "try{", "ResetMembershipTransactionPasswordIn", "object=", "(ResetMembershipTransactionPasswordIn)super.clone();", "if", "(", "this.xtnAtrbtList==", "null", ")", "object.xtnAtrbtList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO>(xtnAtrbtList.size());", "for(", "bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO", "item", ":", "xtnAtrbtList", "){", "clonedList.add(", "(bankware.corebanking.customer.security.service.dto.SelfAuthSvcXtnAtrbtIO)item.clone());", "}", "object.xtnAtrbtList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<BfCnd>", "getCndMultiple(List<String>", "cndCdList,", "String", "aplyStartDt,", "String", "aplyStartTm,", "String", "aplyEndDt,", "String", "aplyEndTm)", "throws", "BizApplicationException", "{", "BfCndMltplIn", "in", "=", "new", "BfCndMltplIn();", "in.setAplyStartDt(aplyStartDt);", "in.setAplyStartTm(aplyStartTm);", "in.setAplyEndDt(aplyEndDt);", "in.setAplyEndTm(aplyEndTm);", "in.setCndCdList(cndCdList);", "return", "getCndMultiple(in);", "}"], "docstring_tokens": ["This", "Method", "create", "multiple", "condition", "object", "inside", "the", "range", "based", "on", "the", "input", "condition", "code", "list"]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "{", "for", "(ProductInfoContentsDistinctionCodeEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "//", "Return", "Output", "return", "false;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "String", "getSubInfo(ActorCore", "actorCore,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getActorSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(ActorImpl)", "actorCore);", "}"], "docstring_tokens": ["Inquire", "a", "extended", "information", "of", "Subsidiary", "Information(CTI)."]}
{"code_tokens": ["public", "static", "String", "getRckngDt(CmnContextCore", "cmnContextCore)", "throws", "BizApplicationException", "{", "String", "rckngDt", "=", "cmnContextCore.getRckngDt();", "if", "(StringCoreUtils.isEmpty(rckngDt))", "{", "rckngDt", "=", "cmnContextCore.getTxDate();", "}", "return", "rckngDt;", "}"], "docstring_tokens": ["This", "method", "inquires", "a", "reckoning", "date", "of", "the", "transaction."]}
{"code_tokens": ["public", "void", "delete(InsrncStsChngIn", "in)", "throws", "BizApplicationException", "{", "super.delete(in);", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "TxQrySvcHstListOut", "clone(){", "try{", "TxQrySvcHstListOut", "object=", "(TxQrySvcHstListOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "getter", "/*", "(non-Javadoc)", "*", "@see", "bankware.corebanking.core.arrangement.arrangementcondition.interfaces.ArrCndCore#getInstCd()", "*/", "@Override", "public", "String", "getInstCd()", "{", "return", "instCd;", "}"], "docstring_tokens": ["This", "method", "inquire", "institution", "code."]}
{"code_tokens": ["public", "CaSysSrvcLogInqrySvcOut", "clone(){", "try{", "CaSysSrvcLogInqrySvcOut", "object=", "(CaSysSrvcLogInqrySvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSaleEndDateTime()", "{", "//", "Return", "output", "return", "PdUtil.concatenateKeys(Arrays.asList(getSaleEndDt(),", "getSaleEndTime()));", "}"], "docstring_tokens": ["This", "Method", "inquire", "sale", "end", "date", "time", "of", "benefit"]}
{"code_tokens": ["public", "BfCardInfoPopUpOut", "clone(){", "try{", "BfCardInfoPopUpOut", "object=", "(BfCardInfoPopUpOut)super.clone();", "if", "(", "this.cardInfo==", "null", ")", "object.cardInfo", "=", "null;", "else{", "java.util.List<bankware.corebanking.benefitapply.service.dto.BfCardInfoPopUpSub01>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.benefitapply.service.dto.BfCardInfoPopUpSub01>(cardInfo.size());", "for(", "bankware.corebanking.benefitapply.service.dto.BfCardInfoPopUpSub01", "item", ":", "cardInfo", "){", "clonedList.add(", "(bankware.corebanking.benefitapply.service.dto.BfCardInfoPopUpSub01)item.clone());", "}", "object.cardInfo", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "TxHstQrySvcGetInqDpstAcctInfoListIn", "clone(){", "try{", "TxHstQrySvcGetInqDpstAcctInfoListIn", "object=", "(TxHstQrySvcGetInqDpstAcctInfoListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "check(String", "nbr)", "throws", "BizApplicationException", "{", "if(!DataCheckUtils.checkBusinessmanRegistrationNbr(nbr))", "{", "throw", "new", "BizApplicationException(\"AAPCME0158\",", "null);", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Simple", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "AprvlVldtnExctnRgstSvcSaveIn", "clone(){", "try{", "AprvlVldtnExctnRgstSvcSaveIn", "object=", "(AprvlVldtnExctnRgstSvcSaveIn)super.clone();", "if", "(", "this.aprvlVldtnExctnRgstInfo==", "null", ")", "object.aprvlVldtnExctnRgstInfo", "=", "null;", "else{", "java.util.List<bankware.corebanking.underexamination.approval.service.dto.AprvlVldtnExctnRgstInfo>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.underexamination.approval.service.dto.AprvlVldtnExctnRgstInfo>(aprvlVldtnExctnRgstInfo.size());", "for(", "bankware.corebanking.underexamination.approval.service.dto.AprvlVldtnExctnRgstInfo", "item", ":", "aprvlVldtnExctnRgstInfo", "){", "clonedList.add(", "(bankware.corebanking.underexamination.approval.service.dto.AprvlVldtnExctnRgstInfo)item.clone());", "}", "object.aprvlVldtnExctnRgstInfo", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "AssetKndXtnInfoIO", "getExtendAtrbtInfo(String", "assetKndCd,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "super.getExtendAtrbtInfo(assetKndCd,", "xtnAtrbtNm);", "}"], "docstring_tokens": ["It", "inquires", "extended", "attribute", "information."]}
{"code_tokens": ["public", "AprvlRgstSvcGetIn", "clone(){", "try{", "AprvlRgstSvcGetIn", "object=", "(AprvlRgstSvcGetIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getInstParm(String", "instCd,", "String", "parmAtrbtNm", ")", "throws", "BizApplicationException", "{", "return", "super.getInstitutionParameterValue(instCd,", "parmAtrbtNm);", "}"], "docstring_tokens": ["It", "query", "institution", "parameter", "attribute", "value", "simply.", "if", "want", "to", "get", "the", "value", "of", "attribute", "for", "each", "institution,", "use", "the", "method."]}
{"code_tokens": ["public", "void", "saveSubInfo(ActorCore", "actorCore,", "String", "dueDlgncDscd,", "int", "dueDlgncSeqNbr,", "String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt)", "throws", "BizApplicationException", "{", "_getActorDueDlgncSubInfoBiz().saveSubInfo((ActorImpl)", "actorCore,", "dueDlgncDscd,", "dueDlgncSeqNbr,", "xtnAtrbtNm,", "xtnAtrbtCntnt);", "}"], "docstring_tokens": ["Save", "an", "appraisal", "thing", "subsidiary", "information."]}
{"code_tokens": ["public", "boolean", "check(Map<String,", "String>", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"SrvcMndtryCmpxVldtnImpl", ":", "{}\",", "atrbtCntnt);", "logger.debug(\"SrvcMndtryCmpxVldtnImpl", ":", "header={},", "input={}\",", "_getCmnContext().getServiceCode(),", "atrbtCntnt.get(\"srvcCd\"));", "}", "if(_getCmnContext().getServiceCode().equals(atrbtCntnt.get(\"srvcCd\")))", "{", "for(Map.Entry<String,", "String>", "atrbt:", "atrbtCntnt.entrySet())", "{", "if(StringUtils.isEmpty(atrbt.getValue()))", "{", "//", "{0}", "is", "mandatory", "input", "item.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@\"", "+", "atrbt.getKey()});", "}", "}", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Complex", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "int", "delete(String", "srvcPrflAtrbtNm)", "{", "return", "_getSvSrvcPrflAtrbtD().delete(srvcPrflAtrbtNm);", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["public", "List<CaMenuItemOut>", "getMenuByInstUserGroupChannel(String", "instCd,", "String", "userGrpCd,", "String", "chnlCd,", "String", "lngCd)", "throws", "BizApplicationException", "{", "_checkInput(instCd,", "userGrpCd,", "chnlCd);", "List<CaSvUserGrpMenuMSelectListForChnlMenuOut>", "selectList", "=", "null;", "selectList", "=", "_selectListMenuForLoginUser(instCd,", "userGrpCd,", "chnlCd,", "lngCd,", "\"\");", "List<CaMenuItemOut>", "outList", "=", "new", "ArrayList<CaMenuItemOut>();", "for", "(CaSvUserGrpMenuMSelectListForChnlMenuOut", "select", ":", "selectList)", "{", "CaMenuItemOut", "out", "=", "new", "CaMenuItemOut();", "out.setMenuId(select.getMenuId());//", "set", "[\uba54\ub274\uc2dd\ubcc4\uc790]", "out.setMenuNm(select.getMenuNm());//", "set", "[\uba54\ub274\uba85]", "out.setSeqNbr(select.getSeqNbr());//", "set", "[\uc77c\ub828\ubc88\ud638]", "out.setMenuItmNm(select.getMenuItmNm());//", "set", "[\uba54\ub274\ud56d\ubaa9\uba85]", "out.setParmVal(select.getParmVal());//", "set", "[\uba54\ub274\ud56d\ubaa9\uc18d\uc131\uba85]", "out.setUpSeqNbr(select.getUpSeqNbr());//", "set", "[\uc0c1\uc704\uc77c\ub828\ubc88\ud638]", "out.setScrnId(select.getScrnId());//", "set", "[\ud654\uba74\uc2dd\ubcc4\uc790]", "out.setScrnNbr(select.getScrnNbr());//", "set", "[\ud654\uba74\ubc88\ud638]", "out.setScrnNm(select.getScrnNm());//", "set", "[\ud654\uba74\uba85]", "out.setLeadingScrnId(select.getLeadingScrnId());//", "set", "[\uc120\ud589\ud654\uba74\uc2dd\ubcc4\uc790]", "out.setScrnGenPtrnCd(select.getScrnGenPtrnCd());//", "set", "[\ud654\uba74\uc0dd\uc131\ud328\ud134\ucf54\ub4dc]", "out.setScrnAtrbtNm(select.getScrnAtrbtNm());//", "set", "[\ud654\uba74\uc18d\uc131\uba85]", "out.setIconNm(select.getIconNm());", "out.setScrnUrlAddr(select.getScrnUrlAddr());", "outList.add(out);", "}", "return", "outList;", "}"], "docstring_tokens": ["Get", "menu", "set", "by", "institution", "code,", "user", "group", "code,", "channel", "code,", "language", "code."]}
{"code_tokens": ["public", "RegisterMbrshpRelationWithOperationalAcctMsvcIn", "clone(){", "try{", "RegisterMbrshpRelationWithOperationalAcctMsvcIn", "object=", "(RegisterMbrshpRelationWithOperationalAcctMsvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "PdCndMltplVdlnOut", "getCndMltplVdln(PdCndMltplVdlnIn", "in)", "throws", "BizApplicationException", "{", "ValidateInputCndValIn", "validationIn", "=", "new", "ValidateInputCndValIn();", "validationIn.setInstitutionId(getInstCd());", "validationIn.setCndList(_convertToPdCndMultipleValidationCndListInList(in.getCndList()));", "validationIn.setPdCd(getPdCd());", "validationIn.setBaseDate(PdUtil.parseStringToDate(in.getAplyDt()));", "ValidateInputCndValOut", "validateOut", "=", "_getPdCndCore().validateInputCndVal(validationIn);", "return", "_convertValidateInputCndValOutToPdCndMltplVdlnOut(validateOut);", "}"], "docstring_tokens": ["This", "Method", "verify", "product", "condition", "Error", "code", "description", "00:", "Normal", "02:", "No", "such", "condition", "defined", "under", "product", "03:", "Condition", "value", "is", "not", "correct", "04:", "Composing", "condition", "value", "is", "not", "correct", "05:", "k", "condition", "must", "be", "inputed(when", "the", "condition", "is", "a", "complex", "condition)", "99:", "It's", "composing", "condition(temporary", "code)"]}
{"code_tokens": ["public", "ArrCndCore", "getArrCndCore(String", "cndCd,", "String", "baseDt)", "throws", "BizApplicationException", "{", "return", "_getArrRealCoreFundamentalAgent().getArrCndCore(cndCd,", "baseDt,", "this);", "}"], "docstring_tokens": ["Inquire", "effective", "arrangement", "condition", "on", "specific", "date.", "Caution", ":", "base", "date", "input", "is", "referenced", "based", "on", "as", "arrangement", "open", "date."]}
{"code_tokens": ["public", "BfComplexCndStructureInfoOut", "getComplexCndStructureInfo(List<CmpsCnd>", "cmpsCndList)", "throws", "BizApplicationException", "{", "BfComplexCndStructureInfoOut", "out", "=", "new", "BfComplexCndStructureInfoOut();", "ComplexCndTierNumIn", "complexCndTierNumIn", "=", "new", "ComplexCndTierNumIn();", "complexCndTierNumIn.setInstitutionId(getInstCd());", "complexCndTierNumIn.setComplexStructureId(getCmpxStrctrId());", "if", "(CollectionUtils.isNotEmpty(cmpsCndList))", "{", "List<ComposingCnd>", "composingCndList", "=", "new", "ArrayList<>();", "for", "(CmpsCnd", "cmpsCnd", ":", "cmpsCndList)", "{", "ComposingCnd", "composingCnd", "=", "new", "ComposingCnd();", "composingCnd.setComposingCndCd(cmpsCnd.getCmpsCndCd());", "composingCnd.setCndTypeCd(cmpsCnd.getCndTpCd());", "composingCnd.setMeasureUnitCd(cmpsCnd.getMsurUnitCd());", "composingCnd.setBelowUnderDscd(cmpsCnd.getBlwUndrDscd());", "composingCnd.setCurrencyCd(cmpsCnd.getCrncyCd());", "composingCnd.setInquirySeq(cmpsCnd.getCmpxCndCmpsSeq());", "composingCnd.setListCd(cmpsCnd.getListCd());", "composingCnd.setVal(cmpsCnd.getVal());", "composingCnd.setIsCalculationBaseCnd(cmpsCnd.isIsCalculationBaseCnd());", "composingCndList.add(composingCnd);", "}", "complexCndTierNumIn.setComposingCndList(composingCndList);", "}", "com.bankware.pf.product.api.models.BfComplexCndStructureInfoOut", "bfComplexCndStructureInfoOut", "=", "BfCndCoreImpl.getInstance().getComplexCndTierNum(complexCndTierNumIn);", "if", "(bfComplexCndStructureInfoOut", "!=", "null)", "{", "out.setCmpxStrctrId(bfComplexCndStructureInfoOut.getComplexStructureId());", "out.setTierNbr(bfComplexCndStructureInfoOut.getTierNum());", "}", "//", "Return", "output", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "inquire", "the", "tier", "number", "for", "complex", "condition", "value", "with", "composing", "condition", "input", "value."]}
{"code_tokens": ["public", "boolean", "checkCode(CaCdNbrInfoIO", "in,", "String", "cd)", "throws", "BizApplicationException", "{", "String", "instCd", "=", "in.getInstCd();", "if(StringUtils.isEmpty(instCd))", "{", "instCd", "=", "_getCaCmnContext().getInstCode();", "}", "CaCmInstSbstCdDIO", "daoIn", "=", "new", "CaCmInstSbstCdDIO();", "daoIn.setInstCd(instCd);", "daoIn.setCdNbr(in.getCdNbr());", "daoIn.setCd(cd);", "daoIn.setActvStsCd(CaActiveStatusEnum.ACTIVE.getValue());", "List<CaCmInstSbstCdDIO>", "daoOutList", "=", "_getCmInstSbstCdDDso().selectListByCondition(daoIn);", "if(daoOutList", "==", "null", "||", "daoOutList.isEmpty())", "{", "return", "false;", "}", "return", "true;", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value", "by", "cdDtlIO", "DTO.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter."]}
{"code_tokens": ["public", "List<XtnCdIO>", "getListCode(String", "cdNbr,", "Map<String,", "Object>", "supplInfoVal)", "throws", "BizApplicationException", "{", "List<XtnCdIO>", "xtnCdIOs", "=", "new", "ArrayList<XtnCdIO>();", "List<CmClHrarcyMIO>", "cdList", "=", "_getCmClHrarcyMDso().selectAll();", "//TODO", "\uae30\uad00\ud30c\ub77c\ubbf8\ud130ENUM", "\uc73c\ub85c", "\ubcc0\uacbd", "String", "lngCd", "=", "supplInfoVal", "==", "null", "?", "null", ":", "String.valueOf(supplInfoVal.get(InstParamEnum.LANGUAGE_CODE.getValue()));", "for", "(CmClHrarcyMIO", "cd", ":", "cdList)", "{", "XtnCdIO", "xtnCdIO", "=", "new", "XtnCdIO();", "xtnCdIO.setCd(cd.getClHrarcyId());", "if(StringCoreUtils.isEmpty(lngCd))", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CdNbrCoreEnum.CLASSIFICATION_HIERARCHY_CD.getValue().concat(cd.getClHrarcyId())));", "}", "else", "{", "xtnCdIO.setCdNm(_getTrnsfrLng().getTransferLanguage(CCM01.TRANS_CODE_VAL,", "CdNbrCoreEnum.CLASSIFICATION_HIERARCHY_CD.getValue().concat(cd.getClHrarcyId()),", "lngCd));", "}", "xtnCdIOs.add(xtnCdIO);", "}", "return", "xtnCdIOs;", "}"], "docstring_tokens": ["This", "method", "returns", "the", "list", "of", "code", "corresponding", "to", "the", "search", "condition"]}
{"code_tokens": ["public", "AprvSrchSvcIn", "clone(){", "try{", "AprvSrchSvcIn", "object=", "(AprvSrchSvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value){", "for", "(StlmntCrctnDscdEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "PrtnrDeptSrchSvcTreeOut", "clone(){", "try{", "PrtnrDeptSrchSvcTreeOut", "object=", "(PrtnrDeptSrchSvcTreeOut)super.clone();", "if", "(", "this.deptList==", "null", ")", "object.deptList", "=", "null;", "else{", "java.util.List<bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut>(deptList.size());", "for(", "bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut", "item", ":", "deptList", "){", "clonedList.add(", "(bankware.corebanking.partner.query.service.dto.PrtnrDeptSrchSvcTreeListOut)item.clone());", "}", "object.deptList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaSysSrvcLogInqrySvcIn", "clone(){", "try{", "CaSysSrvcLogInqrySvcIn", "object=", "(CaSysSrvcLogInqrySvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ArrTxImpl", "arrTx){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "\uc815\uc0b0\uac70\ub798\ubcf4\uc870\uba85\uc138", "\uc870\ud68c", "IValueObject", "subInfo", "=", "getSubInfoCache(arrTx);", "//", "\ubcf4\uc870\uba85\uc138", "\uc815\ubcf4\uac00", "\uc5c6\uc744", "\uacbd\uc6b0", "\ube48Map", "return", "if(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "\uc815\uc0b0\ubcf4\uc870\uba85\uc138Map", "set", "for(Entry<String,Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(!_isFieldOfSubInfo(arrTx,", "entry.getKey()))", "{", "continue;", "}", "if(entry.getValue()!=null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "asset", "as", "a", "map."]}
{"code_tokens": ["public", "String", "getCode(String", "cdNbr,", "String", "code)", "throws", "BizApplicationException", "{", "CaCmnCdCheckIn", "in", "=", "new", "CaCmnCdCheckIn();", "in.setCdNbr(cdNbr);", "in.setCd(code);", "return", "getCode(in).getCdNm();", "}"], "docstring_tokens": ["It", "get", "the", "code", "that", "meet", "the", "search", "condition.", "Code", "information", "is", "consisted", "of", "CmnCdCheckOut.", "(cdNbr,", "cd,", "cdNm,", "delYn,", "cdAbrvtnNm)"]}
{"code_tokens": ["public", "CaPdInfoInqrySvcOut", "getListPdInfo(CaPdInfoInqrySvcIn", "in)", "throws", "BizApplicationException", "{", "/**", "Get", "Product", "List", "for", "ComboBox", "*/", "List<CaPdInfoProviderIO>", "rslt", "=", "_getCaPdInfoProvider().getListPdInfo(_setPdInfoProviderIO(in));", "CaPdInfoInqrySvcOut", "out", "=", "new", "CaPdInfoInqrySvcOut();", "out.setTbl(_setPdPdInfoProviderSrvcTblOutList(rslt));", "return", "out;", "}"], "docstring_tokens": ["It", "inquire", "list", "of", "product", "template"]}
{"code_tokens": ["public", "Integer", "getCustCountByName(String", "instCd,", "String", "actorNm,", "String", "custStsCd,", "String", "actorNmTpCd,", "String", "actorTpCd)", "throws", "BizApplicationException", "{", "/*", "query", "actor", "name", "*/", "return", "_getAtActorNmDXtnDso().selectCustCountByCustNm(instCd,", "actorNm,", "actorNmTpCd,", "actorTpCd,", "_getCmnContext().getTxDate(),", "CustStsEnum.IGNORE.getValue(),", "ActorStsEnum.IGNORE.getValue(),", "InfoStsEnum.NORMAL.getValue(),", "custStsCd);", "}"], "docstring_tokens": ["It", "gets", "customers'", "count", "that", "matches", "the", "input", "customer", "name,", "customer", "status,", "name", "type", "code,", "actor", "type", "code.", "It", "inquires", "the", "customers", "that", "have", "similar", "name", "with", "the", "input", "name."]}
{"code_tokens": ["public", "CaXpExtrnlIntrfcMsgHdrInfoDIO", "clone(){", "try{", "CaXpExtrnlIntrfcMsgHdrInfoDIO", "object=", "(CaXpExtrnlIntrfcMsgHdrInfoDIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(value))", "{", "for", "(IpctTxTpCdEnum", "item", ":", "IpctTxTpCdEnum.values())", "{", "if", "(value.equals(item.getValue()))", "{", "return", "true;", "}", "}", "return", "false;", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "AsmBsicInfoIO", "changeAsmStatus(String", "asmStsCd", ")", "throws", "BizApplicationException", "{", "//", "2.", "\uc2ec\uc0ac\uae30\ubcf8", "\uc790\uc0b0\uc0c1\ud0dc", "\ubcc0\uacbd", "(\"\ubd80\uacb0\"\uc0c1\ud0dc\ub85c", "\ubcc0\uacbd)", "return", "_getAsmBsicBiz().changeAsmStatus(getBasicInfo().getAsmId(),", "asmStsCd);", "}"], "docstring_tokens": ["change", "assessment", "status"]}
{"code_tokens": ["public", "CaDocSrchSvcGetDocClTreeListOut", "clone(){", "try{", "CaDocSrchSvcGetDocClTreeListOut", "object=", "(CaDocSrchSvcGetDocClTreeListOut)super.clone();", "if", "(", "this.docClTree==", "null", ")", "object.docClTree", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeOut>(docClTree.size());", "for(", "bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeOut", "item", ":", "docClTree", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.document.service.dto.CaDocSrchSvcGetDocClTreeOut)item.clone());", "}", "object.docClTree", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(PrtnrCore", "prtnrCore,", "String", "xtnAtrbtNm)", "throws", "BizApplicationException", "{", "return", "_getPrtnrSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(PrtnrImpl)", "prtnrCore);", "}"], "docstring_tokens": ["This", "method", "inquires", "settlement", "subsidiary", "detail", "information", "list", "(inquire", "all", "subsidiary", "detail", "information", "of", "a", "given", "settlement", "master", "by", "using", "the", "key", "value", "other", "than", "the", "detail", "sequence", "number)."]}
{"code_tokens": ["public", "CaClassMgmtSvcSaveClassInfoIn", "clone(){", "try{", "CaClassMgmtSvcSaveClassInfoIn", "object=", "(CaClassMgmtSvcSaveClassInfoIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "StlmntGlQuerySvcSrchKeyIn", "clone(){", "try{", "StlmntGlQuerySvcSrchKeyIn", "object=", "(StlmntGlQuerySvcSrchKeyIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "checkCode(CaCdNbrInfoIO", "in,", "String", "cd)", "throws", "BizApplicationException", "{", "String", "xtnCdClassNm", "=", "in.getXtnCdClassNm();", "String", "lngCd", "=", "in.getLngCd();", "if", "(StringUtils.isEmpty(xtnCdClassNm))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@xtnCdClassNm\"", "});", "}", "//", "\ud574\ub2f9", "\ud074\ub798\uc2a4\uc758", "\ube48\uba85", "\ucd94\ucd9c", "\ud574\uc57c", "\ub41c\ub2e4.", "CaCbpClassIO", "cbpClass", "=", "_getCbpClass().getClassInfo(xtnCdClassNm);", "String", "beanName", "=", "cbpClass.getBeanNm();", "if(logger.isDebugEnabled())", "{", "logger.debug(\"lyj", "beanName", ":", "{}\",", "beanName);", "}", "if(!CCM01.CHAR_AT.equals(beanName))", "{", "xtnCdClassNm", "=", "beanName;", "}", "if", "(StringUtils.isEmpty(lngCd))", "{", "lngCd", "=", "_getCaCmnContext().getLanguageCode();", "}", "String", "cdNbr", "=", "in.getCdNbr();", "String", "instCd", "=", "in.getInstCd();", "if(StringUtils.isEmpty(in.getInstCd()))", "{", "instCd", "=", "_getCaCmnContext().getInstCode();", "}", "//", "Get", "the", "login", "user's", "language", "code", "name", "Map<String,", "Object>", "supplInfoVal", "=", "new", "HashMap<String,", "Object>();", "supplInfoVal.put(CaInstParamEnum.LANGUAGE_CODE.getValue(),", "lngCd);", "supplInfoVal.put(CaInstParamEnum.INSTITUTION_CODE.getValue(),", "instCd);", "supplInfoVal.put(CCM03.CD,", "cd);", "XtnCdCore", "xtdCd", "=", "(XtnCdCore)", "CbbApplicationContext.getBean(xtnCdClassNm);", "return", "xtdCd.checkCode(cdNbr,", "supplInfoVal);", "}"], "docstring_tokens": ["It", "check", "code", "number", "&", "code", "value", "by", "cdDtlIO", "DTO.", "The", "arguments", "for", "this", "method", "is", "a", "pair", "of", "code", "number", "and", "code.", "It", "returns", "true", "if", "there", "are", "query", "result", "of", "parameter."]}
{"code_tokens": ["public", "FxFeeDtlIO", "clone(){", "try{", "FxFeeDtlIO", "object=", "(FxFeeDtlIO)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "PdMerchantGroupDetailInqrySvcIn", "clone(){", "try{", "PdMerchantGroupDetailInqrySvcIn", "object=", "(PdMerchantGroupDetailInqrySvcIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Integer", "delete(ArArrIssmdaBlckngXtnDIO", "arArrIssmdaBlckngXtnDIO){", "return", "_getArArrIssmdaBlckngXtnD().delete(arArrIssmdaBlckngXtnDIO);", "}"], "docstring_tokens": ["It", "removes", "document", "information."]}
{"code_tokens": ["public", "Integer", "getListDataCntForConsistency()", "throws", "BizApplicationException", "{", "return", "_getDstbCnstncySvScrnMDso().selectListCntForConsistency();", "}"], "docstring_tokens": ["Validate", "Query", "Row", "Count", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut", "clone(){", "try{", "CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut", "object=", "(CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtlOut)super.clone();", "if", "(", "this.xtnAtrbtXtnAtrbtDtlList==", "null", ")", "object.xtnAtrbtXtnAtrbtDtlList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl>(xtnAtrbtXtnAtrbtDtlList.size());", "for(", "bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl", "item", ":", "xtnAtrbtXtnAtrbtDtlList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.attribute.service.dto.CaTblMgmtSvcGetXtnAtrbtXtnAtrbtDtl)item.clone());", "}", "object.xtnAtrbtXtnAtrbtDtlList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "StlmntPrgrsMgmtSvcSrchModifyIn", "clone(){", "try{", "StlmntPrgrsMgmtSvcSrchModifyIn", "object=", "(StlmntPrgrsMgmtSvcSrchModifyIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "staffXtnInfoHash,", "StaffCore", "staffCore)", "throws", "BizApplicationException", "{", "_getStaffSubInfoBiz().saveMapSubInfo(staffXtnInfoHash,", "(StaffImpl)", "staffCore);", "}"], "docstring_tokens": ["Save", "the", "asset", "transaction", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "void", "validate(CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "validate(null,", "cust,", "vldtnRequiredValMap);", "}"], "docstring_tokens": ["The", "verification", "rules", "are", "performed", "based", "on", "the", "type", "of", "service", "in", "the", "arrangement."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(value))", "{", "for", "(DocIssueStsChngRsnEnum", "enumObject:", "values())", "{", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{", "value,", "\"@docIssueStsChngRsnCd\"", "});", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "String", "getCndVal()", "throws", "BizApplicationException", "{", "//", "\ud574\ub2f9", "\uba54\uc18c\ub4dc\ub294", "({0})", "\ud074\ub798\uc2a4\uc758", "\uc778\uc2a4\ud134\uc2a4\ub85c", "\uc0ac\uc6a9\ud560", "\uc218", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\uacc4\uc57d\ub2f4\ub2f9\uc790\uc5d0\uac8c", "\ubb38\uc758\ubc14\ub78d\ub2c8\ub2e4.", "//", "This", "method", "cannot", "be", "used", "by", "instance", "of", "({0})", "class.", "throw", "new", "BizApplicationException(\"AAPARE0678\",new", "Object[]{this.getClass().getName()});", "}"], "docstring_tokens": ["This", "method", "inquire", "privide", "condition", "value."]}
{"code_tokens": ["public", "int", "modifyArrTx(StTxMIO", "stTxMIO,", "ArrRealCore", "arr)", "throws", "BizApplicationException", "{", "switch(ArrTxKndCoreEnum.getEnum(getArrTxKnd(arr)))", "{", "case", "ARR_TX_INTERNAL", ":", "return", "_getStTxIntrnlMDso().updateArrTx(stTxMIO);", "case", "ARR_TX_TEMPRARY:", "return", "_getStTxTmpryMDso().updateArrTx(stTxMIO);", "case", "ARR_TX_NORMAL:", "return", "_getStTxMDso().updateArrTx(stTxMIO);", "default:", "throw", "new", "BizApplicationException(\"AAPSTE0212\");", "}", "}"], "docstring_tokens": ["This", "method", "modifies", "an", "arrangement", "transaction", "ledger."]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo,", "String", "txDt,", "Integer", "txSeqNbr,", "ArrRealImpl", "arrRealImpl)", "throws", "BizApplicationException", "{", "//", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{_getNewSubInfo(arrRealImpl.getSubInfoKnd()).getClass().getSimpleName()});", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uc885\ub958", "\uc870\ud68c", "ArrSubInfoKndEnum", "subInfoKnd", "=", "arrRealImpl.getSubInfoKnd();", "//", "2.", "\uacc4\uc57d\uc5d0", "\uc800\uc7a5\ub41c", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(arrRealImpl);", "if", "(subInfoCache", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"arrId\",", "arrRealImpl.getArrId());", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "save", "cache", "arrRealImpl.saveSubInfoCache(XtnTableEnum.AR_ARR_M.getValue(),", "subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(arrRealImpl,", "subInfoKnd,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "I/F", "VO\ub97c", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Store", "one", "extended", "attribute", "of", "Subsidiary", "Information(CTI).", "Storage", "logic", "implemented", "in", "the", "project", "is", "performed", "at", "the", "time", "of", "performance."]}
{"code_tokens": ["public", "AprvlCndMgmtSvcGetAprvlCndListOut", "clone(){", "try{", "AprvlCndMgmtSvcGetAprvlCndListOut", "object=", "(AprvlCndMgmtSvcGetAprvlCndListOut)super.clone();", "if", "(", "this.cndList==", "null", ")", "object.cndList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.approval.service.dto.AprvlCndMgmtSvcGetAprvlCndListCndOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.approval.service.dto.AprvlCndMgmtSvcGetAprvlCndListCndOut>(cndList.size());", "for(", "bankware.corebanking.configurationadmin.approval.service.dto.AprvlCndMgmtSvcGetAprvlCndListCndOut", "item", ":", "cndList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.approval.service.dto.AprvlCndMgmtSvcGetAprvlCndListCndOut)item.clone());", "}", "object.cndList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaCmNbrgRuleMIO", "select(CaCmNbrgRuleMIO", "cmNbrgRuleMIO)", "{", "return", "_getCaCmNbrgRuleM().select(cmNbrgRuleMIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "terminate(ArrIssmdaStsChngIn", "arrIssmdaStsChngIn)", "throws", "BizApplicationException", "{", "super.changeStatus(ArrIssmdaStsEnum.TERMINATED.getValue(),", "arrIssmdaStsChngIn.getStsChngRsnCntnt(),", "arrIssmdaStsChngIn.getIssmdaStsChngBizCdNbr(),", "arrIssmdaStsChngIn.getIssmdaStsChngBizCd(),", "arrIssmdaStsChngIn.getXtnInfoList(),", "arrIssmdaStsChngIn.getStsChngTxDt(),", "arrIssmdaStsChngIn.getStsChngTxSeqNbr());", "}"], "docstring_tokens": ["Change", "status", "of", "arrangement", "activity", "into", "\"Terminated\"."]}
{"code_tokens": ["public", "String", "getTransferLanguage(String", "trnsfrKnd,", "String", "trnsfrKeyVal)", "throws", "BizApplicationException", "{", "return", "getTransferLanguage(trnsfrKnd,", "trnsfrKeyVal,", "_getCmnContextCore().getLanguageCode());", "}"], "docstring_tokens": ["Offering", "terminology", "that", "fit", "with", "the", "language", "code."]}
{"code_tokens": ["public", "List<InterestCalculationSection>", "apply(ApplyInterestCalculationSectionExceptionIn", "in,", "List<InterestCalculationSection>", "intCalIntervals)", "throws", "BizApplicationException", "{", "String", "maturityDt", "=", "in.getMaturityDt();", "//", "\ub9cc\uae30\ub144\uc6d4\uc77c", "List<InterestCalculationSection>", "newIntervals", "=", "new", "ArrayList<>();", "for", "(InterestCalculationSection", "interval", ":", "intCalIntervals)", "{", "String", "calEndDt", "=", "interval.getCalEndDt();", "//", "\ub9cc\uae30\uc77c", "<", "\uacc4\uc0b0\uc885\ub8cc\uc77c", "(\uc0ad\uc81c)", "if(DateCoreUtils.isDt1BeforeDt2(maturityDt,", "calEndDt))", "{", "continue;", "}", "//", "\ub9cc\uae30\uc77c", "=", "\uacc4\uc0b0\uc885\ub8cc\uc77c", "(201", "->", "205)", "else", "if(calEndDt.equals(maturityDt))", "{", "for(CalculationType", "type", ":", "interval.getCalTps())", "{", "if(\"201\".equals(type.getIntCalTpCd()))", "{", "type.setIntCalTpCd(\"205\");", "}", "}", "}", "newIntervals.add(interval);", "}", "return", "newIntervals;", "}"], "docstring_tokens": ["Change", "the", "status", "of", "arrangement", "into", "\"Applied\"."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"Disbursement\":", "_doDisbursementAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"Repayment\"", ":", "_doRepaymentAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"ReduceLimit\"", ":", "_doReduceLoanLimtAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"IncreaseLimit\"", ":", "_doIncreaseLoanLimitAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "case", "\"IncreaseTermExtension\"", ":", "_doIncreaseLoanLimitAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "String", "getBizDscd(){", "return", "bizDscd;", "}"], "docstring_tokens": ["This", "Method", "inquire", "product", "business", "distinction", "code"]}
{"code_tokens": ["public", "List<ArrReal>", "getCustOwnArrRealAliveNotActive", "(String", "custId,String", "bizDscd,String", "pdTpCd,String", "pdTmpltCd)", "throws", "BizApplicationException", "{", "//return", "_getArrRealRelationAgentImpl().getCustOwnArrRealAliveNotActive(custId,ArrCustRelEnum.MAIN_CONTRACTOR.getValue(),bizDscd,pdTpCd,pdTmpltCd);", "return", "_getArrCustRelQryBizImpl().getListArrRealByArrStsList(", "custId,", "ArrStsEnum.getAliveNotActiveArrStsEnumList(),", "ArrCustRelEnum.MAIN_CONTRACTOR.getValue(),", "bizDscd,", "pdTpCd,", "pdTmpltCd,", "null,", "0,", "0,", "false);", "}"], "docstring_tokens": ["Inquire", "a", "list", "of", "customer", "own", "(as", "main", "contractor)", "arrangements", "of", "specific", "product", "hierarchy", "currently", "not", "in", "\"Active\"", "but", "in", "alive", "status.", "Alive", "status", ":", "APPLIED,", "PROPOSED,", "UNDER_EXAMINATION,", "HOLDING,", "APPROVED,", "START_BID,", "REQUEST_SEND,", "CONFIRMED,", "ACTIVE,", "SUSPENDED,", "WINNING_BID"]}
{"code_tokens": ["public", "BigDecimal", "getRoundAmountByCurrencyCode(String", "crncyCd,", "BigDecimal", "amt,", "int", "roundingMode)", "throws", "BizApplicationException", "{", "if(StringCoreUtils.isEmpty(crncyCd)", "||", "amt", "==", "null)", "{", "return", "amt;", "}", "//", "\uae30\uad00\ucf54\ub4dc\uc758", "\ud1b5\ud654\uc815\ubcf4\ub97c", "\uba3c\uc800", "\uc870\ud68c\ud558\uace0,", "\ud574\ub2f9", "\uae30\uad00\ucf54\ub4dc\uc5d0", "\ud1b5\ud654\uc815\ubcf4\uac00", "\uc874\uc7ac\ud558\uc9c0", "\uc54a\uc73c\uba74", "STDA\uc758", "\ud1b5\ud654\uc815\ubcf4\ub97c", "return", "\ud55c\ub2e4.", "CrncyGetOut", "out", "=", "this.getCurrency(_getCmnContext().getInstCode(),", "crncyCd);", "if(out", "==", "null)", "{", "out", "=", "this.getCurrency(crncyCd);", "if(out", "==", "null)", "{", "return", "amt;", "}", "}", "BigDecimal", "modifiedAmt", "=", "amt.setScale(out.getDcmlPntLen(),", "roundingMode);", "return", "modifiedAmt;", "}"], "docstring_tokens": ["It", "modifies", "decimal", "point", "of", "amount", "according", "to", "currency", "code"]}
{"code_tokens": ["public", "IValueObject", "getSubInfo(StlmntCalcnSubInfoInqryIn", "stlmntCalcnSubInfoInqryIn)", "throws", "BizApplicationException", "{", "return", "_getStlmntCalcnSubInfoBiz().getSubInfo(_setStStlmntCalcnSIO(stlmntCalcnSubInfoInqryIn));", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "asset."]}
{"code_tokens": ["public", "String", "getInstCd()", "{", "String", "tntInstId", "=", "null;", "if", "(pdPdCndM", "==", "null)", "{", "tntInstId", "=", "this.instCd;", "if", "(StringCoreUtils.isEmpty(tntInstId))", "{", "return", "null;", "}", "}", "else", "{", "tntInstId", "=", "pdPdCndM.getInstCd();", "}", "//", "Return", "\uae30\uad00\ucf54\ub4dc", "return", "tntInstId;", "}"], "docstring_tokens": ["This", "method", "inquire", "institution", "code."]}
{"code_tokens": ["public", "void", "saveSubInfo(AprslPrfClaimSubInfo", "subInfo,", "AprslImpl", "aprslImpl,", "Integer", "prfClaimSeqNbr)", "throws", "BizApplicationException{", "//", "0.", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{AprslPrfClaimSubInfo.class.getSimpleName()});", "}", "logger.debug(\"##", "<AS>", "saveSubInfo", "->", "subInfo", "=", "{}", "::", "\",", "subInfo.getFieldValues());", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "for(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "if(entry.getValue()", "!=", "null)", "{", "_getAtrbtChk().checkStandardAttribute(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsAprslPrfClaimSIO", "subInfoCache", "=", "getSubInfoCache(aprslImpl,", "prfClaimSeqNbr);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsAprslPrfClaimSIO();", "subInfoCache.setAprslId(aprslImpl.getAprslBasicCache().getAprslId());", "//", "PK", "setting", "subInfoCache.setPrfClaimSeqNbr(prfClaimSeqNbr);", "//", "PK", "setting", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "2-1.", "insert", "_getAsAprslPrfClaimSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "_saveSubInfoCache(subInfoCache,", "aprslImpl,", "prfClaimSeqNbr);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfo,", "subInfoCache))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc815\ubcf4\ub97c", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(subInfo,", "subInfoCache);", "//", "2-2.", "update", "_getAsAprslPrfClaimSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "security", "interest", "subsidiary", "information."]}
{"code_tokens": ["public", "List<PntCnd>", "getAllCnd()", "throws", "BizApplicationException", "{", "List<PntCnd>", "out", "=", "new", "ArrayList<PntCnd>();", "AllPntCndListIn", "cndIn", "=", "new", "AllPntCndListIn();", "cndIn.setInstitutionId(pdPdM.getInstCd());", "cndIn.setPntCd(pdPdM.getPdCd());", "List<PntCndBaseOut>", "cndList", "=", "_getPntCndCore().getListAllPntCnd(cndIn);", "if", "(!CollectionCoreUtils.isEmpty(cndList))", "{", "for", "(PntCndBaseOut", "cndBaseOut", ":", "cndList)", "{", "PntCndImpl", "cnd", "=", "new", "PntCndImpl(this,", "aplyDt,", "aplyTm,", "_convertPntCndBaseOutToPdPdMIO(cndBaseOut));", "out.add(cnd);", "}", "}", "//", "Return", "Output", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "creates", "a", "list", "of", "all", "condition", "objects", "defined", "in", "point", "within", "the", "date", "range."]}
{"code_tokens": ["public", "SrvcBlckngTrmntSvcOut", "clone(){", "try{", "SrvcBlckngTrmntSvcOut", "object=", "(SrvcBlckngTrmntSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(ActorImpl", "actorImpl,", "String", "ctcptId,", "Integer", "ctcptChngSeqNbr)", "throws", "BizApplicationException", "{", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtActorCtcptSIO", "subInfo", "=", "getSubInfoCache(actorImpl,", "ctcptId,", "ctcptChngSeqNbr);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "Subsidiary", "Information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["public", "ArrMrchntInfoIO", "clone(){", "try{", "ArrMrchntInfoIO", "object=", "(ArrMrchntInfoIO)super.clone();", "object.lastChngTmstmp", "=", "(bxm.omm.format.wrapper.DateFormattedWrapper)this.lastChngTmstmp.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Integer", "getListDataCntForConsistency()", "throws", "BizApplicationException", "{", "return", "_getDstbCnstncyArArrSrvcXtnAtrbtRDso().selectListCntForConsistency();", "}"], "docstring_tokens": ["Validate", "Query", "Row", "Count", "for", "Distribution", "Validation"]}
{"code_tokens": ["public", "CustCmphInqrySvcGetCustLoinIdNbrIn", "clone(){", "try{", "CustCmphInqrySvcGetCustLoinIdNbrIn", "object=", "(CustCmphInqrySvcGetCustLoinIdNbrIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaLeasePrtctnMgmtSvcGetLeasePrtctnListOut", "clone(){", "try{", "CaLeasePrtctnMgmtSvcGetLeasePrtctnListOut", "object=", "(CaLeasePrtctnMgmtSvcGetLeasePrtctnListOut)super.clone();", "if", "(", "this.leasePrtctnList==", "null", ")", "object.leasePrtctnList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn>(leasePrtctnList.size());", "for(", "bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn", "item", ":", "leasePrtctnList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.asset.service.dto.CaLeasePrtctnMgmtSvcGetLeasePrtctn)item.clone());", "}", "object.leasePrtctnList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustPrsnlChngSvcModifyIn", "clone(){", "try{", "CustPrsnlChngSvcModifyIn", "object=", "(CustPrsnlChngSvcModifyIn)super.clone();", "if", "(", "this.actorCntctPntList==", "null", ")", "object.actorCntctPntList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcCntctPntListIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcCntctPntListIO>(actorCntctPntList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcCntctPntListIO", "item", ":", "actorCntctPntList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcCntctPntListIO)item.clone());", "}", "object.actorCntctPntList", "=", "clonedList;", "}", "if", "(", "this.actorXtnInfoList==", "null", ")", "object.actorXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcXtnInfoListIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcXtnInfoListIO>(actorXtnInfoList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcXtnInfoListIO", "item", ":", "actorXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcXtnInfoListIO)item.clone());", "}", "object.actorXtnInfoList", "=", "clonedList;", "}", "if", "(", "this.actorNmList==", "null", ")", "object.actorNmList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorNmListIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorNmListIO>(actorNmList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorNmListIO", "item", ":", "actorNmList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorNmListIO)item.clone());", "}", "object.actorNmList", "=", "clonedList;", "}", "if", "(", "this.actorRelList==", "null", ")", "object.actorRelList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorRelListIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorRelListIO>(actorRelList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorRelListIO", "item", ":", "actorRelList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustPsrnlChngSvcActorRelListIO)item.clone());", "}", "object.actorRelList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CustRprsnInqrySvcGetElctrncAddrOut", "clone(){", "try{", "CustRprsnInqrySvcGetElctrncAddrOut", "object=", "(CustRprsnInqrySvcGetElctrncAddrOut)super.clone();", "if", "(", "this.ctcptXtnInfoList==", "null", ")", "object.ctcptXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut>(ctcptXtnInfoList.size());", "for(", "bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut", "item", ":", "ctcptXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.customer.query.service.dto.CustRprsnInqrySvcCtcptXtnOut)item.clone());", "}", "object.ctcptXtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "StTxEntryExRtDIO", "select(StTxEntryExRtDIO", "stTxEntryExRtDIO)", "{", "return", "_getStTxTmpryEntryExRtD().select(stTxEntryExRtDIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr,", "ScrtyIntImpl", "scrtyIntImpl)", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm)){", "return;", "}", "//", "1.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttribute(xtnAtrbtNm,", "xtnAtrbtCntnt);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AsScrtyIntSIO", "subInfoCache", "=", "getSubInfoCache(scrtyIntImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "new", "AsScrtyIntSIO();", "subInfoCache.setScrtyIntId(scrtyIntImpl.getScrtyIntBasicCache().getScrtyIntId());", "//", "PK", "setting", "//", "\ube48", "\uc774\ub825", "\uc0dd\uc131", "-->", "undo", "\uc2dc", "\ud655\uc7a5\uc18d\uc131", "\uc800\uc7a5", "\uc774\uc804\uc73c\ub85c", "\uc18d\uc131\uac12\uc744", "\uc6d0\ubcf5\uc2dc\ud0a4\uae30", "\uc704\ud568", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "2-1.", "insert", "_getAsScrtyIntSDso().insert(subInfoCache);", "//", "3.", "\uce90\uc2dc", "\uc800\uc7a5", "scrtyIntImpl.setScrtyIntSubInfoCache(subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc18d\uc131\uac12\ubcc0\uacbd\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(scrtyIntImpl,", "subInfoCache,", "txDt,", "txSeqNbr);", "//", "\uc785\ub825\ub41c", "\ud655\uc7a5\uc18d\uc131\uba85\uacfc", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9\uc744", "DBIO", "VO\uc5d0", "setting", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoCache);", "//", "2-2.", "update", "_getAsScrtyIntSDso().update(subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "an", "asset", "subsidiary", "information."]}
{"code_tokens": ["public", "ArArrAssetRStsHIO", "select(ArArrAssetRStsHIO", "arArrAssetRStsHIO)", "{", "return", "_getArArrAssetRStsH().select(arArrAssetRStsHIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "CustImpl", "custImpl)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(subInfoMap", "==", "null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustSIO", "subInfoIO", "=", "getSubInfoCache(custImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtCustSIO();", "subInfoIO.setCustId(custImpl.getCustId());", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "insert", "_getAtCustSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(custImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "Map\uc744", "DBIO", "VO\uc5d0", "\ubc18\uc601", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoIO);", "//", "update", "_getAtCustSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["This", "method", "save", "settlement", "subsidiary", "detail", "information", "using", "subInfoMap."]}
{"code_tokens": ["public", "void", "saveSubInfo(IValueObject", "subInfo", ",", "StStlmntSIO", "stStlmntSIOIn)", "{", "logger.debug(\"##<ST-StlmntSubInfoBiz>", "saveSubInfo\");", "//", "null", "check", "if(subInfo", "==", "null){", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{this.getClass().getSimpleName()});", "}", "logger.debug(\"##<ST-StlmntSubInfoBiz>", "saveSubInfo", "null", "check", "ok\");", "//", "1.create", "a", "new", "instance", "of", "DB", "IO", "IValueObject", "subInfoDBIO", "=", "new", "StStlmntSIO();", "//", "2.set", "primary", "key", "_setKey(subInfoDBIO,", "stStlmntSIOIn);", "//", "3.convert", "IvalueObject", "to", "DBIO", "VO", "DtoUtils.setSubInfoIO(subInfo,", "subInfoDBIO);", "//", "4.save", "subsidiary", "detail(\ubcf4\uc870\uba85\uc138)", "_insertSubInfo(subInfoDBIO);", "/*", "*", "settlement\ub294", "\uc18d\uc131\uc744", "\ub300\ubd80\ubd84", "insert", "\ud558\ub294", "\uacbd\uc6b0\uc774\ubbc0\ub85c", "\uc544\ub798", "\ub85c\uc9c1\uc744", "\ub9c9\uc74c", "*/", "//", "IValueObject", "sqlOut", "=", "getSubInfo(stlmnt);", "//", "//", "//", "\ud574\ub2f9", "\uac70\ub798\uad00\ub828", "\ubcf4\uc870\uba85\uc138", "\ub370\uc774\ud130\uac00", "\uc5c6\uc744", "\ub54c", "//", "if(sqlOut", "==", "null)", "{", "//", "_insertSubInfo(subInfoDBIO);", "//", "//", "\ub9f4\ubc84\ubcc0\uc218", "VO", "\uac12", "\uc124\uc815", "//", "Stlmnt.setStlmntSubInfo(subInfo);", "//", "//", "}else", "{", "//", "//", "\uae30", "\uc870\ud68c", "\ub41c", "\uac12\uc5d0", "update\ub418\uc5b4\ud560", "\ud544\ub4dc", "\uc124\uc815", "//", "DtoUtils.setSubInfoIO(subInfo,", "sqlOut);", "//", "//", "DBIO", "IO\uc5d0", "\ub0b4\uc6a9\ud544\ub4dc", "\ubc18\uc601", "//", "DtoUtils.setSubInfoIO(sqlOut,", "subInfoDBIO);", "//", "//", "_updateSubInfo(subInfoDBIO);", "//", "//", "\ub9f4\ubc84\ubcc0\uc218", "VO", "\uac12", "\uc124\uc815(sqlOut\uc740", "\uae30\uc874", "+", "\uc0c8\ub85c", "update\ub418\uc5b4\uc57c", "\ud560", "\ud544\ub4dc", "\ubaa8\ub450", "\ubc18\uc601\ub41c", "\ucd5c\uc2e0", "\ubcf4\uc870\uba85\uc138IO)", "//", "stlmnt.setStlmntSubInfo(sqlOut);", "//", "}", "}", "//", "//", "/**", "//", "*", "set", "primary", "key", "of", "subsidiary", "table", "//", "*", "@param", "stlmntSIO", "//", "*", "@param", "Stlmnt", "//", "*/", "//", "private", "IValueObject", "_setKey(IValueObject", "stlmntSIO,", "String", "arrId,", "String", "txDt,", "int", "txSeqNbr,", "String", "amtTpCd,", "String", "prchsRtrnYn)", "{", "//", "stlmntSIO.set(\"instCd\",", "_getCmnContext().getInstCode());", "//", "stlmntSIO.set(\"arrId\",", "arrId);", "//", "stlmntSIO.set(\"txDt\",", "txDt);", "//", "stlmntSIO.set(\"txSeqNbr\",", "txSeqNbr);", "//", "stlmntSIO.set(\"amtTpCd\",", "amtTpCd);", "//", "stlmntSIO.set(\"prchsRtrnYn\",", "prchsRtrnYn);", "//", "//", "return", "stlmntSIO;", "//", "//", "}"], "docstring_tokens": ["Save", "an", "asset", "subsidiary", "information."]}
{"code_tokens": ["public", "boolean", "isValidType(AtrbtTpEnum", "atrbtTp,", "Integer", "dcmlPntLen,", "String", "atrbtCntnt)", "throws", "BizApplicationException", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"atrbtTpCd={}\",", "atrbtTp);", "logger.debug(\"atrbtCntnt={}\",", "atrbtCntnt);", "}", "if", "(atrbtTp", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPCME0037\",", "new", "Object[]", "{", "atrbtTp", "});", "}", "//", "Validate", "attribute", "type", "switch", "(atrbtTp)", "{", "case", "TEXT:", "//", "text", "return", "(StringCoreUtils.isEmpty(atrbtCntnt))", "?", "false", ":", "true;", "case", "TEXT_DATE:", "//", "date", "return", "DateCoreUtils.isValidDate(atrbtCntnt);", "case", "TEXT_NUMBER:", "//", "number", "return", "DataCheckCoreUtils.isNumeric(atrbtCntnt);", "case", "NUMBER:", "//", "number", "boolean", "chkNbr", "=", "DataCheckCoreUtils.isNumeric(atrbtCntnt);", "if(logger.isDebugEnabled())", "{", "logger.debug(\"", "###########", "isValidType", "NUMBER", "chkNbr", ":", "{}\",", "chkNbr);", "}", "if(chkNbr)", "{", "//", "\uc18c\uc218\uc810\uc790\ub9ac\uc218", "\uac80\uc99d", "return", "_isValidDecimalPoint(dcmlPntLen,", "atrbtCntnt);", "}", "else", "{", "return", "chkNbr;", "}", "case", "TEXT_ALPHA_NUMERIC:", "//", "Alpha-Number", "return", "DataCheckCoreUtils.isAlphaNumeric(atrbtCntnt);", "case", "YES_OR_NO:", "//", "yes", "or", "no", "return", "(CCM01.YES.equals(atrbtCntnt)", "||", "CCM01.NO.equals(atrbtCntnt))", "?", "true", ":", "false;", "case", "PASSWORD:", "//", "Password", "return", "DataCheckCoreUtils.isValidPassword(atrbtCntnt);", "case", "TIMESTAMP:", "//", "timestamp", "return", "true;", "case", "JSON:", "//", "json", "return", "DataCheckCoreUtils.isJson(atrbtCntnt);", "case", "EMPTY:", "return", "true;", "default:", "throw", "new", "BizApplicationException(\"AAPCME0037\",", "new", "Object[]", "{", "atrbtTp", "});", "}", "}"], "docstring_tokens": ["Validate", "that", "the", "value", "of", "the", "input", "attribute", "matches", "the", "type", "of", "the", "attribute."]}
{"code_tokens": ["public", "CustCheckPwdOut", "login(String", "pswd)", "throws", "BizApplicationException,", "ParseException", "{", "//check", "required", "inputs", "if", "(StringUtils.isEmpty(pswd))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{\"@pswd\"});", "}", "return", "login(null,", "pswd,", "null);", "}"], "docstring_tokens": ["It", "checks", "if", "the", "input", "password", "equals", "the", "staff's", "login", "password", "and", "executes", "login", "process.", "It", "considers", "error", "allowance", "count", "and", "lock", "time", "when", "verifying", "password,", "and", "leaves", "login", "history", "after", "checking", "password."]}
{"code_tokens": ["public", "List<KrRoadAddrOut>", "getAddrByRoadName(String", "cityPrvncAddr,String", "cityGunGuAddr,", "String", "roadNm,", "Integer", "bldgMainNbr,Integer", "bldgSubNbr)", "throws", "BizApplicationException", "{", "List<CmKrRoadAddrMIO>", "cmKrRoadAddrMList", "=", "_getCmKrRoadAddrMDso().selectByRoad(AddrHrarcyEnum.KOREA_ROAD_NAME_ADDRESS_CODE.getValue(),", "cityPrvncAddr,", "cityGunGuAddr,", "roadNm,", "bldgMainNbr,", "bldgSubNbr);", "List<KrRoadAddrOut>", "out", "=", "new", "ArrayList<KrRoadAddrOut>();", "if(cmKrRoadAddrMList.isEmpty())", "{", "return", "out;", "}", "for(CmKrRoadAddrMIO", "cmKrRoadAddrMIO", ":", "cmKrRoadAddrMList)", "{", "KrRoadAddrOut", "krRoadAddrOut", "=", "new", "KrRoadAddrOut();", "krRoadAddrOut", "=", "_getKrRoadAddrOut(cmKrRoadAddrMIO);", "if(krRoadAddrOut", "!=", "null)", "{", "out.add(krRoadAddrOut);", "}", "}", "return", "out;", "}"], "docstring_tokens": ["It", "inquiries", "the", "Korea", "road", "address", "with", "road", "name", "list."]}
{"code_tokens": ["public", "List<ArArrAplyIntRtDXtnIO>", "selectList(ArArrAplyIntRtDXtnIO", "arArrAplyIntRtDXtnIO)", "{", "return", "_getArArrAplyIntRtDXtn().selectList(arArrAplyIntRtDXtnIO);", "}"], "docstring_tokens": ["It", "gets", "list", "of", "http", "header", "properties."]}
{"code_tokens": ["public", "BigDecimal", "eval(List<BigDecimal>", "values)", "{", "if", "(values", "==", "null", "||", "values.size()", "<", "2", ")", "return", "null;", "int", "index", "=", "values.get(values.size()-1).intValue();", "if", "(values.size()", "<=", "index", "+", "1", ")", "return", "null;", "return", "values.get(values.size()", "-", "2", "-", "index);", "}"], "docstring_tokens": ["It", "performs", "calculations."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "deptXtnInfoHash,", "DeptCore", "deptCore)", "throws", "BizApplicationException", "{", "_getDeptSubInfoBiz().saveMapSubInfo(deptXtnInfoHash,", "(DeptImpl)", "deptCore);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "preferential", "claim", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "CustRprsnImpl", "custRprsnImpl)", "throws", "BizApplicationException", "{", "//", "0.", "null", "check", "if", "(StringUtils.isEmpty(xtnAtrbtNm))", "{", "return;", "}", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "AtCustRprsnSIO", "subInfoIO", "=", "getSubInfoCache(custRprsnImpl);", "if", "(subInfoIO", "==", "null)", "{", "//", "DBIO", "VO", "new", "instance", "subInfoIO", "=", "new", "AtCustRprsnSIO();", "subInfoIO.setCustRprsnId(custRprsnImpl.getCustRprsnId());", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85\uacfc", "\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "insert", "_getAtCustRprsnSDso().insert(subInfoIO);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\uac80\uc99d", "if", "(!DtoUtils.isValChanged(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO))", "{", "return;", "}", "//", "\ubcc0\uacbd\uc804", "\uc774\ub825", "\uc800\uc7a5", "_saveSubInfoHst(custRprsnImpl,", "subInfoIO);", "//", "\uc785\ub825\ub41c", "\uc18d\uc131\uba85/\uc18d\uc131\uac12\uc744", "DBIO", "VO\uc5d0", "set", "DtoUtils.setSubInfoIO(xtnAtrbtNm,", "xtnAtrbtCntnt,", "subInfoIO);", "//", "update", "_getAtCustRprsnSDso().update(subInfoIO);", "}", "//", "2.", "\uce90\uc2dc", "\uc800\uc7a5", "custRprsnImpl.setSubInfoCache(subInfoIO);", "}"], "docstring_tokens": ["Save", "an", "insurance", "subsidiary", "information."]}
{"code_tokens": ["public", "ArrCnd", "getArrCnd(String", "cndCd)", "throws", "BizApplicationException", "{", "return", "(ArrCnd)", "super.getArrCndCore(cndCd);", "}"], "docstring_tokens": ["Inquire", "effective", "arrangement", "condition", "by", "product", "condition", "ENUM.", "Detail", "function", "description", "refers", "to", "{@link", "#getArrCnd(String)}"]}
{"code_tokens": ["public", "static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringCoreUtils.isEmpty(", "value))", "{", "for", "(InsrncFeePymntCyclCoreEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@InsrncItmCd\"});//({0})", "is", "invalid", "{1}.", "}", "return", "true;", "}"], "docstring_tokens": ["It", "verifies", "whether", "the", "service", "being", "executed", "is", "a", "service", "executed", "by", "the", "execution", "branch", "or", "the", "terminal."]}
{"code_tokens": ["public", "Pd", "getPd()", "throws", "BizApplicationException", "{", "if", "(this.pd", "==", "null)", "{", "String", "lastAgrmntDt", "=", "getArrLstAgrmntAndOpnDt();", "if", "(StringCoreUtils.isEmpty(lastAgrmntDt))", "{", "lastAgrmntDt", "=", "getArrStsDt();", "}", "setPd(_getPd(getInstCd(),", "lastAgrmntDt,", "getArrOpnHms(),", "getPdCd()));", "//", "Product", "Information", "}", "return", "this.pd;", "}"], "docstring_tokens": ["Inquire", "product", "of", "arrangement"]}
{"code_tokens": ["public", "List<CaPdInfoProviderIO>", "getListPdComboBox(CaPdInfoProviderIO", "in)", "throws", "BizApplicationException", "{", "//", "Set", "Input", "_setCaPdInfoProviderIO(", "in", ");", "List<CaPdInfoProviderIO>", "daoList", "=", "null;", "if", "(!StringUtils.isEmpty(in.getPdTmpltCd()))", "{", "daoList", "=", "_getPdPdMDso().selectListPdCdCmb(in);", "//", "inquire", "list", "of", "product", "}", "else", "if", "(!StringUtils.isEmpty(in.getPdTpCd()))", "{", "daoList", "=", "_getPdPdMDso().selectListPdTmpltCdCmb(in);", "//", "inquire", "list", "of", "product", "template", "}", "else", "{", "daoList", "=", "_getPdPdMDso().selectListPdTpCdCmb(in);", "//", "inquire", "list", "of", "type", "of", "product", "}", "return", "daoList;", "}"], "docstring_tokens": ["Inquire", "the", "product", "type,", "product", "template,", "and", "product", "code", "list", "according", "to", "the", "search", "conditions.", "Input", "Example)", "Business", "classification:", "Product", "type", "list", "inquiry", "Business", "classification,", "product", "type:", "Product", "template", "list", "check", "Business", "classification,", "product", "type,", "product", "template:", "Product", "list", "check"]}
{"code_tokens": ["public", "DummyIO", "saveMenu(CaMenuMgmtSvcGetMenuItemListIO", "input)", "throws", "BizApplicationException", "{", "String", "menuId", "=", "input.getMenuId();", "int", "seqNbr", "=", "_getMenuMgmt().getMaxSeqNbr(menuId);", "List<CaCmnCdCheckOut>", "cdList", "=", "_getCd().getListCode(CaCdNbrEnum.LANGUAGE_CD.getValue());", "if(cdList", "!=", "null)", "{", "//", "\uc601\ubb38\uc744", "\uc81c\uc678\ud55c", "\uc5b8\uc5b4\ucf54\ub4dc\ub97c", "\uc21c\uc11c\ub300\ub85c", "\uc801\uc7ac\ud55c\ub2e4.", "(\ub2e8\uc5b4,", "\ubcf5\ud569\ub2e8\uc5b4\uc758", "\uc601\ubb38\uba85\uc740", "\ub2e4\uad6d\uc5b4\uac00", "\uc544\ub2cc", "\uc790\uccb4", "\ud14c\uc774\ube14\uc758", "\uac12\uc744", "\uc870\ud68c\ud568)", "int", "cntLngCd", "=", "1;", "HashMap<Integer,", "String>", "useCodeList", "=", "new", "HashMap<Integer,", "String>();", "for(CaCmnCdCheckOut", "cdOut", ":", "cdList){", "useCodeList.put(new", "Integer(cntLngCd++),", "cdOut.getCd());", "}", "}", "List<CaMenuRegisterIO>", "menuSaveList", "=", "new", "ArrayList<CaMenuRegisterIO>();", "List<CaMenuRegisterIO>", "menuModifyList", "=", "new", "ArrayList<CaMenuRegisterIO>();", "List<CaMenuRegisterIO>", "menuRemoveList", "=", "new", "ArrayList<CaMenuRegisterIO>();", "Deque<List<CaMenuMgmtSvcGetMenuItemIO>>", "iOSub01Stack", "=", "new", "LinkedList<List<CaMenuMgmtSvcGetMenuItemIO>>();", "iOSub01Stack.add(input.getMenuItemList());", "while", "(!iOSub01Stack.isEmpty())", "{", "List<CaMenuMgmtSvcGetMenuItemIO>", "iOSub01List", "=", "iOSub01Stack.pollLast();", "for", "(CaMenuMgmtSvcGetMenuItemIO", "menuItemIn", ":", "iOSub01List)", "{", "CaMenuRegisterIO", "menu01IOObj;", "switch", "(CaTxTpDscdEnum.getEnum(menuItemIn.getTxTpDscd()))", "{", "case", "CREATION:", "menu01IOObj", "=", "new", "CaMenuRegisterIO();", "menu01IOObj.setSeqNbr(++seqNbr);", "menu01IOObj.setMenuItmNm(menuItemIn.getMenuNm());", "menu01IOObj.setUpSeqNbr(menuItemIn.getUpSeqNbr());", "menu01IOObj.setPstnNbr(menuItemIn.getPstnNbr());", "menu01IOObj.setScrnId(menuItemIn.getScrnId());", "menu01IOObj.setParmVal(menuItemIn.getParmVal());", "menu01IOObj.setMenuItmNm1(menuItemIn.getMenuItmAtrbtNm1());", "menu01IOObj.setMenuItmNm2(menuItemIn.getMenuItmAtrbtNm2());", "menu01IOObj.setMenuItmNm3(menuItemIn.getMenuItmAtrbtNm3());", "menu01IOObj.setMenuPrcsngDscd(menuItemIn.getMenuPrcsngDscd());", "menu01IOObj.setDfltScrnTrgtYn(menuItemIn.getDfltScrnTrgtYn());", "menu01IOObj.setIconNm(menuItemIn.getIconNm());", "menuSaveList.add(menu01IOObj);", "if", "(menuItemIn.getChildren()", "!=", "null", "&&", "menuItemIn.getChildren().size()", ">", "0)", "{", "for(CaMenuMgmtSvcGetMenuItemIO", "childrenIO:menuItemIn.getChildren()){", "if(childrenIO.getUpSeqNbr()==null){", "childrenIO.setUpSeqNbr(seqNbr);", "}", "}", "iOSub01Stack.add(menuItemIn.getChildren());", "}", "break;", "case", "UPDATE:", "menu01IOObj", "=", "new", "CaMenuRegisterIO();", "menu01IOObj.setSeqNbr(menuItemIn.getMenuSeqNbr().intValue());", "menu01IOObj.setMenuItmNm(menuItemIn.getMenuNm());", "menu01IOObj.setUpSeqNbr(menuItemIn.getUpSeqNbr());", "menu01IOObj.setPstnNbr(menuItemIn.getPstnNbr());", "menu01IOObj.setScrnId(menuItemIn.getScrnId());", "menu01IOObj.setParmVal(menuItemIn.getParmVal());", "menu01IOObj.setMenuItmNm1(menuItemIn.getMenuItmAtrbtNm1());", "menu01IOObj.setMenuItmNm2(menuItemIn.getMenuItmAtrbtNm2());", "menu01IOObj.setMenuItmNm3(menuItemIn.getMenuItmAtrbtNm3());", "menu01IOObj.setMenuPrcsngDscd(menuItemIn.getMenuPrcsngDscd());", "menu01IOObj.setDfltScrnTrgtYn(menuItemIn.getDfltScrnTrgtYn());", "menu01IOObj.setIconNm(menuItemIn.getIconNm());", "menuModifyList.add(menu01IOObj);", "if", "(menuItemIn.getChildren()", "!=", "null", "&&", "menuItemIn.getChildren().size()", ">", "0)", "{", "iOSub01Stack.add(menuItemIn.getChildren());", "}", "break;", "case", "DELETE:", "menu01IOObj", "=", "new", "CaMenuRegisterIO();", "menu01IOObj.setSeqNbr(menuItemIn.getMenuSeqNbr().intValue());", "menuRemoveList.add(menu01IOObj);", "break;", "default:", "if", "(menuItemIn.getChildren()", "!=", "null", "&&", "menuItemIn.getChildren().size()", ">", "0)", "{", "iOSub01Stack.add(menuItemIn.getChildren());", "}", "break;", "}", "}", "}", "if(!menuSaveList.isEmpty()){", "_getMenuMgmt().saveMenu(menuId,", "menuSaveList);", "}", "if(!menuModifyList.isEmpty()){", "_getMenuMgmt().modifyMenu(menuId,", "menuModifyList);", "}", "if(!menuRemoveList.isEmpty()){", "_getMenuMgmt().removeMenu(menuId,", "menuRemoveList);", "}", "return", "new", "DummyIO();", "}"], "docstring_tokens": ["Save", "menu", "detail."]}
{"code_tokens": ["public", "String", "getCrncyCd()", "throws", "BizApplicationException", "{", "if", "(isComplexAndTierIsNotDecided())", "{", "return", "null;", "}", "if", "(isComplex())", "{", "return", "_getCmpxRngCndValSub1().getCrncyCd();", "}", "return", "_getSmplRngCndVal().getCrncyCd();", "}"], "docstring_tokens": ["This", "method", "inquires", "a", "currency", "code", "of", "the", "transaction."]}
{"code_tokens": ["public", "CaArrPsbkMsgMgmtTestSvcOut", "clone(){", "try{", "CaArrPsbkMsgMgmtTestSvcOut", "object=", "(CaArrPsbkMsgMgmtTestSvcOut)super.clone();", "if", "(", "this.psbkMsgInfo==null", ")", "object.psbkMsgInfo", "=", "null;", "else", "object.psbkMsgInfo", "=", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcOut)this.psbkMsgInfo.clone();", "if", "(", "this.psbkMsgList==", "null", ")", "object.psbkMsgList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg>(psbkMsgList.size());", "for(", "bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg", "item", ":", "psbkMsgList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.arrangement.service.dto.CaArrPsbkMsgMgmtSvcGetListPsbkMsg)item.clone());", "}", "object.psbkMsgList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "DueDiligenceInqryTrgtSvcListOut", "clone(){", "try{", "DueDiligenceInqryTrgtSvcListOut", "object=", "(DueDiligenceInqryTrgtSvcListOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "LnArrChngSvcListIn", "clone(){", "try{", "LnArrChngSvcListIn", "object=", "(LnArrChngSvcListIn)super.clone();", "if", "(", "this.arrRelChngIn==", "null", ")", "object.arrRelChngIn", "=", "null;", "else{", "java.util.List<bankware.corebanking.loan.conditionchange.service.dto.LnArrChngSvcIn>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.loan.conditionchange.service.dto.LnArrChngSvcIn>(arrRelChngIn.size());", "for(", "bankware.corebanking.loan.conditionchange.service.dto.LnArrChngSvcIn", "item", ":", "arrRelChngIn", "){", "clonedList.add(", "(bankware.corebanking.loan.conditionchange.service.dto.LnArrChngSvcIn)item.clone());", "}", "object.arrRelChngIn", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CaStdAtrbtMgmtSvcGetStdAtrbtListIn", "clone(){", "try{", "CaStdAtrbtMgmtSvcGetStdAtrbtListIn", "object=", "(CaStdAtrbtMgmtSvcGetStdAtrbtListIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "xtnAtrbtNm,", "AssetCore", "assetImpl,", "Integer", "assetThingSeqNbr)", "throws", "BizApplicationException", "{", "return", "_getAssetThingSubInfoBiz().getSubInfo(xtnAtrbtNm,", "(AssetImpl)assetImpl,", "assetThingSeqNbr);", "}"], "docstring_tokens": ["Inquire", "a", "specific", "subsidiary", "information", "of", "the", "appraisal."]}
{"code_tokens": ["public", "int", "delete(CaCmTaxRtDIO", "caCmTaxRtDIO)", "{", "//", "super.clearCache(DataCacheCoreConfig.COMMON_CURRENCY_CODE_CACHE);", "//", "super.clearCache(DataCacheCoreConfig.COMMON_CURRENCY_CODE_LIST_CACHE);", "return", "_getCaCmTaxRtD().delete(caCmTaxRtDIO);", "}"], "docstring_tokens": ["It", "changes", "the", "status", "of", "insurance", "to", "cancel", "status"]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(AssetImpl", "asset){", "Map<String,", "String>", "subInfoMap", "=", "new", "HashMap<String,", "String>();", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "subInfo", "=", "getSubInfoCache(asset);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "\ube48", "Map", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "subInfoMap;", "}", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\ub97c", "Map\uc73c\ub85c", "convert", "for", "(Entry<String,", "Object>", "entry", ":", "subInfo.getFieldValues().entrySet())", "{", "//", "business", "column\ub9cc", "put", "if(!_isSubInfoContainsField(asset.getAssetSubInfoKnd(),", "entry.getKey()))", "{", "continue;", "}", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(entry.getValue()", "!=", "null)", "{", "subInfoMap.put(entry.getKey(),", "String.valueOf(entry.getValue()));", "}", "}", "return", "subInfoMap;", "}"], "docstring_tokens": ["This", "method", "provides", "the", "function", "for", "inquiring", "all", "of", "subsidiary", "information", "about", "transaction", "as", "MAP", "type."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if(logger.isDebugEnabled()){", "logger.debug(\"##", "<AR>", "ArrCndDepositLimitAmountImpl", "doServiceAction\");", "}", "switch", "(arrSrvcTpCd)", "{", "case", "\"Deposit\":", "_doDepositAction(arrSrvcTpCd,arrCndActionRequiredValue);", "break;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "condition", "related", "actions", "for", "input", "service", "according", "to", "product", "condition", "value", "or", "negotiated", "value.", "For", "example,", "the", "\"Required", "document\"", "condition", "has", "the", "product", "required", "document", "type", "for", "loan", "application", "service.", "The", "arrangement", "condition", "action", "validate", "the", "required", "document", "type", "is", "received", "(presented)", "or", "not.", "Another", "example", "is", "the", "deposit", "open", "service,", "\"Interest", "capitalization", "YN\"", "condition", "dose", "the", "action", "to", "make", "an", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date.", "This", "method", "performs", "the", "function", "of", "performing", "product", "condition", "management", "rule", "registered", "on", "system.", "Implementation", "of", "condition", "management", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "according", "to", "the", "arrangement", "condition", "class", "implementation", "method,", "and", "the", "implemented", "arrangement", "condition", "class", "should", "specify", "the", "process", "target", "class", "by", "condition.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", "Caution", ":", "-", "To", "define", "condition", "management", "rule", "by", "service", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", ">", "Select", "service"]}
{"code_tokens": ["protected", "void", "register(CustRprsnImpl", "custRprsnImpl,", "AtCustRprsnLoinInfoDIO", "atCustRprsnLoinInfoDIO)", "throws", "BizApplicationException", "{", "if", "(atCustRprsnLoinInfoDIO", "==", "null)", "{", "return;", "}", "AtCustRprsnMIO", "atCustRprsnMIO", "=", "custRprsnImpl.getRprsnBsicCache();", "atCustRprsnLoinInfoDIO.setCustRprsnId(atCustRprsnMIO.getCustRprsnId());", "atCustRprsnLoinInfoDIO.setRprsnLoinInfoStsCd(InfoStsEnum.NORMAL.getValue());", "if", "(StringUtils.isEmpty(atCustRprsnLoinInfoDIO.getRprsnLoinInfoStsRsnCd()))", "{", "atCustRprsnLoinInfoDIO.setRprsnLoinInfoStsRsnCd(PswdChngRsnEnum.OWNER_REQUEST.getValue());", "}", "int", "seqNbr", "=", "_getAtCustRprsnLoinInfoDDso().selectNextSeqNbr(atCustRprsnLoinInfoDIO.getInstCd(),", "atCustRprsnMIO.getCustRprsnId());", "atCustRprsnLoinInfoDIO.setLoinSeqNbr(seqNbr);", "try", "{", "atCustRprsnLoinInfoDIO.setEncrptnPswd(atCustRprsnLoinInfoDIO.getEncrptnPswd());", "}", "catch", "(Exception", "e)", "{", "if", "(logger.isDebugEnabled())", "{", "logger.debug(\"####", "CustRprsnLoinInfo", "register", "error", "{}\",", "e);", "}", "throw", "new", "BizApplicationException(\"AAPCME0000\",", "new", "String[]", "{", "\"Save", "login", "information\",", "\"Encrypt", "password\"", "});", "}", "_getAtCustRprsnLoinInfoDDso().insert(atCustRprsnLoinInfoDIO);", "}"], "docstring_tokens": ["It", "registers", "or", "modifies", "the", "customer", "grade", "code."]}
{"code_tokens": ["public", "void", "delete(String", "instCd,", "CaDocBsicIO", "docBsicIO,", "CaDocClIO", "docClIO)", "throws", "BizApplicationException", "{", "CaDcDocClMIO", "dcDocClIO", "=", "new", "CaDcDocClMIO();", "_getCmnContext().setHeaderColumn(dcDocClIO);", "if(!StringUtils.isEmpty(instCd))", "dcDocClIO.setInstCd(instCd);", "dcDocClIO.setDocId(docBsicIO.getDocId());", "dcDocClIO.setClId(docClIO.getClId());", "dcDocClIO.setClHrarcyId(docClIO.getClHrarcyId());", "//", "get", "registered", "information", "List<CaDcDocClMIO>", "dcDocClIOList", "=", "_getInformationList(dcDocClIO.getInstCd(),", "null,", "null,", "dcDocClIO.getDocId(),", "null);", "boolean", "isRegistered", "=", "false;", "if(dcDocClIOList", "!=", "null", "&&", "!dcDocClIOList.isEmpty())", "{", "for(CaDcDocClMIO", "dcDocClIOItem", ":", "dcDocClIOList)", "{", "if(dcDocClIOItem.getClId().equals(docClIO.getClId())", "&&", "dcDocClIOItem.getClHrarcyId().equals(docClIO.getClHrarcyId()))", "{", "isRegistered", "=", "true;", "break;", "}", "}", "}", "if(isRegistered)", "{", "//", "insert", "data", "_getDcDocClDso().delete(dcDocClIO);", "}", "}"], "docstring_tokens": ["It", "removes", "document", "information."]}
{"code_tokens": ["public", "void", "modifyPrgrsStart(List<DstbCtvdDIO>", "dstbCtvdDIOList,", "DstbCtvdChngPrgrsStartIn", "dstbCtvdChngPrgrsStartIn)", "throws", "BizApplicationException{", "for(DstbCtvdDIO", "data", ":", "dstbCtvdDIOList){", "if(dstbCtvdChngPrgrsStartIn.getDstbSrvrId().equals(data.getDstbSrvrId())){", "if(dstbCtvdChngPrgrsStartIn.getDstbTblId().equals(data.getDstbTblId())){", "_modifyPrgrsStart(data,", "dstbCtvdChngPrgrsStartIn);", "}", "}", "}", "}"], "docstring_tokens": ["Update", "Consistency", "Validation", "Detail", "Data(Start)"]}
{"code_tokens": ["public", "String", "getCndTpCd()", "{", "if", "(pdPdCndM", "==", "null)", "{", "return", "null;", "}", "return", "pdPdCndM.getCndTpCd();", "}"], "docstring_tokens": ["This", "method", "inquire", "condition", "type", "code"]}
{"code_tokens": ["public", "AnncExRtSvcOut", "clone(){", "try{", "AnncExRtSvcOut", "object=", "(AnncExRtSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "BaTestSvcOut", "clone(){", "try{", "BaTestSvcOut", "object=", "(BaTestSvcOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "void", "validate(String", "arrSrvcCd,ArrRealCore", "arrReal,", "CustCore", "cust,", "Map<String,", "Object>", "vldtnRequiredValMap)", "throws", "BizApplicationException", "{", "if", "(_getCmnContext().isSelfChannel()", "&&", "!arrReal.getMainArrCustId().equals(_getCmnContext().getCustId())){", "//", "\ud604\uc7ac", "\uace0\uac1d\uc774", "\uc8fc\uacc4\uc57d\uad8c\ud55c\uc744", "\uac00\uc9c4", "\uacf5\ub3d9\uacc4\uc57d\uc790\uc778", "\uacbd\uc6b0", "\uc608\uc678\ucc98\ub9ac", "if(", "_isJointContractorAsMainAuth((ArrReal)arrReal,", "_getCmnContext().getCustId()", "))", "return;", "//Arrangement's", "main", "customer", "is", "not", "same", "with", "self-service", "channel's", "user.", "This", "service", "({0})", "could", "not", "performs", "properly", "//\uacc4\uc57d\uc758", "\uc18c\uc720\uc8fc\uc640", "\ubcf8", "\uc140\ud504\uc11c\ube44\uc2a4", "\ucc44\ub110\uc758", "\uc0ac\uc6a9\uc790\uac00", "\ub3d9\uc77c\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4.", "\ubcf8\uc11c\ube44\uc2a4({0})", "\uc2e4\ud589\uc774", "\ubd88\uac00", "\ud569\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0335\",", "new", "Object[]{_getCd().getCode(ArrSrvcEnum.cdNbr,arrSrvcCd)});", "}", "}"], "docstring_tokens": ["Inquire", "whether", "if", "arrangement", "issued", "media", "is", "effective.", "Not", "available", "status", "for", "transaction", ":", "Arrangement", "issued", "media", "status", "is", "Suspended,", "Terminated,", "Canceled", "or", "active", "service", "blocking", "is", "regisetered", "on", "the", "media"]}
{"code_tokens": ["public", "List<CaInstParmInfo>", "getListInstParm(String", "instCd,", "CaInstParamTypeEnum", "instParamTypeEnum)", "throws", "BizApplicationException", "{", "List<CaInstParmAtrbtInfo>", "instParmAtrbtList", "=", "new", "ArrayList<CaInstParmAtrbtInfo>();", "String", "instParmTpCd", "=", "\"\";", "if(instParamTypeEnum", "!=", "null", "&&", "CaInstParamTypeEnum.isValid(instParamTypeEnum.getValue()))", "{", "instParmTpCd", "=", "instParamTypeEnum.getValue();", "}", "List<CaCmInstPAtrMIO>", "cmInstPAtrMIOList", "=", "_getInstParmBiz().getListInstParmAttributeUsingTpCd(instParmTpCd);", "_buildInstitutionParameterAttributeListAndHash(instParmAtrbtList,", "cmInstPAtrMIOList);", "List<CaInstParmInfo>", "instParmList", "=", "new", "ArrayList<CaInstParmInfo>();", "for", "(CaInstParmAtrbtInfo", "instParmAtrbt", ":", "instParmAtrbtList){", "instParmList.add(_getOneInstitutionParameter(instCd,", "instParmAtrbt,", "false));", "}", "return", "instParmList;", "}"], "docstring_tokens": ["Query", "institution", "institution", "parameter", "object", "list."]}
{"code_tokens": ["public", "String", "getRoleNameById(String", "instCd,", "String", "roleId)", "throws", "BizApplicationException", "{", "CaRoleIO", "param", "=", "new", "CaRoleIO();", "param.setInstCd(instCd);", "param.setRoleId(roleId);", "param", "=", "this.getRole(param);", "if(param!=null)", "return", "param.getRoleNm();", "else", "return", "null;", "}"], "docstring_tokens": ["It", "inquires", "role", "name", "by", "role", "id"]}
{"code_tokens": ["public", "PdQrySvcGetPdIntegratedInformationOut", "clone(){", "try{", "PdQrySvcGetPdIntegratedInformationOut", "object=", "(PdQrySvcGetPdIntegratedInformationOut)super.clone();", "if", "(", "this.productBase==null", ")", "object.productBase", "=", "null;", "else", "object.productBase", "=", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBaseOut)this.productBase.clone();", "if", "(", "this.classification==", "null", ")", "object.classification", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdClasfRelationOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdClasfRelationOut>(classification.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdClasfRelationOut", "item", ":", "classification", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdClasfRelationOut)item.clone());", "}", "object.classification", "=", "clonedList;", "}", "if", "(", "this.between==", "null", ")", "object.between", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut>(between.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut", "item", ":", "between", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut)item.clone());", "}", "object.between", "=", "clonedList;", "}", "if", "(", "this.document==", "null", ")", "object.document", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdDocRelationOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdDocRelationOut>(document.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdDocRelationOut", "item", ":", "document", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdDocRelationOut)item.clone());", "}", "object.document", "=", "clonedList;", "}", "if", "(", "this.additional==", "null", ")", "object.additional", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdAdtnInfoOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdAdtnInfoOut>(additional.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdAdtnInfoOut", "item", ":", "additional", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdAdtnInfoOut)item.clone());", "}", "object.additional", "=", "clonedList;", "}", "if", "(", "this.detail==", "null", ")", "object.detail", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdNameDetailOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdNameDetailOut>(detail.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdNameDetailOut", "item", ":", "detail", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdNameDetailOut)item.clone());", "}", "object.detail", "=", "clonedList;", "}", "if", "(", "this.branch==", "null", ")", "object.branch", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBrnchRelOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBrnchRelOut>(branch.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBrnchRelOut", "item", ":", "branch", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBrnchRelOut)item.clone());", "}", "object.branch", "=", "clonedList;", "}", "if", "(", "this.customer==", "null", ")", "object.customer", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdCustmSegmentRelationOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdCustmSegmentRelationOut>(customer.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdCustmSegmentRelationOut", "item", ":", "customer", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdCustmSegmentRelationOut)item.clone());", "}", "object.customer", "=", "clonedList;", "}", "if", "(", "this.employee==", "null", ")", "object.employee", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdEmployeeRelationOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdEmployeeRelationOut>(employee.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdEmployeeRelationOut", "item", ":", "employee", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdEmployeeRelationOut)item.clone());", "}", "object.employee", "=", "clonedList;", "}", "if", "(", "this.conditionInfoList==", "null", ")", "object.conditionInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationConditionGroupOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationConditionGroupOut>(conditionInfoList.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationConditionGroupOut", "item", ":", "conditionInfoList", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationConditionGroupOut)item.clone());", "}", "object.conditionInfoList", "=", "clonedList;", "}", "if", "(", "this.prfIntRtAplyRule==null", ")", "object.prfIntRtAplyRule", "=", "null;", "else", "object.prfIntRtAplyRule", "=", "(bankware.corebanking.product.bizproc.dto.PdCndQueryBizProcGetCndDetailAplyRuleOut)this.prfIntRtAplyRule.clone();", "if", "(", "this.bizCategory==", "null", ")", "object.bizCategory", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut>(bizCategory.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut", "item", ":", "bizCategory", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdBizCtgryRelOut)item.clone());", "}", "object.bizCategory", "=", "clonedList;", "}", "if", "(", "this.point==", "null", ")", "object.point", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut>(point.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut", "item", ":", "point", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdRelBtwnPdsOut)item.clone());", "}", "object.point", "=", "clonedList;", "}", "if", "(", "this.merchant==", "null", ")", "object.merchant", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdMrchntRelOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdMrchntRelOut>(merchant.size());", "for(", "bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdMrchntRelOut", "item", ":", "merchant", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdQrySvcGetPdIntegratedInformationPdMrchntRelOut)item.clone());", "}", "object.merchant", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "boolean", "isActive()", "{", "return", "this.arrGrpStsCd.equals(ArrGrpStsCoreEnum.ACTIVE.getValue());", "}"], "docstring_tokens": ["Check", "if", "arrangement", "group", "is", "in", "\"Active\"", "status."]}
{"code_tokens": ["public", "void", "saveSubInfo(String", "xtnAtrbtNm,", "String", "xtnAtrbtCntnt,", "AprslCore", "aprslCoreImpl,", "Integer", "prfClaimSeqNbr)", "throws", "BizApplicationException", "{", "_getAprslPrfClaimSubInfoBiz().saveSubInfo(xtnAtrbtNm,", "xtnAtrbtCntnt,", "(AprslImpl)", "aprslCoreImpl,", "prfClaimSeqNbr);", "}"], "docstring_tokens": ["Save", "an", "asset", "transaction", "subsidiary", "information."]}
{"code_tokens": ["public", "boolean", "isValid(CdNbrInfoIO", "in,", "String", "vldtnRule)", "throws", "BizApplicationException", "{", "boolean", "result", "=", "false;", "if(StringCoreUtils.isEmpty(vldtnRule))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@vldtnRule\"", "});", "}", "if(vldtnRule.equals(CCM01.IS_CM_CD_INST_D_EMPTY))", "{", "//", "Check", "the", "code", "number", "in", "CmCdInstD", "table", "//", "If", "result", "is", "not", "found,", "return", "true", "CdNbrInfoIO", "boIn", "=", "new", "CdNbrInfoIO();", "boIn.setCdNbr(in.getCdNbr());", "if(_getExtrnlCdImpl().getCodeDetail(boIn).size()", "==", "0)", "{", "result", "=", "true;", "}", "}", "else", "if(vldtnRule.equals(CCM01.IS_CM_INST_SBST_CD_D_EMPTY))", "{", "//", "Check", "the", "code", "number", "in", "CmInstSbstCdD", "table", "//", "If", "result", "is", "not", "found,", "return", "true", "CdNbrInfoIO", "boIn", "=", "new", "CdNbrInfoIO();", "boIn.setCdNbr(in.getCdNbr());", "if(_getInstSbstCdImpl().getCodeDetail(boIn).size()", "==", "0", "&&", "_getStdCdImpl().getCodeDetail(boIn).size()", "==", "0)", "{", "result", "=", "true;", "}", "}", "else", "if(vldtnRule.equals(CCM01.IS_CM_CD_D_EMPTY))", "{", "//", "Check", "the", "code", "number", "in", "CmCdD", "table", "//", "If", "result", "is", "not", "found,", "return", "true", "CdNbrInfoIO", "boIn", "=", "new", "CdNbrInfoIO();", "boIn.setCdNbr(in.getCdNbr());", "if(_getStdCdImpl().getCodeDetail(boIn).size()", "==", "0)", "{", "result", "=", "true;", "}", "}", "else", "if(vldtnRule.equals(CCM01.HAS_INST_SBST_CD))", "{", "CdNbrInfoIO", "boIn", "=", "new", "CdNbrInfoIO();", "boIn.setCdNbr(in.getCdNbr());", "boIn.setInstCd(in.getInstCd());", "if(_getInstSbstCdImpl().getCodeDetailSize(boIn)", ">", "0)", "{", "result", "=", "true;", "}", "}", "return", "result;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "void", "modifyArrMaturityDate(String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "//", "\ud574\ub2f9", "\uba54\uc18c\ub4dc\ub294", "({0})", "\ud074\ub798\uc2a4\uc758", "\uc778\uc2a4\ud134\uc2a4\ub85c", "\uc0ac\uc6a9\ud560", "\uc218", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\uacc4\uc57d\ub2f4\ub2f9\uc790\uc5d0\uac8c", "\ubb38\uc758\ubc14\ub78d\ub2c8\ub2e4.", "//", "This", "method", "cannot", "be", "used", "by", "instance", "of", "({0})", "class.", "throw", "new", "BizApplicationException(\"AAPARE0678\",new", "Object[]{this.getClass().getName()});", "}"], "docstring_tokens": ["Change", "maturity", "date", "of", "standing", "order."]}
{"code_tokens": ["public", "PdTemplateQuerySvcGetCndGrpTmpltListTypeOut", "clone(){", "try{", "PdTemplateQuerySvcGetCndGrpTmpltListTypeOut", "object=", "(PdTemplateQuerySvcGetCndGrpTmpltListTypeOut)super.clone();", "if", "(", "this.childCatalogList==", "null", ")", "object.childCatalogList", "=", "null;", "else{", "java.util.List<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut>(childCatalogList.size());", "for(", "bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut", "item", ":", "childCatalogList", "){", "clonedList.add(", "(bankware.corebanking.product.service.dto.PdTemplateQuerySvcGetCndGrpTmpltListTypeOut)item.clone());", "}", "object.childCatalogList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(CustRprsnCore", "custRprsnCore)", "throws", "BizApplicationException", "{", "return", "_getCustRprsnSubInfoBiz().getMapSubInfo((CustRprsnImpl)", "custRprsnCore);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "as", "a", "map."]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "{", "for", "(CndValueDecisionLevelCoreEnum", "enumObject", ":", "values())", "{", "if", "(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "return", "false;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "boolean", "isArrXtnInfoHasValue(String", "xtnAtrbtNm)throws", "BizApplicationException", "{", "return", "getMapArrXtnInfoInRaw().get(xtnAtrbtNm)==null?false:true;", "}"], "docstring_tokens": ["Return", "whether", "arrangement", "object", "has", "the", "extended", "attribute."]}
{"code_tokens": ["public", "StaffChngSvcElctrncAddrListIO", "clone(){", "try{", "StaffChngSvcElctrncAddrListIO", "object=", "(StaffChngSvcElctrncAddrListIO)super.clone();", "if", "(", "this.ctcptXtnInfoList==", "null", ")", "object.ctcptXtnInfoList", "=", "null;", "else{", "java.util.List<bankware.corebanking.staff.basicinfomanagement.service.dto.StaffChngSvcCtcptXtnListIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.staff.basicinfomanagement.service.dto.StaffChngSvcCtcptXtnListIO>(ctcptXtnInfoList.size());", "for(", "bankware.corebanking.staff.basicinfomanagement.service.dto.StaffChngSvcCtcptXtnListIO", "item", ":", "ctcptXtnInfoList", "){", "clonedList.add(", "(bankware.corebanking.staff.basicinfomanagement.service.dto.StaffChngSvcCtcptXtnListIO)item.clone());", "}", "object.ctcptXtnInfoList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "delete(StArrCashFlowDIO", "stArrCashFlowDIO)", "{", "return", "_getStArrCashFlowD().delete(stArrCashFlowDIO);", "}"], "docstring_tokens": ["Delete", "all", "occurrences", "of", "the", "given", "substring."]}
{"code_tokens": ["public", "ArArrDocRXtnInfoDIO", "select(ArArrDocRXtnInfoDIO", "arArrDocRXtnInfoDIO)", "{", "return", "_getArArrDocRXtnInfoD().select(arArrDocRXtnInfoDIO);", "}"], "docstring_tokens": ["It", "get", "a", "http", "header", "properties."]}
{"code_tokens": ["public", "List<BfCnd>", "getCndMultiple(List<String>", "cndCdList)", "throws", "BizApplicationException", "{", "BfCndMltplIn", "in", "=", "new", "BfCndMltplIn();", "in.setAplyStartDt(baseDaring);", "in.setAplyStartTm(baseTimeString);", "in.setAplyEndDt(baseDaring);", "in.setAplyEndTm(baseTimeString);", "in.setCndCdList(cndCdList);", "return", "getCndMultiple(in);", "}"], "docstring_tokens": ["This", "Method", "create", "a", "list", "of", "condition", "objects", "for", "the", "list", "of", "input", "condition", "codes.", "condition", "information", "initialization.", "condition", "object", "has", "condition", "defined", "in", "benefit", "or", "common", "condition", "information."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(StaffCore", "staffCore)", "throws", "BizApplicationException", "{", "return", "_getStaffSubInfoBiz().getMapSubInfo((StaffImpl)staffCore);", "}"], "docstring_tokens": ["Inquire", "entire", "extended", "information", "of", "Subsidiary", "Information(CTI)", "as", "MAP", "type."]}
{"code_tokens": ["public", "PrtnrDeptChngSvcGetRoleOut", "clone(){", "try{", "PrtnrDeptChngSvcGetRoleOut", "object=", "(PrtnrDeptChngSvcGetRoleOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "List<ArrTxBsicIO>", "getListArrTxPassbookHistory(StTxPsbkHstIn", "stTxPsbkHstIn,", "ArrReal", "arr)", "throws", "BizApplicationException", "{", "if", "(arr", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AAPARE0007\",", "null);", "}", "List<ArrTxBsicIO>", "arrTxBsicList", "=", "null;", "if", "(stTxPsbkHstIn.getPgNbr()", "<", "1)", "{", "stTxPsbkHstIn.setPgNbr(1);", "}", "if", "(stTxPsbkHstIn.getPgCnt()", "<", "1", "||", "stTxPsbkHstIn.getPgCnt()", ">", "1000)", "{", "stTxPsbkHstIn.setPgCnt(1000);", "}", "stTxPsbkHstIn.setPgNbr(", "(stTxPsbkHstIn.getPgNbr()", "-", "1", ")", "*", "stTxPsbkHstIn.getPgCnt()", ");", "StTxMXtnIn", "stTxMXtnIn", "=", "new", "StTxMXtnIn();", "stTxMXtnIn.setArrId(arr.getArrId());//", "set", "[\uacc4\uc57d\uc2dd\ubcc4\uc790]", "stTxMXtnIn.setTxSeqNbr(stTxPsbkHstIn.getTxSeqNbr());//", "set", "[\uac70\ub798\uc77c\ub828\ubc88\ud638]", "stTxMXtnIn.setTxDt(stTxPsbkHstIn.getTxDt());//", "set", "[\uac70\ub798\ub144\uc6d4\uc77c]", "stTxMXtnIn.setPgNbr(stTxPsbkHstIn.getPgNbr());//", "set", "[\ud398\uc774\uc9c0\ubc88\ud638]", "stTxMXtnIn.setPgCnt(stTxPsbkHstIn.getPgCnt());//", "set", "[\ud398\uc774\uc9c0\uac74\uc218]", "stTxMXtnIn.setInqryStartDt(stTxPsbkHstIn.getInqryStartDt());", "stTxMXtnIn.setInqryEndDt(stTxPsbkHstIn.getInqryEndDt());", "stTxMXtnIn.setInstCd(_getCmnContext().getInstCode());", "stTxMXtnIn.setPgNbr(stTxPsbkHstIn.getPgNbr());", "List<StTxMXtnIO>", "txPsbkHistory", "=", "new", "ArrayList<StTxMXtnIO>();", "if", "(stTxPsbkHstIn.getPsbkInqryDscd()", "==", "null)", "{", "//", "psbkInqryDstnctnCd", "\uac12\uc740", "\ud544\uc218", "\uc785\ub825\ud56d\ubaa9\uc785\ub2c8\ub2e4.", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@psbkInqryDstnctnCd\"", "});", "}", "switch(ArrTxPsbkDscdEnum.getEnum(stTxPsbkHstIn.getPsbkInqryDscd())){", "//", "\ud2b9\uc815\uc77c\uc790", "\uc774\ud6c4", "\ud1b5\uc7a5\ub0b4\uc5ed", "\uc870\ud68c", "case", "AFTER_SPECIFIC_DATE:", "txPsbkHistory", "=", "_getArrTxXtnBiz().getListArrTxPassbookHistoryByDate(stTxMXtnIn,", "arr);", "break;", "//", "\ud2b9\uc815\uac70\ub798", "\uc774\ud6c4", "case", "AFTER_SPECIFIC_TRANSACTION:", "txPsbkHistory", "=", "_getArrTxXtnBiz().getListArrTxPassbookHistoryByTx(stTxMXtnIn,", "false,", "arr);", "break;", "//", "\ud2b9\uc815\uac70\ub798", "\uc774\ud6c4", "(\ud574\ub2f9\uac70\ub798\ud3ec\ud568)", "case", "AFTER_SPECIFIC_TRANSACTION_INCLUDING_THAT:", "txPsbkHistory", "=", "_getArrTxXtnBiz().getListArrTxPassbookHistoryByTx(stTxMXtnIn,", "true,", "arr);", "break;", "//", "\ucd5c\uadfc\uae30\uc900", "case", "RECENTLY:", "txPsbkHistory", "=", "_getArrTxXtnBiz().getListArrTxPassbookHistoryRecently(stTxMXtnIn,", "arr);", "break;", "//", "\ud2b9\uc815\uae30\uac04", "\ud1b5\uc7a5\ub0b4\uc5ed", "\uc870\ud68c", "case", "PERIOD:", "//", "\uad6c\uac04", "\uccb4\ud06c", "_checkSearchPeriod(stTxPsbkHstIn.getInqryStartDt(),", "stTxPsbkHstIn.getInqryEndDt());", "txPsbkHistory", "=", "_getArrTxXtnBiz().getListArrTxPassbookHistoryInPeriod(stTxMXtnIn,", "arr);", "break;", "default", ":", "throw", "new", "BizApplicationException(\"AAPSTE0125\",", "new", "Object[]", "{", "stTxPsbkHstIn.getPsbkInqryDscd()", "});", "}", "arrTxBsicList", "=", "new", "ArrayList<ArrTxBsicIO>();", "for", "(StTxMXtnIO", "stTxMXtnIO", ":", "txPsbkHistory)", "{", "arrTxBsicList.add(_getArrTxBasic(stTxMXtnIO));", "}", "return", "arrTxBsicList;", "}"], "docstring_tokens": ["This", "method", "inquires", "the", "list", "of", "normal", "account", "transactions", "that", "belong", "to", "the", "arrangement.", "The", "result", "of", "inquiry", "is", "different", "according", "to", "the", "passbook", "inquiry", "distinction", "code", "entered(stTxPsbkHstIn.psbkInqryDstnctnCd).", "A", "transaction", "that", "is", "inquired", "is", "a", "transaction", "that", "satisfies", "the", "input", "condition,", "whether", "the", "psbkOutpTrgtYn(passbook", "output)", "of", "transaction", "extended", "information", "is", "Y", "or", "null,", "and", "whether", "it", "is", "fnclTxYn(financial", "transaction)", "is", "Y", "and", "status", "of", "transaction", "is", "1(normal).", "\u203b", "Inquiry", "result(return", "value)", "by", "passbook", "inquiry", "distinction", "code", "&", "required", "fields", "in", "StTxPsbkHstIn", "1.", "AFTER_SPECIFIC_DATE(01)", ":", "passbook", "transactions", "after", "a", "certain", "date", "-", "required", "fields", ":", "psbkInqryDstnctnCd,", "txDt", "2.", "AFTER_SPECIFIC_TRANSACTION(02)", ":", "passbook", "transactions", "after", "a", "specific", "transaction(exclude", "the", "specific", "transaction)", "-", "required", "fields", ":", "psbkInqryDstnctnCd,", "txDt,", "txSeqNbr", "3.", "AFTER_SPECIFIC_TRANSACTION_INCLUDING_THAT(03)", ":", "passbook", "transactions", "after", "the", "specific", "transaction(include", "the", "specific", "transaction).", "-", "required", "fields", ":", "psbkInqryDstnctnCd,", "txDt,", "txSeqNbr", "4.", "RECENTLY(04)", ":", "recent", "passbook", "transactions", "in", "the", "arrangement", "(order", "by", "transaction", "date)", "-", "required", "fields", ":", "psbkInqryDstnctnCd", "5.", "PERIOD(05)", ":", "passbook", "transactions", "traded", "in", "the", "input", "inquiry", "section", "-", "required", "fields", ":", "psbkInqryDstnctnCd,", "inqryStartDt,", "inqryEndDt"]}
{"code_tokens": ["public", "CaCdMgmtSvcGetCdDtlListOut", "clone(){", "try{", "CaCdMgmtSvcGetCdDtlListOut", "object=", "(CaCdMgmtSvcGetCdDtlListOut)super.clone();", "if", "(", "this.cdDtlList==", "null", ")", "object.cdDtlList", "=", "null;", "else{", "java.util.List<bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcGetCdDtlOut>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcGetCdDtlOut>(cdDtlList.size());", "for(", "bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcGetCdDtlOut", "item", ":", "cdDtlList", "){", "clonedList.add(", "(bankware.corebanking.configurationadmin.code.service.dto.CaCdMgmtSvcGetCdDtlOut)item.clone());", "}", "object.cdDtlList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getSrvcNm()", "{", "try", "{", "SrvcCore", "srvc", "=", "_getSrvcMngr().getServiceCore(this.getTxCd());", "return", "(srvc", "==", "null)?", "null", ":", "srvc.getServiceName();", "}catch", "(BizApplicationException", "e){", "logger.info(\"Handled", "Error", ":", "{}\",", "e);", "try", "{", "return", "this.getTxCd();", "}", "catch", "(Exception", "e1)", "{", "throw", "e1;", "}", "}", "}"], "docstring_tokens": ["This", "method", "inquires", "a", "service", "name", "of", "the", "transaction."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(ActorCore", "actorCore,", "String", "dueDlgncDscd,", "int", "dueDlgncSeqNbr,", "Map<String,", "String>", "xtnInfoMap)", "throws", "BizApplicationException", "{", "_getActorDueDlgncSubInfoBiz().saveMapSubInfo((ActorImpl)", "actorCore,", "dueDlgncDscd,", "dueDlgncSeqNbr,", "xtnInfoMap);", "}"], "docstring_tokens": ["Save", "the", "appraisal", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "List<CaAssetRegionClIO>", "getListAssetRegionClassification(String", "instCd,", "String", "assetAddrRegionClCrtrCd,", "String", "baseDt,", "String", "addrId,", "Integer", "pageNbr,", "Integer", "pageCnt)", "throws", "BizApplicationException", "{", "List<CaAssetRegionClIO>", "outList", "=", "new", "ArrayList<CaAssetRegionClIO>();", "addrId", "=", "addrId", "+", "\"%\";", "List<CaAsAssetRegionClMIO>", "asAssetRegionClList", "=", "_AsAssetRegionClMDso().selectList", "(instCd,", "CaAddrHrarcyEnum.KOREA_STATUTORY_DONG_CODE.getValue(),", "assetAddrRegionClCrtrCd,", "baseDt,", "addrId,", "pageNbr,", "pageCnt);", "for(CaAsAssetRegionClMIO", "item", ":asAssetRegionClList)", "{", "CaAssetRegionClIO", "assetRegionClIO", "=", "new", "CaAssetRegionClIO();", "//", "Generated", "by", "code", "generator", "[[", "assetRegionClIO.setAddrHrarcyCd(item.getAddrHrarcyCd());", "assetRegionClIO.setAddrId(item.getAddrId());", "assetRegionClIO.setAssetAddrRegionClCrtrCd(item.getAssetAddrRegionClCrtrCd());", "assetRegionClIO.setAplyStartDt(item.getAplyStartDt());", "assetRegionClIO.setAplyEndDt(item.getAplyEndDt());", "assetRegionClIO.setAssetAddrRegionClCd(item.getAssetAddrRegionClCd());", "//", "Generated", "by", "code", "generator", "]]", "outList.add(assetRegionClIO);", "}", "return", "outList;", "}"], "docstring_tokens": ["It", "inquiries", "asset", "region", "classification", "information", "list."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "switch", "(arrSrvcTpCd)", "{", "case", "\"InterRealTmTrnsfrOut\":", "case", "\"IntraRealTmTrnsfr\":", "_doMoneyTransferAction(arrSrvcTpCd,", "arrCndActionRequiredValue);", "return;", "default:", "//", "there", "are", "no", "condition", "action", "for", "this", "condition", "({0},{1})", "on", "arrangement", "service", "({2})", "//", "\uacc4\uc57d\uc11c\ube44\uc2a4", "({2})\ub97c", "\uc704\ud55c", "\uc870\uac74", "({0},{1})\uc758", "\ud589\ub3d9\uc740", "\uc720\ud6a8\ud558\uc9c0", "\uc54a\uc2b5\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0288\"", ",", "new", "Object[]{this.getCndCd(),this.getCndCdNm(),arrSrvcTpCd});", "}", "}"], "docstring_tokens": ["Process", "the", "special", "condition", "related", "actions", "for", "input", "service", "according", "to", "product", "condition", "value", "or", "negotiated", "value.", "For", "example,", "the", "\"Required", "document\"", "condition", "has", "the", "product", "required", "document", "type", "for", "loan", "application", "service.", "The", "arrangement", "condition", "action", "validate", "the", "required", "document", "type", "is", "received", "(presented)", "or", "not.", "Another", "example", "is", "the", "deposit", "open", "service,", "\"Interest", "capitalization", "YN\"", "condition", "dose", "the", "action", "to", "make", "an", "interest", "capitalization", "arrangement", "plan", "on", "next", "planed", "date.", "This", "method", "performs", "the", "function", "of", "performing", "product", "condition", "management", "rule", "registered", "on", "system.", "Implementation", "of", "condition", "management", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "according", "to", "the", "arrangement", "condition", "class", "implementation", "method,", "and", "the", "implemented", "arrangement", "condition", "class", "should", "specify", "the", "process", "target", "class", "by", "condition.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", "Caution", ":", "-", "To", "define", "condition", "management", "rule", "by", "service", ":", "Business", "Rule", ">", "Arrangement", "Rule", "Mgmt.", ">", "Arrangement", "Condition", "Class", ">", "Select", "service"]}
{"code_tokens": ["static", "boolean", "isValid(String", "value)", "throws", "BizApplicationException", "{", "if(!StringUtils.isEmpty(value))", "{", "for", "(CustDocRelEnum", "enumObject:", "values()){", "if(enumObject.getValue().equals(value))", "{", "return", "true;", "}", "}", "throw", "new", "BizApplicationException(\"AAPATE0028\",", "new", "Object[]", "{value,", "\"@custDocRelCd\"});", "}", "return", "true;", "}"], "docstring_tokens": ["Check", "whether", "the", "service", "is", "restricted", "by", "the", "service", "code.", "If", "restricted", "service,", "call", "the", "error", "message", "(AAPSVE0009)."]}
{"code_tokens": ["public", "PdCndQueryBizProcGetCndDetailFeeDiscountComplexValueOut", "clone(){", "try{", "PdCndQueryBizProcGetCndDetailFeeDiscountComplexValueOut", "object=", "(PdCndQueryBizProcGetCndDetailFeeDiscountComplexValueOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "ExctnTrnsfrIn", "clone(){", "try{", "ExctnTrnsfrIn", "object=", "(ExctnTrnsfrIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "CndVal", "getComplexCndValue(List<CmpsCnd>", "cmpsCndList,", "List<ProvideCnd>", "prvdCndList)", "throws", "BizApplicationException", "{", "if", "(!isComplexCnd())", "{", "throw", "new", "BizApplicationException(\"AAPPDE0003\",", "null);", "}", "CndVal", "cndVal", "=", "null;", "//", "Set", "the", "composing", "condition", "value", "to", "input", "DTO", "//", "\uc785\ub825\ub41c", "\uad6c\uc131\uc870\uac74\uac12\uc744", "\uc785\ub825DTO\uc5d0", "set\ud568", "PdPdCndUnitComplexSearchIn", "inDaoS010", "=", "_setPdPdCndUnitComplexSearchIn();", "inDaoS010.setTierNbr(getComplexCndStructureInfo(cmpsCndList).getTierNbr());", "if", "(isListCnd())", "{", "//", "\ubcf5\ud569\ubaa9\ub85d\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getComplexListCndValue(inDaoS010);", "}", "else", "if", "(isRngCnd())", "{", "//", "\ubcf5\ud569\ubc94\uc704\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getComplexRangeCndValue(inDaoS010);", "}", "else", "if", "(isIntCnd())", "{", "//", "\uc6b0\ub300\uae08\ub9ac\uc77c", "\uacbd\uc6b0", "\uc81c\uacf5\uc870\uac74\uc5d0\ub530\ub978", "\uaddc\uce59\uc744", "\uacc4\uc0b0\ud558\uc5ec", "\uc544\ub798", "\ub85c\uc9c1\uc744", "\ud0dc\uc6b8\uc9c0\ub9d0\uc9c0", "\uacb0\uc815", "if", "(isPreferentialInterestCnd()", "&&", "!isPreferentialInterestProvideCndApplyRulePass(prvdCndList))", "{", "return", "null;", "}", "//", "\ubcf5\ud569\uae08\ub9ac\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getComplexInterestCndValue(inDaoS010);", "}", "else", "if", "(isFeeCnd())", "{", "//", "\ubcf5\ud569\uc218\uc218\ub8cc\uc870\uac74\uac12", "\uc870\ud68c", "cndVal", "=", "_getComplexFeeCndValue(inDaoS010);", "}", "//", "Return", "complex", "condition", "value", "return", "cndVal;", "}"], "docstring_tokens": ["This", "method", "inquire", "preferential", "interest", "rate", "complex", "condition", "value", "by", "the", "value", "of", "the", "composing", "condition", "and", "the", "value", "of", "the", "provide", "condition."]}
{"code_tokens": ["public", "String", "getAttributeValidationExtendRule()", "{", "return", "(isValidationTailored)?", "atrbtVldtnXtnRule", ":", "stdDtoClassAtrbt.getAttributeValidationExtendRule()", ";", "}"], "docstring_tokens": ["Query", "attribute", "validation", "extend", "rule"]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "aprslPrfClaimSubInfoMap,", "AprslCore", "aprslCore,", "Integer", "prfClaimSeqNbr)", "throws", "BizApplicationException", "{", "_getAprslPrfClaimSubInfoBiz().saveMapSubInfo(aprslPrfClaimSubInfoMap,", "(AprslImpl)", "aprslCore,", "prfClaimSeqNbr);", "}"], "docstring_tokens": ["Save", "the", "asset", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "StlmntBsicIO", "modifySuspendFeeToRepaid(StlmntBsicIO", "in,", "int", "txSeqNbr)", "throws", "BizApplicationException{", "logger.debug(\"StlmntCoreImpl==>modifySuspendFeeToRepaid", ":StlmntBsicIO", "{}", "\",in);", "//Check", "whether", "the", "required", "item", "is", "entered", "or", "not", "if", "(in", "==", "null)", "throw", "new", "BizApplicationException(\"AAPSTE0108\",", "new", "Object[]", "{", "\"Settlement", "detail", "information\"", "});", "if", "(txSeqNbr", "==", "0)", "throw", "new", "BizApplicationException(\"AAPSTE0108\",", "new", "Object[]", "{", "\"@txSeqNbr\"", "});", "if", "(StringCoreUtils.isEmpty(in.getAmtTpCd()))", "throw", "new", "BizApplicationException(\"AAPSTE0108\",", "new", "Object[]", "{", "\"@amtTpCd\"", "});", "if", "(StringCoreUtils.isEmpty(in.getInstCd()))", "throw", "new", "BizApplicationException(\"AAPSTE0108\",", "new", "Object[]", "{", "\"@instCd\"", "});", "if", "(StringCoreUtils.isEmpty(in.getArrId()))", "throw", "new", "BizApplicationException(\"AAPSTE0108\",", "new", "Object[]", "{", "\"@arrId\"", "});", "if", "(StringCoreUtils.isEmpty(in.getTxDt()))", "throw", "new", "BizApplicationException(\"AAPSTE0108\",", "new", "Object[]", "{", "\"@txDt\"", "});", "if", "(in.getTxSeqNbr()", "==", "0)", "throw", "new", "BizApplicationException(\"AAPSTE0108\",", "new", "Object[]", "{", "\"@txSeqNbr\"", "});", "StlmntBsicIO", "stlmntBsicIO", "=", "this.getSettlementBasic(in);", "if", "(stlmntBsicIO", "==", "null){", "//Fee", "detail", "information", "is", "not", "found", "for", "repayment", "processing", "throw", "new", "BizApplicationException(\"AAPSTE0109\",", "null);", "}", "if", "(!RcptStsCoreEnum.SUSPEND.getValue().equals(stlmntBsicIO.getRcptStsCd())){", "//The", "fee", "is", "already", "paid.", "throw", "new", "BizApplicationException(\"AAPSTE0110\",", "null);", "}", "//Update", "suspend", "fee", "settlement", "information", "to", "repaid", "stlmntBsicIO.setRcptStsCd(RcptStsCoreEnum.AFTER_SUSPEND_RECEIPT.getValue());", "stlmntBsicIO.setRcptArrId(in.getRcptArrId());", "stlmntBsicIO.setRcptTxDt(_getCmnContext().getTxDate());", "stlmntBsicIO.setRcptTxSeqNbr(txSeqNbr);", "stlmntBsicIO.setPrchsRtrnYn(in.getPrchsRtrnYn());", "int", "result", "=", "_getStStlmntMDso().updateReceiptStatus(_getStStlmntMIO(stlmntBsicIO));", "if", "(result", "==", "0){", "throw", "new", "BizApplicationException(\"AAPACE1001\",", "null);", "}", "return", "this.getSettlementBasic(in);", "}"], "docstring_tokens": ["This", "method", "updates", "receipt", "information", "of", "suspended", "fee.", "Specifically,", "it", "updates", "receipt", "status", "code(receipt", "after", "suspended", "03)", "and", "receipt", "transaction", "information."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "AprslImpl", "aprslImpl,", "Integer", "aprslThingSeqNbr)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "IValueObject", "aprslThingSubInfo", "=", "getSubInfoCache(aprslImpl,", "aprslThingSeqNbr);", "//", "2.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(aprslThingSubInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "aprslThingSubInfo.get(atrbtNm);", "//", "\uc18d\uc131\uac12\uc774", "null\uc778\uacbd\uc6b0", "null\ub9ac\ud134", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["get", "a", "extended", "information", "of", "subsidiary", "information(CTI)"]}
{"code_tokens": ["public", "void", "apply(ArrStsChngIn", "arrStsChngIn)", "throws", "BizApplicationException", "{", "_setArrStatus(", "ArrStsEnum.APPLIED,", "arrStsChngIn", ");", "_changeStatus(", "arrStsChngIn,", "null);", "}"], "docstring_tokens": ["Change", "the", "status", "of", "arrangement", "into", "\"Applied\"."]}
{"code_tokens": ["public", "CustRprsnLoginSvcGetHstOut", "clone(){", "try{", "CustRprsnLoginSvcGetHstOut", "object=", "(CustRprsnLoginSvcGetHstOut)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "PreScrningCustInfo", "clone(){", "try{", "PreScrningCustInfo", "object=", "(PreScrningCustInfo)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "Map<String,", "String>", "getMapSubInfo(CustCore", "custCore)", "throws", "BizApplicationException", "{", "return", "_getCustSubInfoBiz().getMapSubInfo((CustImpl)", "custCore);", "}"], "docstring_tokens": ["Inquire", "all", "subsidiary", "information", "of", "the", "appraisal", "preferential", "claim", "as", "a", "map."]}
{"code_tokens": ["public", "java.lang.String", "getStaffId(){", "return", "staffId;", "}"], "docstring_tokens": ["staff", "identification", "inquiry", "from", "standard", "message"]}
{"code_tokens": ["public", "int", "delete(ArArrIssmdaRXtnInfoDIO", "arArrIssmdaRIO", ")", "throws", "BizApplicationException", "{", "return", "_getArArrIssmdaRXtnInfoD().delete(arArrIssmdaRIO);", "}"], "docstring_tokens": ["Delete", "the", "security", "interest."]}
{"code_tokens": ["public", "void", "terminate(InsrncStsChngIn", "in)", "throws", "BizApplicationException", "{", "super.terminate(in);", "}"], "docstring_tokens": ["Change", "status", "of", "arrangement", "issued", "media", "into", "\"Terminated\"."]}
{"code_tokens": ["public", "void", "saveXtnInfo(ArrGrpXtnInfoEnum", "arrGrpXtnInfoEnum,", "String", "xtnAtrbtCntnt,", "String", "txDt,", "Integer", "txSeqNbr)", "throws", "BizApplicationException", "{", "super.saveXtnInfo(arrGrpXtnInfoEnum.getValue(),", "xtnAtrbtCntnt,", "txDt,", "txSeqNbr);", "}"], "docstring_tokens": ["Save", "arrangement", "activity", "extend", "attribute.", "Change", "arrangement", "activity", "extend", "attribute", "if", "there", "is", "an", "extend", "attribute", "with", "same", "attribute", "name", "already."]}
{"code_tokens": ["public", "CustRprsnInqrySvcGetByCustOut", "clone(){", "try{", "CustRprsnInqrySvcGetByCustOut", "object=", "(CustRprsnInqrySvcGetByCustOut)super.clone();", "if", "(", "this.custRprsnCntctPntList==", "null", ")", "object.custRprsnCntctPntList", "=", "null;", "else{", "java.util.List<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCntctPntListIO>", "clonedList", "=", "new", "java.util.ArrayList<bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCntctPntListIO>(custRprsnCntctPntList.size());", "for(", "bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCntctPntListIO", "item", ":", "custRprsnCntctPntList", "){", "clonedList.add(", "(bankware.corebanking.customer.change.service.dto.CustRprsnChngSvcCntctPntListIO)item.clone());", "}", "object.custRprsnCntctPntList", "=", "clonedList;", "}", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "int", "delete(CaAsLeasePrtctnCrtrMIO", "asLeasePrtctnCrtrMIO){", "return", "_getAsLeasePrtctnCrtrM().delete(asLeasePrtctnCrtrMIO);", "}"], "docstring_tokens": ["It", "removes", "document", "information."]}
{"code_tokens": ["public", "boolean", "check(Map<String,", "String>", "atrbtCntnt)", "throws", "BizApplicationException", "{", "String", "startDate", "=", "null;", "String", "endDate", "=", "null;", "if(atrbtCntnt", "==", "null", "||", "atrbtCntnt.size()", "!=", "2)", "{", "throw", "new", "BizApplicationException(\"AAPATE0015\",", "new", "Object[]", "{", "\"@startDt\"", "},", "new", "Object[]", "{", "\"@endDt\"", "});", "}", "for", "(Map.Entry<String,", "String>", "entry", ":", "atrbtCntnt.entrySet())", "{", "String", "key", "=", "entry.getKey();", "if(startDate", "==", "null)", "{", "startDate", "=", "atrbtCntnt.get(key);", "}", "else", "{", "endDate", "=", "atrbtCntnt.get(key);", "}", "}", "if", "(StringUtils.isEmpty(startDate))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@startDt\"", "});", "}", "else", "if", "(StringUtils.isEmpty(endDate))", "{", "throw", "new", "BizApplicationException(\"AAPCME0006\",", "new", "Object[]", "{", "\"@endDt\"", "});", "}", "if(startDate", "!=", "null", "&&", "startDate.compareTo(endDate)", ">", "0", ")", "{", "throw", "new", "BizApplicationException(\"AAPCME0608\",", "new", "Object[]", "{", "\"@startDt\",", "\"@endDt\"", "});", "}", "return", "true;", "}"], "docstring_tokens": ["Validate", "the", "attribute", "value", "(", "Complex", "Validation", ")", "Implemented", "and", "used", "by", "each", "business", "component."]}
{"code_tokens": ["public", "List<PdCnd>", "getCndMultiple(PdCndMltplIn", "in)", "throws", "BizApplicationException", "{", "if", "(in", "==", "null)", "{", "throw", "new", "BizApplicationException(\"AABXME3000\",", "null);", "}", "else", "if", "(CollectionCoreUtils.isEmpty(in.getCndCdList()))", "{", "throw", "new", "BizApplicationException(\"AAPPDE0005\",", "new", "Object[]", "{});", "//", "\uc870\uac74\uc744", "\ucc3e\uc744", "\uc218", "\uc5c6\uc2b5\ub2c8\ub2e4.", "\uc785\ub825\uac12\uc744", "\ud655\uc778\ud558\uc2ed\uc2dc\uc624.", "}", "PdCndListIn", "pdCndIn", "=", "new", "PdCndListIn();", "pdCndIn.setInstitutionId(getInstCd());", "pdCndIn.setPdCd(getPdCd());", "pdCndIn.setStartDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyStartDt(),", "_getAplyTmString(in.getAplyStartTm())));", "pdCndIn.setEndDate(PdUtil.parseYyyyMMddHHmmssToDate(in.getAplyEndDt(),", "_getAplyTmString(in.getAplyEndTm())));", "pdCndIn.setCndCdList(in.getCndCdList());", "List<PdCndBaseOut>", "pdCndOut", "=", "_getPdCndCore().getListPdCnd(pdCndIn);", "if(CollectionUtils.isEmpty(pdCndOut))", "return", "Collections.emptyList();", "List<PdCnd>", "out", "=", "new", "ArrayList<PdCnd>();", "for(PdCndBaseOut", "pdCnd", ":", "pdCndOut)", "{", "out.add(new", "PdCndImpl(this,", "PdUtil.parseDateToYYYYMMDD(pdCnd.getApplyStartDate()),", "PdUtil.parseDateToHHMMSS(pdCnd.getApplyStartDate()),", "_converPdCndBaseOutToPdPdCndMIO(pdCnd)));", "}", "//", "Return", "Output", "return", "out;", "}"], "docstring_tokens": ["This", "Method", "create", "multiple", "condition", "object", "inside", "the", "range", "based", "on", "the", "input", "condition", "code", "list"]}
{"code_tokens": ["public", "CaCrncyBillCtgryMgmtSvcCrncyBillCtgryIn", "clone(){", "try{", "CaCrncyBillCtgryMgmtSvcCrncyBillCtgryIn", "object=", "(CaCrncyBillCtgryMgmtSvcCrncyBillCtgryIn)super.clone();", "return", "object;", "}", "catch(CloneNotSupportedException", "e){", "throw", "new", "bxm.omm.exception.CloneFailedException();", "}", "}"], "docstring_tokens": ["Clone", "the", "array."]}
{"code_tokens": ["public", "String", "getInstCd(){", "return", "instCd;", "}"], "docstring_tokens": ["Inquire", "institution", "code", "of", "arrangement", "activity."]}
{"code_tokens": ["public", "void", "doServiceAction(String", "arrSrvcTpCd,ArrCndActionRequiredValue", "arrCndActionRequiredValue)", "throws", "BizApplicationException", "{", "if", "(!ArrConditionErrorTypeEnum.NoError.equals(isValidCndValue(getListCd()))){", "if", "(getListCd().equals(CCM01.NO))", "{", "//This", "product", "can", "be", "purchased", "by", "customer", "who", "did", "not", "open", "deposit", "arrangement", "in", "a", "month", "//\ubcf8\uc0c1\ud488\uc740", "\ucd5c\uadfc", "\ud55c\ub2ec\uac04", "\uc608\uae08\uc0c1\ud488", "\uac1c\uc124\uc774", "\uc5c6\ub294", "\uace0\uac1d\uc5d0\uac8c", "\ud310\ub9e4\uac00\ub2a5\ud55c", "\uc0c1\ud488\uc785\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0272\"", ",", "new", "Object[]{});", "}", "else", "{", "//This", "product", "can", "be", "purchased", "by", "customer", "who", "has", "been", "open", "deposit", "arrangement", "in", "a", "month", "//\ubcf8\uc0c1\ud488\uc740", "\ucd5c\uadfc", "\ud55c\ub2ec\uac04", "\uc608\uae08\uc0c1\ud488", "\uac1c\uc124\uc774", "\uc788\ub294", "\uace0\uac1d\uc5d0\uac8c", "\ud310\ub9e4\uac00\ub2a5\ud55c", "\uc0c1\ud488\uc785\ub2c8\ub2e4", "throw", "new", "BizApplicationException(\"AAPARE0273\"", ",", "new", "Object[]{});", "}", "}", "}"], "docstring_tokens": ["Process", "the", "special", "action", "to", "process", "\"Service", "Process", "Rule\"", "related", "to", "representative", "service", "type,", "which", "is", "registered", "to", "the", "specific", "service.", "For", "example,", "the", "\"Open", "Deposit\"", "service", "must", "validate", "available", "channel,", "available", "age,", "and", "subscribe", "limit", "count.", "These", "process", "rules", "are", "implemented", "in", "seperated", "classes", "in", "terms", "of", "each", "product", "condition.", "Each", "process", "rule", "class", "cab", "be", "registered", "to", "specific", "service", "type", "in", "Configuration", "Admin.", "Service", "process", "rule", "includes", "\"Product", "Condition", "Process", "Rule\"", "and", "\"Extend", "Attribute", "Process", "Rule\".", "Implementation", "of", "product", "condition", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "arrangement", "condition", "class", "which", "implements", "{@link", "ArrCndAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Product", "Condition", "Code", "TAB", "Implementation", "of", "extend", "attribute", "process", "rule", ":", "-", "The", "rules", "that", "should", "be", "processed", "in", "terms", "of", "product", "condition", "are", "implemented", "in", "extend", "attribute", "class", "which", "implements", "{@link", "ArrXtnAtrbtAction}.", "-", "To", "specify", ":", "Business", "Rule", ">", "Arrangement", "Rule", ">", "Service", "Rule", ">", "TREE", ":", "Select", "a", "service", "type", ">", "Extend", "Attribute", "Rule", "TAB", "Responsibility", "of", "implementation", "of", "product", "condition", "process", "rule", "and", "extend", "attribute", "process", "rule", ":", "Each", "service", "team", "in", "charge", "of", "business", "process", "implements", "according", "to", "the", "guide."]}
{"code_tokens": ["public", "String", "getSubInfo(String", "atrbtNm,", "StaffImpl", "staffImpl)", "throws", "BizApplicationException", "{", "//", "1.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc", "\uc870\ud68c", "AtStaffSIO", "subInfo", "=", "getSubInfoCache(staffImpl);", "//", "2.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uac00", "null\uc778", "\uacbd\uc6b0,", "null", "\ub9ac\ud134", "if", "(subInfo", "==", "null)", "{", "return", "null;", "}", "//", "3.", "\ubcf4\uc870\uba85\uc138", "\uce90\uc2dc\uc5d0\uc11c", "\uc18d\uc131\uba85\uc744", "\uae30\uc900\uc73c\ub85c", "\uc18d\uc131\uac12", "\uc870\ud68c", "Object", "atrbtVal", "=", "subInfo.get(atrbtNm);", "//", "Casting", "\uc2dc", "Null", "\ubc29\uc9c0", "if", "(atrbtVal", "==", "null)", "{", "return", "null;", "}", "return", "String.valueOf(atrbtVal);", "}"], "docstring_tokens": ["This", "method", "provide", "settlement", "subsidiary", "detail", "information."]}
{"code_tokens": ["public", "void", "saveMapSubInfo(Map<String,", "String>", "subInfoMap,", "AprslImpl", "aprslImpl)", "throws", "BizApplicationException", "{", "//", "0.", "\uc800\uc7a5\ud560", "\uc815\ubcf4\uac00", "\uc785\ub825\ub418\uc9c0", "\uc54a\uc73c\uba74", "return", "if(subInfoMap==null", "||", "subInfoMap.isEmpty())", "{", "return;", "}", "//", "1.", "\uac10\uc815\ubcf4\uc870\uba85\uc138\uc758", "\uc885\ub958", "\uc870\ud68c", "AprslSubInfoKndEnum", "subInfoKnd", "=", "aprslImpl.getAprslSubInfoKnd();", "//", "2.", "\ud45c\uc900\uc18d\uc131\uc5d0", "\ub4f1\ub85d\ub41c", "\uac80\uc99d\uaddc\uce59\uc744", "\ud1b5\ud574", "\uc785\ub825\ubc1b\uc740", "\ud655\uc7a5\uc18d\uc131\ub0b4\uc6a9", "\uac80\uc99d", "_getAtrbtChk().checkStandardAttributeMap(subInfoMap);", "//", "3.", "\ubcf4\uc870\uc6d0\uc7a5", "\uce90\uc2dc", "\uc870\ud68c\uacb0\uacfc\uc5d0", "\ub530\ub77c", "insert/update", "\ud310\ub2e8", "IValueObject", "subInfoCache", "=", "getSubInfoCache(aprslImpl);", "if(subInfoCache", "==", "null){", "//", "DBIO", "VO", "new", "instance", "subInfoCache", "=", "_getNewSubInfoSqlIO(subInfoKnd);", "subInfoCache.set(\"aprslId\",", "aprslImpl.getAprslBasicCache().getAprslId());", "//", "PK", "setting", "//", "\uc785\ub825\ub41c", "map\uc744", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "3-1.", "insert", "_insertSubInfo(subInfoKnd,", "subInfoCache);", "//", "4.", "\uce90\uc2dc", "\uc800\uc7a5", "aprslImpl.saveSubInfoCache(xtnTable,", "subInfoCache);", "}", "else", "{", "//", "\uc18d\uc131\uac12", "\ubcc0\uacbd\uc5ec\ubd80", "\ud655\uc778", "-", "\ubcc0\uacbd\uc0ac\ud56d\uc774", "\uc5c6\ub294", "\uacbd\uc6b0", "update\ud558\uc9c0", "\uc54a\uace0", "skip", "if", "(!DtoUtils.isValChanged(subInfoMap,", "subInfoCache))", "{", "return;", "}", "//", "\uc785\ub825\ub41c", "map\uc744", "DBIO", "VO\ub85c", "convert", "DtoUtils.setSubInfoIO(subInfoMap,", "subInfoCache);", "//", "3-2.", "update", "_updateSubInfo(subInfoKnd,", "subInfoCache);", "}", "}"], "docstring_tokens": ["Save", "the", "asset", "transaction", "subsidiary", "information", "using", "map."]}
{"code_tokens": ["public", "String", "getSaleStartTime()", "{", "return", "PdUtil.parseDateToHHMMSS(bf.getSaleStartDt());", "}"], "docstring_tokens": ["This", "Method", "inquire", "sale", "start", "time", "of", "benefit"]}
{"code_tokens": ["public", "Integer", "getTxSeqNbr()", "{", "return", "txSeqNbr;", "}"], "docstring_tokens": ["This", "method", "gets", "the", "sequence", "number", "of", "transaction", "about", "specific", "arrangement.", "-", "It", "gets", "the", "sequence", "number", "of", "transaction", "no", "transaction", "date", "about", "one", "arrangement", "in", "Core.", "-", "This", "function", "can", "be", "customized", "in", "site."]}
{"code_tokens": ["public", "AprslBsicInfoIO", "getBasicInfo()", "throws", "BizApplicationException", "{", "if(aprslBasicCache", "==", "null)", "{", "return", "null;", "}", "AprslBsicInfoIO", "aprslBsicInfoIO", "=", "new", "AprslBsicInfoIO();", "DtoCoreUtils.setSubInfoIO(aprslBasicCache,", "aprslBsicInfoIO);", "return", "aprslBsicInfoIO;", "}"], "docstring_tokens": ["It", "inquires", "basic", "information", "of", "security", "interest."]}
{"code_tokens": ["public", "Arr", "getTargetArr()", "throws", "BizApplicationException", "{", "return", "(Arr)", "super.getRelatedArrAsMain(ArrArrRelEnum.STANDING_ORDER_TARGET_ACCOUNT,", "null);", "}"], "docstring_tokens": ["Inquire", "target", "deposit", "arrangement", "if", "intra_institution", "standing", "order."]}
{"code_tokens": ["public", "ClientInfoIO", "getClientInfo()", "throws", "BizApplicationException", "{", "ClientInfoIO", "clientInfoIO", "=", "new", "ClientInfoIO();", "Enumeration<NetworkInterface>", "netInterfaces", "=", "null;", "try", "{", "//", "\ub124\ud2b8\uc6cc\ud06c", "\uc778\ud130\ud398\uc774\uc2a4\ub97c", "\ubc1b\uc544", "\uc628\ub2e4.", "netInterfaces", "=", "NetworkInterface.getNetworkInterfaces();", "}", "catch", "(SocketException", "e)", "{", "if(logger.isDebugEnabled())", "{", "logger.debug(\"SocketException", ":", "{}\",", "e);", "}", "try", "{", "clientInfoIO.setIpAddr(_getLocalIp());", "clientInfoIO.setHostNm(_getLocalHostName());", "return", "clientInfoIO;", "}", "catch(Exception", "ex1)", "{throw", "ex1;}", "}", "while", "(netInterfaces.hasMoreElements())", "{", "NetworkInterface", "ni", "=", "(NetworkInterface)netInterfaces.nextElement();", "Enumeration<InetAddress>", "address", "=", "ni.getInetAddresses();", "if", "(address", "==", "null)", "{", "clientInfoIO.setIpAddr(_getLocalIp());", "clientInfoIO.setHostNm(_getLocalHostName());", "return", "clientInfoIO;", "}", "while", "(address.hasMoreElements())", "{", "InetAddress", "addr", "=", "(InetAddress)address.nextElement();", "if", "(!addr.isLoopbackAddress()", "&&", "!addr.isSiteLocalAddress()", "&&", "!addr.isAnyLocalAddress()", ")", "{", "String", "ip", "=", "addr.getHostAddress();", "if(", "ip.indexOf(\".\")", "!=", "-1", "&&", "ip.indexOf(\":\")", "==", "-1", "){", "clientInfoIO.setIpAddr(ip);", "clientInfoIO.setHostNm(addr.getHostName());", "return", "clientInfoIO;", "}", "}", "}", "}", "clientInfoIO.setIpAddr(_getLocalIp());", "return", "clientInfoIO;", "}"], "docstring_tokens": ["It", "inquiries", "client", "information."]}
